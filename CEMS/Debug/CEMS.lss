
CEMS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000634  00800200  00006618  000066ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006618  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ff8  00800834  00800834  00006ce0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006ce0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006d3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000c88  00000000  00000000  00006d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ec79  00000000  00000000  00007a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003b4e  00000000  00000000  0001667d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000752f  00000000  00000000  0001a1cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002af4  00000000  00000000  000216fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004639  00000000  00000000  000241f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000ccaf  00000000  00000000  00028829  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b78  00000000  00000000  000354d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c0       	rjmp	.+458    	; 0x1cc <__ctors_end>
       2:	00 00       	nop
       4:	04 c1       	rjmp	.+520    	; 0x20e <__bad_interrupt>
       6:	00 00       	nop
       8:	02 c1       	rjmp	.+516    	; 0x20e <__bad_interrupt>
       a:	00 00       	nop
       c:	00 c1       	rjmp	.+512    	; 0x20e <__bad_interrupt>
       e:	00 00       	nop
      10:	fe c0       	rjmp	.+508    	; 0x20e <__bad_interrupt>
      12:	00 00       	nop
      14:	fc c0       	rjmp	.+504    	; 0x20e <__bad_interrupt>
      16:	00 00       	nop
      18:	fa c0       	rjmp	.+500    	; 0x20e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f8 c0       	rjmp	.+496    	; 0x20e <__bad_interrupt>
      1e:	00 00       	nop
      20:	f6 c0       	rjmp	.+492    	; 0x20e <__bad_interrupt>
      22:	00 00       	nop
      24:	f4 c0       	rjmp	.+488    	; 0x20e <__bad_interrupt>
      26:	00 00       	nop
      28:	f2 c0       	rjmp	.+484    	; 0x20e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f0 c0       	rjmp	.+480    	; 0x20e <__bad_interrupt>
      2e:	00 00       	nop
      30:	3e c5       	rjmp	.+2684   	; 0xaae <__vector_12>
      32:	00 00       	nop
      34:	ec c0       	rjmp	.+472    	; 0x20e <__bad_interrupt>
      36:	00 00       	nop
      38:	ea c0       	rjmp	.+468    	; 0x20e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e8 c0       	rjmp	.+464    	; 0x20e <__bad_interrupt>
      3e:	00 00       	nop
      40:	e6 c0       	rjmp	.+460    	; 0x20e <__bad_interrupt>
      42:	00 00       	nop
      44:	e4 c0       	rjmp	.+456    	; 0x20e <__bad_interrupt>
      46:	00 00       	nop
      48:	e2 c0       	rjmp	.+452    	; 0x20e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e0 c0       	rjmp	.+448    	; 0x20e <__bad_interrupt>
      4e:	00 00       	nop
      50:	de c0       	rjmp	.+444    	; 0x20e <__bad_interrupt>
      52:	00 00       	nop
      54:	dc c0       	rjmp	.+440    	; 0x20e <__bad_interrupt>
      56:	00 00       	nop
      58:	da c0       	rjmp	.+436    	; 0x20e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d8 c0       	rjmp	.+432    	; 0x20e <__bad_interrupt>
      5e:	00 00       	nop
      60:	d6 c0       	rjmp	.+428    	; 0x20e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 66 27 	jmp	0x4ecc	; 0x4ecc <__vector_25>
      68:	0c 94 b8 27 	jmp	0x4f70	; 0x4f70 <__vector_26>
      6c:	d0 c0       	rjmp	.+416    	; 0x20e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ce c0       	rjmp	.+412    	; 0x20e <__bad_interrupt>
      72:	00 00       	nop
      74:	0c 94 f8 25 	jmp	0x4bf0	; 0x4bf0 <__vector_29>
      78:	ca c0       	rjmp	.+404    	; 0x20e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c8 c0       	rjmp	.+400    	; 0x20e <__bad_interrupt>
      7e:	00 00       	nop
      80:	c6 c0       	rjmp	.+396    	; 0x20e <__bad_interrupt>
      82:	00 00       	nop
      84:	c4 c0       	rjmp	.+392    	; 0x20e <__bad_interrupt>
      86:	00 00       	nop
      88:	c2 c0       	rjmp	.+388    	; 0x20e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c0 c0       	rjmp	.+384    	; 0x20e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 fc 27 	jmp	0x4ff8	; 0x4ff8 <__vector_36>
      94:	0c 94 4e 28 	jmp	0x509c	; 0x509c <__vector_37>
      98:	ba c0       	rjmp	.+372    	; 0x20e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 76 2b 	jmp	0x56ec	; 0x56ec <__vector_39>
      a0:	b6 c0       	rjmp	.+364    	; 0x20e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b4 c0       	rjmp	.+360    	; 0x20e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b2 c0       	rjmp	.+356    	; 0x20e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b0 c0       	rjmp	.+352    	; 0x20e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ae c0       	rjmp	.+348    	; 0x20e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ac c0       	rjmp	.+344    	; 0x20e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	aa c0       	rjmp	.+340    	; 0x20e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a8 c0       	rjmp	.+336    	; 0x20e <__bad_interrupt>
      be:	00 00       	nop
      c0:	a6 c0       	rjmp	.+332    	; 0x20e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a4 c0       	rjmp	.+328    	; 0x20e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a2 c0       	rjmp	.+324    	; 0x20e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 92 28 	jmp	0x5124	; 0x5124 <__vector_51>
      d0:	0c 94 e4 28 	jmp	0x51c8	; 0x51c8 <__vector_52>
      d4:	9c c0       	rjmp	.+312    	; 0x20e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 28 29 	jmp	0x5250	; 0x5250 <__vector_54>
      dc:	0c 94 7a 29 	jmp	0x52f4	; 0x52f4 <__vector_55>
      e0:	96 c0       	rjmp	.+300    	; 0x20e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	98 19       	sub	r25, r8
      e6:	98 19       	sub	r25, r8
      e8:	98 19       	sub	r25, r8
      ea:	cf 19       	sub	r28, r15
      ec:	d7 19       	sub	r29, r7
      ee:	ec 19       	sub	r30, r12
      f0:	98 19       	sub	r25, r8
      f2:	98 19       	sub	r25, r8
      f4:	cf 19       	sub	r28, r15
      f6:	d7 19       	sub	r29, r7
      f8:	98 2b       	or	r25, r24
      fa:	08 2c       	mov	r0, r8
      fc:	08 2c       	mov	r0, r8
      fe:	08 2c       	mov	r0, r8
     100:	08 2c       	mov	r0, r8
     102:	08 2c       	mov	r0, r8
     104:	08 2c       	mov	r0, r8
     106:	08 2c       	mov	r0, r8
     108:	98 2b       	or	r25, r24
     10a:	08 2c       	mov	r0, r8
     10c:	08 2c       	mov	r0, r8
     10e:	08 2c       	mov	r0, r8
     110:	08 2c       	mov	r0, r8
     112:	08 2c       	mov	r0, r8
     114:	08 2c       	mov	r0, r8
     116:	08 2c       	mov	r0, r8
     118:	9a 2b       	or	r25, r26
     11a:	08 2c       	mov	r0, r8
     11c:	08 2c       	mov	r0, r8
     11e:	08 2c       	mov	r0, r8
     120:	08 2c       	mov	r0, r8
     122:	08 2c       	mov	r0, r8
     124:	08 2c       	mov	r0, r8
     126:	08 2c       	mov	r0, r8
     128:	08 2c       	mov	r0, r8
     12a:	08 2c       	mov	r0, r8
     12c:	08 2c       	mov	r0, r8
     12e:	08 2c       	mov	r0, r8
     130:	08 2c       	mov	r0, r8
     132:	08 2c       	mov	r0, r8
     134:	08 2c       	mov	r0, r8
     136:	08 2c       	mov	r0, r8
     138:	9a 2b       	or	r25, r26
     13a:	08 2c       	mov	r0, r8
     13c:	08 2c       	mov	r0, r8
     13e:	08 2c       	mov	r0, r8
     140:	08 2c       	mov	r0, r8
     142:	08 2c       	mov	r0, r8
     144:	08 2c       	mov	r0, r8
     146:	08 2c       	mov	r0, r8
     148:	08 2c       	mov	r0, r8
     14a:	08 2c       	mov	r0, r8
     14c:	08 2c       	mov	r0, r8
     14e:	08 2c       	mov	r0, r8
     150:	08 2c       	mov	r0, r8
     152:	08 2c       	mov	r0, r8
     154:	08 2c       	mov	r0, r8
     156:	08 2c       	mov	r0, r8
     158:	04 2c       	mov	r0, r4
     15a:	08 2c       	mov	r0, r8
     15c:	08 2c       	mov	r0, r8
     15e:	08 2c       	mov	r0, r8
     160:	08 2c       	mov	r0, r8
     162:	08 2c       	mov	r0, r8
     164:	08 2c       	mov	r0, r8
     166:	08 2c       	mov	r0, r8
     168:	cf 2b       	or	r28, r31
     16a:	08 2c       	mov	r0, r8
     16c:	08 2c       	mov	r0, r8
     16e:	08 2c       	mov	r0, r8
     170:	08 2c       	mov	r0, r8
     172:	08 2c       	mov	r0, r8
     174:	08 2c       	mov	r0, r8
     176:	08 2c       	mov	r0, r8
     178:	08 2c       	mov	r0, r8
     17a:	08 2c       	mov	r0, r8
     17c:	08 2c       	mov	r0, r8
     17e:	08 2c       	mov	r0, r8
     180:	08 2c       	mov	r0, r8
     182:	08 2c       	mov	r0, r8
     184:	08 2c       	mov	r0, r8
     186:	08 2c       	mov	r0, r8
     188:	c3 2b       	or	r28, r19
     18a:	08 2c       	mov	r0, r8
     18c:	08 2c       	mov	r0, r8
     18e:	08 2c       	mov	r0, r8
     190:	08 2c       	mov	r0, r8
     192:	08 2c       	mov	r0, r8
     194:	08 2c       	mov	r0, r8
     196:	08 2c       	mov	r0, r8
     198:	e7 2b       	or	r30, r23

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <prvCheckTasksWaitingTermination>
     19e:	80 91 41 16 	lds	r24, 0x1641	; 0x801641 <pxReadyTasksLists>
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	08 f0       	brcs	.+2      	; 0x1a8 <prvIdleTask+0xe>
     1a6:	bd d3       	rcall	.+1914   	; 0x922 <vPortYield>
     1a8:	0e 94 15 1a 	call	0x342a	; 0x342a <vApplicationIdleHook>
     1ac:	f6 cf       	rjmp	.-20     	; 0x19a <prvIdleTask>

000001ae <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	1f 92       	push	r1
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	ce 01       	movw	r24, r28
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <prvGetNextExpireTime>
     1c0:	49 81       	ldd	r20, Y+1	; 0x01
     1c2:	0e 94 0a 19 	call	0x3214	; 0x3214 <prvProcessTimerOrBlockTask>
     1c6:	0e 94 61 19 	call	0x32c2	; 0x32c2 <prvProcessReceivedCommands>
     1ca:	f6 cf       	rjmp	.-20     	; 0x1b8 <prvTimerTask+0xa>

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d1 e2       	ldi	r29, 0x21	; 33
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	00 e0       	ldi	r16, 0x00	; 0
     1da:	0c bf       	out	0x3c, r16	; 60

000001dc <__do_copy_data>:
     1dc:	18 e0       	ldi	r17, 0x08	; 8
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b2 e0       	ldi	r27, 0x02	; 2
     1e2:	e8 e1       	ldi	r30, 0x18	; 24
     1e4:	f6 e6       	ldi	r31, 0x66	; 102
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	0b bf       	out	0x3b, r16	; 59
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x14>
     1ec:	07 90       	elpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	a4 33       	cpi	r26, 0x34	; 52
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0x10>

000001f6 <__do_clear_bss>:
     1f6:	28 e1       	ldi	r18, 0x18	; 24
     1f8:	a4 e3       	ldi	r26, 0x34	; 52
     1fa:	b8 e0       	ldi	r27, 0x08	; 8
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	ac 32       	cpi	r26, 0x2C	; 44
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 ef 1a 	call	0x35de	; 0x35de <main>
     20a:	0c 94 0a 33 	jmp	0x6614	; 0x6614 <_exit>

0000020e <__bad_interrupt>:
     20e:	f8 ce       	rjmp	.-528    	; 0x0 <__vectors>

00000210 <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     210:	0f 93       	push	r16
     212:	01 11       	cpse	r16, r1
     214:	0c c0       	rjmp	.+24     	; 0x22e <prvTestWaitCondition+0x1e>
     216:	dc 01       	movw	r26, r24
     218:	cb 01       	movw	r24, r22
     21a:	82 23       	and	r24, r18
     21c:	93 23       	and	r25, r19
     21e:	a4 23       	and	r26, r20
     220:	b5 23       	and	r27, r21
     222:	89 2b       	or	r24, r25
     224:	8a 2b       	or	r24, r26
     226:	8b 2b       	or	r24, r27
     228:	79 f4       	brne	.+30     	; 0x248 <prvTestWaitCondition+0x38>
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	10 c0       	rjmp	.+32     	; 0x24e <prvTestWaitCondition+0x3e>
     22e:	dc 01       	movw	r26, r24
     230:	cb 01       	movw	r24, r22
     232:	82 23       	and	r24, r18
     234:	93 23       	and	r25, r19
     236:	a4 23       	and	r26, r20
     238:	b5 23       	and	r27, r21
     23a:	28 17       	cp	r18, r24
     23c:	39 07       	cpc	r19, r25
     23e:	4a 07       	cpc	r20, r26
     240:	5b 07       	cpc	r21, r27
     242:	21 f0       	breq	.+8      	; 0x24c <prvTestWaitCondition+0x3c>
     244:	80 e0       	ldi	r24, 0x00	; 0
     246:	03 c0       	rjmp	.+6      	; 0x24e <prvTestWaitCondition+0x3e>
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	01 c0       	rjmp	.+2      	; 0x24e <prvTestWaitCondition+0x3e>
     24c:	81 e0       	ldi	r24, 0x01	; 1
     24e:	0f 91       	pop	r16
     250:	08 95       	ret

00000252 <xEventGroupCreate>:
     252:	cf 93       	push	r28
     254:	df 93       	push	r29
     256:	8f e0       	ldi	r24, 0x0F	; 15
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	af d1       	rcall	.+862    	; 0x5ba <pvPortMalloc>
     25c:	ec 01       	movw	r28, r24
     25e:	00 97       	sbiw	r24, 0x00	; 0
     260:	39 f0       	breq	.+14     	; 0x270 <xEventGroupCreate+0x1e>
     262:	fc 01       	movw	r30, r24
     264:	11 92       	st	Z+, r1
     266:	11 92       	st	Z+, r1
     268:	11 92       	st	Z+, r1
     26a:	11 92       	st	Z+, r1
     26c:	cf 01       	movw	r24, r30
     26e:	8b d2       	rcall	.+1302   	; 0x786 <vListInitialise>
     270:	ce 01       	movw	r24, r28
     272:	df 91       	pop	r29
     274:	cf 91       	pop	r28
     276:	08 95       	ret

00000278 <xEventGroupWaitBits>:
     278:	2f 92       	push	r2
     27a:	3f 92       	push	r3
     27c:	4f 92       	push	r4
     27e:	5f 92       	push	r5
     280:	6f 92       	push	r6
     282:	7f 92       	push	r7
     284:	8f 92       	push	r8
     286:	9f 92       	push	r9
     288:	af 92       	push	r10
     28a:	bf 92       	push	r11
     28c:	cf 92       	push	r12
     28e:	df 92       	push	r13
     290:	ef 92       	push	r14
     292:	ff 92       	push	r15
     294:	0f 93       	push	r16
     296:	1f 93       	push	r17
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
     29c:	ec 01       	movw	r28, r24
     29e:	4a 01       	movw	r8, r20
     2a0:	5b 01       	movw	r10, r22
     2a2:	62 2e       	mov	r6, r18
     2a4:	70 2e       	mov	r7, r16
     2a6:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <vTaskSuspendAll>
     2aa:	28 80       	ld	r2, Y
     2ac:	39 80       	ldd	r3, Y+1	; 0x01
     2ae:	4a 80       	ldd	r4, Y+2	; 0x02
     2b0:	5b 80       	ldd	r5, Y+3	; 0x03
     2b2:	a5 01       	movw	r20, r10
     2b4:	94 01       	movw	r18, r8
     2b6:	c2 01       	movw	r24, r4
     2b8:	b1 01       	movw	r22, r2
     2ba:	aa df       	rcall	.-172    	; 0x210 <prvTestWaitCondition>
     2bc:	88 23       	and	r24, r24
     2be:	a1 f0       	breq	.+40     	; 0x2e8 <xEventGroupWaitBits+0x70>
     2c0:	66 20       	and	r6, r6
     2c2:	89 f1       	breq	.+98     	; 0x326 <xEventGroupWaitBits+0xae>
     2c4:	d5 01       	movw	r26, r10
     2c6:	c4 01       	movw	r24, r8
     2c8:	80 95       	com	r24
     2ca:	90 95       	com	r25
     2cc:	a0 95       	com	r26
     2ce:	b0 95       	com	r27
     2d0:	82 21       	and	r24, r2
     2d2:	93 21       	and	r25, r3
     2d4:	a4 21       	and	r26, r4
     2d6:	b5 21       	and	r27, r5
     2d8:	88 83       	st	Y, r24
     2da:	99 83       	std	Y+1, r25	; 0x01
     2dc:	aa 83       	std	Y+2, r26	; 0x02
     2de:	bb 83       	std	Y+3, r27	; 0x03
     2e0:	c1 2c       	mov	r12, r1
     2e2:	d1 2c       	mov	r13, r1
     2e4:	76 01       	movw	r14, r12
     2e6:	22 c0       	rjmp	.+68     	; 0x32c <xEventGroupWaitBits+0xb4>
     2e8:	c1 14       	cp	r12, r1
     2ea:	d1 04       	cpc	r13, r1
     2ec:	e1 04       	cpc	r14, r1
     2ee:	f1 04       	cpc	r15, r1
     2f0:	e9 f0       	breq	.+58     	; 0x32c <xEventGroupWaitBits+0xb4>
     2f2:	61 10       	cpse	r6, r1
     2f4:	04 c0       	rjmp	.+8      	; 0x2fe <xEventGroupWaitBits+0x86>
     2f6:	40 e0       	ldi	r20, 0x00	; 0
     2f8:	50 e0       	ldi	r21, 0x00	; 0
     2fa:	ba 01       	movw	r22, r20
     2fc:	04 c0       	rjmp	.+8      	; 0x306 <xEventGroupWaitBits+0x8e>
     2fe:	40 e0       	ldi	r20, 0x00	; 0
     300:	50 e0       	ldi	r21, 0x00	; 0
     302:	60 e0       	ldi	r22, 0x00	; 0
     304:	71 e0       	ldi	r23, 0x01	; 1
     306:	71 10       	cpse	r7, r1
     308:	74 60       	ori	r23, 0x04	; 4
     30a:	48 29       	or	r20, r8
     30c:	59 29       	or	r21, r9
     30e:	6a 29       	or	r22, r10
     310:	7b 29       	or	r23, r11
     312:	97 01       	movw	r18, r14
     314:	86 01       	movw	r16, r12
     316:	ce 01       	movw	r24, r28
     318:	04 96       	adiw	r24, 0x04	; 4
     31a:	0e 94 5e 11 	call	0x22bc	; 0x22bc <vTaskPlaceOnUnorderedEventList>
     31e:	21 2c       	mov	r2, r1
     320:	31 2c       	mov	r3, r1
     322:	21 01       	movw	r4, r2
     324:	03 c0       	rjmp	.+6      	; 0x32c <xEventGroupWaitBits+0xb4>
     326:	c1 2c       	mov	r12, r1
     328:	d1 2c       	mov	r13, r1
     32a:	76 01       	movw	r14, r12
     32c:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <xTaskResumeAll>
     330:	cd 28       	or	r12, r13
     332:	ce 28       	or	r12, r14
     334:	cf 28       	or	r12, r15
     336:	59 f1       	breq	.+86     	; 0x38e <xEventGroupWaitBits+0x116>
     338:	81 11       	cpse	r24, r1
     33a:	01 c0       	rjmp	.+2      	; 0x33e <xEventGroupWaitBits+0xc6>
     33c:	f2 d2       	rcall	.+1508   	; 0x922 <vPortYield>
     33e:	0e 94 20 15 	call	0x2a40	; 0x2a40 <uxTaskResetEventItemValue>
     342:	6b 01       	movw	r12, r22
     344:	7c 01       	movw	r14, r24
     346:	91 fd       	sbrc	r25, 1
     348:	1f c0       	rjmp	.+62     	; 0x388 <xEventGroupWaitBits+0x110>
     34a:	0f b6       	in	r0, 0x3f	; 63
     34c:	f8 94       	cli
     34e:	0f 92       	push	r0
     350:	c8 80       	ld	r12, Y
     352:	d9 80       	ldd	r13, Y+1	; 0x01
     354:	ea 80       	ldd	r14, Y+2	; 0x02
     356:	fb 80       	ldd	r15, Y+3	; 0x03
     358:	07 2d       	mov	r16, r7
     35a:	a5 01       	movw	r20, r10
     35c:	94 01       	movw	r18, r8
     35e:	c7 01       	movw	r24, r14
     360:	b6 01       	movw	r22, r12
     362:	56 df       	rcall	.-340    	; 0x210 <prvTestWaitCondition>
     364:	88 23       	and	r24, r24
     366:	71 f0       	breq	.+28     	; 0x384 <xEventGroupWaitBits+0x10c>
     368:	66 20       	and	r6, r6
     36a:	61 f0       	breq	.+24     	; 0x384 <xEventGroupWaitBits+0x10c>
     36c:	80 94       	com	r8
     36e:	90 94       	com	r9
     370:	a0 94       	com	r10
     372:	b0 94       	com	r11
     374:	8c 20       	and	r8, r12
     376:	9d 20       	and	r9, r13
     378:	ae 20       	and	r10, r14
     37a:	bf 20       	and	r11, r15
     37c:	88 82       	st	Y, r8
     37e:	99 82       	std	Y+1, r9	; 0x01
     380:	aa 82       	std	Y+2, r10	; 0x02
     382:	bb 82       	std	Y+3, r11	; 0x03
     384:	0f 90       	pop	r0
     386:	0f be       	out	0x3f, r0	; 63
     388:	16 01       	movw	r2, r12
     38a:	27 01       	movw	r4, r14
     38c:	55 24       	eor	r5, r5
     38e:	c2 01       	movw	r24, r4
     390:	b1 01       	movw	r22, r2
     392:	df 91       	pop	r29
     394:	cf 91       	pop	r28
     396:	1f 91       	pop	r17
     398:	0f 91       	pop	r16
     39a:	ff 90       	pop	r15
     39c:	ef 90       	pop	r14
     39e:	df 90       	pop	r13
     3a0:	cf 90       	pop	r12
     3a2:	bf 90       	pop	r11
     3a4:	af 90       	pop	r10
     3a6:	9f 90       	pop	r9
     3a8:	8f 90       	pop	r8
     3aa:	7f 90       	pop	r7
     3ac:	6f 90       	pop	r6
     3ae:	5f 90       	pop	r5
     3b0:	4f 90       	pop	r4
     3b2:	3f 90       	pop	r3
     3b4:	2f 90       	pop	r2
     3b6:	08 95       	ret

000003b8 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     3b8:	4f 92       	push	r4
     3ba:	5f 92       	push	r5
     3bc:	6f 92       	push	r6
     3be:	7f 92       	push	r7
     3c0:	af 92       	push	r10
     3c2:	bf 92       	push	r11
     3c4:	cf 92       	push	r12
     3c6:	df 92       	push	r13
     3c8:	ef 92       	push	r14
     3ca:	ff 92       	push	r15
     3cc:	0f 93       	push	r16
     3ce:	1f 93       	push	r17
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	ec 01       	movw	r28, r24
     3d6:	6a 01       	movw	r12, r20
     3d8:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     3da:	8c 01       	movw	r16, r24
     3dc:	09 5f       	subi	r16, 0xF9	; 249
     3de:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     3e0:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     3e4:	eb 85       	ldd	r30, Y+11	; 0x0b
     3e6:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     3e8:	88 81       	ld	r24, Y
     3ea:	99 81       	ldd	r25, Y+1	; 0x01
     3ec:	aa 81       	ldd	r26, Y+2	; 0x02
     3ee:	bb 81       	ldd	r27, Y+3	; 0x03
     3f0:	c8 2a       	or	r12, r24
     3f2:	d9 2a       	or	r13, r25
     3f4:	ea 2a       	or	r14, r26
     3f6:	fb 2a       	or	r15, r27
     3f8:	c8 82       	st	Y, r12
     3fa:	d9 82       	std	Y+1, r13	; 0x01
     3fc:	ea 82       	std	Y+2, r14	; 0x02
     3fe:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     400:	c1 2c       	mov	r12, r1
     402:	d1 2c       	mov	r13, r1
     404:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     406:	3d c0       	rjmp	.+122    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
        {
            pxNext = listGET_NEXT( pxListItem );
     408:	a4 80       	ldd	r10, Z+4	; 0x04
     40a:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     40c:	80 81       	ld	r24, Z
     40e:	91 81       	ldd	r25, Z+1	; 0x01
     410:	a2 81       	ldd	r26, Z+2	; 0x02
     412:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     414:	ac 01       	movw	r20, r24
     416:	bd 01       	movw	r22, r26
     418:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     41a:	b2 fd       	sbrc	r27, 2
     41c:	0e c0       	rjmp	.+28     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     41e:	48 80       	ld	r4, Y
     420:	59 80       	ldd	r5, Y+1	; 0x01
     422:	6a 80       	ldd	r6, Y+2	; 0x02
     424:	7b 80       	ldd	r7, Y+3	; 0x03
     426:	44 22       	and	r4, r20
     428:	55 22       	and	r5, r21
     42a:	66 22       	and	r6, r22
     42c:	77 22       	and	r7, r23
     42e:	45 28       	or	r4, r5
     430:	46 28       	or	r4, r6
     432:	47 28       	or	r4, r7
     434:	89 f4       	brne	.+34     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     436:	20 e0       	ldi	r18, 0x00	; 0
     438:	12 c0       	rjmp	.+36     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     43a:	48 80       	ld	r4, Y
     43c:	59 80       	ldd	r5, Y+1	; 0x01
     43e:	6a 80       	ldd	r6, Y+2	; 0x02
     440:	7b 80       	ldd	r7, Y+3	; 0x03
     442:	44 22       	and	r4, r20
     444:	55 22       	and	r5, r21
     446:	66 22       	and	r6, r22
     448:	77 22       	and	r7, r23
     44a:	44 15       	cp	r20, r4
     44c:	55 05       	cpc	r21, r5
     44e:	66 05       	cpc	r22, r6
     450:	77 05       	cpc	r23, r7
     452:	21 f0       	breq	.+8      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     454:	20 e0       	ldi	r18, 0x00	; 0
     456:	03 c0       	rjmp	.+6      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     458:	21 e0       	ldi	r18, 0x01	; 1
     45a:	01 c0       	rjmp	.+2      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     45c:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     45e:	22 23       	and	r18, r18
     460:	71 f0       	breq	.+28     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     462:	b0 ff       	sbrs	r27, 0
     464:	04 c0       	rjmp	.+8      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     466:	c4 2a       	or	r12, r20
     468:	d5 2a       	or	r13, r21
     46a:	e6 2a       	or	r14, r22
     46c:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     46e:	48 81       	ld	r20, Y
     470:	59 81       	ldd	r21, Y+1	; 0x01
     472:	6a 81       	ldd	r22, Y+2	; 0x02
     474:	7b 81       	ldd	r23, Y+3	; 0x03
     476:	72 60       	ori	r23, 0x02	; 2
     478:	cf 01       	movw	r24, r30
     47a:	0e 94 99 12 	call	0x2532	; 0x2532 <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     47e:	ea 2d       	mov	r30, r10
     480:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     482:	e0 17       	cp	r30, r16
     484:	f1 07       	cpc	r31, r17
     486:	09 f0       	breq	.+2      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     488:	bf cf       	rjmp	.-130    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     48a:	c0 94       	com	r12
     48c:	d0 94       	com	r13
     48e:	e0 94       	com	r14
     490:	f0 94       	com	r15
     492:	88 81       	ld	r24, Y
     494:	99 81       	ldd	r25, Y+1	; 0x01
     496:	aa 81       	ldd	r26, Y+2	; 0x02
     498:	bb 81       	ldd	r27, Y+3	; 0x03
     49a:	c8 22       	and	r12, r24
     49c:	d9 22       	and	r13, r25
     49e:	ea 22       	and	r14, r26
     4a0:	fb 22       	and	r15, r27
     4a2:	c8 82       	st	Y, r12
     4a4:	d9 82       	std	Y+1, r13	; 0x01
     4a6:	ea 82       	std	Y+2, r14	; 0x02
     4a8:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     4aa:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     4ae:	68 81       	ld	r22, Y
     4b0:	79 81       	ldd	r23, Y+1	; 0x01
     4b2:	8a 81       	ldd	r24, Y+2	; 0x02
     4b4:	9b 81       	ldd	r25, Y+3	; 0x03
}
     4b6:	df 91       	pop	r29
     4b8:	cf 91       	pop	r28
     4ba:	1f 91       	pop	r17
     4bc:	0f 91       	pop	r16
     4be:	ff 90       	pop	r15
     4c0:	ef 90       	pop	r14
     4c2:	df 90       	pop	r13
     4c4:	cf 90       	pop	r12
     4c6:	bf 90       	pop	r11
     4c8:	af 90       	pop	r10
     4ca:	7f 90       	pop	r7
     4cc:	6f 90       	pop	r6
     4ce:	5f 90       	pop	r5
     4d0:	4f 90       	pop	r4
     4d2:	08 95       	ret

000004d4 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     4d4:	e0 e4       	ldi	r30, 0x40	; 64
     4d6:	f8 e0       	ldi	r31, 0x08	; 8
     4d8:	a4 e4       	ldi	r26, 0x44	; 68
     4da:	b8 e0       	ldi	r27, 0x08	; 8
     4dc:	b1 83       	std	Z+1, r27	; 0x01
     4de:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     4e0:	13 82       	std	Z+3, r1	; 0x03
     4e2:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     4e4:	ec ee       	ldi	r30, 0xEC	; 236
     4e6:	f5 e1       	ldi	r31, 0x15	; 21
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     4e8:	f0 93 3f 08 	sts	0x083F, r31	; 0x80083f <pxEnd+0x1>
     4ec:	e0 93 3e 08 	sts	0x083E, r30	; 0x80083e <pxEnd>
    pxEnd->xBlockSize = 0;
     4f0:	13 82       	std	Z+3, r1	; 0x03
     4f2:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     4f4:	11 82       	std	Z+1, r1	; 0x01
     4f6:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     4f8:	88 ea       	ldi	r24, 0xA8	; 168
     4fa:	9d e0       	ldi	r25, 0x0D	; 13
     4fc:	13 96       	adiw	r26, 0x03	; 3
     4fe:	9c 93       	st	X, r25
     500:	8e 93       	st	-X, r24
     502:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     504:	ed 93       	st	X+, r30
     506:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     508:	90 93 3b 08 	sts	0x083B, r25	; 0x80083b <xMinimumEverFreeBytesRemaining+0x1>
     50c:	80 93 3a 08 	sts	0x083A, r24	; 0x80083a <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     510:	90 93 3d 08 	sts	0x083D, r25	; 0x80083d <xFreeBytesRemaining+0x1>
     514:	80 93 3c 08 	sts	0x083C, r24	; 0x80083c <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	90 e8       	ldi	r25, 0x80	; 128
     51c:	90 93 35 08 	sts	0x0835, r25	; 0x800835 <__data_end+0x1>
     520:	80 93 34 08 	sts	0x0834, r24	; 0x800834 <__data_end>
     524:	08 95       	ret

00000526 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     526:	cf 93       	push	r28
     528:	df 93       	push	r29
     52a:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     52c:	a0 e4       	ldi	r26, 0x40	; 64
     52e:	b8 e0       	ldi	r27, 0x08	; 8
     530:	01 c0       	rjmp	.+2      	; 0x534 <prvInsertBlockIntoFreeList+0xe>
     532:	df 01       	movw	r26, r30
     534:	ed 91       	ld	r30, X+
     536:	fc 91       	ld	r31, X
     538:	11 97       	sbiw	r26, 0x01	; 1
     53a:	ec 17       	cp	r30, r28
     53c:	fd 07       	cpc	r31, r29
     53e:	c8 f3       	brcs	.-14     	; 0x532 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     540:	12 96       	adiw	r26, 0x02	; 2
     542:	8d 91       	ld	r24, X+
     544:	9c 91       	ld	r25, X
     546:	13 97       	sbiw	r26, 0x03	; 3
     548:	9d 01       	movw	r18, r26
     54a:	28 0f       	add	r18, r24
     54c:	39 1f       	adc	r19, r25
     54e:	c2 17       	cp	r28, r18
     550:	d3 07       	cpc	r29, r19
     552:	49 f4       	brne	.+18     	; 0x566 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     554:	2a 81       	ldd	r18, Y+2	; 0x02
     556:	3b 81       	ldd	r19, Y+3	; 0x03
     558:	82 0f       	add	r24, r18
     55a:	93 1f       	adc	r25, r19
     55c:	13 96       	adiw	r26, 0x03	; 3
     55e:	9c 93       	st	X, r25
     560:	8e 93       	st	-X, r24
     562:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     564:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     566:	8a 81       	ldd	r24, Y+2	; 0x02
     568:	9b 81       	ldd	r25, Y+3	; 0x03
     56a:	9e 01       	movw	r18, r28
     56c:	28 0f       	add	r18, r24
     56e:	39 1f       	adc	r19, r25
     570:	e2 17       	cp	r30, r18
     572:	f3 07       	cpc	r31, r19
     574:	c1 f4       	brne	.+48     	; 0x5a6 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     576:	20 91 3e 08 	lds	r18, 0x083E	; 0x80083e <pxEnd>
     57a:	30 91 3f 08 	lds	r19, 0x083F	; 0x80083f <pxEnd+0x1>
     57e:	e2 17       	cp	r30, r18
     580:	f3 07       	cpc	r31, r19
     582:	71 f0       	breq	.+28     	; 0x5a0 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     584:	22 81       	ldd	r18, Z+2	; 0x02
     586:	33 81       	ldd	r19, Z+3	; 0x03
     588:	82 0f       	add	r24, r18
     58a:	93 1f       	adc	r25, r19
     58c:	9b 83       	std	Y+3, r25	; 0x03
     58e:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     590:	ed 91       	ld	r30, X+
     592:	fc 91       	ld	r31, X
     594:	11 97       	sbiw	r26, 0x01	; 1
     596:	80 81       	ld	r24, Z
     598:	91 81       	ldd	r25, Z+1	; 0x01
     59a:	99 83       	std	Y+1, r25	; 0x01
     59c:	88 83       	st	Y, r24
     59e:	05 c0       	rjmp	.+10     	; 0x5aa <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     5a0:	39 83       	std	Y+1, r19	; 0x01
     5a2:	28 83       	st	Y, r18
     5a4:	02 c0       	rjmp	.+4      	; 0x5aa <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     5a6:	f9 83       	std	Y+1, r31	; 0x01
     5a8:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     5aa:	ca 17       	cp	r28, r26
     5ac:	db 07       	cpc	r29, r27
     5ae:	11 f0       	breq	.+4      	; 0x5b4 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     5b0:	cd 93       	st	X+, r28
     5b2:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     5b4:	df 91       	pop	r29
     5b6:	cf 91       	pop	r28
     5b8:	08 95       	ret

000005ba <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     5ba:	ef 92       	push	r14
     5bc:	ff 92       	push	r15
     5be:	0f 93       	push	r16
     5c0:	1f 93       	push	r17
     5c2:	cf 93       	push	r28
     5c4:	df 93       	push	r29
     5c6:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     5c8:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     5cc:	80 91 3e 08 	lds	r24, 0x083E	; 0x80083e <pxEnd>
     5d0:	90 91 3f 08 	lds	r25, 0x083F	; 0x80083f <pxEnd+0x1>
     5d4:	89 2b       	or	r24, r25
     5d6:	09 f4       	brne	.+2      	; 0x5da <pvPortMalloc+0x20>
        {
            prvHeapInit();
     5d8:	7d df       	rcall	.-262    	; 0x4d4 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     5da:	80 91 34 08 	lds	r24, 0x0834	; 0x800834 <__data_end>
     5de:	90 91 35 08 	lds	r25, 0x0835	; 0x800835 <__data_end+0x1>
     5e2:	80 23       	and	r24, r16
     5e4:	91 23       	and	r25, r17
     5e6:	89 2b       	or	r24, r25
     5e8:	09 f0       	breq	.+2      	; 0x5ec <pvPortMalloc+0x32>
     5ea:	76 c0       	rjmp	.+236    	; 0x6d8 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     5ec:	01 15       	cp	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	49 f0       	breq	.+18     	; 0x604 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     5f2:	c8 01       	movw	r24, r16
     5f4:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     5f6:	08 17       	cp	r16, r24
     5f8:	19 07       	cpc	r17, r25
     5fa:	18 f0       	brcs	.+6      	; 0x602 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     5fc:	00 e0       	ldi	r16, 0x00	; 0
     5fe:	10 e0       	ldi	r17, 0x00	; 0
     600:	01 c0       	rjmp	.+2      	; 0x604 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     602:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     604:	01 15       	cp	r16, r1
     606:	11 05       	cpc	r17, r1
     608:	09 f4       	brne	.+2      	; 0x60c <pvPortMalloc+0x52>
     60a:	69 c0       	rjmp	.+210    	; 0x6de <pvPortMalloc+0x124>
     60c:	80 91 3c 08 	lds	r24, 0x083C	; 0x80083c <xFreeBytesRemaining>
     610:	90 91 3d 08 	lds	r25, 0x083D	; 0x80083d <xFreeBytesRemaining+0x1>
     614:	80 17       	cp	r24, r16
     616:	91 07       	cpc	r25, r17
     618:	08 f4       	brcc	.+2      	; 0x61c <pvPortMalloc+0x62>
     61a:	64 c0       	rjmp	.+200    	; 0x6e4 <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     61c:	c0 91 40 08 	lds	r28, 0x0840	; 0x800840 <xStart>
     620:	d0 91 41 08 	lds	r29, 0x0841	; 0x800841 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     624:	e0 e4       	ldi	r30, 0x40	; 64
     626:	f8 e0       	ldi	r31, 0x08	; 8
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     628:	02 c0       	rjmp	.+4      	; 0x62e <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     62a:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     62c:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     62e:	8a 81       	ldd	r24, Y+2	; 0x02
     630:	9b 81       	ldd	r25, Y+3	; 0x03
     632:	80 17       	cp	r24, r16
     634:	91 07       	cpc	r25, r17
     636:	20 f4       	brcc	.+8      	; 0x640 <pvPortMalloc+0x86>
     638:	88 81       	ld	r24, Y
     63a:	99 81       	ldd	r25, Y+1	; 0x01
     63c:	00 97       	sbiw	r24, 0x00	; 0
     63e:	a9 f7       	brne	.-22     	; 0x62a <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     640:	80 91 3e 08 	lds	r24, 0x083E	; 0x80083e <pxEnd>
     644:	90 91 3f 08 	lds	r25, 0x083F	; 0x80083f <pxEnd+0x1>
     648:	c8 17       	cp	r28, r24
     64a:	d9 07       	cpc	r29, r25
     64c:	09 f4       	brne	.+2      	; 0x650 <pvPortMalloc+0x96>
     64e:	4d c0       	rjmp	.+154    	; 0x6ea <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     650:	e0 80       	ld	r14, Z
     652:	f1 80       	ldd	r15, Z+1	; 0x01
     654:	84 e0       	ldi	r24, 0x04	; 4
     656:	e8 0e       	add	r14, r24
     658:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     65a:	88 81       	ld	r24, Y
     65c:	99 81       	ldd	r25, Y+1	; 0x01
     65e:	91 83       	std	Z+1, r25	; 0x01
     660:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     662:	2a 81       	ldd	r18, Y+2	; 0x02
     664:	3b 81       	ldd	r19, Y+3	; 0x03
     666:	20 1b       	sub	r18, r16
     668:	31 0b       	sbc	r19, r17
     66a:	29 30       	cpi	r18, 0x09	; 9
     66c:	31 05       	cpc	r19, r1
     66e:	48 f0       	brcs	.+18     	; 0x682 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     670:	ce 01       	movw	r24, r28
     672:	80 0f       	add	r24, r16
     674:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     676:	fc 01       	movw	r30, r24
     678:	33 83       	std	Z+3, r19	; 0x03
     67a:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     67c:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     67e:	0a 83       	std	Y+2, r16	; 0x02
     680:	52 df       	rcall	.-348    	; 0x526 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     682:	2a 81       	ldd	r18, Y+2	; 0x02
     684:	3b 81       	ldd	r19, Y+3	; 0x03
     686:	80 91 3c 08 	lds	r24, 0x083C	; 0x80083c <xFreeBytesRemaining>
     68a:	90 91 3d 08 	lds	r25, 0x083D	; 0x80083d <xFreeBytesRemaining+0x1>
     68e:	82 1b       	sub	r24, r18
     690:	93 0b       	sbc	r25, r19
     692:	90 93 3d 08 	sts	0x083D, r25	; 0x80083d <xFreeBytesRemaining+0x1>
     696:	80 93 3c 08 	sts	0x083C, r24	; 0x80083c <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     69a:	40 91 3a 08 	lds	r20, 0x083A	; 0x80083a <xMinimumEverFreeBytesRemaining>
     69e:	50 91 3b 08 	lds	r21, 0x083B	; 0x80083b <xMinimumEverFreeBytesRemaining+0x1>
     6a2:	84 17       	cp	r24, r20
     6a4:	95 07       	cpc	r25, r21
     6a6:	20 f4       	brcc	.+8      	; 0x6b0 <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     6a8:	90 93 3b 08 	sts	0x083B, r25	; 0x80083b <xMinimumEverFreeBytesRemaining+0x1>
     6ac:	80 93 3a 08 	sts	0x083A, r24	; 0x80083a <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     6b0:	80 91 34 08 	lds	r24, 0x0834	; 0x800834 <__data_end>
     6b4:	90 91 35 08 	lds	r25, 0x0835	; 0x800835 <__data_end+0x1>
     6b8:	28 2b       	or	r18, r24
     6ba:	39 2b       	or	r19, r25
     6bc:	3b 83       	std	Y+3, r19	; 0x03
     6be:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     6c0:	19 82       	std	Y+1, r1	; 0x01
     6c2:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     6c4:	80 91 38 08 	lds	r24, 0x0838	; 0x800838 <xNumberOfSuccessfulAllocations>
     6c8:	90 91 39 08 	lds	r25, 0x0839	; 0x800839 <xNumberOfSuccessfulAllocations+0x1>
     6cc:	01 96       	adiw	r24, 0x01	; 1
     6ce:	90 93 39 08 	sts	0x0839, r25	; 0x800839 <xNumberOfSuccessfulAllocations+0x1>
     6d2:	80 93 38 08 	sts	0x0838, r24	; 0x800838 <xNumberOfSuccessfulAllocations>
     6d6:	0b c0       	rjmp	.+22     	; 0x6ee <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     6d8:	e1 2c       	mov	r14, r1
     6da:	f1 2c       	mov	r15, r1
     6dc:	08 c0       	rjmp	.+16     	; 0x6ee <pvPortMalloc+0x134>
     6de:	e1 2c       	mov	r14, r1
     6e0:	f1 2c       	mov	r15, r1
     6e2:	05 c0       	rjmp	.+10     	; 0x6ee <pvPortMalloc+0x134>
     6e4:	e1 2c       	mov	r14, r1
     6e6:	f1 2c       	mov	r15, r1
     6e8:	02 c0       	rjmp	.+4      	; 0x6ee <pvPortMalloc+0x134>
     6ea:	e1 2c       	mov	r14, r1
     6ec:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     6ee:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     6f2:	e1 14       	cp	r14, r1
     6f4:	f1 04       	cpc	r15, r1
     6f6:	11 f4       	brne	.+4      	; 0x6fc <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     6f8:	0e 94 21 1a 	call	0x3442	; 0x3442 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     6fc:	c7 01       	movw	r24, r14
     6fe:	df 91       	pop	r29
     700:	cf 91       	pop	r28
     702:	1f 91       	pop	r17
     704:	0f 91       	pop	r16
     706:	ff 90       	pop	r15
     708:	ef 90       	pop	r14
     70a:	08 95       	ret

0000070c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     70c:	0f 93       	push	r16
     70e:	1f 93       	push	r17
     710:	cf 93       	push	r28
     712:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     714:	00 97       	sbiw	r24, 0x00	; 0
     716:	91 f1       	breq	.+100    	; 0x77c <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     718:	ec 01       	movw	r28, r24
     71a:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     71c:	4a 81       	ldd	r20, Y+2	; 0x02
     71e:	5b 81       	ldd	r21, Y+3	; 0x03
     720:	20 91 34 08 	lds	r18, 0x0834	; 0x800834 <__data_end>
     724:	30 91 35 08 	lds	r19, 0x0835	; 0x800835 <__data_end+0x1>
     728:	ba 01       	movw	r22, r20
     72a:	62 23       	and	r22, r18
     72c:	73 23       	and	r23, r19
     72e:	67 2b       	or	r22, r23
     730:	29 f1       	breq	.+74     	; 0x77c <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     732:	68 81       	ld	r22, Y
     734:	79 81       	ldd	r23, Y+1	; 0x01
     736:	67 2b       	or	r22, r23
     738:	09 f5       	brne	.+66     	; 0x77c <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     73a:	20 95       	com	r18
     73c:	30 95       	com	r19
     73e:	24 23       	and	r18, r20
     740:	35 23       	and	r19, r21
     742:	3b 83       	std	Y+3, r19	; 0x03
     744:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     746:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     74a:	8a 81       	ldd	r24, Y+2	; 0x02
     74c:	9b 81       	ldd	r25, Y+3	; 0x03
     74e:	20 91 3c 08 	lds	r18, 0x083C	; 0x80083c <xFreeBytesRemaining>
     752:	30 91 3d 08 	lds	r19, 0x083D	; 0x80083d <xFreeBytesRemaining+0x1>
     756:	82 0f       	add	r24, r18
     758:	93 1f       	adc	r25, r19
     75a:	90 93 3d 08 	sts	0x083D, r25	; 0x80083d <xFreeBytesRemaining+0x1>
     75e:	80 93 3c 08 	sts	0x083C, r24	; 0x80083c <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     762:	ce 01       	movw	r24, r28
     764:	e0 de       	rcall	.-576    	; 0x526 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     766:	80 91 36 08 	lds	r24, 0x0836	; 0x800836 <xNumberOfSuccessfulFrees>
     76a:	90 91 37 08 	lds	r25, 0x0837	; 0x800837 <xNumberOfSuccessfulFrees+0x1>
     76e:	01 96       	adiw	r24, 0x01	; 1
     770:	90 93 37 08 	sts	0x0837, r25	; 0x800837 <xNumberOfSuccessfulFrees+0x1>
     774:	80 93 36 08 	sts	0x0836, r24	; 0x800836 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     778:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	0f 91       	pop	r16
     784:	08 95       	ret

00000786 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     786:	fc 01       	movw	r30, r24
     788:	03 96       	adiw	r24, 0x03	; 3
     78a:	92 83       	std	Z+2, r25	; 0x02
     78c:	81 83       	std	Z+1, r24	; 0x01
     78e:	4f ef       	ldi	r20, 0xFF	; 255
     790:	5f ef       	ldi	r21, 0xFF	; 255
     792:	ba 01       	movw	r22, r20
     794:	43 83       	std	Z+3, r20	; 0x03
     796:	54 83       	std	Z+4, r21	; 0x04
     798:	65 83       	std	Z+5, r22	; 0x05
     79a:	76 83       	std	Z+6, r23	; 0x06
     79c:	90 87       	std	Z+8, r25	; 0x08
     79e:	87 83       	std	Z+7, r24	; 0x07
     7a0:	92 87       	std	Z+10, r25	; 0x0a
     7a2:	81 87       	std	Z+9, r24	; 0x09
     7a4:	10 82       	st	Z, r1
     7a6:	08 95       	ret

000007a8 <vListInitialiseItem>:
     7a8:	fc 01       	movw	r30, r24
     7aa:	13 86       	std	Z+11, r1	; 0x0b
     7ac:	12 86       	std	Z+10, r1	; 0x0a
     7ae:	08 95       	ret

000007b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     7b0:	0f 93       	push	r16
     7b2:	1f 93       	push	r17
     7b4:	cf 93       	push	r28
     7b6:	df 93       	push	r29
     7b8:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     7ba:	08 81       	ld	r16, Y
     7bc:	19 81       	ldd	r17, Y+1	; 0x01
     7be:	2a 81       	ldd	r18, Y+2	; 0x02
     7c0:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     7c2:	0f 3f       	cpi	r16, 0xFF	; 255
     7c4:	4f ef       	ldi	r20, 0xFF	; 255
     7c6:	14 07       	cpc	r17, r20
     7c8:	24 07       	cpc	r18, r20
     7ca:	34 07       	cpc	r19, r20
     7cc:	21 f4       	brne	.+8      	; 0x7d6 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     7ce:	fc 01       	movw	r30, r24
     7d0:	a1 85       	ldd	r26, Z+9	; 0x09
     7d2:	b2 85       	ldd	r27, Z+10	; 0x0a
     7d4:	11 c0       	rjmp	.+34     	; 0x7f8 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     7d6:	dc 01       	movw	r26, r24
     7d8:	13 96       	adiw	r26, 0x03	; 3
     7da:	01 c0       	rjmp	.+2      	; 0x7de <vListInsert+0x2e>
     7dc:	df 01       	movw	r26, r30
     7de:	14 96       	adiw	r26, 0x04	; 4
     7e0:	ed 91       	ld	r30, X+
     7e2:	fc 91       	ld	r31, X
     7e4:	15 97       	sbiw	r26, 0x05	; 5
     7e6:	40 81       	ld	r20, Z
     7e8:	51 81       	ldd	r21, Z+1	; 0x01
     7ea:	62 81       	ldd	r22, Z+2	; 0x02
     7ec:	73 81       	ldd	r23, Z+3	; 0x03
     7ee:	04 17       	cp	r16, r20
     7f0:	15 07       	cpc	r17, r21
     7f2:	26 07       	cpc	r18, r22
     7f4:	37 07       	cpc	r19, r23
     7f6:	90 f7       	brcc	.-28     	; 0x7dc <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     7f8:	14 96       	adiw	r26, 0x04	; 4
     7fa:	ed 91       	ld	r30, X+
     7fc:	fc 91       	ld	r31, X
     7fe:	15 97       	sbiw	r26, 0x05	; 5
     800:	fd 83       	std	Y+5, r31	; 0x05
     802:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     804:	d7 83       	std	Z+7, r29	; 0x07
     806:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     808:	bf 83       	std	Y+7, r27	; 0x07
     80a:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     80c:	15 96       	adiw	r26, 0x05	; 5
     80e:	dc 93       	st	X, r29
     810:	ce 93       	st	-X, r28
     812:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     814:	9b 87       	std	Y+11, r25	; 0x0b
     816:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     818:	fc 01       	movw	r30, r24
     81a:	20 81       	ld	r18, Z
     81c:	2f 5f       	subi	r18, 0xFF	; 255
     81e:	20 83       	st	Z, r18
}
     820:	df 91       	pop	r29
     822:	cf 91       	pop	r28
     824:	1f 91       	pop	r17
     826:	0f 91       	pop	r16
     828:	08 95       	ret

0000082a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     82a:	cf 93       	push	r28
     82c:	df 93       	push	r29
     82e:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     830:	a2 85       	ldd	r26, Z+10	; 0x0a
     832:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     834:	c4 81       	ldd	r28, Z+4	; 0x04
     836:	d5 81       	ldd	r29, Z+5	; 0x05
     838:	86 81       	ldd	r24, Z+6	; 0x06
     83a:	97 81       	ldd	r25, Z+7	; 0x07
     83c:	9f 83       	std	Y+7, r25	; 0x07
     83e:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     840:	c6 81       	ldd	r28, Z+6	; 0x06
     842:	d7 81       	ldd	r29, Z+7	; 0x07
     844:	84 81       	ldd	r24, Z+4	; 0x04
     846:	95 81       	ldd	r25, Z+5	; 0x05
     848:	9d 83       	std	Y+5, r25	; 0x05
     84a:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     84c:	11 96       	adiw	r26, 0x01	; 1
     84e:	8d 91       	ld	r24, X+
     850:	9c 91       	ld	r25, X
     852:	12 97       	sbiw	r26, 0x02	; 2
     854:	e8 17       	cp	r30, r24
     856:	f9 07       	cpc	r31, r25
     858:	31 f4       	brne	.+12     	; 0x866 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     85a:	86 81       	ldd	r24, Z+6	; 0x06
     85c:	97 81       	ldd	r25, Z+7	; 0x07
     85e:	12 96       	adiw	r26, 0x02	; 2
     860:	9c 93       	st	X, r25
     862:	8e 93       	st	-X, r24
     864:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     866:	13 86       	std	Z+11, r1	; 0x0b
     868:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     86a:	8c 91       	ld	r24, X
     86c:	81 50       	subi	r24, 0x01	; 1
     86e:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     870:	8c 91       	ld	r24, X
}
     872:	df 91       	pop	r29
     874:	cf 91       	pop	r28
     876:	08 95       	ret

00000878 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     878:	a8 95       	wdr
     87a:	90 ec       	ldi	r25, 0xC0	; 192
     87c:	88 e1       	ldi	r24, 0x18	; 24
     87e:	0f b6       	in	r0, 0x3f	; 63
     880:	f8 94       	cli
     882:	a8 95       	wdr
     884:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     888:	0f be       	out	0x3f, r0	; 63
     88a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     88e:	08 95       	ret

00000890 <pxPortInitialiseStack>:
     890:	fc 01       	movw	r30, r24
     892:	60 83       	st	Z, r22
     894:	31 97       	sbiw	r30, 0x01	; 1
     896:	70 83       	st	Z, r23
     898:	31 97       	sbiw	r30, 0x01	; 1
     89a:	10 82       	st	Z, r1
     89c:	31 97       	sbiw	r30, 0x01	; 1
     89e:	10 82       	st	Z, r1
     8a0:	31 97       	sbiw	r30, 0x01	; 1
     8a2:	20 e8       	ldi	r18, 0x80	; 128
     8a4:	20 83       	st	Z, r18
     8a6:	31 97       	sbiw	r30, 0x01	; 1
     8a8:	10 82       	st	Z, r1
     8aa:	31 97       	sbiw	r30, 0x01	; 1
     8ac:	10 82       	st	Z, r1
     8ae:	31 97       	sbiw	r30, 0x01	; 1
     8b0:	10 82       	st	Z, r1
     8b2:	77 97       	sbiw	r30, 0x17	; 23
     8b4:	40 83       	st	Z, r20
     8b6:	31 97       	sbiw	r30, 0x01	; 1
     8b8:	50 83       	st	Z, r21
     8ba:	86 97       	sbiw	r24, 0x26	; 38
     8bc:	08 95       	ret

000008be <xPortStartScheduler>:
     8be:	dc df       	rcall	.-72     	; 0x878 <prvSetupTimerInterrupt>
     8c0:	a0 91 af 16 	lds	r26, 0x16AF	; 0x8016af <pxCurrentTCB>
     8c4:	b0 91 b0 16 	lds	r27, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
     8c8:	cd 91       	ld	r28, X+
     8ca:	cd bf       	out	0x3d, r28	; 61
     8cc:	dd 91       	ld	r29, X+
     8ce:	de bf       	out	0x3e, r29	; 62
     8d0:	ff 91       	pop	r31
     8d2:	ef 91       	pop	r30
     8d4:	df 91       	pop	r29
     8d6:	cf 91       	pop	r28
     8d8:	bf 91       	pop	r27
     8da:	af 91       	pop	r26
     8dc:	9f 91       	pop	r25
     8de:	8f 91       	pop	r24
     8e0:	7f 91       	pop	r23
     8e2:	6f 91       	pop	r22
     8e4:	5f 91       	pop	r21
     8e6:	4f 91       	pop	r20
     8e8:	3f 91       	pop	r19
     8ea:	2f 91       	pop	r18
     8ec:	1f 91       	pop	r17
     8ee:	0f 91       	pop	r16
     8f0:	ff 90       	pop	r15
     8f2:	ef 90       	pop	r14
     8f4:	df 90       	pop	r13
     8f6:	cf 90       	pop	r12
     8f8:	bf 90       	pop	r11
     8fa:	af 90       	pop	r10
     8fc:	9f 90       	pop	r9
     8fe:	8f 90       	pop	r8
     900:	7f 90       	pop	r7
     902:	6f 90       	pop	r6
     904:	5f 90       	pop	r5
     906:	4f 90       	pop	r4
     908:	3f 90       	pop	r3
     90a:	2f 90       	pop	r2
     90c:	1f 90       	pop	r1
     90e:	0f 90       	pop	r0
     910:	0c be       	out	0x3c, r0	; 60
     912:	0f 90       	pop	r0
     914:	0b be       	out	0x3b, r0	; 59
     916:	0f 90       	pop	r0
     918:	0f be       	out	0x3f, r0	; 63
     91a:	0f 90       	pop	r0
     91c:	08 95       	ret
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	08 95       	ret

00000922 <vPortYield>:
     922:	0f 92       	push	r0
     924:	0f b6       	in	r0, 0x3f	; 63
     926:	f8 94       	cli
     928:	0f 92       	push	r0
     92a:	0b b6       	in	r0, 0x3b	; 59
     92c:	0f 92       	push	r0
     92e:	0c b6       	in	r0, 0x3c	; 60
     930:	0f 92       	push	r0
     932:	1f 92       	push	r1
     934:	11 24       	eor	r1, r1
     936:	2f 92       	push	r2
     938:	3f 92       	push	r3
     93a:	4f 92       	push	r4
     93c:	5f 92       	push	r5
     93e:	6f 92       	push	r6
     940:	7f 92       	push	r7
     942:	8f 92       	push	r8
     944:	9f 92       	push	r9
     946:	af 92       	push	r10
     948:	bf 92       	push	r11
     94a:	cf 92       	push	r12
     94c:	df 92       	push	r13
     94e:	ef 92       	push	r14
     950:	ff 92       	push	r15
     952:	0f 93       	push	r16
     954:	1f 93       	push	r17
     956:	2f 93       	push	r18
     958:	3f 93       	push	r19
     95a:	4f 93       	push	r20
     95c:	5f 93       	push	r21
     95e:	6f 93       	push	r22
     960:	7f 93       	push	r23
     962:	8f 93       	push	r24
     964:	9f 93       	push	r25
     966:	af 93       	push	r26
     968:	bf 93       	push	r27
     96a:	cf 93       	push	r28
     96c:	df 93       	push	r29
     96e:	ef 93       	push	r30
     970:	ff 93       	push	r31
     972:	a0 91 af 16 	lds	r26, 0x16AF	; 0x8016af <pxCurrentTCB>
     976:	b0 91 b0 16 	lds	r27, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
     97a:	0d b6       	in	r0, 0x3d	; 61
     97c:	0d 92       	st	X+, r0
     97e:	0e b6       	in	r0, 0x3e	; 62
     980:	0d 92       	st	X+, r0
     982:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <vTaskSwitchContext>
     986:	a0 91 af 16 	lds	r26, 0x16AF	; 0x8016af <pxCurrentTCB>
     98a:	b0 91 b0 16 	lds	r27, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
     98e:	cd 91       	ld	r28, X+
     990:	cd bf       	out	0x3d, r28	; 61
     992:	dd 91       	ld	r29, X+
     994:	de bf       	out	0x3e, r29	; 62
     996:	ff 91       	pop	r31
     998:	ef 91       	pop	r30
     99a:	df 91       	pop	r29
     99c:	cf 91       	pop	r28
     99e:	bf 91       	pop	r27
     9a0:	af 91       	pop	r26
     9a2:	9f 91       	pop	r25
     9a4:	8f 91       	pop	r24
     9a6:	7f 91       	pop	r23
     9a8:	6f 91       	pop	r22
     9aa:	5f 91       	pop	r21
     9ac:	4f 91       	pop	r20
     9ae:	3f 91       	pop	r19
     9b0:	2f 91       	pop	r18
     9b2:	1f 91       	pop	r17
     9b4:	0f 91       	pop	r16
     9b6:	ff 90       	pop	r15
     9b8:	ef 90       	pop	r14
     9ba:	df 90       	pop	r13
     9bc:	cf 90       	pop	r12
     9be:	bf 90       	pop	r11
     9c0:	af 90       	pop	r10
     9c2:	9f 90       	pop	r9
     9c4:	8f 90       	pop	r8
     9c6:	7f 90       	pop	r7
     9c8:	6f 90       	pop	r6
     9ca:	5f 90       	pop	r5
     9cc:	4f 90       	pop	r4
     9ce:	3f 90       	pop	r3
     9d0:	2f 90       	pop	r2
     9d2:	1f 90       	pop	r1
     9d4:	0f 90       	pop	r0
     9d6:	0c be       	out	0x3c, r0	; 60
     9d8:	0f 90       	pop	r0
     9da:	0b be       	out	0x3b, r0	; 59
     9dc:	0f 90       	pop	r0
     9de:	0f be       	out	0x3f, r0	; 63
     9e0:	0f 90       	pop	r0
     9e2:	08 95       	ret

000009e4 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     9e4:	0f 92       	push	r0
     9e6:	0f b6       	in	r0, 0x3f	; 63
     9e8:	f8 94       	cli
     9ea:	0f 92       	push	r0
     9ec:	0b b6       	in	r0, 0x3b	; 59
     9ee:	0f 92       	push	r0
     9f0:	0c b6       	in	r0, 0x3c	; 60
     9f2:	0f 92       	push	r0
     9f4:	1f 92       	push	r1
     9f6:	11 24       	eor	r1, r1
     9f8:	2f 92       	push	r2
     9fa:	3f 92       	push	r3
     9fc:	4f 92       	push	r4
     9fe:	5f 92       	push	r5
     a00:	6f 92       	push	r6
     a02:	7f 92       	push	r7
     a04:	8f 92       	push	r8
     a06:	9f 92       	push	r9
     a08:	af 92       	push	r10
     a0a:	bf 92       	push	r11
     a0c:	cf 92       	push	r12
     a0e:	df 92       	push	r13
     a10:	ef 92       	push	r14
     a12:	ff 92       	push	r15
     a14:	0f 93       	push	r16
     a16:	1f 93       	push	r17
     a18:	2f 93       	push	r18
     a1a:	3f 93       	push	r19
     a1c:	4f 93       	push	r20
     a1e:	5f 93       	push	r21
     a20:	6f 93       	push	r22
     a22:	7f 93       	push	r23
     a24:	8f 93       	push	r24
     a26:	9f 93       	push	r25
     a28:	af 93       	push	r26
     a2a:	bf 93       	push	r27
     a2c:	cf 93       	push	r28
     a2e:	df 93       	push	r29
     a30:	ef 93       	push	r30
     a32:	ff 93       	push	r31
     a34:	a0 91 af 16 	lds	r26, 0x16AF	; 0x8016af <pxCurrentTCB>
     a38:	b0 91 b0 16 	lds	r27, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
     a3c:	0d b6       	in	r0, 0x3d	; 61
     a3e:	0d 92       	st	X+, r0
     a40:	0e b6       	in	r0, 0x3e	; 62
     a42:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     a44:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     a46:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <xTaskIncrementTick>
     a4a:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     a4c:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     a50:	a0 91 af 16 	lds	r26, 0x16AF	; 0x8016af <pxCurrentTCB>
     a54:	b0 91 b0 16 	lds	r27, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
     a58:	cd 91       	ld	r28, X+
     a5a:	cd bf       	out	0x3d, r28	; 61
     a5c:	dd 91       	ld	r29, X+
     a5e:	de bf       	out	0x3e, r29	; 62
     a60:	ff 91       	pop	r31
     a62:	ef 91       	pop	r30
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	bf 91       	pop	r27
     a6a:	af 91       	pop	r26
     a6c:	9f 91       	pop	r25
     a6e:	8f 91       	pop	r24
     a70:	7f 91       	pop	r23
     a72:	6f 91       	pop	r22
     a74:	5f 91       	pop	r21
     a76:	4f 91       	pop	r20
     a78:	3f 91       	pop	r19
     a7a:	2f 91       	pop	r18
     a7c:	1f 91       	pop	r17
     a7e:	0f 91       	pop	r16
     a80:	ff 90       	pop	r15
     a82:	ef 90       	pop	r14
     a84:	df 90       	pop	r13
     a86:	cf 90       	pop	r12
     a88:	bf 90       	pop	r11
     a8a:	af 90       	pop	r10
     a8c:	9f 90       	pop	r9
     a8e:	8f 90       	pop	r8
     a90:	7f 90       	pop	r7
     a92:	6f 90       	pop	r6
     a94:	5f 90       	pop	r5
     a96:	4f 90       	pop	r4
     a98:	3f 90       	pop	r3
     a9a:	2f 90       	pop	r2
     a9c:	1f 90       	pop	r1
     a9e:	0f 90       	pop	r0
     aa0:	0c be       	out	0x3c, r0	; 60
     aa2:	0f 90       	pop	r0
     aa4:	0b be       	out	0x3b, r0	; 59
     aa6:	0f 90       	pop	r0
     aa8:	0f be       	out	0x3f, r0	; 63
     aaa:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     aac:	08 95       	ret

00000aae <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     aae:	9a df       	rcall	.-204    	; 0x9e4 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     ab0:	18 95       	reti

00000ab2 <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     ab2:	dc 01       	movw	r26, r24
     ab4:	53 96       	adiw	r26, 0x13	; 19
     ab6:	2c 91       	ld	r18, X
     ab8:	53 97       	sbiw	r26, 0x13	; 19
     aba:	22 23       	and	r18, r18
     abc:	41 f0       	breq	.+16     	; 0xace <prvGetDisinheritPriorityAfterTimeout+0x1c>
     abe:	5a 96       	adiw	r26, 0x1a	; 26
     ac0:	ed 91       	ld	r30, X+
     ac2:	fc 91       	ld	r31, X
     ac4:	5b 97       	sbiw	r26, 0x1b	; 27
     ac6:	90 81       	ld	r25, Z
     ac8:	8a e0       	ldi	r24, 0x0A	; 10
     aca:	89 1b       	sub	r24, r25
     acc:	08 95       	ret
     ace:	80 e0       	ldi	r24, 0x00	; 0
     ad0:	08 95       	ret

00000ad2 <prvIsQueueEmpty>:
     ad2:	0f b6       	in	r0, 0x3f	; 63
     ad4:	f8 94       	cli
     ad6:	0f 92       	push	r0
     ad8:	fc 01       	movw	r30, r24
     ada:	86 8d       	ldd	r24, Z+30	; 0x1e
     adc:	81 11       	cpse	r24, r1
     ade:	02 c0       	rjmp	.+4      	; 0xae4 <prvIsQueueEmpty+0x12>
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	01 c0       	rjmp	.+2      	; 0xae6 <prvIsQueueEmpty+0x14>
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	0f 90       	pop	r0
     ae8:	0f be       	out	0x3f, r0	; 63
     aea:	08 95       	ret

00000aec <prvIsQueueFull>:
     aec:	0f b6       	in	r0, 0x3f	; 63
     aee:	f8 94       	cli
     af0:	0f 92       	push	r0
     af2:	fc 01       	movw	r30, r24
     af4:	26 8d       	ldd	r18, Z+30	; 0x1e
     af6:	87 8d       	ldd	r24, Z+31	; 0x1f
     af8:	28 13       	cpse	r18, r24
     afa:	02 c0       	rjmp	.+4      	; 0xb00 <prvIsQueueFull+0x14>
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	01 c0       	rjmp	.+2      	; 0xb02 <prvIsQueueFull+0x16>
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	0f 90       	pop	r0
     b04:	0f be       	out	0x3f, r0	; 63
     b06:	08 95       	ret

00000b08 <prvCopyDataToQueue>:
     b08:	0f 93       	push	r16
     b0a:	1f 93       	push	r17
     b0c:	cf 93       	push	r28
     b0e:	df 93       	push	r29
     b10:	ec 01       	movw	r28, r24
     b12:	04 2f       	mov	r16, r20
     b14:	1e 8d       	ldd	r17, Y+30	; 0x1e
     b16:	48 a1       	ldd	r20, Y+32	; 0x20
     b18:	41 11       	cpse	r20, r1
     b1a:	0c c0       	rjmp	.+24     	; 0xb34 <prvCopyDataToQueue+0x2c>
     b1c:	88 81       	ld	r24, Y
     b1e:	99 81       	ldd	r25, Y+1	; 0x01
     b20:	89 2b       	or	r24, r25
     b22:	09 f0       	breq	.+2      	; 0xb26 <prvCopyDataToQueue+0x1e>
     b24:	42 c0       	rjmp	.+132    	; 0xbaa <prvCopyDataToQueue+0xa2>
     b26:	8c 81       	ldd	r24, Y+4	; 0x04
     b28:	9d 81       	ldd	r25, Y+5	; 0x05
     b2a:	0e 94 5e 14 	call	0x28bc	; 0x28bc <xTaskPriorityDisinherit>
     b2e:	1d 82       	std	Y+5, r1	; 0x05
     b30:	1c 82       	std	Y+4, r1	; 0x04
     b32:	42 c0       	rjmp	.+132    	; 0xbb8 <prvCopyDataToQueue+0xb0>
     b34:	01 11       	cpse	r16, r1
     b36:	17 c0       	rjmp	.+46     	; 0xb66 <prvCopyDataToQueue+0x5e>
     b38:	50 e0       	ldi	r21, 0x00	; 0
     b3a:	8a 81       	ldd	r24, Y+2	; 0x02
     b3c:	9b 81       	ldd	r25, Y+3	; 0x03
     b3e:	0e 94 8d 2f 	call	0x5f1a	; 0x5f1a <memcpy>
     b42:	28 a1       	ldd	r18, Y+32	; 0x20
     b44:	8a 81       	ldd	r24, Y+2	; 0x02
     b46:	9b 81       	ldd	r25, Y+3	; 0x03
     b48:	82 0f       	add	r24, r18
     b4a:	91 1d       	adc	r25, r1
     b4c:	9b 83       	std	Y+3, r25	; 0x03
     b4e:	8a 83       	std	Y+2, r24	; 0x02
     b50:	2c 81       	ldd	r18, Y+4	; 0x04
     b52:	3d 81       	ldd	r19, Y+5	; 0x05
     b54:	82 17       	cp	r24, r18
     b56:	93 07       	cpc	r25, r19
     b58:	50 f1       	brcs	.+84     	; 0xbae <prvCopyDataToQueue+0xa6>
     b5a:	88 81       	ld	r24, Y
     b5c:	99 81       	ldd	r25, Y+1	; 0x01
     b5e:	9b 83       	std	Y+3, r25	; 0x03
     b60:	8a 83       	std	Y+2, r24	; 0x02
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	29 c0       	rjmp	.+82     	; 0xbb8 <prvCopyDataToQueue+0xb0>
     b66:	50 e0       	ldi	r21, 0x00	; 0
     b68:	8e 81       	ldd	r24, Y+6	; 0x06
     b6a:	9f 81       	ldd	r25, Y+7	; 0x07
     b6c:	0e 94 8d 2f 	call	0x5f1a	; 0x5f1a <memcpy>
     b70:	88 a1       	ldd	r24, Y+32	; 0x20
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	91 95       	neg	r25
     b76:	81 95       	neg	r24
     b78:	91 09       	sbc	r25, r1
     b7a:	2e 81       	ldd	r18, Y+6	; 0x06
     b7c:	3f 81       	ldd	r19, Y+7	; 0x07
     b7e:	28 0f       	add	r18, r24
     b80:	39 1f       	adc	r19, r25
     b82:	3f 83       	std	Y+7, r19	; 0x07
     b84:	2e 83       	std	Y+6, r18	; 0x06
     b86:	48 81       	ld	r20, Y
     b88:	59 81       	ldd	r21, Y+1	; 0x01
     b8a:	24 17       	cp	r18, r20
     b8c:	35 07       	cpc	r19, r21
     b8e:	30 f4       	brcc	.+12     	; 0xb9c <prvCopyDataToQueue+0x94>
     b90:	2c 81       	ldd	r18, Y+4	; 0x04
     b92:	3d 81       	ldd	r19, Y+5	; 0x05
     b94:	82 0f       	add	r24, r18
     b96:	93 1f       	adc	r25, r19
     b98:	9f 83       	std	Y+7, r25	; 0x07
     b9a:	8e 83       	std	Y+6, r24	; 0x06
     b9c:	02 30       	cpi	r16, 0x02	; 2
     b9e:	49 f4       	brne	.+18     	; 0xbb2 <prvCopyDataToQueue+0xaa>
     ba0:	11 23       	and	r17, r17
     ba2:	49 f0       	breq	.+18     	; 0xbb6 <prvCopyDataToQueue+0xae>
     ba4:	11 50       	subi	r17, 0x01	; 1
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	07 c0       	rjmp	.+14     	; 0xbb8 <prvCopyDataToQueue+0xb0>
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	05 c0       	rjmp	.+10     	; 0xbb8 <prvCopyDataToQueue+0xb0>
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	03 c0       	rjmp	.+6      	; 0xbb8 <prvCopyDataToQueue+0xb0>
     bb2:	80 e0       	ldi	r24, 0x00	; 0
     bb4:	01 c0       	rjmp	.+2      	; 0xbb8 <prvCopyDataToQueue+0xb0>
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	1f 5f       	subi	r17, 0xFF	; 255
     bba:	1e 8f       	std	Y+30, r17	; 0x1e
     bbc:	df 91       	pop	r29
     bbe:	cf 91       	pop	r28
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	08 95       	ret

00000bc6 <prvCopyDataFromQueue>:
     bc6:	fc 01       	movw	r30, r24
     bc8:	40 a1       	ldd	r20, Z+32	; 0x20
     bca:	44 23       	and	r20, r20
     bcc:	a9 f0       	breq	.+42     	; 0xbf8 <prvCopyDataFromQueue+0x32>
     bce:	50 e0       	ldi	r21, 0x00	; 0
     bd0:	26 81       	ldd	r18, Z+6	; 0x06
     bd2:	37 81       	ldd	r19, Z+7	; 0x07
     bd4:	24 0f       	add	r18, r20
     bd6:	35 1f       	adc	r19, r21
     bd8:	37 83       	std	Z+7, r19	; 0x07
     bda:	26 83       	std	Z+6, r18	; 0x06
     bdc:	84 81       	ldd	r24, Z+4	; 0x04
     bde:	95 81       	ldd	r25, Z+5	; 0x05
     be0:	28 17       	cp	r18, r24
     be2:	39 07       	cpc	r19, r25
     be4:	20 f0       	brcs	.+8      	; 0xbee <prvCopyDataFromQueue+0x28>
     be6:	80 81       	ld	r24, Z
     be8:	91 81       	ldd	r25, Z+1	; 0x01
     bea:	97 83       	std	Z+7, r25	; 0x07
     bec:	86 83       	std	Z+6, r24	; 0x06
     bee:	cb 01       	movw	r24, r22
     bf0:	66 81       	ldd	r22, Z+6	; 0x06
     bf2:	77 81       	ldd	r23, Z+7	; 0x07
     bf4:	0c 94 8d 2f 	jmp	0x5f1a	; 0x5f1a <memcpy>
     bf8:	08 95       	ret

00000bfa <prvUnlockQueue>:
     bfa:	1f 93       	push	r17
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	ec 01       	movw	r28, r24
     c02:	0f b6       	in	r0, 0x3f	; 63
     c04:	f8 94       	cli
     c06:	0f 92       	push	r0
     c08:	1a a1       	ldd	r17, Y+34	; 0x22
     c0a:	0b c0       	rjmp	.+22     	; 0xc22 <prvUnlockQueue+0x28>
     c0c:	8b 89       	ldd	r24, Y+19	; 0x13
     c0e:	88 23       	and	r24, r24
     c10:	51 f0       	breq	.+20     	; 0xc26 <prvUnlockQueue+0x2c>
     c12:	ce 01       	movw	r24, r28
     c14:	43 96       	adiw	r24, 0x13	; 19
     c16:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <xTaskRemoveFromEventList>
     c1a:	81 11       	cpse	r24, r1
     c1c:	0e 94 c0 13 	call	0x2780	; 0x2780 <vTaskMissedYield>
     c20:	11 50       	subi	r17, 0x01	; 1
     c22:	11 16       	cp	r1, r17
     c24:	9c f3       	brlt	.-26     	; 0xc0c <prvUnlockQueue+0x12>
     c26:	8f ef       	ldi	r24, 0xFF	; 255
     c28:	8a a3       	std	Y+34, r24	; 0x22
     c2a:	0f 90       	pop	r0
     c2c:	0f be       	out	0x3f, r0	; 63
     c2e:	0f b6       	in	r0, 0x3f	; 63
     c30:	f8 94       	cli
     c32:	0f 92       	push	r0
     c34:	19 a1       	ldd	r17, Y+33	; 0x21
     c36:	0b c0       	rjmp	.+22     	; 0xc4e <prvUnlockQueue+0x54>
     c38:	88 85       	ldd	r24, Y+8	; 0x08
     c3a:	88 23       	and	r24, r24
     c3c:	51 f0       	breq	.+20     	; 0xc52 <prvUnlockQueue+0x58>
     c3e:	ce 01       	movw	r24, r28
     c40:	08 96       	adiw	r24, 0x08	; 8
     c42:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <xTaskRemoveFromEventList>
     c46:	81 11       	cpse	r24, r1
     c48:	0e 94 c0 13 	call	0x2780	; 0x2780 <vTaskMissedYield>
     c4c:	11 50       	subi	r17, 0x01	; 1
     c4e:	11 16       	cp	r1, r17
     c50:	9c f3       	brlt	.-26     	; 0xc38 <prvUnlockQueue+0x3e>
     c52:	8f ef       	ldi	r24, 0xFF	; 255
     c54:	89 a3       	std	Y+33, r24	; 0x21
     c56:	0f 90       	pop	r0
     c58:	0f be       	out	0x3f, r0	; 63
     c5a:	df 91       	pop	r29
     c5c:	cf 91       	pop	r28
     c5e:	1f 91       	pop	r17
     c60:	08 95       	ret

00000c62 <xQueueGenericReset>:
     c62:	cf 93       	push	r28
     c64:	df 93       	push	r29
     c66:	ec 01       	movw	r28, r24
     c68:	0f b6       	in	r0, 0x3f	; 63
     c6a:	f8 94       	cli
     c6c:	0f 92       	push	r0
     c6e:	e8 81       	ld	r30, Y
     c70:	f9 81       	ldd	r31, Y+1	; 0x01
     c72:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c74:	28 a1       	ldd	r18, Y+32	; 0x20
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	82 9f       	mul	r24, r18
     c7c:	a0 01       	movw	r20, r0
     c7e:	83 9f       	mul	r24, r19
     c80:	50 0d       	add	r21, r0
     c82:	92 9f       	mul	r25, r18
     c84:	50 0d       	add	r21, r0
     c86:	11 24       	eor	r1, r1
     c88:	4e 0f       	add	r20, r30
     c8a:	5f 1f       	adc	r21, r31
     c8c:	5d 83       	std	Y+5, r21	; 0x05
     c8e:	4c 83       	std	Y+4, r20	; 0x04
     c90:	1e 8e       	std	Y+30, r1	; 0x1e
     c92:	fb 83       	std	Y+3, r31	; 0x03
     c94:	ea 83       	std	Y+2, r30	; 0x02
     c96:	01 97       	sbiw	r24, 0x01	; 1
     c98:	28 9f       	mul	r18, r24
     c9a:	a0 01       	movw	r20, r0
     c9c:	29 9f       	mul	r18, r25
     c9e:	50 0d       	add	r21, r0
     ca0:	38 9f       	mul	r19, r24
     ca2:	50 0d       	add	r21, r0
     ca4:	11 24       	eor	r1, r1
     ca6:	cf 01       	movw	r24, r30
     ca8:	84 0f       	add	r24, r20
     caa:	95 1f       	adc	r25, r21
     cac:	9f 83       	std	Y+7, r25	; 0x07
     cae:	8e 83       	std	Y+6, r24	; 0x06
     cb0:	8f ef       	ldi	r24, 0xFF	; 255
     cb2:	89 a3       	std	Y+33, r24	; 0x21
     cb4:	8a a3       	std	Y+34, r24	; 0x22
     cb6:	61 11       	cpse	r22, r1
     cb8:	0b c0       	rjmp	.+22     	; 0xcd0 <xQueueGenericReset+0x6e>
     cba:	88 85       	ldd	r24, Y+8	; 0x08
     cbc:	88 23       	and	r24, r24
     cbe:	71 f0       	breq	.+28     	; 0xcdc <xQueueGenericReset+0x7a>
     cc0:	ce 01       	movw	r24, r28
     cc2:	08 96       	adiw	r24, 0x08	; 8
     cc4:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <xTaskRemoveFromEventList>
     cc8:	88 23       	and	r24, r24
     cca:	41 f0       	breq	.+16     	; 0xcdc <xQueueGenericReset+0x7a>
     ccc:	2a de       	rcall	.-940    	; 0x922 <vPortYield>
     cce:	06 c0       	rjmp	.+12     	; 0xcdc <xQueueGenericReset+0x7a>
     cd0:	ce 01       	movw	r24, r28
     cd2:	08 96       	adiw	r24, 0x08	; 8
     cd4:	58 dd       	rcall	.-1360   	; 0x786 <vListInitialise>
     cd6:	ce 01       	movw	r24, r28
     cd8:	43 96       	adiw	r24, 0x13	; 19
     cda:	55 dd       	rcall	.-1366   	; 0x786 <vListInitialise>
     cdc:	0f 90       	pop	r0
     cde:	0f be       	out	0x3f, r0	; 63
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	df 91       	pop	r29
     ce4:	cf 91       	pop	r28
     ce6:	08 95       	ret

00000ce8 <prvInitialiseNewQueue>:
     ce8:	0f 93       	push	r16
     cea:	1f 93       	push	r17
     cec:	f8 01       	movw	r30, r16
     cee:	61 11       	cpse	r22, r1
     cf0:	03 c0       	rjmp	.+6      	; 0xcf8 <prvInitialiseNewQueue+0x10>
     cf2:	11 83       	std	Z+1, r17	; 0x01
     cf4:	00 83       	st	Z, r16
     cf6:	02 c0       	rjmp	.+4      	; 0xcfc <prvInitialiseNewQueue+0x14>
     cf8:	51 83       	std	Z+1, r21	; 0x01
     cfa:	40 83       	st	Z, r20
     cfc:	87 8f       	std	Z+31, r24	; 0x1f
     cfe:	60 a3       	std	Z+32, r22	; 0x20
     d00:	61 e0       	ldi	r22, 0x01	; 1
     d02:	cf 01       	movw	r24, r30
     d04:	ae df       	rcall	.-164    	; 0xc62 <xQueueGenericReset>
     d06:	1f 91       	pop	r17
     d08:	0f 91       	pop	r16
     d0a:	08 95       	ret

00000d0c <xQueueGenericCreate>:
     d0c:	df 92       	push	r13
     d0e:	ef 92       	push	r14
     d10:	ff 92       	push	r15
     d12:	0f 93       	push	r16
     d14:	1f 93       	push	r17
     d16:	cf 93       	push	r28
     d18:	df 93       	push	r29
     d1a:	f8 2e       	mov	r15, r24
     d1c:	e6 2e       	mov	r14, r22
     d1e:	d4 2e       	mov	r13, r20
     d20:	86 9f       	mul	r24, r22
     d22:	c0 01       	movw	r24, r0
     d24:	11 24       	eor	r1, r1
     d26:	83 96       	adiw	r24, 0x23	; 35
     d28:	48 dc       	rcall	.-1904   	; 0x5ba <pvPortMalloc>
     d2a:	ec 01       	movw	r28, r24
     d2c:	00 97       	sbiw	r24, 0x00	; 0
     d2e:	41 f0       	breq	.+16     	; 0xd40 <xQueueGenericCreate+0x34>
     d30:	8c 01       	movw	r16, r24
     d32:	2d 2d       	mov	r18, r13
     d34:	ac 01       	movw	r20, r24
     d36:	4d 5d       	subi	r20, 0xDD	; 221
     d38:	5f 4f       	sbci	r21, 0xFF	; 255
     d3a:	6e 2d       	mov	r22, r14
     d3c:	8f 2d       	mov	r24, r15
     d3e:	d4 df       	rcall	.-88     	; 0xce8 <prvInitialiseNewQueue>
     d40:	ce 01       	movw	r24, r28
     d42:	df 91       	pop	r29
     d44:	cf 91       	pop	r28
     d46:	1f 91       	pop	r17
     d48:	0f 91       	pop	r16
     d4a:	ff 90       	pop	r15
     d4c:	ef 90       	pop	r14
     d4e:	df 90       	pop	r13
     d50:	08 95       	ret

00000d52 <xQueueGenericSend>:
     d52:	cf 92       	push	r12
     d54:	df 92       	push	r13
     d56:	ef 92       	push	r14
     d58:	ff 92       	push	r15
     d5a:	0f 93       	push	r16
     d5c:	1f 93       	push	r17
     d5e:	cf 93       	push	r28
     d60:	df 93       	push	r29
     d62:	cd b7       	in	r28, 0x3d	; 61
     d64:	de b7       	in	r29, 0x3e	; 62
     d66:	29 97       	sbiw	r28, 0x09	; 9
     d68:	0f b6       	in	r0, 0x3f	; 63
     d6a:	f8 94       	cli
     d6c:	de bf       	out	0x3e, r29	; 62
     d6e:	0f be       	out	0x3f, r0	; 63
     d70:	cd bf       	out	0x3d, r28	; 61
     d72:	7c 01       	movw	r14, r24
     d74:	6b 01       	movw	r12, r22
     d76:	2e 83       	std	Y+6, r18	; 0x06
     d78:	3f 83       	std	Y+7, r19	; 0x07
     d7a:	48 87       	std	Y+8, r20	; 0x08
     d7c:	59 87       	std	Y+9, r21	; 0x09
     d7e:	10 e0       	ldi	r17, 0x00	; 0
     d80:	0f b6       	in	r0, 0x3f	; 63
     d82:	f8 94       	cli
     d84:	0f 92       	push	r0
     d86:	f7 01       	movw	r30, r14
     d88:	96 8d       	ldd	r25, Z+30	; 0x1e
     d8a:	87 8d       	ldd	r24, Z+31	; 0x1f
     d8c:	98 17       	cp	r25, r24
     d8e:	10 f0       	brcs	.+4      	; 0xd94 <xQueueGenericSend+0x42>
     d90:	02 30       	cpi	r16, 0x02	; 2
     d92:	b1 f4       	brne	.+44     	; 0xdc0 <xQueueGenericSend+0x6e>
     d94:	40 2f       	mov	r20, r16
     d96:	b6 01       	movw	r22, r12
     d98:	c7 01       	movw	r24, r14
     d9a:	b6 de       	rcall	.-660    	; 0xb08 <prvCopyDataToQueue>
     d9c:	f7 01       	movw	r30, r14
     d9e:	93 89       	ldd	r25, Z+19	; 0x13
     da0:	99 23       	and	r25, r25
     da2:	41 f0       	breq	.+16     	; 0xdb4 <xQueueGenericSend+0x62>
     da4:	c7 01       	movw	r24, r14
     da6:	43 96       	adiw	r24, 0x13	; 19
     da8:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <xTaskRemoveFromEventList>
     dac:	88 23       	and	r24, r24
     dae:	21 f0       	breq	.+8      	; 0xdb8 <xQueueGenericSend+0x66>
     db0:	b8 dd       	rcall	.-1168   	; 0x922 <vPortYield>
     db2:	02 c0       	rjmp	.+4      	; 0xdb8 <xQueueGenericSend+0x66>
     db4:	81 11       	cpse	r24, r1
     db6:	b5 dd       	rcall	.-1174   	; 0x922 <vPortYield>
     db8:	0f 90       	pop	r0
     dba:	0f be       	out	0x3f, r0	; 63
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	4c c0       	rjmp	.+152    	; 0xe58 <xQueueGenericSend+0x106>
     dc0:	8e 81       	ldd	r24, Y+6	; 0x06
     dc2:	9f 81       	ldd	r25, Y+7	; 0x07
     dc4:	a8 85       	ldd	r26, Y+8	; 0x08
     dc6:	b9 85       	ldd	r27, Y+9	; 0x09
     dc8:	89 2b       	or	r24, r25
     dca:	8a 2b       	or	r24, r26
     dcc:	8b 2b       	or	r24, r27
     dce:	21 f4       	brne	.+8      	; 0xdd8 <xQueueGenericSend+0x86>
     dd0:	0f 90       	pop	r0
     dd2:	0f be       	out	0x3f, r0	; 63
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	40 c0       	rjmp	.+128    	; 0xe58 <xQueueGenericSend+0x106>
     dd8:	11 11       	cpse	r17, r1
     dda:	05 c0       	rjmp	.+10     	; 0xde6 <xQueueGenericSend+0x94>
     ddc:	ce 01       	movw	r24, r28
     dde:	01 96       	adiw	r24, 0x01	; 1
     de0:	0e 94 49 13 	call	0x2692	; 0x2692 <vTaskInternalSetTimeOutState>
     de4:	11 e0       	ldi	r17, 0x01	; 1
     de6:	0f 90       	pop	r0
     de8:	0f be       	out	0x3f, r0	; 63
     dea:	50 d7       	rcall	.+3744   	; 0x1c8c <vTaskSuspendAll>
     dec:	0f b6       	in	r0, 0x3f	; 63
     dee:	f8 94       	cli
     df0:	0f 92       	push	r0
     df2:	f7 01       	movw	r30, r14
     df4:	81 a1       	ldd	r24, Z+33	; 0x21
     df6:	8f 3f       	cpi	r24, 0xFF	; 255
     df8:	09 f4       	brne	.+2      	; 0xdfc <xQueueGenericSend+0xaa>
     dfa:	11 a2       	std	Z+33, r1	; 0x21
     dfc:	f7 01       	movw	r30, r14
     dfe:	82 a1       	ldd	r24, Z+34	; 0x22
     e00:	8f 3f       	cpi	r24, 0xFF	; 255
     e02:	09 f4       	brne	.+2      	; 0xe06 <xQueueGenericSend+0xb4>
     e04:	12 a2       	std	Z+34, r1	; 0x22
     e06:	0f 90       	pop	r0
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	be 01       	movw	r22, r28
     e0c:	6a 5f       	subi	r22, 0xFA	; 250
     e0e:	7f 4f       	sbci	r23, 0xFF	; 255
     e10:	ce 01       	movw	r24, r28
     e12:	01 96       	adiw	r24, 0x01	; 1
     e14:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <xTaskCheckForTimeOut>
     e18:	81 11       	cpse	r24, r1
     e1a:	19 c0       	rjmp	.+50     	; 0xe4e <xQueueGenericSend+0xfc>
     e1c:	c7 01       	movw	r24, r14
     e1e:	66 de       	rcall	.-820    	; 0xaec <prvIsQueueFull>
     e20:	88 23       	and	r24, r24
     e22:	81 f0       	breq	.+32     	; 0xe44 <xQueueGenericSend+0xf2>
     e24:	4e 81       	ldd	r20, Y+6	; 0x06
     e26:	5f 81       	ldd	r21, Y+7	; 0x07
     e28:	68 85       	ldd	r22, Y+8	; 0x08
     e2a:	79 85       	ldd	r23, Y+9	; 0x09
     e2c:	c7 01       	movw	r24, r14
     e2e:	08 96       	adiw	r24, 0x08	; 8
     e30:	0e 94 47 11 	call	0x228e	; 0x228e <vTaskPlaceOnEventList>
     e34:	c7 01       	movw	r24, r14
     e36:	e1 de       	rcall	.-574    	; 0xbfa <prvUnlockQueue>
     e38:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <xTaskResumeAll>
     e3c:	81 11       	cpse	r24, r1
     e3e:	a0 cf       	rjmp	.-192    	; 0xd80 <xQueueGenericSend+0x2e>
     e40:	70 dd       	rcall	.-1312   	; 0x922 <vPortYield>
     e42:	9e cf       	rjmp	.-196    	; 0xd80 <xQueueGenericSend+0x2e>
     e44:	c7 01       	movw	r24, r14
     e46:	d9 de       	rcall	.-590    	; 0xbfa <prvUnlockQueue>
     e48:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <xTaskResumeAll>
     e4c:	99 cf       	rjmp	.-206    	; 0xd80 <xQueueGenericSend+0x2e>
     e4e:	c7 01       	movw	r24, r14
     e50:	d4 de       	rcall	.-600    	; 0xbfa <prvUnlockQueue>
     e52:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <xTaskResumeAll>
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	29 96       	adiw	r28, 0x09	; 9
     e5a:	0f b6       	in	r0, 0x3f	; 63
     e5c:	f8 94       	cli
     e5e:	de bf       	out	0x3e, r29	; 62
     e60:	0f be       	out	0x3f, r0	; 63
     e62:	cd bf       	out	0x3d, r28	; 61
     e64:	df 91       	pop	r29
     e66:	cf 91       	pop	r28
     e68:	1f 91       	pop	r17
     e6a:	0f 91       	pop	r16
     e6c:	ff 90       	pop	r15
     e6e:	ef 90       	pop	r14
     e70:	df 90       	pop	r13
     e72:	cf 90       	pop	r12
     e74:	08 95       	ret

00000e76 <prvInitialiseMutex>:
     e76:	0f 93       	push	r16
     e78:	00 97       	sbiw	r24, 0x00	; 0
     e7a:	69 f0       	breq	.+26     	; 0xe96 <prvInitialiseMutex+0x20>
     e7c:	fc 01       	movw	r30, r24
     e7e:	15 82       	std	Z+5, r1	; 0x05
     e80:	14 82       	std	Z+4, r1	; 0x04
     e82:	11 82       	std	Z+1, r1	; 0x01
     e84:	10 82       	st	Z, r1
     e86:	16 82       	std	Z+6, r1	; 0x06
     e88:	00 e0       	ldi	r16, 0x00	; 0
     e8a:	20 e0       	ldi	r18, 0x00	; 0
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	a9 01       	movw	r20, r18
     e90:	60 e0       	ldi	r22, 0x00	; 0
     e92:	70 e0       	ldi	r23, 0x00	; 0
     e94:	5e df       	rcall	.-324    	; 0xd52 <xQueueGenericSend>
     e96:	0f 91       	pop	r16
     e98:	08 95       	ret

00000e9a <xQueueCreateMutex>:
     e9a:	cf 93       	push	r28
     e9c:	df 93       	push	r29
     e9e:	48 2f       	mov	r20, r24
     ea0:	60 e0       	ldi	r22, 0x00	; 0
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	33 df       	rcall	.-410    	; 0xd0c <xQueueGenericCreate>
     ea6:	ec 01       	movw	r28, r24
     ea8:	e6 df       	rcall	.-52     	; 0xe76 <prvInitialiseMutex>
     eaa:	ce 01       	movw	r24, r28
     eac:	df 91       	pop	r29
     eae:	cf 91       	pop	r28
     eb0:	08 95       	ret

00000eb2 <xQueueGenericSendFromISR>:
     eb2:	ef 92       	push	r14
     eb4:	ff 92       	push	r15
     eb6:	0f 93       	push	r16
     eb8:	1f 93       	push	r17
     eba:	cf 93       	push	r28
     ebc:	df 93       	push	r29
     ebe:	8a 01       	movw	r16, r20
     ec0:	fc 01       	movw	r30, r24
     ec2:	56 8d       	ldd	r21, Z+30	; 0x1e
     ec4:	37 8d       	ldd	r19, Z+31	; 0x1f
     ec6:	53 17       	cp	r21, r19
     ec8:	10 f0       	brcs	.+4      	; 0xece <xQueueGenericSendFromISR+0x1c>
     eca:	22 30       	cpi	r18, 0x02	; 2
     ecc:	f9 f4       	brne	.+62     	; 0xf0c <xQueueGenericSendFromISR+0x5a>
     ece:	42 2f       	mov	r20, r18
     ed0:	78 01       	movw	r14, r16
     ed2:	ec 01       	movw	r28, r24
     ed4:	1a a1       	ldd	r17, Y+34	; 0x22
     ed6:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ed8:	ce 01       	movw	r24, r28
     eda:	16 de       	rcall	.-980    	; 0xb08 <prvCopyDataToQueue>
     edc:	1f 3f       	cpi	r17, 0xFF	; 255
     ede:	81 f4       	brne	.+32     	; 0xf00 <xQueueGenericSendFromISR+0x4e>
     ee0:	8b 89       	ldd	r24, Y+19	; 0x13
     ee2:	88 23       	and	r24, r24
     ee4:	a9 f0       	breq	.+42     	; 0xf10 <xQueueGenericSendFromISR+0x5e>
     ee6:	ce 01       	movw	r24, r28
     ee8:	43 96       	adiw	r24, 0x13	; 19
     eea:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <xTaskRemoveFromEventList>
     eee:	88 23       	and	r24, r24
     ef0:	89 f0       	breq	.+34     	; 0xf14 <xQueueGenericSendFromISR+0x62>
     ef2:	e1 14       	cp	r14, r1
     ef4:	f1 04       	cpc	r15, r1
     ef6:	81 f0       	breq	.+32     	; 0xf18 <xQueueGenericSendFromISR+0x66>
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	f7 01       	movw	r30, r14
     efc:	80 83       	st	Z, r24
     efe:	0d c0       	rjmp	.+26     	; 0xf1a <xQueueGenericSendFromISR+0x68>
     f00:	ff 24       	eor	r15, r15
     f02:	f3 94       	inc	r15
     f04:	f1 0e       	add	r15, r17
     f06:	fa a2       	std	Y+34, r15	; 0x22
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	07 c0       	rjmp	.+14     	; 0xf1a <xQueueGenericSendFromISR+0x68>
     f0c:	80 e0       	ldi	r24, 0x00	; 0
     f0e:	05 c0       	rjmp	.+10     	; 0xf1a <xQueueGenericSendFromISR+0x68>
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	03 c0       	rjmp	.+6      	; 0xf1a <xQueueGenericSendFromISR+0x68>
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	01 c0       	rjmp	.+2      	; 0xf1a <xQueueGenericSendFromISR+0x68>
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	df 91       	pop	r29
     f1c:	cf 91       	pop	r28
     f1e:	1f 91       	pop	r17
     f20:	0f 91       	pop	r16
     f22:	ff 90       	pop	r15
     f24:	ef 90       	pop	r14
     f26:	08 95       	ret

00000f28 <xQueueReceive>:
     f28:	cf 92       	push	r12
     f2a:	df 92       	push	r13
     f2c:	ef 92       	push	r14
     f2e:	ff 92       	push	r15
     f30:	0f 93       	push	r16
     f32:	1f 93       	push	r17
     f34:	cf 93       	push	r28
     f36:	df 93       	push	r29
     f38:	cd b7       	in	r28, 0x3d	; 61
     f3a:	de b7       	in	r29, 0x3e	; 62
     f3c:	29 97       	sbiw	r28, 0x09	; 9
     f3e:	0f b6       	in	r0, 0x3f	; 63
     f40:	f8 94       	cli
     f42:	de bf       	out	0x3e, r29	; 62
     f44:	0f be       	out	0x3f, r0	; 63
     f46:	cd bf       	out	0x3d, r28	; 61
     f48:	8c 01       	movw	r16, r24
     f4a:	6b 01       	movw	r12, r22
     f4c:	2e 83       	std	Y+6, r18	; 0x06
     f4e:	3f 83       	std	Y+7, r19	; 0x07
     f50:	48 87       	std	Y+8, r20	; 0x08
     f52:	59 87       	std	Y+9, r21	; 0x09
     f54:	e1 2c       	mov	r14, r1
     f56:	0f b6       	in	r0, 0x3f	; 63
     f58:	f8 94       	cli
     f5a:	0f 92       	push	r0
     f5c:	f8 01       	movw	r30, r16
     f5e:	f6 8c       	ldd	r15, Z+30	; 0x1e
     f60:	ff 20       	and	r15, r15
     f62:	99 f0       	breq	.+38     	; 0xf8a <xQueueReceive+0x62>
     f64:	b6 01       	movw	r22, r12
     f66:	c8 01       	movw	r24, r16
     f68:	2e de       	rcall	.-932    	; 0xbc6 <prvCopyDataFromQueue>
     f6a:	fa 94       	dec	r15
     f6c:	f8 01       	movw	r30, r16
     f6e:	f6 8e       	std	Z+30, r15	; 0x1e
     f70:	80 85       	ldd	r24, Z+8	; 0x08
     f72:	88 23       	and	r24, r24
     f74:	31 f0       	breq	.+12     	; 0xf82 <xQueueReceive+0x5a>
     f76:	c8 01       	movw	r24, r16
     f78:	08 96       	adiw	r24, 0x08	; 8
     f7a:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <xTaskRemoveFromEventList>
     f7e:	81 11       	cpse	r24, r1
     f80:	d0 dc       	rcall	.-1632   	; 0x922 <vPortYield>
     f82:	0f 90       	pop	r0
     f84:	0f be       	out	0x3f, r0	; 63
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	4f c0       	rjmp	.+158    	; 0x1028 <__EEPROM_REGION_LENGTH__+0x28>
     f8a:	8e 81       	ldd	r24, Y+6	; 0x06
     f8c:	9f 81       	ldd	r25, Y+7	; 0x07
     f8e:	a8 85       	ldd	r26, Y+8	; 0x08
     f90:	b9 85       	ldd	r27, Y+9	; 0x09
     f92:	89 2b       	or	r24, r25
     f94:	8a 2b       	or	r24, r26
     f96:	8b 2b       	or	r24, r27
     f98:	21 f4       	brne	.+8      	; 0xfa2 <xQueueReceive+0x7a>
     f9a:	0f 90       	pop	r0
     f9c:	0f be       	out	0x3f, r0	; 63
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	43 c0       	rjmp	.+134    	; 0x1028 <__EEPROM_REGION_LENGTH__+0x28>
     fa2:	e1 10       	cpse	r14, r1
     fa4:	06 c0       	rjmp	.+12     	; 0xfb2 <xQueueReceive+0x8a>
     fa6:	ce 01       	movw	r24, r28
     fa8:	01 96       	adiw	r24, 0x01	; 1
     faa:	0e 94 49 13 	call	0x2692	; 0x2692 <vTaskInternalSetTimeOutState>
     fae:	ee 24       	eor	r14, r14
     fb0:	e3 94       	inc	r14
     fb2:	0f 90       	pop	r0
     fb4:	0f be       	out	0x3f, r0	; 63
     fb6:	6a d6       	rcall	.+3284   	; 0x1c8c <vTaskSuspendAll>
     fb8:	0f b6       	in	r0, 0x3f	; 63
     fba:	f8 94       	cli
     fbc:	0f 92       	push	r0
     fbe:	f8 01       	movw	r30, r16
     fc0:	81 a1       	ldd	r24, Z+33	; 0x21
     fc2:	8f 3f       	cpi	r24, 0xFF	; 255
     fc4:	09 f4       	brne	.+2      	; 0xfc8 <xQueueReceive+0xa0>
     fc6:	11 a2       	std	Z+33, r1	; 0x21
     fc8:	f8 01       	movw	r30, r16
     fca:	82 a1       	ldd	r24, Z+34	; 0x22
     fcc:	8f 3f       	cpi	r24, 0xFF	; 255
     fce:	09 f4       	brne	.+2      	; 0xfd2 <xQueueReceive+0xaa>
     fd0:	12 a2       	std	Z+34, r1	; 0x22
     fd2:	0f 90       	pop	r0
     fd4:	0f be       	out	0x3f, r0	; 63
     fd6:	be 01       	movw	r22, r28
     fd8:	6a 5f       	subi	r22, 0xFA	; 250
     fda:	7f 4f       	sbci	r23, 0xFF	; 255
     fdc:	ce 01       	movw	r24, r28
     fde:	01 96       	adiw	r24, 0x01	; 1
     fe0:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <xTaskCheckForTimeOut>
     fe4:	81 11       	cpse	r24, r1
     fe6:	17 c0       	rjmp	.+46     	; 0x1016 <__EEPROM_REGION_LENGTH__+0x16>
     fe8:	c8 01       	movw	r24, r16
     fea:	73 dd       	rcall	.-1306   	; 0xad2 <prvIsQueueEmpty>
     fec:	88 23       	and	r24, r24
     fee:	79 f0       	breq	.+30     	; 0x100e <__EEPROM_REGION_LENGTH__+0xe>
     ff0:	4e 81       	ldd	r20, Y+6	; 0x06
     ff2:	5f 81       	ldd	r21, Y+7	; 0x07
     ff4:	68 85       	ldd	r22, Y+8	; 0x08
     ff6:	79 85       	ldd	r23, Y+9	; 0x09
     ff8:	c8 01       	movw	r24, r16
     ffa:	43 96       	adiw	r24, 0x13	; 19
     ffc:	0e 94 47 11 	call	0x228e	; 0x228e <vTaskPlaceOnEventList>
    1000:	c8 01       	movw	r24, r16
    1002:	fb dd       	rcall	.-1034   	; 0xbfa <prvUnlockQueue>
    1004:	83 d7       	rcall	.+3846   	; 0x1f0c <xTaskResumeAll>
    1006:	81 11       	cpse	r24, r1
    1008:	a6 cf       	rjmp	.-180    	; 0xf56 <xQueueReceive+0x2e>
    100a:	8b dc       	rcall	.-1770   	; 0x922 <vPortYield>
    100c:	a4 cf       	rjmp	.-184    	; 0xf56 <xQueueReceive+0x2e>
    100e:	c8 01       	movw	r24, r16
    1010:	f4 dd       	rcall	.-1048   	; 0xbfa <prvUnlockQueue>
    1012:	7c d7       	rcall	.+3832   	; 0x1f0c <xTaskResumeAll>
    1014:	a0 cf       	rjmp	.-192    	; 0xf56 <xQueueReceive+0x2e>
    1016:	c8 01       	movw	r24, r16
    1018:	f0 dd       	rcall	.-1056   	; 0xbfa <prvUnlockQueue>
    101a:	78 d7       	rcall	.+3824   	; 0x1f0c <xTaskResumeAll>
    101c:	c8 01       	movw	r24, r16
    101e:	59 dd       	rcall	.-1358   	; 0xad2 <prvIsQueueEmpty>
    1020:	88 23       	and	r24, r24
    1022:	09 f4       	brne	.+2      	; 0x1026 <__EEPROM_REGION_LENGTH__+0x26>
    1024:	98 cf       	rjmp	.-208    	; 0xf56 <xQueueReceive+0x2e>
    1026:	80 e0       	ldi	r24, 0x00	; 0
    1028:	29 96       	adiw	r28, 0x09	; 9
    102a:	0f b6       	in	r0, 0x3f	; 63
    102c:	f8 94       	cli
    102e:	de bf       	out	0x3e, r29	; 62
    1030:	0f be       	out	0x3f, r0	; 63
    1032:	cd bf       	out	0x3d, r28	; 61
    1034:	df 91       	pop	r29
    1036:	cf 91       	pop	r28
    1038:	1f 91       	pop	r17
    103a:	0f 91       	pop	r16
    103c:	ff 90       	pop	r15
    103e:	ef 90       	pop	r14
    1040:	df 90       	pop	r13
    1042:	cf 90       	pop	r12
    1044:	08 95       	ret

00001046 <xQueueSemaphoreTake>:
    1046:	ef 92       	push	r14
    1048:	ff 92       	push	r15
    104a:	0f 93       	push	r16
    104c:	1f 93       	push	r17
    104e:	cf 93       	push	r28
    1050:	df 93       	push	r29
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62
    1056:	29 97       	sbiw	r28, 0x09	; 9
    1058:	0f b6       	in	r0, 0x3f	; 63
    105a:	f8 94       	cli
    105c:	de bf       	out	0x3e, r29	; 62
    105e:	0f be       	out	0x3f, r0	; 63
    1060:	cd bf       	out	0x3d, r28	; 61
    1062:	8c 01       	movw	r16, r24
    1064:	4e 83       	std	Y+6, r20	; 0x06
    1066:	5f 83       	std	Y+7, r21	; 0x07
    1068:	68 87       	std	Y+8, r22	; 0x08
    106a:	79 87       	std	Y+9, r23	; 0x09
    106c:	e1 2c       	mov	r14, r1
    106e:	f1 2c       	mov	r15, r1
    1070:	0f b6       	in	r0, 0x3f	; 63
    1072:	f8 94       	cli
    1074:	0f 92       	push	r0
    1076:	f8 01       	movw	r30, r16
    1078:	86 8d       	ldd	r24, Z+30	; 0x1e
    107a:	88 23       	and	r24, r24
    107c:	c9 f0       	breq	.+50     	; 0x10b0 <xQueueSemaphoreTake+0x6a>
    107e:	81 50       	subi	r24, 0x01	; 1
    1080:	86 8f       	std	Z+30, r24	; 0x1e
    1082:	80 81       	ld	r24, Z
    1084:	91 81       	ldd	r25, Z+1	; 0x01
    1086:	89 2b       	or	r24, r25
    1088:	29 f4       	brne	.+10     	; 0x1094 <xQueueSemaphoreTake+0x4e>
    108a:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <pvTaskIncrementMutexHeldCount>
    108e:	f8 01       	movw	r30, r16
    1090:	95 83       	std	Z+5, r25	; 0x05
    1092:	84 83       	std	Z+4, r24	; 0x04
    1094:	f8 01       	movw	r30, r16
    1096:	80 85       	ldd	r24, Z+8	; 0x08
    1098:	88 23       	and	r24, r24
    109a:	31 f0       	breq	.+12     	; 0x10a8 <xQueueSemaphoreTake+0x62>
    109c:	c8 01       	movw	r24, r16
    109e:	08 96       	adiw	r24, 0x08	; 8
    10a0:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <xTaskRemoveFromEventList>
    10a4:	81 11       	cpse	r24, r1
    10a6:	3d dc       	rcall	.-1926   	; 0x922 <vPortYield>
    10a8:	0f 90       	pop	r0
    10aa:	0f be       	out	0x3f, r0	; 63
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	6f c0       	rjmp	.+222    	; 0x118e <xQueueSemaphoreTake+0x148>
    10b0:	8e 81       	ldd	r24, Y+6	; 0x06
    10b2:	9f 81       	ldd	r25, Y+7	; 0x07
    10b4:	a8 85       	ldd	r26, Y+8	; 0x08
    10b6:	b9 85       	ldd	r27, Y+9	; 0x09
    10b8:	89 2b       	or	r24, r25
    10ba:	8a 2b       	or	r24, r26
    10bc:	8b 2b       	or	r24, r27
    10be:	21 f4       	brne	.+8      	; 0x10c8 <xQueueSemaphoreTake+0x82>
    10c0:	0f 90       	pop	r0
    10c2:	0f be       	out	0x3f, r0	; 63
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	63 c0       	rjmp	.+198    	; 0x118e <xQueueSemaphoreTake+0x148>
    10c8:	f1 10       	cpse	r15, r1
    10ca:	06 c0       	rjmp	.+12     	; 0x10d8 <xQueueSemaphoreTake+0x92>
    10cc:	ce 01       	movw	r24, r28
    10ce:	01 96       	adiw	r24, 0x01	; 1
    10d0:	0e 94 49 13 	call	0x2692	; 0x2692 <vTaskInternalSetTimeOutState>
    10d4:	ff 24       	eor	r15, r15
    10d6:	f3 94       	inc	r15
    10d8:	0f 90       	pop	r0
    10da:	0f be       	out	0x3f, r0	; 63
    10dc:	d7 d5       	rcall	.+2990   	; 0x1c8c <vTaskSuspendAll>
    10de:	0f b6       	in	r0, 0x3f	; 63
    10e0:	f8 94       	cli
    10e2:	0f 92       	push	r0
    10e4:	f8 01       	movw	r30, r16
    10e6:	81 a1       	ldd	r24, Z+33	; 0x21
    10e8:	8f 3f       	cpi	r24, 0xFF	; 255
    10ea:	09 f4       	brne	.+2      	; 0x10ee <xQueueSemaphoreTake+0xa8>
    10ec:	11 a2       	std	Z+33, r1	; 0x21
    10ee:	f8 01       	movw	r30, r16
    10f0:	82 a1       	ldd	r24, Z+34	; 0x22
    10f2:	8f 3f       	cpi	r24, 0xFF	; 255
    10f4:	09 f4       	brne	.+2      	; 0x10f8 <xQueueSemaphoreTake+0xb2>
    10f6:	12 a2       	std	Z+34, r1	; 0x22
    10f8:	0f 90       	pop	r0
    10fa:	0f be       	out	0x3f, r0	; 63
    10fc:	be 01       	movw	r22, r28
    10fe:	6a 5f       	subi	r22, 0xFA	; 250
    1100:	7f 4f       	sbci	r23, 0xFF	; 255
    1102:	ce 01       	movw	r24, r28
    1104:	01 96       	adiw	r24, 0x01	; 1
    1106:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <xTaskCheckForTimeOut>
    110a:	81 11       	cpse	r24, r1
    110c:	26 c0       	rjmp	.+76     	; 0x115a <xQueueSemaphoreTake+0x114>
    110e:	c8 01       	movw	r24, r16
    1110:	e0 dc       	rcall	.-1600   	; 0xad2 <prvIsQueueEmpty>
    1112:	88 23       	and	r24, r24
    1114:	f1 f0       	breq	.+60     	; 0x1152 <xQueueSemaphoreTake+0x10c>
    1116:	f8 01       	movw	r30, r16
    1118:	80 81       	ld	r24, Z
    111a:	91 81       	ldd	r25, Z+1	; 0x01
    111c:	89 2b       	or	r24, r25
    111e:	51 f4       	brne	.+20     	; 0x1134 <xQueueSemaphoreTake+0xee>
    1120:	0f b6       	in	r0, 0x3f	; 63
    1122:	f8 94       	cli
    1124:	0f 92       	push	r0
    1126:	84 81       	ldd	r24, Z+4	; 0x04
    1128:	95 81       	ldd	r25, Z+5	; 0x05
    112a:	0e 94 d7 13 	call	0x27ae	; 0x27ae <xTaskPriorityInherit>
    112e:	e8 2e       	mov	r14, r24
    1130:	0f 90       	pop	r0
    1132:	0f be       	out	0x3f, r0	; 63
    1134:	4e 81       	ldd	r20, Y+6	; 0x06
    1136:	5f 81       	ldd	r21, Y+7	; 0x07
    1138:	68 85       	ldd	r22, Y+8	; 0x08
    113a:	79 85       	ldd	r23, Y+9	; 0x09
    113c:	c8 01       	movw	r24, r16
    113e:	43 96       	adiw	r24, 0x13	; 19
    1140:	0e 94 47 11 	call	0x228e	; 0x228e <vTaskPlaceOnEventList>
    1144:	c8 01       	movw	r24, r16
    1146:	59 dd       	rcall	.-1358   	; 0xbfa <prvUnlockQueue>
    1148:	e1 d6       	rcall	.+3522   	; 0x1f0c <xTaskResumeAll>
    114a:	81 11       	cpse	r24, r1
    114c:	91 cf       	rjmp	.-222    	; 0x1070 <xQueueSemaphoreTake+0x2a>
    114e:	e9 db       	rcall	.-2094   	; 0x922 <vPortYield>
    1150:	8f cf       	rjmp	.-226    	; 0x1070 <xQueueSemaphoreTake+0x2a>
    1152:	c8 01       	movw	r24, r16
    1154:	52 dd       	rcall	.-1372   	; 0xbfa <prvUnlockQueue>
    1156:	da d6       	rcall	.+3508   	; 0x1f0c <xTaskResumeAll>
    1158:	8b cf       	rjmp	.-234    	; 0x1070 <xQueueSemaphoreTake+0x2a>
    115a:	c8 01       	movw	r24, r16
    115c:	4e dd       	rcall	.-1380   	; 0xbfa <prvUnlockQueue>
    115e:	d6 d6       	rcall	.+3500   	; 0x1f0c <xTaskResumeAll>
    1160:	c8 01       	movw	r24, r16
    1162:	b7 dc       	rcall	.-1682   	; 0xad2 <prvIsQueueEmpty>
    1164:	88 23       	and	r24, r24
    1166:	09 f4       	brne	.+2      	; 0x116a <xQueueSemaphoreTake+0x124>
    1168:	83 cf       	rjmp	.-250    	; 0x1070 <xQueueSemaphoreTake+0x2a>
    116a:	ee 20       	and	r14, r14
    116c:	79 f0       	breq	.+30     	; 0x118c <xQueueSemaphoreTake+0x146>
    116e:	0f b6       	in	r0, 0x3f	; 63
    1170:	f8 94       	cli
    1172:	0f 92       	push	r0
    1174:	c8 01       	movw	r24, r16
    1176:	9d dc       	rcall	.-1734   	; 0xab2 <prvGetDisinheritPriorityAfterTimeout>
    1178:	68 2f       	mov	r22, r24
    117a:	f8 01       	movw	r30, r16
    117c:	84 81       	ldd	r24, Z+4	; 0x04
    117e:	95 81       	ldd	r25, Z+5	; 0x05
    1180:	0e 94 b9 14 	call	0x2972	; 0x2972 <vTaskPriorityDisinheritAfterTimeout>
    1184:	0f 90       	pop	r0
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	80 e0       	ldi	r24, 0x00	; 0
    118a:	01 c0       	rjmp	.+2      	; 0x118e <xQueueSemaphoreTake+0x148>
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	29 96       	adiw	r28, 0x09	; 9
    1190:	0f b6       	in	r0, 0x3f	; 63
    1192:	f8 94       	cli
    1194:	de bf       	out	0x3e, r29	; 62
    1196:	0f be       	out	0x3f, r0	; 63
    1198:	cd bf       	out	0x3d, r28	; 61
    119a:	df 91       	pop	r29
    119c:	cf 91       	pop	r28
    119e:	1f 91       	pop	r17
    11a0:	0f 91       	pop	r16
    11a2:	ff 90       	pop	r15
    11a4:	ef 90       	pop	r14
    11a6:	08 95       	ret

000011a8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    11a8:	cf 93       	push	r28
    11aa:	df 93       	push	r29
    11ac:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    11ae:	0f b6       	in	r0, 0x3f	; 63
    11b0:	f8 94       	cli
    11b2:	0f 92       	push	r0
    11b4:	89 a1       	ldd	r24, Y+33	; 0x21
    11b6:	8f 3f       	cpi	r24, 0xFF	; 255
    11b8:	09 f4       	brne	.+2      	; 0x11bc <vQueueWaitForMessageRestricted+0x14>
    11ba:	19 a2       	std	Y+33, r1	; 0x21
    11bc:	8a a1       	ldd	r24, Y+34	; 0x22
    11be:	8f 3f       	cpi	r24, 0xFF	; 255
    11c0:	09 f4       	brne	.+2      	; 0x11c4 <vQueueWaitForMessageRestricted+0x1c>
    11c2:	1a a2       	std	Y+34, r1	; 0x22
    11c4:	0f 90       	pop	r0
    11c6:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    11c8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11ca:	81 11       	cpse	r24, r1
    11cc:	04 c0       	rjmp	.+8      	; 0x11d6 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    11ce:	ce 01       	movw	r24, r28
    11d0:	43 96       	adiw	r24, 0x13	; 19
    11d2:	0e 94 a8 11 	call	0x2350	; 0x2350 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    11d6:	ce 01       	movw	r24, r28
    11d8:	10 dd       	rcall	.-1504   	; 0xbfa <prvUnlockQueue>
    }
    11da:	df 91       	pop	r29
    11dc:	cf 91       	pop	r28
    11de:	08 95       	ret

000011e0 <prvBytesInBuffer>:
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    11e0:	fc 01       	movw	r30, r24
    11e2:	44 81       	ldd	r20, Z+4	; 0x04
    11e4:	55 81       	ldd	r21, Z+5	; 0x05
    11e6:	22 81       	ldd	r18, Z+2	; 0x02
    11e8:	33 81       	ldd	r19, Z+3	; 0x03
    11ea:	24 0f       	add	r18, r20
    11ec:	35 1f       	adc	r19, r21
    11ee:	80 81       	ld	r24, Z
    11f0:	91 81       	ldd	r25, Z+1	; 0x01
    11f2:	b9 01       	movw	r22, r18
    11f4:	68 1b       	sub	r22, r24
    11f6:	79 0b       	sbc	r23, r25
    11f8:	cb 01       	movw	r24, r22
    11fa:	64 17       	cp	r22, r20
    11fc:	75 07       	cpc	r23, r21
    11fe:	10 f0       	brcs	.+4      	; 0x1204 <prvBytesInBuffer+0x24>
    1200:	84 1b       	sub	r24, r20
    1202:	95 0b       	sbc	r25, r21
    1204:	08 95       	ret

00001206 <prvInitialiseNewStreamBuffer>:
    1206:	0f 93       	push	r16
    1208:	fc 01       	movw	r30, r24
    120a:	8f e0       	ldi	r24, 0x0F	; 15
    120c:	df 01       	movw	r26, r30
    120e:	1d 92       	st	X+, r1
    1210:	8a 95       	dec	r24
    1212:	e9 f7       	brne	.-6      	; 0x120e <prvInitialiseNewStreamBuffer+0x8>
    1214:	75 87       	std	Z+13, r23	; 0x0d
    1216:	64 87       	std	Z+12, r22	; 0x0c
    1218:	55 83       	std	Z+5, r21	; 0x05
    121a:	44 83       	std	Z+4, r20	; 0x04
    121c:	37 83       	std	Z+7, r19	; 0x07
    121e:	26 83       	std	Z+6, r18	; 0x06
    1220:	06 87       	std	Z+14, r16	; 0x0e
    1222:	0f 91       	pop	r16
    1224:	08 95       	ret

00001226 <prvWriteBytesToBuffer>:
    1226:	af 92       	push	r10
    1228:	bf 92       	push	r11
    122a:	cf 92       	push	r12
    122c:	df 92       	push	r13
    122e:	ef 92       	push	r14
    1230:	ff 92       	push	r15
    1232:	0f 93       	push	r16
    1234:	1f 93       	push	r17
    1236:	cf 93       	push	r28
    1238:	df 93       	push	r29
    123a:	6c 01       	movw	r12, r24
    123c:	5b 01       	movw	r10, r22
    123e:	7a 01       	movw	r14, r20
    1240:	fc 01       	movw	r30, r24
    1242:	c2 81       	ldd	r28, Z+2	; 0x02
    1244:	d3 81       	ldd	r29, Z+3	; 0x03
    1246:	04 81       	ldd	r16, Z+4	; 0x04
    1248:	15 81       	ldd	r17, Z+5	; 0x05
    124a:	0c 1b       	sub	r16, r28
    124c:	1d 0b       	sbc	r17, r29
    124e:	40 17       	cp	r20, r16
    1250:	51 07       	cpc	r21, r17
    1252:	08 f4       	brcc	.+2      	; 0x1256 <prvWriteBytesToBuffer+0x30>
    1254:	8a 01       	movw	r16, r20
    1256:	f6 01       	movw	r30, r12
    1258:	84 85       	ldd	r24, Z+12	; 0x0c
    125a:	95 85       	ldd	r25, Z+13	; 0x0d
    125c:	a8 01       	movw	r20, r16
    125e:	b5 01       	movw	r22, r10
    1260:	8c 0f       	add	r24, r28
    1262:	9d 1f       	adc	r25, r29
    1264:	0e 94 8d 2f 	call	0x5f1a	; 0x5f1a <memcpy>
    1268:	0e 15       	cp	r16, r14
    126a:	1f 05       	cpc	r17, r15
    126c:	58 f4       	brcc	.+22     	; 0x1284 <prvWriteBytesToBuffer+0x5e>
    126e:	a7 01       	movw	r20, r14
    1270:	40 1b       	sub	r20, r16
    1272:	51 0b       	sbc	r21, r17
    1274:	b5 01       	movw	r22, r10
    1276:	60 0f       	add	r22, r16
    1278:	71 1f       	adc	r23, r17
    127a:	f6 01       	movw	r30, r12
    127c:	84 85       	ldd	r24, Z+12	; 0x0c
    127e:	95 85       	ldd	r25, Z+13	; 0x0d
    1280:	0e 94 8d 2f 	call	0x5f1a	; 0x5f1a <memcpy>
    1284:	ce 01       	movw	r24, r28
    1286:	8e 0d       	add	r24, r14
    1288:	9f 1d       	adc	r25, r15
    128a:	f6 01       	movw	r30, r12
    128c:	24 81       	ldd	r18, Z+4	; 0x04
    128e:	35 81       	ldd	r19, Z+5	; 0x05
    1290:	82 17       	cp	r24, r18
    1292:	93 07       	cpc	r25, r19
    1294:	10 f0       	brcs	.+4      	; 0x129a <prvWriteBytesToBuffer+0x74>
    1296:	82 1b       	sub	r24, r18
    1298:	93 0b       	sbc	r25, r19
    129a:	f6 01       	movw	r30, r12
    129c:	93 83       	std	Z+3, r25	; 0x03
    129e:	82 83       	std	Z+2, r24	; 0x02
    12a0:	c7 01       	movw	r24, r14
    12a2:	df 91       	pop	r29
    12a4:	cf 91       	pop	r28
    12a6:	1f 91       	pop	r17
    12a8:	0f 91       	pop	r16
    12aa:	ff 90       	pop	r15
    12ac:	ef 90       	pop	r14
    12ae:	df 90       	pop	r13
    12b0:	cf 90       	pop	r12
    12b2:	bf 90       	pop	r11
    12b4:	af 90       	pop	r10
    12b6:	08 95       	ret

000012b8 <prvWriteMessageToBuffer>:
    12b8:	cf 92       	push	r12
    12ba:	df 92       	push	r13
    12bc:	ef 92       	push	r14
    12be:	ff 92       	push	r15
    12c0:	0f 93       	push	r16
    12c2:	1f 93       	push	r17
    12c4:	cf 93       	push	r28
    12c6:	df 93       	push	r29
    12c8:	1f 92       	push	r1
    12ca:	1f 92       	push	r1
    12cc:	cd b7       	in	r28, 0x3d	; 61
    12ce:	de b7       	in	r29, 0x3e	; 62
    12d0:	7c 01       	movw	r14, r24
    12d2:	6b 01       	movw	r12, r22
    12d4:	5a 83       	std	Y+2, r21	; 0x02
    12d6:	49 83       	std	Y+1, r20	; 0x01
    12d8:	21 15       	cp	r18, r1
    12da:	31 05       	cpc	r19, r1
    12dc:	c1 f0       	breq	.+48     	; 0x130e <prvWriteMessageToBuffer+0x56>
    12de:	fc 01       	movw	r30, r24
    12e0:	86 85       	ldd	r24, Z+14	; 0x0e
    12e2:	80 fd       	sbrc	r24, 0
    12e4:	08 c0       	rjmp	.+16     	; 0x12f6 <prvWriteMessageToBuffer+0x3e>
    12e6:	42 17       	cp	r20, r18
    12e8:	53 07       	cpc	r21, r19
    12ea:	08 f4       	brcc	.+2      	; 0x12ee <prvWriteMessageToBuffer+0x36>
    12ec:	9a 01       	movw	r18, r20
    12ee:	3a 83       	std	Y+2, r19	; 0x02
    12f0:	29 83       	std	Y+1, r18	; 0x01
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	0f c0       	rjmp	.+30     	; 0x1314 <prvWriteMessageToBuffer+0x5c>
    12f6:	20 17       	cp	r18, r16
    12f8:	31 07       	cpc	r19, r17
    12fa:	58 f0       	brcs	.+22     	; 0x1312 <prvWriteMessageToBuffer+0x5a>
    12fc:	42 e0       	ldi	r20, 0x02	; 2
    12fe:	50 e0       	ldi	r21, 0x00	; 0
    1300:	be 01       	movw	r22, r28
    1302:	6f 5f       	subi	r22, 0xFF	; 255
    1304:	7f 4f       	sbci	r23, 0xFF	; 255
    1306:	c7 01       	movw	r24, r14
    1308:	8e df       	rcall	.-228    	; 0x1226 <prvWriteBytesToBuffer>
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	03 c0       	rjmp	.+6      	; 0x1314 <prvWriteMessageToBuffer+0x5c>
    130e:	80 e0       	ldi	r24, 0x00	; 0
    1310:	01 c0       	rjmp	.+2      	; 0x1314 <prvWriteMessageToBuffer+0x5c>
    1312:	80 e0       	ldi	r24, 0x00	; 0
    1314:	88 23       	and	r24, r24
    1316:	31 f0       	breq	.+12     	; 0x1324 <prvWriteMessageToBuffer+0x6c>
    1318:	49 81       	ldd	r20, Y+1	; 0x01
    131a:	5a 81       	ldd	r21, Y+2	; 0x02
    131c:	b6 01       	movw	r22, r12
    131e:	c7 01       	movw	r24, r14
    1320:	82 df       	rcall	.-252    	; 0x1226 <prvWriteBytesToBuffer>
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <prvWriteMessageToBuffer+0x70>
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	0f 90       	pop	r0
    132a:	0f 90       	pop	r0
    132c:	df 91       	pop	r29
    132e:	cf 91       	pop	r28
    1330:	1f 91       	pop	r17
    1332:	0f 91       	pop	r16
    1334:	ff 90       	pop	r15
    1336:	ef 90       	pop	r14
    1338:	df 90       	pop	r13
    133a:	cf 90       	pop	r12
    133c:	08 95       	ret

0000133e <prvReadBytesFromBuffer>:
    133e:	af 92       	push	r10
    1340:	bf 92       	push	r11
    1342:	cf 92       	push	r12
    1344:	df 92       	push	r13
    1346:	ef 92       	push	r14
    1348:	ff 92       	push	r15
    134a:	0f 93       	push	r16
    134c:	1f 93       	push	r17
    134e:	cf 93       	push	r28
    1350:	df 93       	push	r29
    1352:	7c 01       	movw	r14, r24
    1354:	5b 01       	movw	r10, r22
    1356:	e9 01       	movw	r28, r18
    1358:	42 17       	cp	r20, r18
    135a:	53 07       	cpc	r21, r19
    135c:	08 f4       	brcc	.+2      	; 0x1360 <prvReadBytesFromBuffer+0x22>
    135e:	ea 01       	movw	r28, r20
    1360:	20 97       	sbiw	r28, 0x00	; 0
    1362:	81 f1       	breq	.+96     	; 0x13c4 <prvReadBytesFromBuffer+0x86>
    1364:	f7 01       	movw	r30, r14
    1366:	00 81       	ld	r16, Z
    1368:	11 81       	ldd	r17, Z+1	; 0x01
    136a:	84 81       	ldd	r24, Z+4	; 0x04
    136c:	95 81       	ldd	r25, Z+5	; 0x05
    136e:	80 1b       	sub	r24, r16
    1370:	91 0b       	sbc	r25, r17
    1372:	6e 01       	movw	r12, r28
    1374:	8c 17       	cp	r24, r28
    1376:	9d 07       	cpc	r25, r29
    1378:	08 f4       	brcc	.+2      	; 0x137c <prvReadBytesFromBuffer+0x3e>
    137a:	6c 01       	movw	r12, r24
    137c:	f7 01       	movw	r30, r14
    137e:	64 85       	ldd	r22, Z+12	; 0x0c
    1380:	75 85       	ldd	r23, Z+13	; 0x0d
    1382:	60 0f       	add	r22, r16
    1384:	71 1f       	adc	r23, r17
    1386:	a6 01       	movw	r20, r12
    1388:	c5 01       	movw	r24, r10
    138a:	0e 94 8d 2f 	call	0x5f1a	; 0x5f1a <memcpy>
    138e:	cc 16       	cp	r12, r28
    1390:	dd 06       	cpc	r13, r29
    1392:	58 f4       	brcc	.+22     	; 0x13aa <prvReadBytesFromBuffer+0x6c>
    1394:	ae 01       	movw	r20, r28
    1396:	4c 19       	sub	r20, r12
    1398:	5d 09       	sbc	r21, r13
    139a:	f7 01       	movw	r30, r14
    139c:	64 85       	ldd	r22, Z+12	; 0x0c
    139e:	75 85       	ldd	r23, Z+13	; 0x0d
    13a0:	c5 01       	movw	r24, r10
    13a2:	8c 0d       	add	r24, r12
    13a4:	9d 1d       	adc	r25, r13
    13a6:	0e 94 8d 2f 	call	0x5f1a	; 0x5f1a <memcpy>
    13aa:	0c 0f       	add	r16, r28
    13ac:	1d 1f       	adc	r17, r29
    13ae:	f7 01       	movw	r30, r14
    13b0:	84 81       	ldd	r24, Z+4	; 0x04
    13b2:	95 81       	ldd	r25, Z+5	; 0x05
    13b4:	08 17       	cp	r16, r24
    13b6:	19 07       	cpc	r17, r25
    13b8:	10 f0       	brcs	.+4      	; 0x13be <prvReadBytesFromBuffer+0x80>
    13ba:	08 1b       	sub	r16, r24
    13bc:	19 0b       	sbc	r17, r25
    13be:	f7 01       	movw	r30, r14
    13c0:	11 83       	std	Z+1, r17	; 0x01
    13c2:	00 83       	st	Z, r16
    13c4:	ce 01       	movw	r24, r28
    13c6:	df 91       	pop	r29
    13c8:	cf 91       	pop	r28
    13ca:	1f 91       	pop	r17
    13cc:	0f 91       	pop	r16
    13ce:	ff 90       	pop	r15
    13d0:	ef 90       	pop	r14
    13d2:	df 90       	pop	r13
    13d4:	cf 90       	pop	r12
    13d6:	bf 90       	pop	r11
    13d8:	af 90       	pop	r10
    13da:	08 95       	ret

000013dc <prvReadMessageFromBuffer>:
    13dc:	6f 92       	push	r6
    13de:	7f 92       	push	r7
    13e0:	8f 92       	push	r8
    13e2:	9f 92       	push	r9
    13e4:	af 92       	push	r10
    13e6:	bf 92       	push	r11
    13e8:	cf 92       	push	r12
    13ea:	df 92       	push	r13
    13ec:	ef 92       	push	r14
    13ee:	ff 92       	push	r15
    13f0:	0f 93       	push	r16
    13f2:	1f 93       	push	r17
    13f4:	cf 93       	push	r28
    13f6:	df 93       	push	r29
    13f8:	1f 92       	push	r1
    13fa:	1f 92       	push	r1
    13fc:	cd b7       	in	r28, 0x3d	; 61
    13fe:	de b7       	in	r29, 0x3e	; 62
    1400:	6c 01       	movw	r12, r24
    1402:	4b 01       	movw	r8, r22
    1404:	5a 01       	movw	r10, r20
    1406:	79 01       	movw	r14, r18
    1408:	01 15       	cp	r16, r1
    140a:	11 05       	cpc	r17, r1
    140c:	b1 f0       	breq	.+44     	; 0x143a <prvReadMessageFromBuffer+0x5e>
    140e:	fc 01       	movw	r30, r24
    1410:	60 80       	ld	r6, Z
    1412:	71 80       	ldd	r7, Z+1	; 0x01
    1414:	a8 01       	movw	r20, r16
    1416:	be 01       	movw	r22, r28
    1418:	6f 5f       	subi	r22, 0xFF	; 255
    141a:	7f 4f       	sbci	r23, 0xFF	; 255
    141c:	90 df       	rcall	.-224    	; 0x133e <prvReadBytesFromBuffer>
    141e:	89 81       	ldd	r24, Y+1	; 0x01
    1420:	9a 81       	ldd	r25, Y+2	; 0x02
    1422:	e0 1a       	sub	r14, r16
    1424:	f1 0a       	sbc	r15, r17
    1426:	a8 16       	cp	r10, r24
    1428:	b9 06       	cpc	r11, r25
    142a:	30 f4       	brcc	.+12     	; 0x1438 <prvReadMessageFromBuffer+0x5c>
    142c:	f6 01       	movw	r30, r12
    142e:	71 82       	std	Z+1, r7	; 0x01
    1430:	60 82       	st	Z, r6
    1432:	a1 2c       	mov	r10, r1
    1434:	b1 2c       	mov	r11, r1
    1436:	01 c0       	rjmp	.+2      	; 0x143a <prvReadMessageFromBuffer+0x5e>
    1438:	5c 01       	movw	r10, r24
    143a:	97 01       	movw	r18, r14
    143c:	a5 01       	movw	r20, r10
    143e:	b4 01       	movw	r22, r8
    1440:	c6 01       	movw	r24, r12
    1442:	7d df       	rcall	.-262    	; 0x133e <prvReadBytesFromBuffer>
    1444:	0f 90       	pop	r0
    1446:	0f 90       	pop	r0
    1448:	df 91       	pop	r29
    144a:	cf 91       	pop	r28
    144c:	1f 91       	pop	r17
    144e:	0f 91       	pop	r16
    1450:	ff 90       	pop	r15
    1452:	ef 90       	pop	r14
    1454:	df 90       	pop	r13
    1456:	cf 90       	pop	r12
    1458:	bf 90       	pop	r11
    145a:	af 90       	pop	r10
    145c:	9f 90       	pop	r9
    145e:	8f 90       	pop	r8
    1460:	7f 90       	pop	r7
    1462:	6f 90       	pop	r6
    1464:	08 95       	ret

00001466 <xStreamBufferReset>:
    1466:	0f 93       	push	r16
    1468:	0f b6       	in	r0, 0x3f	; 63
    146a:	f8 94       	cli
    146c:	0f 92       	push	r0
    146e:	fc 01       	movw	r30, r24
    1470:	20 85       	ldd	r18, Z+8	; 0x08
    1472:	31 85       	ldd	r19, Z+9	; 0x09
    1474:	23 2b       	or	r18, r19
    1476:	71 f4       	brne	.+28     	; 0x1494 <xStreamBufferReset+0x2e>
    1478:	22 85       	ldd	r18, Z+10	; 0x0a
    147a:	33 85       	ldd	r19, Z+11	; 0x0b
    147c:	23 2b       	or	r18, r19
    147e:	61 f4       	brne	.+24     	; 0x1498 <xStreamBufferReset+0x32>
    1480:	26 81       	ldd	r18, Z+6	; 0x06
    1482:	37 81       	ldd	r19, Z+7	; 0x07
    1484:	44 81       	ldd	r20, Z+4	; 0x04
    1486:	55 81       	ldd	r21, Z+5	; 0x05
    1488:	64 85       	ldd	r22, Z+12	; 0x0c
    148a:	75 85       	ldd	r23, Z+13	; 0x0d
    148c:	06 85       	ldd	r16, Z+14	; 0x0e
    148e:	bb de       	rcall	.-650    	; 0x1206 <prvInitialiseNewStreamBuffer>
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	03 c0       	rjmp	.+6      	; 0x149a <xStreamBufferReset+0x34>
    1494:	80 e0       	ldi	r24, 0x00	; 0
    1496:	01 c0       	rjmp	.+2      	; 0x149a <xStreamBufferReset+0x34>
    1498:	80 e0       	ldi	r24, 0x00	; 0
    149a:	0f 90       	pop	r0
    149c:	0f be       	out	0x3f, r0	; 63
    149e:	0f 91       	pop	r16
    14a0:	08 95       	ret

000014a2 <xStreamBufferSpacesAvailable>:
    14a2:	fc 01       	movw	r30, r24
    14a4:	24 81       	ldd	r18, Z+4	; 0x04
    14a6:	35 81       	ldd	r19, Z+5	; 0x05
    14a8:	80 81       	ld	r24, Z
    14aa:	91 81       	ldd	r25, Z+1	; 0x01
    14ac:	82 0f       	add	r24, r18
    14ae:	93 1f       	adc	r25, r19
    14b0:	42 81       	ldd	r20, Z+2	; 0x02
    14b2:	53 81       	ldd	r21, Z+3	; 0x03
    14b4:	84 1b       	sub	r24, r20
    14b6:	95 0b       	sbc	r25, r21
    14b8:	01 97       	sbiw	r24, 0x01	; 1
    14ba:	82 17       	cp	r24, r18
    14bc:	93 07       	cpc	r25, r19
    14be:	10 f0       	brcs	.+4      	; 0x14c4 <xStreamBufferSpacesAvailable+0x22>
    14c0:	82 1b       	sub	r24, r18
    14c2:	93 0b       	sbc	r25, r19
    14c4:	08 95       	ret

000014c6 <xStreamBufferSend>:
    14c6:	2f 92       	push	r2
    14c8:	3f 92       	push	r3
    14ca:	4f 92       	push	r4
    14cc:	5f 92       	push	r5
    14ce:	6f 92       	push	r6
    14d0:	7f 92       	push	r7
    14d2:	8f 92       	push	r8
    14d4:	9f 92       	push	r9
    14d6:	af 92       	push	r10
    14d8:	bf 92       	push	r11
    14da:	cf 92       	push	r12
    14dc:	df 92       	push	r13
    14de:	ef 92       	push	r14
    14e0:	ff 92       	push	r15
    14e2:	0f 93       	push	r16
    14e4:	1f 93       	push	r17
    14e6:	cf 93       	push	r28
    14e8:	df 93       	push	r29
    14ea:	cd b7       	in	r28, 0x3d	; 61
    14ec:	de b7       	in	r29, 0x3e	; 62
    14ee:	2b 97       	sbiw	r28, 0x0b	; 11
    14f0:	0f b6       	in	r0, 0x3f	; 63
    14f2:	f8 94       	cli
    14f4:	de bf       	out	0x3e, r29	; 62
    14f6:	0f be       	out	0x3f, r0	; 63
    14f8:	cd bf       	out	0x3d, r28	; 61
    14fa:	4c 01       	movw	r8, r24
    14fc:	7b 87       	std	Y+11, r23	; 0x0b
    14fe:	6a 87       	std	Y+10, r22	; 0x0a
    1500:	1a 01       	movw	r2, r20
    1502:	0e 83       	std	Y+6, r16	; 0x06
    1504:	1f 83       	std	Y+7, r17	; 0x07
    1506:	28 87       	std	Y+8, r18	; 0x08
    1508:	39 87       	std	Y+9, r19	; 0x09
    150a:	fc 01       	movw	r30, r24
    150c:	84 81       	ldd	r24, Z+4	; 0x04
    150e:	95 81       	ldd	r25, Z+5	; 0x05
    1510:	01 97       	sbiw	r24, 0x01	; 1
    1512:	26 85       	ldd	r18, Z+14	; 0x0e
    1514:	20 ff       	sbrs	r18, 0
    1516:	0c c0       	rjmp	.+24     	; 0x1530 <xStreamBufferSend+0x6a>
    1518:	2a 01       	movw	r4, r20
    151a:	f2 e0       	ldi	r31, 0x02	; 2
    151c:	4f 0e       	add	r4, r31
    151e:	51 1c       	adc	r5, r1
    1520:	84 15       	cp	r24, r4
    1522:	95 05       	cpc	r25, r5
    1524:	58 f4       	brcc	.+22     	; 0x153c <xStreamBufferSend+0x76>
    1526:	1e 82       	std	Y+6, r1	; 0x06
    1528:	1f 82       	std	Y+7, r1	; 0x07
    152a:	18 86       	std	Y+8, r1	; 0x08
    152c:	19 86       	std	Y+9, r1	; 0x09
    152e:	06 c0       	rjmp	.+12     	; 0x153c <xStreamBufferSend+0x76>
    1530:	84 17       	cp	r24, r20
    1532:	95 07       	cpc	r25, r21
    1534:	10 f0       	brcs	.+4      	; 0x153a <xStreamBufferSend+0x74>
    1536:	2a 01       	movw	r4, r20
    1538:	01 c0       	rjmp	.+2      	; 0x153c <xStreamBufferSend+0x76>
    153a:	2c 01       	movw	r4, r24
    153c:	8e 81       	ldd	r24, Y+6	; 0x06
    153e:	9f 81       	ldd	r25, Y+7	; 0x07
    1540:	a8 85       	ldd	r26, Y+8	; 0x08
    1542:	b9 85       	ldd	r27, Y+9	; 0x09
    1544:	89 2b       	or	r24, r25
    1546:	8a 2b       	or	r24, r26
    1548:	8b 2b       	or	r24, r27
    154a:	09 f4       	brne	.+2      	; 0x154e <xStreamBufferSend+0x88>
    154c:	38 c0       	rjmp	.+112    	; 0x15be <xStreamBufferSend+0xf8>
    154e:	ce 01       	movw	r24, r28
    1550:	01 96       	adiw	r24, 0x01	; 1
    1552:	0e 94 33 13 	call	0x2666	; 0x2666 <vTaskSetTimeOutState>
    1556:	0f b6       	in	r0, 0x3f	; 63
    1558:	f8 94       	cli
    155a:	0f 92       	push	r0
    155c:	c4 01       	movw	r24, r8
    155e:	a1 df       	rcall	.-190    	; 0x14a2 <xStreamBufferSpacesAvailable>
    1560:	3c 01       	movw	r6, r24
    1562:	84 15       	cp	r24, r4
    1564:	95 05       	cpc	r25, r5
    1566:	40 f5       	brcc	.+80     	; 0x15b8 <xStreamBufferSend+0xf2>
    1568:	60 e0       	ldi	r22, 0x00	; 0
    156a:	80 e0       	ldi	r24, 0x00	; 0
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <xTaskGenericNotifyStateClear>
    1572:	0e 94 c4 13 	call	0x2788	; 0x2788 <xTaskGetCurrentTaskHandle>
    1576:	f4 01       	movw	r30, r8
    1578:	93 87       	std	Z+11, r25	; 0x0b
    157a:	82 87       	std	Z+10, r24	; 0x0a
    157c:	0f 90       	pop	r0
    157e:	0f be       	out	0x3f, r0	; 63
    1580:	ae 80       	ldd	r10, Y+6	; 0x06
    1582:	bf 80       	ldd	r11, Y+7	; 0x07
    1584:	c8 84       	ldd	r12, Y+8	; 0x08
    1586:	d9 84       	ldd	r13, Y+9	; 0x09
    1588:	e1 2c       	mov	r14, r1
    158a:	f1 2c       	mov	r15, r1
    158c:	00 e0       	ldi	r16, 0x00	; 0
    158e:	10 e0       	ldi	r17, 0x00	; 0
    1590:	98 01       	movw	r18, r16
    1592:	40 e0       	ldi	r20, 0x00	; 0
    1594:	50 e0       	ldi	r21, 0x00	; 0
    1596:	ba 01       	movw	r22, r20
    1598:	80 e0       	ldi	r24, 0x00	; 0
    159a:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <xTaskGenericNotifyWait>
    159e:	f4 01       	movw	r30, r8
    15a0:	13 86       	std	Z+11, r1	; 0x0b
    15a2:	12 86       	std	Z+10, r1	; 0x0a
    15a4:	be 01       	movw	r22, r28
    15a6:	6a 5f       	subi	r22, 0xFA	; 250
    15a8:	7f 4f       	sbci	r23, 0xFF	; 255
    15aa:	ce 01       	movw	r24, r28
    15ac:	01 96       	adiw	r24, 0x01	; 1
    15ae:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <xTaskCheckForTimeOut>
    15b2:	88 23       	and	r24, r24
    15b4:	81 f2       	breq	.-96     	; 0x1556 <xStreamBufferSend+0x90>
    15b6:	05 c0       	rjmp	.+10     	; 0x15c2 <xStreamBufferSend+0xfc>
    15b8:	0f 90       	pop	r0
    15ba:	0f be       	out	0x3f, r0	; 63
    15bc:	02 c0       	rjmp	.+4      	; 0x15c2 <xStreamBufferSend+0xfc>
    15be:	61 2c       	mov	r6, r1
    15c0:	71 2c       	mov	r7, r1
    15c2:	61 14       	cp	r6, r1
    15c4:	71 04       	cpc	r7, r1
    15c6:	19 f4       	brne	.+6      	; 0x15ce <xStreamBufferSend+0x108>
    15c8:	c4 01       	movw	r24, r8
    15ca:	6b df       	rcall	.-298    	; 0x14a2 <xStreamBufferSpacesAvailable>
    15cc:	3c 01       	movw	r6, r24
    15ce:	82 01       	movw	r16, r4
    15d0:	93 01       	movw	r18, r6
    15d2:	a1 01       	movw	r20, r2
    15d4:	6a 85       	ldd	r22, Y+10	; 0x0a
    15d6:	7b 85       	ldd	r23, Y+11	; 0x0b
    15d8:	c4 01       	movw	r24, r8
    15da:	6e de       	rcall	.-804    	; 0x12b8 <prvWriteMessageToBuffer>
    15dc:	6c 01       	movw	r12, r24
    15de:	89 2b       	or	r24, r25
    15e0:	e9 f0       	breq	.+58     	; 0x161c <xStreamBufferSend+0x156>
    15e2:	c4 01       	movw	r24, r8
    15e4:	fd dd       	rcall	.-1030   	; 0x11e0 <prvBytesInBuffer>
    15e6:	f4 01       	movw	r30, r8
    15e8:	26 81       	ldd	r18, Z+6	; 0x06
    15ea:	37 81       	ldd	r19, Z+7	; 0x07
    15ec:	82 17       	cp	r24, r18
    15ee:	93 07       	cpc	r25, r19
    15f0:	a8 f0       	brcs	.+42     	; 0x161c <xStreamBufferSend+0x156>
    15f2:	4c d3       	rcall	.+1688   	; 0x1c8c <vTaskSuspendAll>
    15f4:	f4 01       	movw	r30, r8
    15f6:	80 85       	ldd	r24, Z+8	; 0x08
    15f8:	91 85       	ldd	r25, Z+9	; 0x09
    15fa:	89 2b       	or	r24, r25
    15fc:	71 f0       	breq	.+28     	; 0x161a <xStreamBufferSend+0x154>
    15fe:	80 85       	ldd	r24, Z+8	; 0x08
    1600:	91 85       	ldd	r25, Z+9	; 0x09
    1602:	e1 2c       	mov	r14, r1
    1604:	f1 2c       	mov	r15, r1
    1606:	00 e0       	ldi	r16, 0x00	; 0
    1608:	20 e0       	ldi	r18, 0x00	; 0
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	a9 01       	movw	r20, r18
    160e:	60 e0       	ldi	r22, 0x00	; 0
    1610:	0e 94 04 16 	call	0x2c08	; 0x2c08 <xTaskGenericNotify>
    1614:	f4 01       	movw	r30, r8
    1616:	11 86       	std	Z+9, r1	; 0x09
    1618:	10 86       	std	Z+8, r1	; 0x08
    161a:	78 d4       	rcall	.+2288   	; 0x1f0c <xTaskResumeAll>
    161c:	c6 01       	movw	r24, r12
    161e:	2b 96       	adiw	r28, 0x0b	; 11
    1620:	0f b6       	in	r0, 0x3f	; 63
    1622:	f8 94       	cli
    1624:	de bf       	out	0x3e, r29	; 62
    1626:	0f be       	out	0x3f, r0	; 63
    1628:	cd bf       	out	0x3d, r28	; 61
    162a:	df 91       	pop	r29
    162c:	cf 91       	pop	r28
    162e:	1f 91       	pop	r17
    1630:	0f 91       	pop	r16
    1632:	ff 90       	pop	r15
    1634:	ef 90       	pop	r14
    1636:	df 90       	pop	r13
    1638:	cf 90       	pop	r12
    163a:	bf 90       	pop	r11
    163c:	af 90       	pop	r10
    163e:	9f 90       	pop	r9
    1640:	8f 90       	pop	r8
    1642:	7f 90       	pop	r7
    1644:	6f 90       	pop	r6
    1646:	5f 90       	pop	r5
    1648:	4f 90       	pop	r4
    164a:	3f 90       	pop	r3
    164c:	2f 90       	pop	r2
    164e:	08 95       	ret

00001650 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1650:	4f 92       	push	r4
    1652:	5f 92       	push	r5
    1654:	6f 92       	push	r6
    1656:	7f 92       	push	r7
    1658:	8f 92       	push	r8
    165a:	9f 92       	push	r9
    165c:	af 92       	push	r10
    165e:	bf 92       	push	r11
    1660:	cf 92       	push	r12
    1662:	df 92       	push	r13
    1664:	ef 92       	push	r14
    1666:	ff 92       	push	r15
    1668:	0f 93       	push	r16
    166a:	1f 93       	push	r17
    166c:	cf 93       	push	r28
    166e:	df 93       	push	r29
    1670:	ec 01       	movw	r28, r24
    1672:	2b 01       	movw	r4, r22
    1674:	3a 01       	movw	r6, r20
    1676:	58 01       	movw	r10, r16
    1678:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    167a:	8e 85       	ldd	r24, Y+14	; 0x0e
    167c:	80 ff       	sbrs	r24, 0
    167e:	05 c0       	rjmp	.+10     	; 0x168a <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1680:	68 94       	set
    1682:	88 24       	eor	r8, r8
    1684:	81 f8       	bld	r8, 1
    1686:	91 2c       	mov	r9, r1
    1688:	02 c0       	rjmp	.+4      	; 0x168e <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    168a:	81 2c       	mov	r8, r1
    168c:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    168e:	a1 14       	cp	r10, r1
    1690:	b1 04       	cpc	r11, r1
    1692:	c1 04       	cpc	r12, r1
    1694:	d1 04       	cpc	r13, r1
    1696:	41 f1       	breq	.+80     	; 0x16e8 <xStreamBufferReceive+0x98>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    1698:	0f b6       	in	r0, 0x3f	; 63
    169a:	f8 94       	cli
    169c:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    169e:	ce 01       	movw	r24, r28
    16a0:	9f dd       	rcall	.-1218   	; 0x11e0 <prvBytesInBuffer>
    16a2:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    16a4:	88 16       	cp	r8, r24
    16a6:	99 06       	cpc	r9, r25
    16a8:	48 f0       	brcs	.+18     	; 0x16bc <xStreamBufferReceive+0x6c>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    16aa:	60 e0       	ldi	r22, 0x00	; 0
    16ac:	80 e0       	ldi	r24, 0x00	; 0
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    16b4:	0e 94 c4 13 	call	0x2788	; 0x2788 <xTaskGetCurrentTaskHandle>
    16b8:	99 87       	std	Y+9, r25	; 0x09
    16ba:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    16bc:	0f 90       	pop	r0
    16be:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    16c0:	8e 14       	cp	r8, r14
    16c2:	9f 04       	cpc	r9, r15
    16c4:	a0 f0       	brcs	.+40     	; 0x16ee <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    16c6:	e1 2c       	mov	r14, r1
    16c8:	f1 2c       	mov	r15, r1
    16ca:	00 e0       	ldi	r16, 0x00	; 0
    16cc:	10 e0       	ldi	r17, 0x00	; 0
    16ce:	98 01       	movw	r18, r16
    16d0:	40 e0       	ldi	r20, 0x00	; 0
    16d2:	50 e0       	ldi	r21, 0x00	; 0
    16d4:	ba 01       	movw	r22, r20
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    16dc:	19 86       	std	Y+9, r1	; 0x09
    16de:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    16e0:	ce 01       	movw	r24, r28
    16e2:	7e dd       	rcall	.-1284   	; 0x11e0 <prvBytesInBuffer>
    16e4:	7c 01       	movw	r14, r24
    16e6:	03 c0       	rjmp	.+6      	; 0x16ee <xStreamBufferReceive+0x9e>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    16e8:	ce 01       	movw	r24, r28
    16ea:	7a dd       	rcall	.-1292   	; 0x11e0 <prvBytesInBuffer>
    16ec:	7c 01       	movw	r14, r24
    16ee:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    16f0:	9f 04       	cpc	r9, r15
    16f2:	e8 f4       	brcc	.+58     	; 0x172e <xStreamBufferReceive+0xde>
    16f4:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    16f6:	97 01       	movw	r18, r14
    16f8:	a3 01       	movw	r20, r6
    16fa:	b2 01       	movw	r22, r4
    16fc:	ce 01       	movw	r24, r28
    16fe:	6e de       	rcall	.-804    	; 0x13dc <prvReadMessageFromBuffer>
    1700:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1702:	89 2b       	or	r24, r25
    1704:	b1 f0       	breq	.+44     	; 0x1732 <xStreamBufferReceive+0xe2>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1706:	c2 d2       	rcall	.+1412   	; 0x1c8c <vTaskSuspendAll>
    1708:	8a 85       	ldd	r24, Y+10	; 0x0a
    170a:	9b 85       	ldd	r25, Y+11	; 0x0b
    170c:	89 2b       	or	r24, r25
    170e:	69 f0       	breq	.+26     	; 0x172a <xStreamBufferReceive+0xda>
    1710:	8a 85       	ldd	r24, Y+10	; 0x0a
    1712:	9b 85       	ldd	r25, Y+11	; 0x0b
    1714:	e1 2c       	mov	r14, r1
    1716:	f1 2c       	mov	r15, r1
    1718:	00 e0       	ldi	r16, 0x00	; 0
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	a9 01       	movw	r20, r18
    1720:	60 e0       	ldi	r22, 0x00	; 0
    1722:	0e 94 04 16 	call	0x2c08	; 0x2c08 <xTaskGenericNotify>
    1726:	1b 86       	std	Y+11, r1	; 0x0b
    1728:	1a 86       	std	Y+10, r1	; 0x0a
    172a:	f0 d3       	rcall	.+2016   	; 0x1f0c <xTaskResumeAll>
    172c:	02 c0       	rjmp	.+4      	; 0x1732 <xStreamBufferReceive+0xe2>
    172e:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1730:	d1 2c       	mov	r13, r1
    1732:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1734:	df 91       	pop	r29
    1736:	cf 91       	pop	r28
    1738:	1f 91       	pop	r17
    173a:	0f 91       	pop	r16
    173c:	ff 90       	pop	r15
    173e:	ef 90       	pop	r14
    1740:	df 90       	pop	r13
    1742:	cf 90       	pop	r12
    1744:	bf 90       	pop	r11
    1746:	af 90       	pop	r10
    1748:	9f 90       	pop	r9
    174a:	8f 90       	pop	r8
    174c:	7f 90       	pop	r7
    174e:	6f 90       	pop	r6
    1750:	5f 90       	pop	r5
    1752:	4f 90       	pop	r4
    1754:	08 95       	ret

00001756 <prvResetNextTaskUnblockTime>:
    1756:	e0 91 29 16 	lds	r30, 0x1629	; 0x801629 <pxDelayedTaskList>
    175a:	f0 91 2a 16 	lds	r31, 0x162A	; 0x80162a <pxDelayedTaskList+0x1>
    175e:	80 81       	ld	r24, Z
    1760:	81 11       	cpse	r24, r1
    1762:	0c c0       	rjmp	.+24     	; 0x177c <prvResetNextTaskUnblockTime+0x26>
    1764:	8f ef       	ldi	r24, 0xFF	; 255
    1766:	9f ef       	ldi	r25, 0xFF	; 255
    1768:	dc 01       	movw	r26, r24
    176a:	80 93 f3 15 	sts	0x15F3, r24	; 0x8015f3 <xNextTaskUnblockTime>
    176e:	90 93 f4 15 	sts	0x15F4, r25	; 0x8015f4 <xNextTaskUnblockTime+0x1>
    1772:	a0 93 f5 15 	sts	0x15F5, r26	; 0x8015f5 <xNextTaskUnblockTime+0x2>
    1776:	b0 93 f6 15 	sts	0x15F6, r27	; 0x8015f6 <xNextTaskUnblockTime+0x3>
    177a:	08 95       	ret
    177c:	e0 91 29 16 	lds	r30, 0x1629	; 0x801629 <pxDelayedTaskList>
    1780:	f0 91 2a 16 	lds	r31, 0x162A	; 0x80162a <pxDelayedTaskList+0x1>
    1784:	07 80       	ldd	r0, Z+7	; 0x07
    1786:	f0 85       	ldd	r31, Z+8	; 0x08
    1788:	e0 2d       	mov	r30, r0
    178a:	80 81       	ld	r24, Z
    178c:	91 81       	ldd	r25, Z+1	; 0x01
    178e:	a2 81       	ldd	r26, Z+2	; 0x02
    1790:	b3 81       	ldd	r27, Z+3	; 0x03
    1792:	80 93 f3 15 	sts	0x15F3, r24	; 0x8015f3 <xNextTaskUnblockTime>
    1796:	90 93 f4 15 	sts	0x15F4, r25	; 0x8015f4 <xNextTaskUnblockTime+0x1>
    179a:	a0 93 f5 15 	sts	0x15F5, r26	; 0x8015f5 <xNextTaskUnblockTime+0x2>
    179e:	b0 93 f6 15 	sts	0x15F6, r27	; 0x8015f6 <xNextTaskUnblockTime+0x3>
    17a2:	08 95       	ret

000017a4 <prvDeleteTCB>:
    17a4:	cf 93       	push	r28
    17a6:	df 93       	push	r29
    17a8:	ec 01       	movw	r28, r24
    17aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17ae:	0e 94 86 03 	call	0x70c	; 0x70c <vPortFree>
    17b2:	ce 01       	movw	r24, r28
    17b4:	0e 94 86 03 	call	0x70c	; 0x70c <vPortFree>
    17b8:	df 91       	pop	r29
    17ba:	cf 91       	pop	r28
    17bc:	08 95       	ret

000017be <prvInitialiseNewTask>:
    17be:	4f 92       	push	r4
    17c0:	5f 92       	push	r5
    17c2:	6f 92       	push	r6
    17c4:	7f 92       	push	r7
    17c6:	8f 92       	push	r8
    17c8:	9f 92       	push	r9
    17ca:	af 92       	push	r10
    17cc:	bf 92       	push	r11
    17ce:	cf 92       	push	r12
    17d0:	df 92       	push	r13
    17d2:	ef 92       	push	r14
    17d4:	ff 92       	push	r15
    17d6:	0f 93       	push	r16
    17d8:	cf 93       	push	r28
    17da:	df 93       	push	r29
    17dc:	2c 01       	movw	r4, r24
    17de:	5b 01       	movw	r10, r22
    17e0:	4a 01       	movw	r8, r20
    17e2:	39 01       	movw	r6, r18
    17e4:	e6 01       	movw	r28, r12
    17e6:	65 ea       	ldi	r22, 0xA5	; 165
    17e8:	70 e0       	ldi	r23, 0x00	; 0
    17ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17ee:	0e 94 96 2f 	call	0x5f2c	; 0x5f2c <memset>
    17f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17f6:	21 e0       	ldi	r18, 0x01	; 1
    17f8:	82 1a       	sub	r8, r18
    17fa:	91 08       	sbc	r9, r1
    17fc:	88 0e       	add	r8, r24
    17fe:	99 1e       	adc	r9, r25
    1800:	a1 14       	cp	r10, r1
    1802:	b1 04       	cpc	r11, r1
    1804:	89 f4       	brne	.+34     	; 0x1828 <prvInitialiseNewTask+0x6a>
    1806:	15 c0       	rjmp	.+42     	; 0x1832 <prvInitialiseNewTask+0x74>
    1808:	82 2f       	mov	r24, r18
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	f5 01       	movw	r30, r10
    180e:	e8 0f       	add	r30, r24
    1810:	f9 1f       	adc	r31, r25
    1812:	30 81       	ld	r19, Z
    1814:	de 01       	movw	r26, r28
    1816:	a8 0f       	add	r26, r24
    1818:	b9 1f       	adc	r27, r25
    181a:	5d 96       	adiw	r26, 0x1d	; 29
    181c:	3c 93       	st	X, r19
    181e:	80 81       	ld	r24, Z
    1820:	88 23       	and	r24, r24
    1822:	29 f0       	breq	.+10     	; 0x182e <prvInitialiseNewTask+0x70>
    1824:	2f 5f       	subi	r18, 0xFF	; 255
    1826:	01 c0       	rjmp	.+2      	; 0x182a <prvInitialiseNewTask+0x6c>
    1828:	20 e0       	ldi	r18, 0x00	; 0
    182a:	20 31       	cpi	r18, 0x10	; 16
    182c:	68 f3       	brcs	.-38     	; 0x1808 <prvInitialiseNewTask+0x4a>
    182e:	1c a6       	std	Y+44, r1	; 0x2c
    1830:	01 c0       	rjmp	.+2      	; 0x1834 <prvInitialiseNewTask+0x76>
    1832:	1d 8e       	std	Y+29, r1	; 0x1d
    1834:	0a 30       	cpi	r16, 0x0A	; 10
    1836:	08 f0       	brcs	.+2      	; 0x183a <prvInitialiseNewTask+0x7c>
    1838:	09 e0       	ldi	r16, 0x09	; 9
    183a:	0a 8f       	std	Y+26, r16	; 0x1a
    183c:	0d a7       	std	Y+45, r16	; 0x2d
    183e:	1e a6       	std	Y+46, r1	; 0x2e
    1840:	ce 01       	movw	r24, r28
    1842:	02 96       	adiw	r24, 0x02	; 2
    1844:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <vListInitialiseItem>
    1848:	ce 01       	movw	r24, r28
    184a:	0e 96       	adiw	r24, 0x0e	; 14
    184c:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <vListInitialiseItem>
    1850:	db 87       	std	Y+11, r29	; 0x0b
    1852:	ca 87       	std	Y+10, r28	; 0x0a
    1854:	8a e0       	ldi	r24, 0x0A	; 10
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	a0 e0       	ldi	r26, 0x00	; 0
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	80 1b       	sub	r24, r16
    185e:	91 09       	sbc	r25, r1
    1860:	a1 09       	sbc	r26, r1
    1862:	b1 09       	sbc	r27, r1
    1864:	8e 87       	std	Y+14, r24	; 0x0e
    1866:	9f 87       	std	Y+15, r25	; 0x0f
    1868:	a8 8b       	std	Y+16, r26	; 0x10
    186a:	b9 8b       	std	Y+17, r27	; 0x11
    186c:	df 8b       	std	Y+23, r29	; 0x17
    186e:	ce 8b       	std	Y+22, r28	; 0x16
    1870:	84 e0       	ldi	r24, 0x04	; 4
    1872:	fe 01       	movw	r30, r28
    1874:	bf 96       	adiw	r30, 0x2f	; 47
    1876:	df 01       	movw	r26, r30
    1878:	1d 92       	st	X+, r1
    187a:	8a 95       	dec	r24
    187c:	e9 f7       	brne	.-6      	; 0x1878 <prvInitialiseNewTask+0xba>
    187e:	1b aa       	std	Y+51, r1	; 0x33
    1880:	a3 01       	movw	r20, r6
    1882:	b2 01       	movw	r22, r4
    1884:	c4 01       	movw	r24, r8
    1886:	04 d8       	rcall	.-4088   	; 0x890 <pxPortInitialiseStack>
    1888:	99 83       	std	Y+1, r25	; 0x01
    188a:	88 83       	st	Y, r24
    188c:	e1 14       	cp	r14, r1
    188e:	f1 04       	cpc	r15, r1
    1890:	19 f0       	breq	.+6      	; 0x1898 <prvInitialiseNewTask+0xda>
    1892:	f7 01       	movw	r30, r14
    1894:	d1 83       	std	Z+1, r29	; 0x01
    1896:	c0 83       	st	Z, r28
    1898:	df 91       	pop	r29
    189a:	cf 91       	pop	r28
    189c:	0f 91       	pop	r16
    189e:	ff 90       	pop	r15
    18a0:	ef 90       	pop	r14
    18a2:	df 90       	pop	r13
    18a4:	cf 90       	pop	r12
    18a6:	bf 90       	pop	r11
    18a8:	af 90       	pop	r10
    18aa:	9f 90       	pop	r9
    18ac:	8f 90       	pop	r8
    18ae:	7f 90       	pop	r7
    18b0:	6f 90       	pop	r6
    18b2:	5f 90       	pop	r5
    18b4:	4f 90       	pop	r4
    18b6:	08 95       	ret

000018b8 <prvInitialiseTaskLists>:
    18b8:	cf 93       	push	r28
    18ba:	c0 e0       	ldi	r28, 0x00	; 0
    18bc:	09 c0       	rjmp	.+18     	; 0x18d0 <prvInitialiseTaskLists+0x18>
    18be:	2b e0       	ldi	r18, 0x0B	; 11
    18c0:	c2 9f       	mul	r28, r18
    18c2:	c0 01       	movw	r24, r0
    18c4:	11 24       	eor	r1, r1
    18c6:	8f 5b       	subi	r24, 0xBF	; 191
    18c8:	99 4e       	sbci	r25, 0xE9	; 233
    18ca:	0e 94 c3 03 	call	0x786	; 0x786 <vListInitialise>
    18ce:	cf 5f       	subi	r28, 0xFF	; 255
    18d0:	ca 30       	cpi	r28, 0x0A	; 10
    18d2:	a8 f3       	brcs	.-22     	; 0x18be <prvInitialiseTaskLists+0x6>
    18d4:	86 e3       	ldi	r24, 0x36	; 54
    18d6:	96 e1       	ldi	r25, 0x16	; 22
    18d8:	0e 94 c3 03 	call	0x786	; 0x786 <vListInitialise>
    18dc:	8b e2       	ldi	r24, 0x2B	; 43
    18de:	96 e1       	ldi	r25, 0x16	; 22
    18e0:	0e 94 c3 03 	call	0x786	; 0x786 <vListInitialise>
    18e4:	8c e1       	ldi	r24, 0x1C	; 28
    18e6:	96 e1       	ldi	r25, 0x16	; 22
    18e8:	0e 94 c3 03 	call	0x786	; 0x786 <vListInitialise>
    18ec:	81 e1       	ldi	r24, 0x11	; 17
    18ee:	96 e1       	ldi	r25, 0x16	; 22
    18f0:	0e 94 c3 03 	call	0x786	; 0x786 <vListInitialise>
    18f4:	85 e0       	ldi	r24, 0x05	; 5
    18f6:	96 e1       	ldi	r25, 0x16	; 22
    18f8:	0e 94 c3 03 	call	0x786	; 0x786 <vListInitialise>
    18fc:	86 e3       	ldi	r24, 0x36	; 54
    18fe:	96 e1       	ldi	r25, 0x16	; 22
    1900:	90 93 2a 16 	sts	0x162A, r25	; 0x80162a <pxDelayedTaskList+0x1>
    1904:	80 93 29 16 	sts	0x1629, r24	; 0x801629 <pxDelayedTaskList>
    1908:	8b e2       	ldi	r24, 0x2B	; 43
    190a:	96 e1       	ldi	r25, 0x16	; 22
    190c:	90 93 28 16 	sts	0x1628, r25	; 0x801628 <pxOverflowDelayedTaskList+0x1>
    1910:	80 93 27 16 	sts	0x1627, r24	; 0x801627 <pxOverflowDelayedTaskList>
    1914:	cf 91       	pop	r28
    1916:	08 95       	ret

00001918 <prvAddNewTaskToReadyList>:
    1918:	cf 93       	push	r28
    191a:	df 93       	push	r29
    191c:	ec 01       	movw	r28, r24
    191e:	0f b6       	in	r0, 0x3f	; 63
    1920:	f8 94       	cli
    1922:	0f 92       	push	r0
    1924:	80 91 04 16 	lds	r24, 0x1604	; 0x801604 <uxCurrentNumberOfTasks>
    1928:	8f 5f       	subi	r24, 0xFF	; 255
    192a:	80 93 04 16 	sts	0x1604, r24	; 0x801604 <uxCurrentNumberOfTasks>
    192e:	80 91 af 16 	lds	r24, 0x16AF	; 0x8016af <pxCurrentTCB>
    1932:	90 91 b0 16 	lds	r25, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    1936:	89 2b       	or	r24, r25
    1938:	51 f4       	brne	.+20     	; 0x194e <prvAddNewTaskToReadyList+0x36>
    193a:	d0 93 b0 16 	sts	0x16B0, r29	; 0x8016b0 <pxCurrentTCB+0x1>
    193e:	c0 93 af 16 	sts	0x16AF, r28	; 0x8016af <pxCurrentTCB>
    1942:	80 91 04 16 	lds	r24, 0x1604	; 0x801604 <uxCurrentNumberOfTasks>
    1946:	81 30       	cpi	r24, 0x01	; 1
    1948:	91 f4       	brne	.+36     	; 0x196e <prvAddNewTaskToReadyList+0x56>
    194a:	b6 df       	rcall	.-148    	; 0x18b8 <prvInitialiseTaskLists>
    194c:	10 c0       	rjmp	.+32     	; 0x196e <prvAddNewTaskToReadyList+0x56>
    194e:	80 91 fe 15 	lds	r24, 0x15FE	; 0x8015fe <xSchedulerRunning>
    1952:	81 11       	cpse	r24, r1
    1954:	0c c0       	rjmp	.+24     	; 0x196e <prvAddNewTaskToReadyList+0x56>
    1956:	e0 91 af 16 	lds	r30, 0x16AF	; 0x8016af <pxCurrentTCB>
    195a:	f0 91 b0 16 	lds	r31, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    195e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1960:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1962:	89 17       	cp	r24, r25
    1964:	20 f0       	brcs	.+8      	; 0x196e <prvAddNewTaskToReadyList+0x56>
    1966:	d0 93 b0 16 	sts	0x16B0, r29	; 0x8016b0 <pxCurrentTCB+0x1>
    196a:	c0 93 af 16 	sts	0x16AF, r28	; 0x8016af <pxCurrentTCB>
    196e:	80 91 f7 15 	lds	r24, 0x15F7	; 0x8015f7 <uxTaskNumber>
    1972:	8f 5f       	subi	r24, 0xFF	; 255
    1974:	80 93 f7 15 	sts	0x15F7, r24	; 0x8015f7 <uxTaskNumber>
    1978:	ea 8d       	ldd	r30, Y+26	; 0x1a
    197a:	80 91 ff 15 	lds	r24, 0x15FF	; 0x8015ff <uxTopReadyPriority>
    197e:	8e 17       	cp	r24, r30
    1980:	10 f4       	brcc	.+4      	; 0x1986 <prvAddNewTaskToReadyList+0x6e>
    1982:	e0 93 ff 15 	sts	0x15FF, r30	; 0x8015ff <uxTopReadyPriority>
    1986:	8b e0       	ldi	r24, 0x0B	; 11
    1988:	8e 9f       	mul	r24, r30
    198a:	f0 01       	movw	r30, r0
    198c:	11 24       	eor	r1, r1
    198e:	ef 5b       	subi	r30, 0xBF	; 191
    1990:	f9 4e       	sbci	r31, 0xE9	; 233
    1992:	01 80       	ldd	r0, Z+1	; 0x01
    1994:	f2 81       	ldd	r31, Z+2	; 0x02
    1996:	e0 2d       	mov	r30, r0
    1998:	ff 83       	std	Y+7, r31	; 0x07
    199a:	ee 83       	std	Y+6, r30	; 0x06
    199c:	26 81       	ldd	r18, Z+6	; 0x06
    199e:	37 81       	ldd	r19, Z+7	; 0x07
    19a0:	39 87       	std	Y+9, r19	; 0x09
    19a2:	28 87       	std	Y+8, r18	; 0x08
    19a4:	a6 81       	ldd	r26, Z+6	; 0x06
    19a6:	b7 81       	ldd	r27, Z+7	; 0x07
    19a8:	9e 01       	movw	r18, r28
    19aa:	2e 5f       	subi	r18, 0xFE	; 254
    19ac:	3f 4f       	sbci	r19, 0xFF	; 255
    19ae:	15 96       	adiw	r26, 0x05	; 5
    19b0:	3c 93       	st	X, r19
    19b2:	2e 93       	st	-X, r18
    19b4:	14 97       	sbiw	r26, 0x04	; 4
    19b6:	37 83       	std	Z+7, r19	; 0x07
    19b8:	26 83       	std	Z+6, r18	; 0x06
    19ba:	ea 8d       	ldd	r30, Y+26	; 0x1a
    19bc:	8e 9f       	mul	r24, r30
    19be:	f0 01       	movw	r30, r0
    19c0:	11 24       	eor	r1, r1
    19c2:	ef 5b       	subi	r30, 0xBF	; 191
    19c4:	f9 4e       	sbci	r31, 0xE9	; 233
    19c6:	fd 87       	std	Y+13, r31	; 0x0d
    19c8:	ec 87       	std	Y+12, r30	; 0x0c
    19ca:	80 81       	ld	r24, Z
    19cc:	8f 5f       	subi	r24, 0xFF	; 255
    19ce:	80 83       	st	Z, r24
    19d0:	0f 90       	pop	r0
    19d2:	0f be       	out	0x3f, r0	; 63
    19d4:	80 91 fe 15 	lds	r24, 0x15FE	; 0x8015fe <xSchedulerRunning>
    19d8:	88 23       	and	r24, r24
    19da:	51 f0       	breq	.+20     	; 0x19f0 <prvAddNewTaskToReadyList+0xd8>
    19dc:	e0 91 af 16 	lds	r30, 0x16AF	; 0x8016af <pxCurrentTCB>
    19e0:	f0 91 b0 16 	lds	r31, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    19e4:	92 8d       	ldd	r25, Z+26	; 0x1a
    19e6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    19e8:	98 17       	cp	r25, r24
    19ea:	10 f4       	brcc	.+4      	; 0x19f0 <prvAddNewTaskToReadyList+0xd8>
    19ec:	0e 94 91 04 	call	0x922	; 0x922 <vPortYield>
    19f0:	df 91       	pop	r29
    19f2:	cf 91       	pop	r28
    19f4:	08 95       	ret

000019f6 <prvCheckTasksWaitingTermination>:
    19f6:	cf 93       	push	r28
    19f8:	df 93       	push	r29
    19fa:	1b c0       	rjmp	.+54     	; 0x1a32 <prvCheckTasksWaitingTermination+0x3c>
    19fc:	0f b6       	in	r0, 0x3f	; 63
    19fe:	f8 94       	cli
    1a00:	0f 92       	push	r0
    1a02:	e0 91 18 16 	lds	r30, 0x1618	; 0x801618 <xTasksWaitingTermination+0x7>
    1a06:	f0 91 19 16 	lds	r31, 0x1619	; 0x801619 <xTasksWaitingTermination+0x8>
    1a0a:	c0 85       	ldd	r28, Z+8	; 0x08
    1a0c:	d1 85       	ldd	r29, Z+9	; 0x09
    1a0e:	ce 01       	movw	r24, r28
    1a10:	02 96       	adiw	r24, 0x02	; 2
    1a12:	0e 94 15 04 	call	0x82a	; 0x82a <uxListRemove>
    1a16:	80 91 04 16 	lds	r24, 0x1604	; 0x801604 <uxCurrentNumberOfTasks>
    1a1a:	81 50       	subi	r24, 0x01	; 1
    1a1c:	80 93 04 16 	sts	0x1604, r24	; 0x801604 <uxCurrentNumberOfTasks>
    1a20:	80 91 10 16 	lds	r24, 0x1610	; 0x801610 <uxDeletedTasksWaitingCleanUp>
    1a24:	81 50       	subi	r24, 0x01	; 1
    1a26:	80 93 10 16 	sts	0x1610, r24	; 0x801610 <uxDeletedTasksWaitingCleanUp>
    1a2a:	0f 90       	pop	r0
    1a2c:	0f be       	out	0x3f, r0	; 63
    1a2e:	ce 01       	movw	r24, r28
    1a30:	b9 de       	rcall	.-654    	; 0x17a4 <prvDeleteTCB>
    1a32:	80 91 10 16 	lds	r24, 0x1610	; 0x801610 <uxDeletedTasksWaitingCleanUp>
    1a36:	81 11       	cpse	r24, r1
    1a38:	e1 cf       	rjmp	.-62     	; 0x19fc <prvCheckTasksWaitingTermination+0x6>
    1a3a:	df 91       	pop	r29
    1a3c:	cf 91       	pop	r28
    1a3e:	08 95       	ret

00001a40 <prvAddCurrentTaskToDelayedList>:
    1a40:	8f 92       	push	r8
    1a42:	9f 92       	push	r9
    1a44:	af 92       	push	r10
    1a46:	bf 92       	push	r11
    1a48:	cf 92       	push	r12
    1a4a:	df 92       	push	r13
    1a4c:	ef 92       	push	r14
    1a4e:	ff 92       	push	r15
    1a50:	cf 93       	push	r28
    1a52:	df 93       	push	r29
    1a54:	6b 01       	movw	r12, r22
    1a56:	7c 01       	movw	r14, r24
    1a58:	c4 2f       	mov	r28, r20
    1a5a:	80 90 00 16 	lds	r8, 0x1600	; 0x801600 <xTickCount>
    1a5e:	90 90 01 16 	lds	r9, 0x1601	; 0x801601 <xTickCount+0x1>
    1a62:	a0 90 02 16 	lds	r10, 0x1602	; 0x801602 <xTickCount+0x2>
    1a66:	b0 90 03 16 	lds	r11, 0x1603	; 0x801603 <xTickCount+0x3>
    1a6a:	80 91 af 16 	lds	r24, 0x16AF	; 0x8016af <pxCurrentTCB>
    1a6e:	90 91 b0 16 	lds	r25, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    1a72:	02 96       	adiw	r24, 0x02	; 2
    1a74:	0e 94 15 04 	call	0x82a	; 0x82a <uxListRemove>
    1a78:	8f ef       	ldi	r24, 0xFF	; 255
    1a7a:	c8 16       	cp	r12, r24
    1a7c:	d8 06       	cpc	r13, r24
    1a7e:	e8 06       	cpc	r14, r24
    1a80:	f8 06       	cpc	r15, r24
    1a82:	b1 f5       	brne	.+108    	; 0x1af0 <prvAddCurrentTaskToDelayedList+0xb0>
    1a84:	cc 23       	and	r28, r28
    1a86:	a1 f1       	breq	.+104    	; 0x1af0 <prvAddCurrentTaskToDelayedList+0xb0>
    1a88:	e5 e0       	ldi	r30, 0x05	; 5
    1a8a:	f6 e1       	ldi	r31, 0x16	; 22
    1a8c:	a1 81       	ldd	r26, Z+1	; 0x01
    1a8e:	b2 81       	ldd	r27, Z+2	; 0x02
    1a90:	c0 91 af 16 	lds	r28, 0x16AF	; 0x8016af <pxCurrentTCB>
    1a94:	d0 91 b0 16 	lds	r29, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    1a98:	bf 83       	std	Y+7, r27	; 0x07
    1a9a:	ae 83       	std	Y+6, r26	; 0x06
    1a9c:	c0 91 af 16 	lds	r28, 0x16AF	; 0x8016af <pxCurrentTCB>
    1aa0:	d0 91 b0 16 	lds	r29, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    1aa4:	16 96       	adiw	r26, 0x06	; 6
    1aa6:	8d 91       	ld	r24, X+
    1aa8:	9c 91       	ld	r25, X
    1aaa:	17 97       	sbiw	r26, 0x07	; 7
    1aac:	99 87       	std	Y+9, r25	; 0x09
    1aae:	88 87       	std	Y+8, r24	; 0x08
    1ab0:	16 96       	adiw	r26, 0x06	; 6
    1ab2:	cd 91       	ld	r28, X+
    1ab4:	dc 91       	ld	r29, X
    1ab6:	17 97       	sbiw	r26, 0x07	; 7
    1ab8:	80 91 af 16 	lds	r24, 0x16AF	; 0x8016af <pxCurrentTCB>
    1abc:	90 91 b0 16 	lds	r25, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    1ac0:	02 96       	adiw	r24, 0x02	; 2
    1ac2:	9d 83       	std	Y+5, r25	; 0x05
    1ac4:	8c 83       	std	Y+4, r24	; 0x04
    1ac6:	80 91 af 16 	lds	r24, 0x16AF	; 0x8016af <pxCurrentTCB>
    1aca:	90 91 b0 16 	lds	r25, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    1ace:	02 96       	adiw	r24, 0x02	; 2
    1ad0:	17 96       	adiw	r26, 0x07	; 7
    1ad2:	9c 93       	st	X, r25
    1ad4:	8e 93       	st	-X, r24
    1ad6:	16 97       	sbiw	r26, 0x06	; 6
    1ad8:	a0 91 af 16 	lds	r26, 0x16AF	; 0x8016af <pxCurrentTCB>
    1adc:	b0 91 b0 16 	lds	r27, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    1ae0:	1d 96       	adiw	r26, 0x0d	; 13
    1ae2:	fc 93       	st	X, r31
    1ae4:	ee 93       	st	-X, r30
    1ae6:	1c 97       	sbiw	r26, 0x0c	; 12
    1ae8:	80 81       	ld	r24, Z
    1aea:	8f 5f       	subi	r24, 0xFF	; 255
    1aec:	80 83       	st	Z, r24
    1aee:	3f c0       	rjmp	.+126    	; 0x1b6e <prvAddCurrentTaskToDelayedList+0x12e>
    1af0:	c8 0c       	add	r12, r8
    1af2:	d9 1c       	adc	r13, r9
    1af4:	ea 1c       	adc	r14, r10
    1af6:	fb 1c       	adc	r15, r11
    1af8:	e0 91 af 16 	lds	r30, 0x16AF	; 0x8016af <pxCurrentTCB>
    1afc:	f0 91 b0 16 	lds	r31, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    1b00:	c2 82       	std	Z+2, r12	; 0x02
    1b02:	d3 82       	std	Z+3, r13	; 0x03
    1b04:	e4 82       	std	Z+4, r14	; 0x04
    1b06:	f5 82       	std	Z+5, r15	; 0x05
    1b08:	c8 14       	cp	r12, r8
    1b0a:	d9 04       	cpc	r13, r9
    1b0c:	ea 04       	cpc	r14, r10
    1b0e:	fb 04       	cpc	r15, r11
    1b10:	68 f4       	brcc	.+26     	; 0x1b2c <prvAddCurrentTaskToDelayedList+0xec>
    1b12:	60 91 af 16 	lds	r22, 0x16AF	; 0x8016af <pxCurrentTCB>
    1b16:	70 91 b0 16 	lds	r23, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    1b1a:	80 91 27 16 	lds	r24, 0x1627	; 0x801627 <pxOverflowDelayedTaskList>
    1b1e:	90 91 28 16 	lds	r25, 0x1628	; 0x801628 <pxOverflowDelayedTaskList+0x1>
    1b22:	6e 5f       	subi	r22, 0xFE	; 254
    1b24:	7f 4f       	sbci	r23, 0xFF	; 255
    1b26:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <vListInsert>
    1b2a:	21 c0       	rjmp	.+66     	; 0x1b6e <prvAddCurrentTaskToDelayedList+0x12e>
    1b2c:	60 91 af 16 	lds	r22, 0x16AF	; 0x8016af <pxCurrentTCB>
    1b30:	70 91 b0 16 	lds	r23, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    1b34:	80 91 29 16 	lds	r24, 0x1629	; 0x801629 <pxDelayedTaskList>
    1b38:	90 91 2a 16 	lds	r25, 0x162A	; 0x80162a <pxDelayedTaskList+0x1>
    1b3c:	6e 5f       	subi	r22, 0xFE	; 254
    1b3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b40:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <vListInsert>
    1b44:	80 91 f3 15 	lds	r24, 0x15F3	; 0x8015f3 <xNextTaskUnblockTime>
    1b48:	90 91 f4 15 	lds	r25, 0x15F4	; 0x8015f4 <xNextTaskUnblockTime+0x1>
    1b4c:	a0 91 f5 15 	lds	r26, 0x15F5	; 0x8015f5 <xNextTaskUnblockTime+0x2>
    1b50:	b0 91 f6 15 	lds	r27, 0x15F6	; 0x8015f6 <xNextTaskUnblockTime+0x3>
    1b54:	c8 16       	cp	r12, r24
    1b56:	d9 06       	cpc	r13, r25
    1b58:	ea 06       	cpc	r14, r26
    1b5a:	fb 06       	cpc	r15, r27
    1b5c:	40 f4       	brcc	.+16     	; 0x1b6e <prvAddCurrentTaskToDelayedList+0x12e>
    1b5e:	c0 92 f3 15 	sts	0x15F3, r12	; 0x8015f3 <xNextTaskUnblockTime>
    1b62:	d0 92 f4 15 	sts	0x15F4, r13	; 0x8015f4 <xNextTaskUnblockTime+0x1>
    1b66:	e0 92 f5 15 	sts	0x15F5, r14	; 0x8015f5 <xNextTaskUnblockTime+0x2>
    1b6a:	f0 92 f6 15 	sts	0x15F6, r15	; 0x8015f6 <xNextTaskUnblockTime+0x3>
    1b6e:	df 91       	pop	r29
    1b70:	cf 91       	pop	r28
    1b72:	ff 90       	pop	r15
    1b74:	ef 90       	pop	r14
    1b76:	df 90       	pop	r13
    1b78:	cf 90       	pop	r12
    1b7a:	bf 90       	pop	r11
    1b7c:	af 90       	pop	r10
    1b7e:	9f 90       	pop	r9
    1b80:	8f 90       	pop	r8
    1b82:	08 95       	ret

00001b84 <xTaskCreate>:
    1b84:	2f 92       	push	r2
    1b86:	3f 92       	push	r3
    1b88:	4f 92       	push	r4
    1b8a:	5f 92       	push	r5
    1b8c:	6f 92       	push	r6
    1b8e:	7f 92       	push	r7
    1b90:	8f 92       	push	r8
    1b92:	9f 92       	push	r9
    1b94:	af 92       	push	r10
    1b96:	bf 92       	push	r11
    1b98:	cf 92       	push	r12
    1b9a:	df 92       	push	r13
    1b9c:	ef 92       	push	r14
    1b9e:	ff 92       	push	r15
    1ba0:	0f 93       	push	r16
    1ba2:	cf 93       	push	r28
    1ba4:	df 93       	push	r29
    1ba6:	3c 01       	movw	r6, r24
    1ba8:	1b 01       	movw	r2, r22
    1baa:	4a 01       	movw	r8, r20
    1bac:	29 01       	movw	r4, r18
    1bae:	ca 01       	movw	r24, r20
    1bb0:	0e 94 dd 02 	call	0x5ba	; 0x5ba <pvPortMalloc>
    1bb4:	6c 01       	movw	r12, r24
    1bb6:	89 2b       	or	r24, r25
    1bb8:	71 f0       	breq	.+28     	; 0x1bd6 <xTaskCreate+0x52>
    1bba:	84 e3       	ldi	r24, 0x34	; 52
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	0e 94 dd 02 	call	0x5ba	; 0x5ba <pvPortMalloc>
    1bc2:	ec 01       	movw	r28, r24
    1bc4:	89 2b       	or	r24, r25
    1bc6:	19 f0       	breq	.+6      	; 0x1bce <xTaskCreate+0x4a>
    1bc8:	dc 8e       	std	Y+28, r13	; 0x1c
    1bca:	cb 8e       	std	Y+27, r12	; 0x1b
    1bcc:	06 c0       	rjmp	.+12     	; 0x1bda <xTaskCreate+0x56>
    1bce:	c6 01       	movw	r24, r12
    1bd0:	0e 94 86 03 	call	0x70c	; 0x70c <vPortFree>
    1bd4:	02 c0       	rjmp	.+4      	; 0x1bda <xTaskCreate+0x56>
    1bd6:	c0 e0       	ldi	r28, 0x00	; 0
    1bd8:	d0 e0       	ldi	r29, 0x00	; 0
    1bda:	20 97       	sbiw	r28, 0x00	; 0
    1bdc:	61 f0       	breq	.+24     	; 0x1bf6 <xTaskCreate+0x72>
    1bde:	a1 2c       	mov	r10, r1
    1be0:	b1 2c       	mov	r11, r1
    1be2:	6e 01       	movw	r12, r28
    1be4:	92 01       	movw	r18, r4
    1be6:	a4 01       	movw	r20, r8
    1be8:	b1 01       	movw	r22, r2
    1bea:	c3 01       	movw	r24, r6
    1bec:	e8 dd       	rcall	.-1072   	; 0x17be <prvInitialiseNewTask>
    1bee:	ce 01       	movw	r24, r28
    1bf0:	93 de       	rcall	.-730    	; 0x1918 <prvAddNewTaskToReadyList>
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	01 c0       	rjmp	.+2      	; 0x1bf8 <xTaskCreate+0x74>
    1bf6:	8f ef       	ldi	r24, 0xFF	; 255
    1bf8:	df 91       	pop	r29
    1bfa:	cf 91       	pop	r28
    1bfc:	0f 91       	pop	r16
    1bfe:	ff 90       	pop	r15
    1c00:	ef 90       	pop	r14
    1c02:	df 90       	pop	r13
    1c04:	cf 90       	pop	r12
    1c06:	bf 90       	pop	r11
    1c08:	af 90       	pop	r10
    1c0a:	9f 90       	pop	r9
    1c0c:	8f 90       	pop	r8
    1c0e:	7f 90       	pop	r7
    1c10:	6f 90       	pop	r6
    1c12:	5f 90       	pop	r5
    1c14:	4f 90       	pop	r4
    1c16:	3f 90       	pop	r3
    1c18:	2f 90       	pop	r2
    1c1a:	08 95       	ret

00001c1c <vTaskStartScheduler>:
    1c1c:	ef 92       	push	r14
    1c1e:	ff 92       	push	r15
    1c20:	0f 93       	push	r16
    1c22:	0f 2e       	mov	r0, r31
    1c24:	f1 ef       	ldi	r31, 0xF1	; 241
    1c26:	ef 2e       	mov	r14, r31
    1c28:	f5 e1       	ldi	r31, 0x15	; 21
    1c2a:	ff 2e       	mov	r15, r31
    1c2c:	f0 2d       	mov	r31, r0
    1c2e:	00 e0       	ldi	r16, 0x00	; 0
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	40 ec       	ldi	r20, 0xC0	; 192
    1c36:	50 e0       	ldi	r21, 0x00	; 0
    1c38:	6f e6       	ldi	r22, 0x6F	; 111
    1c3a:	72 e0       	ldi	r23, 0x02	; 2
    1c3c:	8d ec       	ldi	r24, 0xCD	; 205
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	a1 df       	rcall	.-190    	; 0x1b84 <xTaskCreate>
    1c42:	81 30       	cpi	r24, 0x01	; 1
    1c44:	11 f4       	brne	.+4      	; 0x1c4a <vTaskStartScheduler+0x2e>
    1c46:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <xTimerCreateTimerTask>
    1c4a:	81 30       	cpi	r24, 0x01	; 1
    1c4c:	c9 f4       	brne	.+50     	; 0x1c80 <vTaskStartScheduler+0x64>
    1c4e:	f8 94       	cli
    1c50:	8f ef       	ldi	r24, 0xFF	; 255
    1c52:	9f ef       	ldi	r25, 0xFF	; 255
    1c54:	dc 01       	movw	r26, r24
    1c56:	80 93 f3 15 	sts	0x15F3, r24	; 0x8015f3 <xNextTaskUnblockTime>
    1c5a:	90 93 f4 15 	sts	0x15F4, r25	; 0x8015f4 <xNextTaskUnblockTime+0x1>
    1c5e:	a0 93 f5 15 	sts	0x15F5, r26	; 0x8015f5 <xNextTaskUnblockTime+0x2>
    1c62:	b0 93 f6 15 	sts	0x15F6, r27	; 0x8015f6 <xNextTaskUnblockTime+0x3>
    1c66:	81 e0       	ldi	r24, 0x01	; 1
    1c68:	80 93 fe 15 	sts	0x15FE, r24	; 0x8015fe <xSchedulerRunning>
    1c6c:	10 92 00 16 	sts	0x1600, r1	; 0x801600 <xTickCount>
    1c70:	10 92 01 16 	sts	0x1601, r1	; 0x801601 <xTickCount+0x1>
    1c74:	10 92 02 16 	sts	0x1602, r1	; 0x801602 <xTickCount+0x2>
    1c78:	10 92 03 16 	sts	0x1603, r1	; 0x801603 <xTickCount+0x3>
    1c7c:	0e 94 5f 04 	call	0x8be	; 0x8be <xPortStartScheduler>
    1c80:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1c84:	0f 91       	pop	r16
    1c86:	ff 90       	pop	r15
    1c88:	ef 90       	pop	r14
    1c8a:	08 95       	ret

00001c8c <vTaskSuspendAll>:
    1c8c:	80 91 f0 15 	lds	r24, 0x15F0	; 0x8015f0 <uxSchedulerSuspended>
    1c90:	8f 5f       	subi	r24, 0xFF	; 255
    1c92:	80 93 f0 15 	sts	0x15F0, r24	; 0x8015f0 <uxSchedulerSuspended>
    1c96:	08 95       	ret

00001c98 <xTaskGetTickCount>:
    1c98:	0f b6       	in	r0, 0x3f	; 63
    1c9a:	f8 94       	cli
    1c9c:	0f 92       	push	r0
    1c9e:	60 91 00 16 	lds	r22, 0x1600	; 0x801600 <xTickCount>
    1ca2:	70 91 01 16 	lds	r23, 0x1601	; 0x801601 <xTickCount+0x1>
    1ca6:	80 91 02 16 	lds	r24, 0x1602	; 0x801602 <xTickCount+0x2>
    1caa:	90 91 03 16 	lds	r25, 0x1603	; 0x801603 <xTickCount+0x3>
    1cae:	0f 90       	pop	r0
    1cb0:	0f be       	out	0x3f, r0	; 63
    1cb2:	08 95       	ret

00001cb4 <xTaskIncrementTick>:
    1cb4:	cf 92       	push	r12
    1cb6:	df 92       	push	r13
    1cb8:	ef 92       	push	r14
    1cba:	ff 92       	push	r15
    1cbc:	cf 93       	push	r28
    1cbe:	df 93       	push	r29
    1cc0:	80 91 f0 15 	lds	r24, 0x15F0	; 0x8015f0 <uxSchedulerSuspended>
    1cc4:	81 11       	cpse	r24, r1
    1cc6:	05 c1       	rjmp	.+522    	; 0x1ed2 <xTaskIncrementTick+0x21e>
    1cc8:	c0 90 00 16 	lds	r12, 0x1600	; 0x801600 <xTickCount>
    1ccc:	d0 90 01 16 	lds	r13, 0x1601	; 0x801601 <xTickCount+0x1>
    1cd0:	e0 90 02 16 	lds	r14, 0x1602	; 0x801602 <xTickCount+0x2>
    1cd4:	f0 90 03 16 	lds	r15, 0x1603	; 0x801603 <xTickCount+0x3>
    1cd8:	8f ef       	ldi	r24, 0xFF	; 255
    1cda:	c8 1a       	sub	r12, r24
    1cdc:	d8 0a       	sbc	r13, r24
    1cde:	e8 0a       	sbc	r14, r24
    1ce0:	f8 0a       	sbc	r15, r24
    1ce2:	c0 92 00 16 	sts	0x1600, r12	; 0x801600 <xTickCount>
    1ce6:	d0 92 01 16 	sts	0x1601, r13	; 0x801601 <xTickCount+0x1>
    1cea:	e0 92 02 16 	sts	0x1602, r14	; 0x801602 <xTickCount+0x2>
    1cee:	f0 92 03 16 	sts	0x1603, r15	; 0x801603 <xTickCount+0x3>
    1cf2:	c1 14       	cp	r12, r1
    1cf4:	d1 04       	cpc	r13, r1
    1cf6:	e1 04       	cpc	r14, r1
    1cf8:	f1 04       	cpc	r15, r1
    1cfa:	b1 f4       	brne	.+44     	; 0x1d28 <xTaskIncrementTick+0x74>
    1cfc:	80 91 29 16 	lds	r24, 0x1629	; 0x801629 <pxDelayedTaskList>
    1d00:	90 91 2a 16 	lds	r25, 0x162A	; 0x80162a <pxDelayedTaskList+0x1>
    1d04:	20 91 27 16 	lds	r18, 0x1627	; 0x801627 <pxOverflowDelayedTaskList>
    1d08:	30 91 28 16 	lds	r19, 0x1628	; 0x801628 <pxOverflowDelayedTaskList+0x1>
    1d0c:	30 93 2a 16 	sts	0x162A, r19	; 0x80162a <pxDelayedTaskList+0x1>
    1d10:	20 93 29 16 	sts	0x1629, r18	; 0x801629 <pxDelayedTaskList>
    1d14:	90 93 28 16 	sts	0x1628, r25	; 0x801628 <pxOverflowDelayedTaskList+0x1>
    1d18:	80 93 27 16 	sts	0x1627, r24	; 0x801627 <pxOverflowDelayedTaskList>
    1d1c:	80 91 f8 15 	lds	r24, 0x15F8	; 0x8015f8 <xNumOfOverflows>
    1d20:	8f 5f       	subi	r24, 0xFF	; 255
    1d22:	80 93 f8 15 	sts	0x15F8, r24	; 0x8015f8 <xNumOfOverflows>
    1d26:	17 dd       	rcall	.-1490   	; 0x1756 <prvResetNextTaskUnblockTime>
    1d28:	80 91 f3 15 	lds	r24, 0x15F3	; 0x8015f3 <xNextTaskUnblockTime>
    1d2c:	90 91 f4 15 	lds	r25, 0x15F4	; 0x8015f4 <xNextTaskUnblockTime+0x1>
    1d30:	a0 91 f5 15 	lds	r26, 0x15F5	; 0x8015f5 <xNextTaskUnblockTime+0x2>
    1d34:	b0 91 f6 15 	lds	r27, 0x15F6	; 0x8015f6 <xNextTaskUnblockTime+0x3>
    1d38:	c8 16       	cp	r12, r24
    1d3a:	d9 06       	cpc	r13, r25
    1d3c:	ea 06       	cpc	r14, r26
    1d3e:	fb 06       	cpc	r15, r27
    1d40:	20 f4       	brcc	.+8      	; 0x1d4a <xTaskIncrementTick+0x96>
    1d42:	80 e0       	ldi	r24, 0x00	; 0
    1d44:	b2 c0       	rjmp	.+356    	; 0x1eaa <xTaskIncrementTick+0x1f6>
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	01 c0       	rjmp	.+2      	; 0x1d4c <xTaskIncrementTick+0x98>
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	e0 91 29 16 	lds	r30, 0x1629	; 0x801629 <pxDelayedTaskList>
    1d50:	f0 91 2a 16 	lds	r31, 0x162A	; 0x80162a <pxDelayedTaskList+0x1>
    1d54:	90 81       	ld	r25, Z
    1d56:	91 11       	cpse	r25, r1
    1d58:	0c c0       	rjmp	.+24     	; 0x1d72 <xTaskIncrementTick+0xbe>
    1d5a:	4f ef       	ldi	r20, 0xFF	; 255
    1d5c:	5f ef       	ldi	r21, 0xFF	; 255
    1d5e:	ba 01       	movw	r22, r20
    1d60:	40 93 f3 15 	sts	0x15F3, r20	; 0x8015f3 <xNextTaskUnblockTime>
    1d64:	50 93 f4 15 	sts	0x15F4, r21	; 0x8015f4 <xNextTaskUnblockTime+0x1>
    1d68:	60 93 f5 15 	sts	0x15F5, r22	; 0x8015f5 <xNextTaskUnblockTime+0x2>
    1d6c:	70 93 f6 15 	sts	0x15F6, r23	; 0x8015f6 <xNextTaskUnblockTime+0x3>
    1d70:	9c c0       	rjmp	.+312    	; 0x1eaa <xTaskIncrementTick+0x1f6>
    1d72:	e0 91 29 16 	lds	r30, 0x1629	; 0x801629 <pxDelayedTaskList>
    1d76:	f0 91 2a 16 	lds	r31, 0x162A	; 0x80162a <pxDelayedTaskList+0x1>
    1d7a:	07 80       	ldd	r0, Z+7	; 0x07
    1d7c:	f0 85       	ldd	r31, Z+8	; 0x08
    1d7e:	e0 2d       	mov	r30, r0
    1d80:	00 84       	ldd	r0, Z+8	; 0x08
    1d82:	f1 85       	ldd	r31, Z+9	; 0x09
    1d84:	e0 2d       	mov	r30, r0
    1d86:	42 81       	ldd	r20, Z+2	; 0x02
    1d88:	53 81       	ldd	r21, Z+3	; 0x03
    1d8a:	64 81       	ldd	r22, Z+4	; 0x04
    1d8c:	75 81       	ldd	r23, Z+5	; 0x05
    1d8e:	c4 16       	cp	r12, r20
    1d90:	d5 06       	cpc	r13, r21
    1d92:	e6 06       	cpc	r14, r22
    1d94:	f7 06       	cpc	r15, r23
    1d96:	48 f4       	brcc	.+18     	; 0x1daa <xTaskIncrementTick+0xf6>
    1d98:	40 93 f3 15 	sts	0x15F3, r20	; 0x8015f3 <xNextTaskUnblockTime>
    1d9c:	50 93 f4 15 	sts	0x15F4, r21	; 0x8015f4 <xNextTaskUnblockTime+0x1>
    1da0:	60 93 f5 15 	sts	0x15F5, r22	; 0x8015f5 <xNextTaskUnblockTime+0x2>
    1da4:	70 93 f6 15 	sts	0x15F6, r23	; 0x8015f6 <xNextTaskUnblockTime+0x3>
    1da8:	80 c0       	rjmp	.+256    	; 0x1eaa <xTaskIncrementTick+0x1f6>
    1daa:	a4 85       	ldd	r26, Z+12	; 0x0c
    1dac:	b5 85       	ldd	r27, Z+13	; 0x0d
    1dae:	c6 81       	ldd	r28, Z+6	; 0x06
    1db0:	d7 81       	ldd	r29, Z+7	; 0x07
    1db2:	20 85       	ldd	r18, Z+8	; 0x08
    1db4:	31 85       	ldd	r19, Z+9	; 0x09
    1db6:	3f 83       	std	Y+7, r19	; 0x07
    1db8:	2e 83       	std	Y+6, r18	; 0x06
    1dba:	c0 85       	ldd	r28, Z+8	; 0x08
    1dbc:	d1 85       	ldd	r29, Z+9	; 0x09
    1dbe:	26 81       	ldd	r18, Z+6	; 0x06
    1dc0:	37 81       	ldd	r19, Z+7	; 0x07
    1dc2:	3d 83       	std	Y+5, r19	; 0x05
    1dc4:	2c 83       	std	Y+4, r18	; 0x04
    1dc6:	11 96       	adiw	r26, 0x01	; 1
    1dc8:	4d 91       	ld	r20, X+
    1dca:	5c 91       	ld	r21, X
    1dcc:	12 97       	sbiw	r26, 0x02	; 2
    1dce:	9f 01       	movw	r18, r30
    1dd0:	2e 5f       	subi	r18, 0xFE	; 254
    1dd2:	3f 4f       	sbci	r19, 0xFF	; 255
    1dd4:	42 17       	cp	r20, r18
    1dd6:	53 07       	cpc	r21, r19
    1dd8:	31 f4       	brne	.+12     	; 0x1de6 <xTaskIncrementTick+0x132>
    1dda:	40 85       	ldd	r20, Z+8	; 0x08
    1ddc:	51 85       	ldd	r21, Z+9	; 0x09
    1dde:	12 96       	adiw	r26, 0x02	; 2
    1de0:	5c 93       	st	X, r21
    1de2:	4e 93       	st	-X, r20
    1de4:	11 97       	sbiw	r26, 0x01	; 1
    1de6:	15 86       	std	Z+13, r1	; 0x0d
    1de8:	14 86       	std	Z+12, r1	; 0x0c
    1dea:	9c 91       	ld	r25, X
    1dec:	91 50       	subi	r25, 0x01	; 1
    1dee:	9c 93       	st	X, r25
    1df0:	a0 8d       	ldd	r26, Z+24	; 0x18
    1df2:	b1 8d       	ldd	r27, Z+25	; 0x19
    1df4:	10 97       	sbiw	r26, 0x00	; 0
    1df6:	09 f1       	breq	.+66     	; 0x1e3a <xTaskIncrementTick+0x186>
    1df8:	c2 89       	ldd	r28, Z+18	; 0x12
    1dfa:	d3 89       	ldd	r29, Z+19	; 0x13
    1dfc:	44 89       	ldd	r20, Z+20	; 0x14
    1dfe:	55 89       	ldd	r21, Z+21	; 0x15
    1e00:	5f 83       	std	Y+7, r21	; 0x07
    1e02:	4e 83       	std	Y+6, r20	; 0x06
    1e04:	c4 89       	ldd	r28, Z+20	; 0x14
    1e06:	d5 89       	ldd	r29, Z+21	; 0x15
    1e08:	42 89       	ldd	r20, Z+18	; 0x12
    1e0a:	53 89       	ldd	r21, Z+19	; 0x13
    1e0c:	5d 83       	std	Y+5, r21	; 0x05
    1e0e:	4c 83       	std	Y+4, r20	; 0x04
    1e10:	11 96       	adiw	r26, 0x01	; 1
    1e12:	6d 91       	ld	r22, X+
    1e14:	7c 91       	ld	r23, X
    1e16:	12 97       	sbiw	r26, 0x02	; 2
    1e18:	af 01       	movw	r20, r30
    1e1a:	42 5f       	subi	r20, 0xF2	; 242
    1e1c:	5f 4f       	sbci	r21, 0xFF	; 255
    1e1e:	64 17       	cp	r22, r20
    1e20:	75 07       	cpc	r23, r21
    1e22:	31 f4       	brne	.+12     	; 0x1e30 <xTaskIncrementTick+0x17c>
    1e24:	44 89       	ldd	r20, Z+20	; 0x14
    1e26:	55 89       	ldd	r21, Z+21	; 0x15
    1e28:	12 96       	adiw	r26, 0x02	; 2
    1e2a:	5c 93       	st	X, r21
    1e2c:	4e 93       	st	-X, r20
    1e2e:	11 97       	sbiw	r26, 0x01	; 1
    1e30:	11 8e       	std	Z+25, r1	; 0x19
    1e32:	10 8e       	std	Z+24, r1	; 0x18
    1e34:	9c 91       	ld	r25, X
    1e36:	91 50       	subi	r25, 0x01	; 1
    1e38:	9c 93       	st	X, r25
    1e3a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1e3c:	90 91 ff 15 	lds	r25, 0x15FF	; 0x8015ff <uxTopReadyPriority>
    1e40:	9a 17       	cp	r25, r26
    1e42:	10 f4       	brcc	.+4      	; 0x1e48 <xTaskIncrementTick+0x194>
    1e44:	a0 93 ff 15 	sts	0x15FF, r26	; 0x8015ff <uxTopReadyPriority>
    1e48:	9b e0       	ldi	r25, 0x0B	; 11
    1e4a:	9a 9f       	mul	r25, r26
    1e4c:	d0 01       	movw	r26, r0
    1e4e:	11 24       	eor	r1, r1
    1e50:	af 5b       	subi	r26, 0xBF	; 191
    1e52:	b9 4e       	sbci	r27, 0xE9	; 233
    1e54:	11 96       	adiw	r26, 0x01	; 1
    1e56:	0d 90       	ld	r0, X+
    1e58:	bc 91       	ld	r27, X
    1e5a:	a0 2d       	mov	r26, r0
    1e5c:	b7 83       	std	Z+7, r27	; 0x07
    1e5e:	a6 83       	std	Z+6, r26	; 0x06
    1e60:	16 96       	adiw	r26, 0x06	; 6
    1e62:	4d 91       	ld	r20, X+
    1e64:	5c 91       	ld	r21, X
    1e66:	17 97       	sbiw	r26, 0x07	; 7
    1e68:	51 87       	std	Z+9, r21	; 0x09
    1e6a:	40 87       	std	Z+8, r20	; 0x08
    1e6c:	16 96       	adiw	r26, 0x06	; 6
    1e6e:	cd 91       	ld	r28, X+
    1e70:	dc 91       	ld	r29, X
    1e72:	17 97       	sbiw	r26, 0x07	; 7
    1e74:	3d 83       	std	Y+5, r19	; 0x05
    1e76:	2c 83       	std	Y+4, r18	; 0x04
    1e78:	17 96       	adiw	r26, 0x07	; 7
    1e7a:	3c 93       	st	X, r19
    1e7c:	2e 93       	st	-X, r18
    1e7e:	16 97       	sbiw	r26, 0x06	; 6
    1e80:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1e82:	9a 9f       	mul	r25, r26
    1e84:	d0 01       	movw	r26, r0
    1e86:	11 24       	eor	r1, r1
    1e88:	af 5b       	subi	r26, 0xBF	; 191
    1e8a:	b9 4e       	sbci	r27, 0xE9	; 233
    1e8c:	b5 87       	std	Z+13, r27	; 0x0d
    1e8e:	a4 87       	std	Z+12, r26	; 0x0c
    1e90:	9c 91       	ld	r25, X
    1e92:	9f 5f       	subi	r25, 0xFF	; 255
    1e94:	9c 93       	st	X, r25
    1e96:	22 8d       	ldd	r18, Z+26	; 0x1a
    1e98:	e0 91 af 16 	lds	r30, 0x16AF	; 0x8016af <pxCurrentTCB>
    1e9c:	f0 91 b0 16 	lds	r31, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    1ea0:	92 8d       	ldd	r25, Z+26	; 0x1a
    1ea2:	29 17       	cp	r18, r25
    1ea4:	08 f0       	brcs	.+2      	; 0x1ea8 <xTaskIncrementTick+0x1f4>
    1ea6:	4f cf       	rjmp	.-354    	; 0x1d46 <xTaskIncrementTick+0x92>
    1ea8:	51 cf       	rjmp	.-350    	; 0x1d4c <xTaskIncrementTick+0x98>
    1eaa:	e0 91 af 16 	lds	r30, 0x16AF	; 0x8016af <pxCurrentTCB>
    1eae:	f0 91 b0 16 	lds	r31, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    1eb2:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1eb4:	9b e0       	ldi	r25, 0x0B	; 11
    1eb6:	e9 9f       	mul	r30, r25
    1eb8:	f0 01       	movw	r30, r0
    1eba:	11 24       	eor	r1, r1
    1ebc:	ef 5b       	subi	r30, 0xBF	; 191
    1ebe:	f9 4e       	sbci	r31, 0xE9	; 233
    1ec0:	90 81       	ld	r25, Z
    1ec2:	92 30       	cpi	r25, 0x02	; 2
    1ec4:	08 f0       	brcs	.+2      	; 0x1ec8 <xTaskIncrementTick+0x214>
    1ec6:	81 e0       	ldi	r24, 0x01	; 1
    1ec8:	90 91 f9 15 	lds	r25, 0x15F9	; 0x8015f9 <xYieldPending>
    1ecc:	91 11       	cpse	r25, r1
    1ece:	16 c0       	rjmp	.+44     	; 0x1efc <xTaskIncrementTick+0x248>
    1ed0:	16 c0       	rjmp	.+44     	; 0x1efe <xTaskIncrementTick+0x24a>
    1ed2:	80 91 fa 15 	lds	r24, 0x15FA	; 0x8015fa <xPendedTicks>
    1ed6:	90 91 fb 15 	lds	r25, 0x15FB	; 0x8015fb <xPendedTicks+0x1>
    1eda:	a0 91 fc 15 	lds	r26, 0x15FC	; 0x8015fc <xPendedTicks+0x2>
    1ede:	b0 91 fd 15 	lds	r27, 0x15FD	; 0x8015fd <xPendedTicks+0x3>
    1ee2:	01 96       	adiw	r24, 0x01	; 1
    1ee4:	a1 1d       	adc	r26, r1
    1ee6:	b1 1d       	adc	r27, r1
    1ee8:	80 93 fa 15 	sts	0x15FA, r24	; 0x8015fa <xPendedTicks>
    1eec:	90 93 fb 15 	sts	0x15FB, r25	; 0x8015fb <xPendedTicks+0x1>
    1ef0:	a0 93 fc 15 	sts	0x15FC, r26	; 0x8015fc <xPendedTicks+0x2>
    1ef4:	b0 93 fd 15 	sts	0x15FD, r27	; 0x8015fd <xPendedTicks+0x3>
    1ef8:	80 e0       	ldi	r24, 0x00	; 0
    1efa:	01 c0       	rjmp	.+2      	; 0x1efe <xTaskIncrementTick+0x24a>
    1efc:	81 e0       	ldi	r24, 0x01	; 1
    1efe:	df 91       	pop	r29
    1f00:	cf 91       	pop	r28
    1f02:	ff 90       	pop	r15
    1f04:	ef 90       	pop	r14
    1f06:	df 90       	pop	r13
    1f08:	cf 90       	pop	r12
    1f0a:	08 95       	ret

00001f0c <xTaskResumeAll>:
    1f0c:	cf 92       	push	r12
    1f0e:	df 92       	push	r13
    1f10:	ef 92       	push	r14
    1f12:	ff 92       	push	r15
    1f14:	cf 93       	push	r28
    1f16:	df 93       	push	r29
    1f18:	0f b6       	in	r0, 0x3f	; 63
    1f1a:	f8 94       	cli
    1f1c:	0f 92       	push	r0
    1f1e:	80 91 f0 15 	lds	r24, 0x15F0	; 0x8015f0 <uxSchedulerSuspended>
    1f22:	81 50       	subi	r24, 0x01	; 1
    1f24:	80 93 f0 15 	sts	0x15F0, r24	; 0x8015f0 <uxSchedulerSuspended>
    1f28:	80 91 f0 15 	lds	r24, 0x15F0	; 0x8015f0 <uxSchedulerSuspended>
    1f2c:	81 11       	cpse	r24, r1
    1f2e:	be c0       	rjmp	.+380    	; 0x20ac <__DATA_REGION_LENGTH__+0xac>
    1f30:	80 91 04 16 	lds	r24, 0x1604	; 0x801604 <uxCurrentNumberOfTasks>
    1f34:	81 11       	cpse	r24, r1
    1f36:	88 c0       	rjmp	.+272    	; 0x2048 <__DATA_REGION_LENGTH__+0x48>
    1f38:	bc c0       	rjmp	.+376    	; 0x20b2 <__DATA_REGION_LENGTH__+0xb2>
    1f3a:	e0 91 23 16 	lds	r30, 0x1623	; 0x801623 <xPendingReadyList+0x7>
    1f3e:	f0 91 24 16 	lds	r31, 0x1624	; 0x801624 <xPendingReadyList+0x8>
    1f42:	00 84       	ldd	r0, Z+8	; 0x08
    1f44:	f1 85       	ldd	r31, Z+9	; 0x09
    1f46:	e0 2d       	mov	r30, r0
    1f48:	a0 8d       	ldd	r26, Z+24	; 0x18
    1f4a:	b1 8d       	ldd	r27, Z+25	; 0x19
    1f4c:	c2 89       	ldd	r28, Z+18	; 0x12
    1f4e:	d3 89       	ldd	r29, Z+19	; 0x13
    1f50:	84 89       	ldd	r24, Z+20	; 0x14
    1f52:	95 89       	ldd	r25, Z+21	; 0x15
    1f54:	9f 83       	std	Y+7, r25	; 0x07
    1f56:	8e 83       	std	Y+6, r24	; 0x06
    1f58:	c4 89       	ldd	r28, Z+20	; 0x14
    1f5a:	d5 89       	ldd	r29, Z+21	; 0x15
    1f5c:	82 89       	ldd	r24, Z+18	; 0x12
    1f5e:	93 89       	ldd	r25, Z+19	; 0x13
    1f60:	9d 83       	std	Y+5, r25	; 0x05
    1f62:	8c 83       	std	Y+4, r24	; 0x04
    1f64:	11 96       	adiw	r26, 0x01	; 1
    1f66:	2d 91       	ld	r18, X+
    1f68:	3c 91       	ld	r19, X
    1f6a:	12 97       	sbiw	r26, 0x02	; 2
    1f6c:	cf 01       	movw	r24, r30
    1f6e:	0e 96       	adiw	r24, 0x0e	; 14
    1f70:	28 17       	cp	r18, r24
    1f72:	39 07       	cpc	r19, r25
    1f74:	31 f4       	brne	.+12     	; 0x1f82 <xTaskResumeAll+0x76>
    1f76:	84 89       	ldd	r24, Z+20	; 0x14
    1f78:	95 89       	ldd	r25, Z+21	; 0x15
    1f7a:	12 96       	adiw	r26, 0x02	; 2
    1f7c:	9c 93       	st	X, r25
    1f7e:	8e 93       	st	-X, r24
    1f80:	11 97       	sbiw	r26, 0x01	; 1
    1f82:	11 8e       	std	Z+25, r1	; 0x19
    1f84:	10 8e       	std	Z+24, r1	; 0x18
    1f86:	8c 91       	ld	r24, X
    1f88:	81 50       	subi	r24, 0x01	; 1
    1f8a:	8c 93       	st	X, r24
    1f8c:	a4 85       	ldd	r26, Z+12	; 0x0c
    1f8e:	b5 85       	ldd	r27, Z+13	; 0x0d
    1f90:	c6 81       	ldd	r28, Z+6	; 0x06
    1f92:	d7 81       	ldd	r29, Z+7	; 0x07
    1f94:	80 85       	ldd	r24, Z+8	; 0x08
    1f96:	91 85       	ldd	r25, Z+9	; 0x09
    1f98:	9f 83       	std	Y+7, r25	; 0x07
    1f9a:	8e 83       	std	Y+6, r24	; 0x06
    1f9c:	c0 85       	ldd	r28, Z+8	; 0x08
    1f9e:	d1 85       	ldd	r29, Z+9	; 0x09
    1fa0:	86 81       	ldd	r24, Z+6	; 0x06
    1fa2:	97 81       	ldd	r25, Z+7	; 0x07
    1fa4:	9d 83       	std	Y+5, r25	; 0x05
    1fa6:	8c 83       	std	Y+4, r24	; 0x04
    1fa8:	11 96       	adiw	r26, 0x01	; 1
    1faa:	8d 91       	ld	r24, X+
    1fac:	9c 91       	ld	r25, X
    1fae:	12 97       	sbiw	r26, 0x02	; 2
    1fb0:	9f 01       	movw	r18, r30
    1fb2:	2e 5f       	subi	r18, 0xFE	; 254
    1fb4:	3f 4f       	sbci	r19, 0xFF	; 255
    1fb6:	82 17       	cp	r24, r18
    1fb8:	93 07       	cpc	r25, r19
    1fba:	31 f4       	brne	.+12     	; 0x1fc8 <xTaskResumeAll+0xbc>
    1fbc:	80 85       	ldd	r24, Z+8	; 0x08
    1fbe:	91 85       	ldd	r25, Z+9	; 0x09
    1fc0:	12 96       	adiw	r26, 0x02	; 2
    1fc2:	9c 93       	st	X, r25
    1fc4:	8e 93       	st	-X, r24
    1fc6:	11 97       	sbiw	r26, 0x01	; 1
    1fc8:	15 86       	std	Z+13, r1	; 0x0d
    1fca:	14 86       	std	Z+12, r1	; 0x0c
    1fcc:	8c 91       	ld	r24, X
    1fce:	81 50       	subi	r24, 0x01	; 1
    1fd0:	8c 93       	st	X, r24
    1fd2:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1fd4:	80 91 ff 15 	lds	r24, 0x15FF	; 0x8015ff <uxTopReadyPriority>
    1fd8:	8a 17       	cp	r24, r26
    1fda:	10 f4       	brcc	.+4      	; 0x1fe0 <xTaskResumeAll+0xd4>
    1fdc:	a0 93 ff 15 	sts	0x15FF, r26	; 0x8015ff <uxTopReadyPriority>
    1fe0:	8b e0       	ldi	r24, 0x0B	; 11
    1fe2:	8a 9f       	mul	r24, r26
    1fe4:	d0 01       	movw	r26, r0
    1fe6:	11 24       	eor	r1, r1
    1fe8:	af 5b       	subi	r26, 0xBF	; 191
    1fea:	b9 4e       	sbci	r27, 0xE9	; 233
    1fec:	11 96       	adiw	r26, 0x01	; 1
    1fee:	0d 90       	ld	r0, X+
    1ff0:	bc 91       	ld	r27, X
    1ff2:	a0 2d       	mov	r26, r0
    1ff4:	b7 83       	std	Z+7, r27	; 0x07
    1ff6:	a6 83       	std	Z+6, r26	; 0x06
    1ff8:	16 96       	adiw	r26, 0x06	; 6
    1ffa:	4d 91       	ld	r20, X+
    1ffc:	5c 91       	ld	r21, X
    1ffe:	17 97       	sbiw	r26, 0x07	; 7
    2000:	51 87       	std	Z+9, r21	; 0x09
    2002:	40 87       	std	Z+8, r20	; 0x08
    2004:	16 96       	adiw	r26, 0x06	; 6
    2006:	cd 91       	ld	r28, X+
    2008:	dc 91       	ld	r29, X
    200a:	17 97       	sbiw	r26, 0x07	; 7
    200c:	3d 83       	std	Y+5, r19	; 0x05
    200e:	2c 83       	std	Y+4, r18	; 0x04
    2010:	17 96       	adiw	r26, 0x07	; 7
    2012:	3c 93       	st	X, r19
    2014:	2e 93       	st	-X, r18
    2016:	16 97       	sbiw	r26, 0x06	; 6
    2018:	a2 8d       	ldd	r26, Z+26	; 0x1a
    201a:	8a 9f       	mul	r24, r26
    201c:	d0 01       	movw	r26, r0
    201e:	11 24       	eor	r1, r1
    2020:	af 5b       	subi	r26, 0xBF	; 191
    2022:	b9 4e       	sbci	r27, 0xE9	; 233
    2024:	b5 87       	std	Z+13, r27	; 0x0d
    2026:	a4 87       	std	Z+12, r26	; 0x0c
    2028:	8c 91       	ld	r24, X
    202a:	8f 5f       	subi	r24, 0xFF	; 255
    202c:	8c 93       	st	X, r24
    202e:	92 8d       	ldd	r25, Z+26	; 0x1a
    2030:	a0 91 af 16 	lds	r26, 0x16AF	; 0x8016af <pxCurrentTCB>
    2034:	b0 91 b0 16 	lds	r27, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    2038:	5a 96       	adiw	r26, 0x1a	; 26
    203a:	8c 91       	ld	r24, X
    203c:	98 17       	cp	r25, r24
    203e:	30 f0       	brcs	.+12     	; 0x204c <__DATA_REGION_LENGTH__+0x4c>
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	80 93 f9 15 	sts	0x15F9, r24	; 0x8015f9 <xYieldPending>
    2046:	02 c0       	rjmp	.+4      	; 0x204c <__DATA_REGION_LENGTH__+0x4c>
    2048:	e0 e0       	ldi	r30, 0x00	; 0
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	80 91 1c 16 	lds	r24, 0x161C	; 0x80161c <xPendingReadyList>
    2050:	81 11       	cpse	r24, r1
    2052:	73 cf       	rjmp	.-282    	; 0x1f3a <xTaskResumeAll+0x2e>
    2054:	ef 2b       	or	r30, r31
    2056:	09 f0       	breq	.+2      	; 0x205a <__DATA_REGION_LENGTH__+0x5a>
    2058:	7e db       	rcall	.-2308   	; 0x1756 <prvResetNextTaskUnblockTime>
    205a:	c0 90 fa 15 	lds	r12, 0x15FA	; 0x8015fa <xPendedTicks>
    205e:	d0 90 fb 15 	lds	r13, 0x15FB	; 0x8015fb <xPendedTicks+0x1>
    2062:	e0 90 fc 15 	lds	r14, 0x15FC	; 0x8015fc <xPendedTicks+0x2>
    2066:	f0 90 fd 15 	lds	r15, 0x15FD	; 0x8015fd <xPendedTicks+0x3>
    206a:	c1 14       	cp	r12, r1
    206c:	d1 04       	cpc	r13, r1
    206e:	e1 04       	cpc	r14, r1
    2070:	f1 04       	cpc	r15, r1
    2072:	a1 f0       	breq	.+40     	; 0x209c <__DATA_REGION_LENGTH__+0x9c>
    2074:	1f de       	rcall	.-962    	; 0x1cb4 <xTaskIncrementTick>
    2076:	88 23       	and	r24, r24
    2078:	19 f0       	breq	.+6      	; 0x2080 <__DATA_REGION_LENGTH__+0x80>
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	80 93 f9 15 	sts	0x15F9, r24	; 0x8015f9 <xYieldPending>
    2080:	81 e0       	ldi	r24, 0x01	; 1
    2082:	c8 1a       	sub	r12, r24
    2084:	d1 08       	sbc	r13, r1
    2086:	e1 08       	sbc	r14, r1
    2088:	f1 08       	sbc	r15, r1
    208a:	a1 f7       	brne	.-24     	; 0x2074 <__DATA_REGION_LENGTH__+0x74>
    208c:	10 92 fa 15 	sts	0x15FA, r1	; 0x8015fa <xPendedTicks>
    2090:	10 92 fb 15 	sts	0x15FB, r1	; 0x8015fb <xPendedTicks+0x1>
    2094:	10 92 fc 15 	sts	0x15FC, r1	; 0x8015fc <xPendedTicks+0x2>
    2098:	10 92 fd 15 	sts	0x15FD, r1	; 0x8015fd <xPendedTicks+0x3>
    209c:	80 91 f9 15 	lds	r24, 0x15F9	; 0x8015f9 <xYieldPending>
    20a0:	88 23       	and	r24, r24
    20a2:	31 f0       	breq	.+12     	; 0x20b0 <__DATA_REGION_LENGTH__+0xb0>
    20a4:	0e 94 91 04 	call	0x922	; 0x922 <vPortYield>
    20a8:	81 e0       	ldi	r24, 0x01	; 1
    20aa:	03 c0       	rjmp	.+6      	; 0x20b2 <__DATA_REGION_LENGTH__+0xb2>
    20ac:	80 e0       	ldi	r24, 0x00	; 0
    20ae:	01 c0       	rjmp	.+2      	; 0x20b2 <__DATA_REGION_LENGTH__+0xb2>
    20b0:	80 e0       	ldi	r24, 0x00	; 0
    20b2:	0f 90       	pop	r0
    20b4:	0f be       	out	0x3f, r0	; 63
    20b6:	df 91       	pop	r29
    20b8:	cf 91       	pop	r28
    20ba:	ff 90       	pop	r15
    20bc:	ef 90       	pop	r14
    20be:	df 90       	pop	r13
    20c0:	cf 90       	pop	r12
    20c2:	08 95       	ret

000020c4 <xTaskDelayUntil>:
    20c4:	8f 92       	push	r8
    20c6:	9f 92       	push	r9
    20c8:	af 92       	push	r10
    20ca:	bf 92       	push	r11
    20cc:	cf 92       	push	r12
    20ce:	df 92       	push	r13
    20d0:	ef 92       	push	r14
    20d2:	ff 92       	push	r15
    20d4:	1f 93       	push	r17
    20d6:	cf 93       	push	r28
    20d8:	df 93       	push	r29
    20da:	ec 01       	movw	r28, r24
    20dc:	6a 01       	movw	r12, r20
    20de:	7b 01       	movw	r14, r22
    20e0:	d5 dd       	rcall	.-1110   	; 0x1c8c <vTaskSuspendAll>
    20e2:	80 90 00 16 	lds	r8, 0x1600	; 0x801600 <xTickCount>
    20e6:	90 90 01 16 	lds	r9, 0x1601	; 0x801601 <xTickCount+0x1>
    20ea:	a0 90 02 16 	lds	r10, 0x1602	; 0x801602 <xTickCount+0x2>
    20ee:	b0 90 03 16 	lds	r11, 0x1603	; 0x801603 <xTickCount+0x3>
    20f2:	88 81       	ld	r24, Y
    20f4:	99 81       	ldd	r25, Y+1	; 0x01
    20f6:	aa 81       	ldd	r26, Y+2	; 0x02
    20f8:	bb 81       	ldd	r27, Y+3	; 0x03
    20fa:	ac 01       	movw	r20, r24
    20fc:	bd 01       	movw	r22, r26
    20fe:	4c 0d       	add	r20, r12
    2100:	5d 1d       	adc	r21, r13
    2102:	6e 1d       	adc	r22, r14
    2104:	7f 1d       	adc	r23, r15
    2106:	88 16       	cp	r8, r24
    2108:	99 06       	cpc	r9, r25
    210a:	aa 06       	cpc	r10, r26
    210c:	bb 06       	cpc	r11, r27
    210e:	60 f4       	brcc	.+24     	; 0x2128 <xTaskDelayUntil+0x64>
    2110:	48 17       	cp	r20, r24
    2112:	59 07       	cpc	r21, r25
    2114:	6a 07       	cpc	r22, r26
    2116:	7b 07       	cpc	r23, r27
    2118:	98 f4       	brcc	.+38     	; 0x2140 <xTaskDelayUntil+0x7c>
    211a:	84 16       	cp	r8, r20
    211c:	95 06       	cpc	r9, r21
    211e:	a6 06       	cpc	r10, r22
    2120:	b7 06       	cpc	r11, r23
    2122:	80 f0       	brcs	.+32     	; 0x2144 <xTaskDelayUntil+0x80>
    2124:	10 e0       	ldi	r17, 0x00	; 0
    2126:	13 c0       	rjmp	.+38     	; 0x214e <xTaskDelayUntil+0x8a>
    2128:	48 17       	cp	r20, r24
    212a:	59 07       	cpc	r21, r25
    212c:	6a 07       	cpc	r22, r26
    212e:	7b 07       	cpc	r23, r27
    2130:	58 f0       	brcs	.+22     	; 0x2148 <xTaskDelayUntil+0x84>
    2132:	84 16       	cp	r8, r20
    2134:	95 06       	cpc	r9, r21
    2136:	a6 06       	cpc	r10, r22
    2138:	b7 06       	cpc	r11, r23
    213a:	40 f0       	brcs	.+16     	; 0x214c <xTaskDelayUntil+0x88>
    213c:	10 e0       	ldi	r17, 0x00	; 0
    213e:	07 c0       	rjmp	.+14     	; 0x214e <xTaskDelayUntil+0x8a>
    2140:	10 e0       	ldi	r17, 0x00	; 0
    2142:	05 c0       	rjmp	.+10     	; 0x214e <xTaskDelayUntil+0x8a>
    2144:	11 e0       	ldi	r17, 0x01	; 1
    2146:	03 c0       	rjmp	.+6      	; 0x214e <xTaskDelayUntil+0x8a>
    2148:	11 e0       	ldi	r17, 0x01	; 1
    214a:	01 c0       	rjmp	.+2      	; 0x214e <xTaskDelayUntil+0x8a>
    214c:	11 e0       	ldi	r17, 0x01	; 1
    214e:	48 83       	st	Y, r20
    2150:	59 83       	std	Y+1, r21	; 0x01
    2152:	6a 83       	std	Y+2, r22	; 0x02
    2154:	7b 83       	std	Y+3, r23	; 0x03
    2156:	11 23       	and	r17, r17
    2158:	41 f0       	breq	.+16     	; 0x216a <xTaskDelayUntil+0xa6>
    215a:	cb 01       	movw	r24, r22
    215c:	ba 01       	movw	r22, r20
    215e:	68 19       	sub	r22, r8
    2160:	79 09       	sbc	r23, r9
    2162:	8a 09       	sbc	r24, r10
    2164:	9b 09       	sbc	r25, r11
    2166:	40 e0       	ldi	r20, 0x00	; 0
    2168:	6b dc       	rcall	.-1834   	; 0x1a40 <prvAddCurrentTaskToDelayedList>
    216a:	d0 de       	rcall	.-608    	; 0x1f0c <xTaskResumeAll>
    216c:	81 11       	cpse	r24, r1
    216e:	02 c0       	rjmp	.+4      	; 0x2174 <xTaskDelayUntil+0xb0>
    2170:	0e 94 91 04 	call	0x922	; 0x922 <vPortYield>
    2174:	81 2f       	mov	r24, r17
    2176:	df 91       	pop	r29
    2178:	cf 91       	pop	r28
    217a:	1f 91       	pop	r17
    217c:	ff 90       	pop	r15
    217e:	ef 90       	pop	r14
    2180:	df 90       	pop	r13
    2182:	cf 90       	pop	r12
    2184:	bf 90       	pop	r11
    2186:	af 90       	pop	r10
    2188:	9f 90       	pop	r9
    218a:	8f 90       	pop	r8
    218c:	08 95       	ret

0000218e <vTaskDelay>:
    218e:	cf 92       	push	r12
    2190:	df 92       	push	r13
    2192:	ef 92       	push	r14
    2194:	ff 92       	push	r15
    2196:	6b 01       	movw	r12, r22
    2198:	7c 01       	movw	r14, r24
    219a:	67 2b       	or	r22, r23
    219c:	68 2b       	or	r22, r24
    219e:	69 2b       	or	r22, r25
    21a0:	39 f0       	breq	.+14     	; 0x21b0 <vTaskDelay+0x22>
    21a2:	74 dd       	rcall	.-1304   	; 0x1c8c <vTaskSuspendAll>
    21a4:	40 e0       	ldi	r20, 0x00	; 0
    21a6:	c7 01       	movw	r24, r14
    21a8:	b6 01       	movw	r22, r12
    21aa:	4a dc       	rcall	.-1900   	; 0x1a40 <prvAddCurrentTaskToDelayedList>
    21ac:	af de       	rcall	.-674    	; 0x1f0c <xTaskResumeAll>
    21ae:	01 c0       	rjmp	.+2      	; 0x21b2 <vTaskDelay+0x24>
    21b0:	80 e0       	ldi	r24, 0x00	; 0
    21b2:	81 11       	cpse	r24, r1
    21b4:	02 c0       	rjmp	.+4      	; 0x21ba <vTaskDelay+0x2c>
    21b6:	0e 94 91 04 	call	0x922	; 0x922 <vPortYield>
    21ba:	ff 90       	pop	r15
    21bc:	ef 90       	pop	r14
    21be:	df 90       	pop	r13
    21c0:	cf 90       	pop	r12
    21c2:	08 95       	ret

000021c4 <vTaskSwitchContext>:
    21c4:	80 91 f0 15 	lds	r24, 0x15F0	; 0x8015f0 <uxSchedulerSuspended>
    21c8:	88 23       	and	r24, r24
    21ca:	21 f0       	breq	.+8      	; 0x21d4 <vTaskSwitchContext+0x10>
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	80 93 f9 15 	sts	0x15F9, r24	; 0x8015f9 <xYieldPending>
    21d2:	08 95       	ret
    21d4:	10 92 f9 15 	sts	0x15F9, r1	; 0x8015f9 <xYieldPending>
    21d8:	e0 91 af 16 	lds	r30, 0x16AF	; 0x8016af <pxCurrentTCB>
    21dc:	f0 91 b0 16 	lds	r31, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    21e0:	20 81       	ld	r18, Z
    21e2:	31 81       	ldd	r19, Z+1	; 0x01
    21e4:	e0 91 af 16 	lds	r30, 0x16AF	; 0x8016af <pxCurrentTCB>
    21e8:	f0 91 b0 16 	lds	r31, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    21ec:	83 8d       	ldd	r24, Z+27	; 0x1b
    21ee:	94 8d       	ldd	r25, Z+28	; 0x1c
    21f0:	82 17       	cp	r24, r18
    21f2:	93 07       	cpc	r25, r19
    21f4:	60 f0       	brcs	.+24     	; 0x220e <__stack+0xf>
    21f6:	60 91 af 16 	lds	r22, 0x16AF	; 0x8016af <pxCurrentTCB>
    21fa:	70 91 b0 16 	lds	r23, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    21fe:	63 5e       	subi	r22, 0xE3	; 227
    2200:	7f 4f       	sbci	r23, 0xFF	; 255
    2202:	80 91 af 16 	lds	r24, 0x16AF	; 0x8016af <pxCurrentTCB>
    2206:	90 91 b0 16 	lds	r25, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    220a:	0e 94 2d 1a 	call	0x345a	; 0x345a <vApplicationStackOverflowHook>
    220e:	80 91 ff 15 	lds	r24, 0x15FF	; 0x8015ff <uxTopReadyPriority>
    2212:	01 c0       	rjmp	.+2      	; 0x2216 <__stack+0x17>
    2214:	81 50       	subi	r24, 0x01	; 1
    2216:	28 2f       	mov	r18, r24
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	9b e0       	ldi	r25, 0x0B	; 11
    221c:	92 9f       	mul	r25, r18
    221e:	f0 01       	movw	r30, r0
    2220:	93 9f       	mul	r25, r19
    2222:	f0 0d       	add	r31, r0
    2224:	11 24       	eor	r1, r1
    2226:	ef 5b       	subi	r30, 0xBF	; 191
    2228:	f9 4e       	sbci	r31, 0xE9	; 233
    222a:	90 81       	ld	r25, Z
    222c:	99 23       	and	r25, r25
    222e:	91 f3       	breq	.-28     	; 0x2214 <__stack+0x15>
    2230:	9b e0       	ldi	r25, 0x0B	; 11
    2232:	92 9f       	mul	r25, r18
    2234:	a0 01       	movw	r20, r0
    2236:	93 9f       	mul	r25, r19
    2238:	50 0d       	add	r21, r0
    223a:	11 24       	eor	r1, r1
    223c:	df 01       	movw	r26, r30
    223e:	01 80       	ldd	r0, Z+1	; 0x01
    2240:	f2 81       	ldd	r31, Z+2	; 0x02
    2242:	e0 2d       	mov	r30, r0
    2244:	04 80       	ldd	r0, Z+4	; 0x04
    2246:	f5 81       	ldd	r31, Z+5	; 0x05
    2248:	e0 2d       	mov	r30, r0
    224a:	12 96       	adiw	r26, 0x02	; 2
    224c:	fc 93       	st	X, r31
    224e:	ee 93       	st	-X, r30
    2250:	11 97       	sbiw	r26, 0x01	; 1
    2252:	4c 5b       	subi	r20, 0xBC	; 188
    2254:	59 4e       	sbci	r21, 0xE9	; 233
    2256:	e4 17       	cp	r30, r20
    2258:	f5 07       	cpc	r31, r21
    225a:	29 f4       	brne	.+10     	; 0x2266 <__stack+0x67>
    225c:	44 81       	ldd	r20, Z+4	; 0x04
    225e:	55 81       	ldd	r21, Z+5	; 0x05
    2260:	fd 01       	movw	r30, r26
    2262:	52 83       	std	Z+2, r21	; 0x02
    2264:	41 83       	std	Z+1, r20	; 0x01
    2266:	9b e0       	ldi	r25, 0x0B	; 11
    2268:	92 9f       	mul	r25, r18
    226a:	f0 01       	movw	r30, r0
    226c:	93 9f       	mul	r25, r19
    226e:	f0 0d       	add	r31, r0
    2270:	11 24       	eor	r1, r1
    2272:	ef 5b       	subi	r30, 0xBF	; 191
    2274:	f9 4e       	sbci	r31, 0xE9	; 233
    2276:	01 80       	ldd	r0, Z+1	; 0x01
    2278:	f2 81       	ldd	r31, Z+2	; 0x02
    227a:	e0 2d       	mov	r30, r0
    227c:	20 85       	ldd	r18, Z+8	; 0x08
    227e:	31 85       	ldd	r19, Z+9	; 0x09
    2280:	30 93 b0 16 	sts	0x16B0, r19	; 0x8016b0 <pxCurrentTCB+0x1>
    2284:	20 93 af 16 	sts	0x16AF, r18	; 0x8016af <pxCurrentTCB>
    2288:	80 93 ff 15 	sts	0x15FF, r24	; 0x8015ff <uxTopReadyPriority>
    228c:	08 95       	ret

0000228e <vTaskPlaceOnEventList>:
    228e:	cf 92       	push	r12
    2290:	df 92       	push	r13
    2292:	ef 92       	push	r14
    2294:	ff 92       	push	r15
    2296:	6a 01       	movw	r12, r20
    2298:	7b 01       	movw	r14, r22
    229a:	60 91 af 16 	lds	r22, 0x16AF	; 0x8016af <pxCurrentTCB>
    229e:	70 91 b0 16 	lds	r23, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    22a2:	62 5f       	subi	r22, 0xF2	; 242
    22a4:	7f 4f       	sbci	r23, 0xFF	; 255
    22a6:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <vListInsert>
    22aa:	41 e0       	ldi	r20, 0x01	; 1
    22ac:	c7 01       	movw	r24, r14
    22ae:	b6 01       	movw	r22, r12
    22b0:	c7 db       	rcall	.-2162   	; 0x1a40 <prvAddCurrentTaskToDelayedList>
    22b2:	ff 90       	pop	r15
    22b4:	ef 90       	pop	r14
    22b6:	df 90       	pop	r13
    22b8:	cf 90       	pop	r12
    22ba:	08 95       	ret

000022bc <vTaskPlaceOnUnorderedEventList>:
    22bc:	0f 93       	push	r16
    22be:	1f 93       	push	r17
    22c0:	cf 93       	push	r28
    22c2:	df 93       	push	r29
    22c4:	fc 01       	movw	r30, r24
    22c6:	a0 91 af 16 	lds	r26, 0x16AF	; 0x8016af <pxCurrentTCB>
    22ca:	b0 91 b0 16 	lds	r27, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    22ce:	70 68       	ori	r23, 0x80	; 128
    22d0:	1e 96       	adiw	r26, 0x0e	; 14
    22d2:	4d 93       	st	X+, r20
    22d4:	5d 93       	st	X+, r21
    22d6:	6d 93       	st	X+, r22
    22d8:	7c 93       	st	X, r23
    22da:	51 97       	sbiw	r26, 0x11	; 17
    22dc:	a1 81       	ldd	r26, Z+1	; 0x01
    22de:	b2 81       	ldd	r27, Z+2	; 0x02
    22e0:	c0 91 af 16 	lds	r28, 0x16AF	; 0x8016af <pxCurrentTCB>
    22e4:	d0 91 b0 16 	lds	r29, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    22e8:	bb 8b       	std	Y+19, r27	; 0x13
    22ea:	aa 8b       	std	Y+18, r26	; 0x12
    22ec:	c0 91 af 16 	lds	r28, 0x16AF	; 0x8016af <pxCurrentTCB>
    22f0:	d0 91 b0 16 	lds	r29, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    22f4:	16 96       	adiw	r26, 0x06	; 6
    22f6:	8d 91       	ld	r24, X+
    22f8:	9c 91       	ld	r25, X
    22fa:	17 97       	sbiw	r26, 0x07	; 7
    22fc:	9d 8b       	std	Y+21, r25	; 0x15
    22fe:	8c 8b       	std	Y+20, r24	; 0x14
    2300:	16 96       	adiw	r26, 0x06	; 6
    2302:	cd 91       	ld	r28, X+
    2304:	dc 91       	ld	r29, X
    2306:	17 97       	sbiw	r26, 0x07	; 7
    2308:	80 91 af 16 	lds	r24, 0x16AF	; 0x8016af <pxCurrentTCB>
    230c:	90 91 b0 16 	lds	r25, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    2310:	0e 96       	adiw	r24, 0x0e	; 14
    2312:	9d 83       	std	Y+5, r25	; 0x05
    2314:	8c 83       	std	Y+4, r24	; 0x04
    2316:	80 91 af 16 	lds	r24, 0x16AF	; 0x8016af <pxCurrentTCB>
    231a:	90 91 b0 16 	lds	r25, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    231e:	0e 96       	adiw	r24, 0x0e	; 14
    2320:	17 96       	adiw	r26, 0x07	; 7
    2322:	9c 93       	st	X, r25
    2324:	8e 93       	st	-X, r24
    2326:	16 97       	sbiw	r26, 0x06	; 6
    2328:	a0 91 af 16 	lds	r26, 0x16AF	; 0x8016af <pxCurrentTCB>
    232c:	b0 91 b0 16 	lds	r27, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    2330:	59 96       	adiw	r26, 0x19	; 25
    2332:	fc 93       	st	X, r31
    2334:	ee 93       	st	-X, r30
    2336:	58 97       	sbiw	r26, 0x18	; 24
    2338:	80 81       	ld	r24, Z
    233a:	8f 5f       	subi	r24, 0xFF	; 255
    233c:	80 83       	st	Z, r24
    233e:	41 e0       	ldi	r20, 0x01	; 1
    2340:	c9 01       	movw	r24, r18
    2342:	b8 01       	movw	r22, r16
    2344:	7d db       	rcall	.-2310   	; 0x1a40 <prvAddCurrentTaskToDelayedList>
    2346:	df 91       	pop	r29
    2348:	cf 91       	pop	r28
    234a:	1f 91       	pop	r17
    234c:	0f 91       	pop	r16
    234e:	08 95       	ret

00002350 <vTaskPlaceOnEventListRestricted>:
    2350:	cf 93       	push	r28
    2352:	df 93       	push	r29
    2354:	fc 01       	movw	r30, r24
    2356:	cb 01       	movw	r24, r22
    2358:	ba 01       	movw	r22, r20
    235a:	a1 81       	ldd	r26, Z+1	; 0x01
    235c:	b2 81       	ldd	r27, Z+2	; 0x02
    235e:	c0 91 af 16 	lds	r28, 0x16AF	; 0x8016af <pxCurrentTCB>
    2362:	d0 91 b0 16 	lds	r29, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    2366:	bb 8b       	std	Y+19, r27	; 0x13
    2368:	aa 8b       	std	Y+18, r26	; 0x12
    236a:	c0 91 af 16 	lds	r28, 0x16AF	; 0x8016af <pxCurrentTCB>
    236e:	d0 91 b0 16 	lds	r29, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    2372:	16 96       	adiw	r26, 0x06	; 6
    2374:	4d 91       	ld	r20, X+
    2376:	5c 91       	ld	r21, X
    2378:	17 97       	sbiw	r26, 0x07	; 7
    237a:	5d 8b       	std	Y+21, r21	; 0x15
    237c:	4c 8b       	std	Y+20, r20	; 0x14
    237e:	16 96       	adiw	r26, 0x06	; 6
    2380:	cd 91       	ld	r28, X+
    2382:	dc 91       	ld	r29, X
    2384:	17 97       	sbiw	r26, 0x07	; 7
    2386:	40 91 af 16 	lds	r20, 0x16AF	; 0x8016af <pxCurrentTCB>
    238a:	50 91 b0 16 	lds	r21, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    238e:	42 5f       	subi	r20, 0xF2	; 242
    2390:	5f 4f       	sbci	r21, 0xFF	; 255
    2392:	5d 83       	std	Y+5, r21	; 0x05
    2394:	4c 83       	std	Y+4, r20	; 0x04
    2396:	40 91 af 16 	lds	r20, 0x16AF	; 0x8016af <pxCurrentTCB>
    239a:	50 91 b0 16 	lds	r21, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    239e:	42 5f       	subi	r20, 0xF2	; 242
    23a0:	5f 4f       	sbci	r21, 0xFF	; 255
    23a2:	17 96       	adiw	r26, 0x07	; 7
    23a4:	5c 93       	st	X, r21
    23a6:	4e 93       	st	-X, r20
    23a8:	16 97       	sbiw	r26, 0x06	; 6
    23aa:	a0 91 af 16 	lds	r26, 0x16AF	; 0x8016af <pxCurrentTCB>
    23ae:	b0 91 b0 16 	lds	r27, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    23b2:	59 96       	adiw	r26, 0x19	; 25
    23b4:	fc 93       	st	X, r31
    23b6:	ee 93       	st	-X, r30
    23b8:	58 97       	sbiw	r26, 0x18	; 24
    23ba:	30 81       	ld	r19, Z
    23bc:	3f 5f       	subi	r19, 0xFF	; 255
    23be:	30 83       	st	Z, r19
    23c0:	22 23       	and	r18, r18
    23c2:	19 f0       	breq	.+6      	; 0x23ca <vTaskPlaceOnEventListRestricted+0x7a>
    23c4:	6f ef       	ldi	r22, 0xFF	; 255
    23c6:	7f ef       	ldi	r23, 0xFF	; 255
    23c8:	cb 01       	movw	r24, r22
    23ca:	42 2f       	mov	r20, r18
    23cc:	39 db       	rcall	.-2446   	; 0x1a40 <prvAddCurrentTaskToDelayedList>
    23ce:	df 91       	pop	r29
    23d0:	cf 91       	pop	r28
    23d2:	08 95       	ret

000023d4 <xTaskRemoveFromEventList>:
    23d4:	cf 93       	push	r28
    23d6:	df 93       	push	r29
    23d8:	dc 01       	movw	r26, r24
    23da:	17 96       	adiw	r26, 0x07	; 7
    23dc:	ed 91       	ld	r30, X+
    23de:	fc 91       	ld	r31, X
    23e0:	18 97       	sbiw	r26, 0x08	; 8
    23e2:	00 84       	ldd	r0, Z+8	; 0x08
    23e4:	f1 85       	ldd	r31, Z+9	; 0x09
    23e6:	e0 2d       	mov	r30, r0
    23e8:	a0 8d       	ldd	r26, Z+24	; 0x18
    23ea:	b1 8d       	ldd	r27, Z+25	; 0x19
    23ec:	c2 89       	ldd	r28, Z+18	; 0x12
    23ee:	d3 89       	ldd	r29, Z+19	; 0x13
    23f0:	84 89       	ldd	r24, Z+20	; 0x14
    23f2:	95 89       	ldd	r25, Z+21	; 0x15
    23f4:	9f 83       	std	Y+7, r25	; 0x07
    23f6:	8e 83       	std	Y+6, r24	; 0x06
    23f8:	c4 89       	ldd	r28, Z+20	; 0x14
    23fa:	d5 89       	ldd	r29, Z+21	; 0x15
    23fc:	82 89       	ldd	r24, Z+18	; 0x12
    23fe:	93 89       	ldd	r25, Z+19	; 0x13
    2400:	9d 83       	std	Y+5, r25	; 0x05
    2402:	8c 83       	std	Y+4, r24	; 0x04
    2404:	11 96       	adiw	r26, 0x01	; 1
    2406:	8d 91       	ld	r24, X+
    2408:	9c 91       	ld	r25, X
    240a:	12 97       	sbiw	r26, 0x02	; 2
    240c:	9f 01       	movw	r18, r30
    240e:	22 5f       	subi	r18, 0xF2	; 242
    2410:	3f 4f       	sbci	r19, 0xFF	; 255
    2412:	82 17       	cp	r24, r18
    2414:	93 07       	cpc	r25, r19
    2416:	31 f4       	brne	.+12     	; 0x2424 <xTaskRemoveFromEventList+0x50>
    2418:	84 89       	ldd	r24, Z+20	; 0x14
    241a:	95 89       	ldd	r25, Z+21	; 0x15
    241c:	12 96       	adiw	r26, 0x02	; 2
    241e:	9c 93       	st	X, r25
    2420:	8e 93       	st	-X, r24
    2422:	11 97       	sbiw	r26, 0x01	; 1
    2424:	11 8e       	std	Z+25, r1	; 0x19
    2426:	10 8e       	std	Z+24, r1	; 0x18
    2428:	8c 91       	ld	r24, X
    242a:	81 50       	subi	r24, 0x01	; 1
    242c:	8c 93       	st	X, r24
    242e:	80 91 f0 15 	lds	r24, 0x15F0	; 0x8015f0 <uxSchedulerSuspended>
    2432:	81 11       	cpse	r24, r1
    2434:	52 c0       	rjmp	.+164    	; 0x24da <xTaskRemoveFromEventList+0x106>
    2436:	a4 85       	ldd	r26, Z+12	; 0x0c
    2438:	b5 85       	ldd	r27, Z+13	; 0x0d
    243a:	c6 81       	ldd	r28, Z+6	; 0x06
    243c:	d7 81       	ldd	r29, Z+7	; 0x07
    243e:	80 85       	ldd	r24, Z+8	; 0x08
    2440:	91 85       	ldd	r25, Z+9	; 0x09
    2442:	9f 83       	std	Y+7, r25	; 0x07
    2444:	8e 83       	std	Y+6, r24	; 0x06
    2446:	c0 85       	ldd	r28, Z+8	; 0x08
    2448:	d1 85       	ldd	r29, Z+9	; 0x09
    244a:	86 81       	ldd	r24, Z+6	; 0x06
    244c:	97 81       	ldd	r25, Z+7	; 0x07
    244e:	9d 83       	std	Y+5, r25	; 0x05
    2450:	8c 83       	std	Y+4, r24	; 0x04
    2452:	11 96       	adiw	r26, 0x01	; 1
    2454:	8d 91       	ld	r24, X+
    2456:	9c 91       	ld	r25, X
    2458:	12 97       	sbiw	r26, 0x02	; 2
    245a:	9f 01       	movw	r18, r30
    245c:	2e 5f       	subi	r18, 0xFE	; 254
    245e:	3f 4f       	sbci	r19, 0xFF	; 255
    2460:	82 17       	cp	r24, r18
    2462:	93 07       	cpc	r25, r19
    2464:	31 f4       	brne	.+12     	; 0x2472 <xTaskRemoveFromEventList+0x9e>
    2466:	80 85       	ldd	r24, Z+8	; 0x08
    2468:	91 85       	ldd	r25, Z+9	; 0x09
    246a:	12 96       	adiw	r26, 0x02	; 2
    246c:	9c 93       	st	X, r25
    246e:	8e 93       	st	-X, r24
    2470:	11 97       	sbiw	r26, 0x01	; 1
    2472:	15 86       	std	Z+13, r1	; 0x0d
    2474:	14 86       	std	Z+12, r1	; 0x0c
    2476:	8c 91       	ld	r24, X
    2478:	81 50       	subi	r24, 0x01	; 1
    247a:	8c 93       	st	X, r24
    247c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    247e:	80 91 ff 15 	lds	r24, 0x15FF	; 0x8015ff <uxTopReadyPriority>
    2482:	8a 17       	cp	r24, r26
    2484:	10 f4       	brcc	.+4      	; 0x248a <xTaskRemoveFromEventList+0xb6>
    2486:	a0 93 ff 15 	sts	0x15FF, r26	; 0x8015ff <uxTopReadyPriority>
    248a:	8b e0       	ldi	r24, 0x0B	; 11
    248c:	8a 9f       	mul	r24, r26
    248e:	d0 01       	movw	r26, r0
    2490:	11 24       	eor	r1, r1
    2492:	af 5b       	subi	r26, 0xBF	; 191
    2494:	b9 4e       	sbci	r27, 0xE9	; 233
    2496:	11 96       	adiw	r26, 0x01	; 1
    2498:	0d 90       	ld	r0, X+
    249a:	bc 91       	ld	r27, X
    249c:	a0 2d       	mov	r26, r0
    249e:	b7 83       	std	Z+7, r27	; 0x07
    24a0:	a6 83       	std	Z+6, r26	; 0x06
    24a2:	16 96       	adiw	r26, 0x06	; 6
    24a4:	4d 91       	ld	r20, X+
    24a6:	5c 91       	ld	r21, X
    24a8:	17 97       	sbiw	r26, 0x07	; 7
    24aa:	51 87       	std	Z+9, r21	; 0x09
    24ac:	40 87       	std	Z+8, r20	; 0x08
    24ae:	16 96       	adiw	r26, 0x06	; 6
    24b0:	cd 91       	ld	r28, X+
    24b2:	dc 91       	ld	r29, X
    24b4:	17 97       	sbiw	r26, 0x07	; 7
    24b6:	3d 83       	std	Y+5, r19	; 0x05
    24b8:	2c 83       	std	Y+4, r18	; 0x04
    24ba:	17 96       	adiw	r26, 0x07	; 7
    24bc:	3c 93       	st	X, r19
    24be:	2e 93       	st	-X, r18
    24c0:	16 97       	sbiw	r26, 0x06	; 6
    24c2:	a2 8d       	ldd	r26, Z+26	; 0x1a
    24c4:	8a 9f       	mul	r24, r26
    24c6:	d0 01       	movw	r26, r0
    24c8:	11 24       	eor	r1, r1
    24ca:	af 5b       	subi	r26, 0xBF	; 191
    24cc:	b9 4e       	sbci	r27, 0xE9	; 233
    24ce:	b5 87       	std	Z+13, r27	; 0x0d
    24d0:	a4 87       	std	Z+12, r26	; 0x0c
    24d2:	8c 91       	ld	r24, X
    24d4:	8f 5f       	subi	r24, 0xFF	; 255
    24d6:	8c 93       	st	X, r24
    24d8:	1c c0       	rjmp	.+56     	; 0x2512 <xTaskRemoveFromEventList+0x13e>
    24da:	4c e1       	ldi	r20, 0x1C	; 28
    24dc:	56 e1       	ldi	r21, 0x16	; 22
    24de:	da 01       	movw	r26, r20
    24e0:	11 96       	adiw	r26, 0x01	; 1
    24e2:	cd 91       	ld	r28, X+
    24e4:	dc 91       	ld	r29, X
    24e6:	12 97       	sbiw	r26, 0x02	; 2
    24e8:	d3 8b       	std	Z+19, r29	; 0x13
    24ea:	c2 8b       	std	Z+18, r28	; 0x12
    24ec:	8e 81       	ldd	r24, Y+6	; 0x06
    24ee:	9f 81       	ldd	r25, Y+7	; 0x07
    24f0:	95 8b       	std	Z+21, r25	; 0x15
    24f2:	84 8b       	std	Z+20, r24	; 0x14
    24f4:	8e 81       	ldd	r24, Y+6	; 0x06
    24f6:	9f 81       	ldd	r25, Y+7	; 0x07
    24f8:	dc 01       	movw	r26, r24
    24fa:	15 96       	adiw	r26, 0x05	; 5
    24fc:	3c 93       	st	X, r19
    24fe:	2e 93       	st	-X, r18
    2500:	14 97       	sbiw	r26, 0x04	; 4
    2502:	3f 83       	std	Y+7, r19	; 0x07
    2504:	2e 83       	std	Y+6, r18	; 0x06
    2506:	51 8f       	std	Z+25, r21	; 0x19
    2508:	40 8f       	std	Z+24, r20	; 0x18
    250a:	da 01       	movw	r26, r20
    250c:	8c 91       	ld	r24, X
    250e:	8f 5f       	subi	r24, 0xFF	; 255
    2510:	8c 93       	st	X, r24
    2512:	92 8d       	ldd	r25, Z+26	; 0x1a
    2514:	e0 91 af 16 	lds	r30, 0x16AF	; 0x8016af <pxCurrentTCB>
    2518:	f0 91 b0 16 	lds	r31, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    251c:	82 8d       	ldd	r24, Z+26	; 0x1a
    251e:	89 17       	cp	r24, r25
    2520:	20 f4       	brcc	.+8      	; 0x252a <xTaskRemoveFromEventList+0x156>
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	80 93 f9 15 	sts	0x15F9, r24	; 0x8015f9 <xYieldPending>
    2528:	01 c0       	rjmp	.+2      	; 0x252c <xTaskRemoveFromEventList+0x158>
    252a:	80 e0       	ldi	r24, 0x00	; 0
    252c:	df 91       	pop	r29
    252e:	cf 91       	pop	r28
    2530:	08 95       	ret

00002532 <vTaskRemoveFromUnorderedEventList>:
    2532:	cf 93       	push	r28
    2534:	df 93       	push	r29
    2536:	dc 01       	movw	r26, r24
    2538:	70 68       	ori	r23, 0x80	; 128
    253a:	4d 93       	st	X+, r20
    253c:	5d 93       	st	X+, r21
    253e:	6d 93       	st	X+, r22
    2540:	7c 93       	st	X, r23
    2542:	13 97       	sbiw	r26, 0x03	; 3
    2544:	18 96       	adiw	r26, 0x08	; 8
    2546:	ed 91       	ld	r30, X+
    2548:	fc 91       	ld	r31, X
    254a:	19 97       	sbiw	r26, 0x09	; 9
    254c:	1a 96       	adiw	r26, 0x0a	; 10
    254e:	4d 91       	ld	r20, X+
    2550:	5c 91       	ld	r21, X
    2552:	1b 97       	sbiw	r26, 0x0b	; 11
    2554:	14 96       	adiw	r26, 0x04	; 4
    2556:	8d 91       	ld	r24, X+
    2558:	9c 91       	ld	r25, X
    255a:	15 97       	sbiw	r26, 0x05	; 5
    255c:	16 96       	adiw	r26, 0x06	; 6
    255e:	2d 91       	ld	r18, X+
    2560:	3c 91       	ld	r19, X
    2562:	17 97       	sbiw	r26, 0x07	; 7
    2564:	ec 01       	movw	r28, r24
    2566:	3f 83       	std	Y+7, r19	; 0x07
    2568:	2e 83       	std	Y+6, r18	; 0x06
    256a:	16 96       	adiw	r26, 0x06	; 6
    256c:	8d 91       	ld	r24, X+
    256e:	9c 91       	ld	r25, X
    2570:	17 97       	sbiw	r26, 0x07	; 7
    2572:	14 96       	adiw	r26, 0x04	; 4
    2574:	2d 91       	ld	r18, X+
    2576:	3c 91       	ld	r19, X
    2578:	15 97       	sbiw	r26, 0x05	; 5
    257a:	ec 01       	movw	r28, r24
    257c:	3d 83       	std	Y+5, r19	; 0x05
    257e:	2c 83       	std	Y+4, r18	; 0x04
    2580:	ea 01       	movw	r28, r20
    2582:	89 81       	ldd	r24, Y+1	; 0x01
    2584:	9a 81       	ldd	r25, Y+2	; 0x02
    2586:	a8 17       	cp	r26, r24
    2588:	b9 07       	cpc	r27, r25
    258a:	31 f4       	brne	.+12     	; 0x2598 <vTaskRemoveFromUnorderedEventList+0x66>
    258c:	16 96       	adiw	r26, 0x06	; 6
    258e:	8d 91       	ld	r24, X+
    2590:	9c 91       	ld	r25, X
    2592:	17 97       	sbiw	r26, 0x07	; 7
    2594:	9a 83       	std	Y+2, r25	; 0x02
    2596:	89 83       	std	Y+1, r24	; 0x01
    2598:	1b 96       	adiw	r26, 0x0b	; 11
    259a:	1c 92       	st	X, r1
    259c:	1e 92       	st	-X, r1
    259e:	1a 97       	sbiw	r26, 0x0a	; 10
    25a0:	da 01       	movw	r26, r20
    25a2:	8c 91       	ld	r24, X
    25a4:	81 50       	subi	r24, 0x01	; 1
    25a6:	8c 93       	st	X, r24
    25a8:	a4 85       	ldd	r26, Z+12	; 0x0c
    25aa:	b5 85       	ldd	r27, Z+13	; 0x0d
    25ac:	c6 81       	ldd	r28, Z+6	; 0x06
    25ae:	d7 81       	ldd	r29, Z+7	; 0x07
    25b0:	80 85       	ldd	r24, Z+8	; 0x08
    25b2:	91 85       	ldd	r25, Z+9	; 0x09
    25b4:	9f 83       	std	Y+7, r25	; 0x07
    25b6:	8e 83       	std	Y+6, r24	; 0x06
    25b8:	c0 85       	ldd	r28, Z+8	; 0x08
    25ba:	d1 85       	ldd	r29, Z+9	; 0x09
    25bc:	86 81       	ldd	r24, Z+6	; 0x06
    25be:	97 81       	ldd	r25, Z+7	; 0x07
    25c0:	9d 83       	std	Y+5, r25	; 0x05
    25c2:	8c 83       	std	Y+4, r24	; 0x04
    25c4:	11 96       	adiw	r26, 0x01	; 1
    25c6:	8d 91       	ld	r24, X+
    25c8:	9c 91       	ld	r25, X
    25ca:	12 97       	sbiw	r26, 0x02	; 2
    25cc:	9f 01       	movw	r18, r30
    25ce:	2e 5f       	subi	r18, 0xFE	; 254
    25d0:	3f 4f       	sbci	r19, 0xFF	; 255
    25d2:	82 17       	cp	r24, r18
    25d4:	93 07       	cpc	r25, r19
    25d6:	31 f4       	brne	.+12     	; 0x25e4 <vTaskRemoveFromUnorderedEventList+0xb2>
    25d8:	80 85       	ldd	r24, Z+8	; 0x08
    25da:	91 85       	ldd	r25, Z+9	; 0x09
    25dc:	12 96       	adiw	r26, 0x02	; 2
    25de:	9c 93       	st	X, r25
    25e0:	8e 93       	st	-X, r24
    25e2:	11 97       	sbiw	r26, 0x01	; 1
    25e4:	15 86       	std	Z+13, r1	; 0x0d
    25e6:	14 86       	std	Z+12, r1	; 0x0c
    25e8:	8c 91       	ld	r24, X
    25ea:	81 50       	subi	r24, 0x01	; 1
    25ec:	8c 93       	st	X, r24
    25ee:	a2 8d       	ldd	r26, Z+26	; 0x1a
    25f0:	80 91 ff 15 	lds	r24, 0x15FF	; 0x8015ff <uxTopReadyPriority>
    25f4:	8a 17       	cp	r24, r26
    25f6:	10 f4       	brcc	.+4      	; 0x25fc <vTaskRemoveFromUnorderedEventList+0xca>
    25f8:	a0 93 ff 15 	sts	0x15FF, r26	; 0x8015ff <uxTopReadyPriority>
    25fc:	8b e0       	ldi	r24, 0x0B	; 11
    25fe:	8a 9f       	mul	r24, r26
    2600:	d0 01       	movw	r26, r0
    2602:	11 24       	eor	r1, r1
    2604:	af 5b       	subi	r26, 0xBF	; 191
    2606:	b9 4e       	sbci	r27, 0xE9	; 233
    2608:	11 96       	adiw	r26, 0x01	; 1
    260a:	0d 90       	ld	r0, X+
    260c:	bc 91       	ld	r27, X
    260e:	a0 2d       	mov	r26, r0
    2610:	b7 83       	std	Z+7, r27	; 0x07
    2612:	a6 83       	std	Z+6, r26	; 0x06
    2614:	16 96       	adiw	r26, 0x06	; 6
    2616:	4d 91       	ld	r20, X+
    2618:	5c 91       	ld	r21, X
    261a:	17 97       	sbiw	r26, 0x07	; 7
    261c:	51 87       	std	Z+9, r21	; 0x09
    261e:	40 87       	std	Z+8, r20	; 0x08
    2620:	16 96       	adiw	r26, 0x06	; 6
    2622:	cd 91       	ld	r28, X+
    2624:	dc 91       	ld	r29, X
    2626:	17 97       	sbiw	r26, 0x07	; 7
    2628:	3d 83       	std	Y+5, r19	; 0x05
    262a:	2c 83       	std	Y+4, r18	; 0x04
    262c:	17 96       	adiw	r26, 0x07	; 7
    262e:	3c 93       	st	X, r19
    2630:	2e 93       	st	-X, r18
    2632:	16 97       	sbiw	r26, 0x06	; 6
    2634:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2636:	8a 9f       	mul	r24, r26
    2638:	d0 01       	movw	r26, r0
    263a:	11 24       	eor	r1, r1
    263c:	af 5b       	subi	r26, 0xBF	; 191
    263e:	b9 4e       	sbci	r27, 0xE9	; 233
    2640:	b5 87       	std	Z+13, r27	; 0x0d
    2642:	a4 87       	std	Z+12, r26	; 0x0c
    2644:	8c 91       	ld	r24, X
    2646:	8f 5f       	subi	r24, 0xFF	; 255
    2648:	8c 93       	st	X, r24
    264a:	92 8d       	ldd	r25, Z+26	; 0x1a
    264c:	e0 91 af 16 	lds	r30, 0x16AF	; 0x8016af <pxCurrentTCB>
    2650:	f0 91 b0 16 	lds	r31, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    2654:	82 8d       	ldd	r24, Z+26	; 0x1a
    2656:	89 17       	cp	r24, r25
    2658:	18 f4       	brcc	.+6      	; 0x2660 <vTaskRemoveFromUnorderedEventList+0x12e>
    265a:	81 e0       	ldi	r24, 0x01	; 1
    265c:	80 93 f9 15 	sts	0x15F9, r24	; 0x8015f9 <xYieldPending>
    2660:	df 91       	pop	r29
    2662:	cf 91       	pop	r28
    2664:	08 95       	ret

00002666 <vTaskSetTimeOutState>:
    2666:	0f b6       	in	r0, 0x3f	; 63
    2668:	f8 94       	cli
    266a:	0f 92       	push	r0
    266c:	20 91 f8 15 	lds	r18, 0x15F8	; 0x8015f8 <xNumOfOverflows>
    2670:	fc 01       	movw	r30, r24
    2672:	20 83       	st	Z, r18
    2674:	40 91 00 16 	lds	r20, 0x1600	; 0x801600 <xTickCount>
    2678:	50 91 01 16 	lds	r21, 0x1601	; 0x801601 <xTickCount+0x1>
    267c:	60 91 02 16 	lds	r22, 0x1602	; 0x801602 <xTickCount+0x2>
    2680:	70 91 03 16 	lds	r23, 0x1603	; 0x801603 <xTickCount+0x3>
    2684:	41 83       	std	Z+1, r20	; 0x01
    2686:	52 83       	std	Z+2, r21	; 0x02
    2688:	63 83       	std	Z+3, r22	; 0x03
    268a:	74 83       	std	Z+4, r23	; 0x04
    268c:	0f 90       	pop	r0
    268e:	0f be       	out	0x3f, r0	; 63
    2690:	08 95       	ret

00002692 <vTaskInternalSetTimeOutState>:
    2692:	20 91 f8 15 	lds	r18, 0x15F8	; 0x8015f8 <xNumOfOverflows>
    2696:	fc 01       	movw	r30, r24
    2698:	20 83       	st	Z, r18
    269a:	40 91 00 16 	lds	r20, 0x1600	; 0x801600 <xTickCount>
    269e:	50 91 01 16 	lds	r21, 0x1601	; 0x801601 <xTickCount+0x1>
    26a2:	60 91 02 16 	lds	r22, 0x1602	; 0x801602 <xTickCount+0x2>
    26a6:	70 91 03 16 	lds	r23, 0x1603	; 0x801603 <xTickCount+0x3>
    26aa:	41 83       	std	Z+1, r20	; 0x01
    26ac:	52 83       	std	Z+2, r21	; 0x02
    26ae:	63 83       	std	Z+3, r22	; 0x03
    26b0:	74 83       	std	Z+4, r23	; 0x04
    26b2:	08 95       	ret

000026b4 <xTaskCheckForTimeOut>:
    26b4:	8f 92       	push	r8
    26b6:	9f 92       	push	r9
    26b8:	af 92       	push	r10
    26ba:	bf 92       	push	r11
    26bc:	cf 92       	push	r12
    26be:	df 92       	push	r13
    26c0:	ef 92       	push	r14
    26c2:	ff 92       	push	r15
    26c4:	0f 93       	push	r16
    26c6:	1f 93       	push	r17
    26c8:	cf 93       	push	r28
    26ca:	df 93       	push	r29
    26cc:	fb 01       	movw	r30, r22
    26ce:	0f b6       	in	r0, 0x3f	; 63
    26d0:	f8 94       	cli
    26d2:	0f 92       	push	r0
    26d4:	c0 90 00 16 	lds	r12, 0x1600	; 0x801600 <xTickCount>
    26d8:	d0 90 01 16 	lds	r13, 0x1601	; 0x801601 <xTickCount+0x1>
    26dc:	e0 90 02 16 	lds	r14, 0x1602	; 0x801602 <xTickCount+0x2>
    26e0:	f0 90 03 16 	lds	r15, 0x1603	; 0x801603 <xTickCount+0x3>
    26e4:	dc 01       	movw	r26, r24
    26e6:	11 96       	adiw	r26, 0x01	; 1
    26e8:	0d 91       	ld	r16, X+
    26ea:	1d 91       	ld	r17, X+
    26ec:	2d 91       	ld	r18, X+
    26ee:	3c 91       	ld	r19, X
    26f0:	14 97       	sbiw	r26, 0x04	; 4
    26f2:	46 01       	movw	r8, r12
    26f4:	57 01       	movw	r10, r14
    26f6:	80 1a       	sub	r8, r16
    26f8:	91 0a       	sbc	r9, r17
    26fa:	a2 0a       	sbc	r10, r18
    26fc:	b3 0a       	sbc	r11, r19
    26fe:	40 81       	ld	r20, Z
    2700:	51 81       	ldd	r21, Z+1	; 0x01
    2702:	62 81       	ldd	r22, Z+2	; 0x02
    2704:	73 81       	ldd	r23, Z+3	; 0x03
    2706:	4f 3f       	cpi	r20, 0xFF	; 255
    2708:	bf ef       	ldi	r27, 0xFF	; 255
    270a:	5b 07       	cpc	r21, r27
    270c:	6b 07       	cpc	r22, r27
    270e:	7b 07       	cpc	r23, r27
    2710:	39 f1       	breq	.+78     	; 0x2760 <xTaskCheckForTimeOut+0xac>
    2712:	ec 01       	movw	r28, r24
    2714:	b8 81       	ld	r27, Y
    2716:	a0 91 f8 15 	lds	r26, 0x15F8	; 0x8015f8 <xNumOfOverflows>
    271a:	ba 17       	cp	r27, r26
    271c:	59 f0       	breq	.+22     	; 0x2734 <xTaskCheckForTimeOut+0x80>
    271e:	c0 16       	cp	r12, r16
    2720:	d1 06       	cpc	r13, r17
    2722:	e2 06       	cpc	r14, r18
    2724:	f3 06       	cpc	r15, r19
    2726:	30 f0       	brcs	.+12     	; 0x2734 <xTaskCheckForTimeOut+0x80>
    2728:	10 82       	st	Z, r1
    272a:	11 82       	std	Z+1, r1	; 0x01
    272c:	12 82       	std	Z+2, r1	; 0x02
    272e:	13 82       	std	Z+3, r1	; 0x03
    2730:	81 e0       	ldi	r24, 0x01	; 1
    2732:	17 c0       	rjmp	.+46     	; 0x2762 <xTaskCheckForTimeOut+0xae>
    2734:	84 16       	cp	r8, r20
    2736:	95 06       	cpc	r9, r21
    2738:	a6 06       	cpc	r10, r22
    273a:	b7 06       	cpc	r11, r23
    273c:	58 f4       	brcc	.+22     	; 0x2754 <xTaskCheckForTimeOut+0xa0>
    273e:	48 19       	sub	r20, r8
    2740:	59 09       	sbc	r21, r9
    2742:	6a 09       	sbc	r22, r10
    2744:	7b 09       	sbc	r23, r11
    2746:	40 83       	st	Z, r20
    2748:	51 83       	std	Z+1, r21	; 0x01
    274a:	62 83       	std	Z+2, r22	; 0x02
    274c:	73 83       	std	Z+3, r23	; 0x03
    274e:	a1 df       	rcall	.-190    	; 0x2692 <vTaskInternalSetTimeOutState>
    2750:	80 e0       	ldi	r24, 0x00	; 0
    2752:	07 c0       	rjmp	.+14     	; 0x2762 <xTaskCheckForTimeOut+0xae>
    2754:	10 82       	st	Z, r1
    2756:	11 82       	std	Z+1, r1	; 0x01
    2758:	12 82       	std	Z+2, r1	; 0x02
    275a:	13 82       	std	Z+3, r1	; 0x03
    275c:	81 e0       	ldi	r24, 0x01	; 1
    275e:	01 c0       	rjmp	.+2      	; 0x2762 <xTaskCheckForTimeOut+0xae>
    2760:	80 e0       	ldi	r24, 0x00	; 0
    2762:	0f 90       	pop	r0
    2764:	0f be       	out	0x3f, r0	; 63
    2766:	df 91       	pop	r29
    2768:	cf 91       	pop	r28
    276a:	1f 91       	pop	r17
    276c:	0f 91       	pop	r16
    276e:	ff 90       	pop	r15
    2770:	ef 90       	pop	r14
    2772:	df 90       	pop	r13
    2774:	cf 90       	pop	r12
    2776:	bf 90       	pop	r11
    2778:	af 90       	pop	r10
    277a:	9f 90       	pop	r9
    277c:	8f 90       	pop	r8
    277e:	08 95       	ret

00002780 <vTaskMissedYield>:
    2780:	81 e0       	ldi	r24, 0x01	; 1
    2782:	80 93 f9 15 	sts	0x15F9, r24	; 0x8015f9 <xYieldPending>
    2786:	08 95       	ret

00002788 <xTaskGetCurrentTaskHandle>:
    2788:	80 91 af 16 	lds	r24, 0x16AF	; 0x8016af <pxCurrentTCB>
    278c:	90 91 b0 16 	lds	r25, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    2790:	08 95       	ret

00002792 <xTaskGetSchedulerState>:
    2792:	80 91 fe 15 	lds	r24, 0x15FE	; 0x8015fe <xSchedulerRunning>
    2796:	88 23       	and	r24, r24
    2798:	31 f0       	breq	.+12     	; 0x27a6 <xTaskGetSchedulerState+0x14>
    279a:	80 91 f0 15 	lds	r24, 0x15F0	; 0x8015f0 <uxSchedulerSuspended>
    279e:	81 11       	cpse	r24, r1
    27a0:	04 c0       	rjmp	.+8      	; 0x27aa <xTaskGetSchedulerState+0x18>
    27a2:	82 e0       	ldi	r24, 0x02	; 2
    27a4:	08 95       	ret
    27a6:	81 e0       	ldi	r24, 0x01	; 1
    27a8:	08 95       	ret
    27aa:	80 e0       	ldi	r24, 0x00	; 0
    27ac:	08 95       	ret

000027ae <xTaskPriorityInherit>:
    27ae:	0f 93       	push	r16
    27b0:	1f 93       	push	r17
    27b2:	cf 93       	push	r28
    27b4:	df 93       	push	r29
    27b6:	fc 01       	movw	r30, r24
    27b8:	89 2b       	or	r24, r25
    27ba:	09 f4       	brne	.+2      	; 0x27be <xTaskPriorityInherit+0x10>
    27bc:	77 c0       	rjmp	.+238    	; 0x28ac <xTaskPriorityInherit+0xfe>
    27be:	82 8d       	ldd	r24, Z+26	; 0x1a
    27c0:	a0 91 af 16 	lds	r26, 0x16AF	; 0x8016af <pxCurrentTCB>
    27c4:	b0 91 b0 16 	lds	r27, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    27c8:	5a 96       	adiw	r26, 0x1a	; 26
    27ca:	9c 91       	ld	r25, X
    27cc:	89 17       	cp	r24, r25
    27ce:	08 f0       	brcs	.+2      	; 0x27d2 <xTaskPriorityInherit+0x24>
    27d0:	63 c0       	rjmp	.+198    	; 0x2898 <xTaskPriorityInherit+0xea>
    27d2:	46 85       	ldd	r20, Z+14	; 0x0e
    27d4:	57 85       	ldd	r21, Z+15	; 0x0f
    27d6:	60 89       	ldd	r22, Z+16	; 0x10
    27d8:	71 89       	ldd	r23, Z+17	; 0x11
    27da:	77 23       	and	r23, r23
    27dc:	94 f0       	brlt	.+36     	; 0x2802 <xTaskPriorityInherit+0x54>
    27de:	a0 91 af 16 	lds	r26, 0x16AF	; 0x8016af <pxCurrentTCB>
    27e2:	b0 91 b0 16 	lds	r27, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    27e6:	5a 96       	adiw	r26, 0x1a	; 26
    27e8:	9c 91       	ld	r25, X
    27ea:	4a e0       	ldi	r20, 0x0A	; 10
    27ec:	50 e0       	ldi	r21, 0x00	; 0
    27ee:	60 e0       	ldi	r22, 0x00	; 0
    27f0:	70 e0       	ldi	r23, 0x00	; 0
    27f2:	49 1b       	sub	r20, r25
    27f4:	51 09       	sbc	r21, r1
    27f6:	61 09       	sbc	r22, r1
    27f8:	71 09       	sbc	r23, r1
    27fa:	46 87       	std	Z+14, r20	; 0x0e
    27fc:	57 87       	std	Z+15, r21	; 0x0f
    27fe:	60 8b       	std	Z+16, r22	; 0x10
    2800:	71 8b       	std	Z+17, r23	; 0x11
    2802:	24 85       	ldd	r18, Z+12	; 0x0c
    2804:	35 85       	ldd	r19, Z+13	; 0x0d
    2806:	4b e0       	ldi	r20, 0x0B	; 11
    2808:	84 9f       	mul	r24, r20
    280a:	c0 01       	movw	r24, r0
    280c:	11 24       	eor	r1, r1
    280e:	8f 5b       	subi	r24, 0xBF	; 191
    2810:	99 4e       	sbci	r25, 0xE9	; 233
    2812:	28 17       	cp	r18, r24
    2814:	39 07       	cpc	r19, r25
    2816:	b9 f5       	brne	.+110    	; 0x2886 <xTaskPriorityInherit+0xd8>
    2818:	ef 01       	movw	r28, r30
    281a:	8f 01       	movw	r16, r30
    281c:	0e 5f       	subi	r16, 0xFE	; 254
    281e:	1f 4f       	sbci	r17, 0xFF	; 255
    2820:	c8 01       	movw	r24, r16
    2822:	0e 94 15 04 	call	0x82a	; 0x82a <uxListRemove>
    2826:	e0 91 af 16 	lds	r30, 0x16AF	; 0x8016af <pxCurrentTCB>
    282a:	f0 91 b0 16 	lds	r31, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    282e:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2830:	ea 8f       	std	Y+26, r30	; 0x1a
    2832:	80 91 ff 15 	lds	r24, 0x15FF	; 0x8015ff <uxTopReadyPriority>
    2836:	8e 17       	cp	r24, r30
    2838:	10 f4       	brcc	.+4      	; 0x283e <xTaskPriorityInherit+0x90>
    283a:	e0 93 ff 15 	sts	0x15FF, r30	; 0x8015ff <uxTopReadyPriority>
    283e:	8b e0       	ldi	r24, 0x0B	; 11
    2840:	8e 9f       	mul	r24, r30
    2842:	f0 01       	movw	r30, r0
    2844:	11 24       	eor	r1, r1
    2846:	ef 5b       	subi	r30, 0xBF	; 191
    2848:	f9 4e       	sbci	r31, 0xE9	; 233
    284a:	01 80       	ldd	r0, Z+1	; 0x01
    284c:	f2 81       	ldd	r31, Z+2	; 0x02
    284e:	e0 2d       	mov	r30, r0
    2850:	ff 83       	std	Y+7, r31	; 0x07
    2852:	ee 83       	std	Y+6, r30	; 0x06
    2854:	26 81       	ldd	r18, Z+6	; 0x06
    2856:	37 81       	ldd	r19, Z+7	; 0x07
    2858:	39 87       	std	Y+9, r19	; 0x09
    285a:	28 87       	std	Y+8, r18	; 0x08
    285c:	a6 81       	ldd	r26, Z+6	; 0x06
    285e:	b7 81       	ldd	r27, Z+7	; 0x07
    2860:	15 96       	adiw	r26, 0x05	; 5
    2862:	1c 93       	st	X, r17
    2864:	0e 93       	st	-X, r16
    2866:	14 97       	sbiw	r26, 0x04	; 4
    2868:	17 83       	std	Z+7, r17	; 0x07
    286a:	06 83       	std	Z+6, r16	; 0x06
    286c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    286e:	8e 9f       	mul	r24, r30
    2870:	f0 01       	movw	r30, r0
    2872:	11 24       	eor	r1, r1
    2874:	ef 5b       	subi	r30, 0xBF	; 191
    2876:	f9 4e       	sbci	r31, 0xE9	; 233
    2878:	fd 87       	std	Y+13, r31	; 0x0d
    287a:	ec 87       	std	Y+12, r30	; 0x0c
    287c:	80 81       	ld	r24, Z
    287e:	8f 5f       	subi	r24, 0xFF	; 255
    2880:	80 83       	st	Z, r24
    2882:	81 e0       	ldi	r24, 0x01	; 1
    2884:	16 c0       	rjmp	.+44     	; 0x28b2 <xTaskPriorityInherit+0x104>
    2886:	a0 91 af 16 	lds	r26, 0x16AF	; 0x8016af <pxCurrentTCB>
    288a:	b0 91 b0 16 	lds	r27, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    288e:	5a 96       	adiw	r26, 0x1a	; 26
    2890:	8c 91       	ld	r24, X
    2892:	82 8f       	std	Z+26, r24	; 0x1a
    2894:	81 e0       	ldi	r24, 0x01	; 1
    2896:	0d c0       	rjmp	.+26     	; 0x28b2 <xTaskPriorityInherit+0x104>
    2898:	95 a5       	ldd	r25, Z+45	; 0x2d
    289a:	e0 91 af 16 	lds	r30, 0x16AF	; 0x8016af <pxCurrentTCB>
    289e:	f0 91 b0 16 	lds	r31, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    28a2:	82 8d       	ldd	r24, Z+26	; 0x1a
    28a4:	98 17       	cp	r25, r24
    28a6:	20 f0       	brcs	.+8      	; 0x28b0 <xTaskPriorityInherit+0x102>
    28a8:	80 e0       	ldi	r24, 0x00	; 0
    28aa:	03 c0       	rjmp	.+6      	; 0x28b2 <xTaskPriorityInherit+0x104>
    28ac:	80 e0       	ldi	r24, 0x00	; 0
    28ae:	01 c0       	rjmp	.+2      	; 0x28b2 <xTaskPriorityInherit+0x104>
    28b0:	81 e0       	ldi	r24, 0x01	; 1
    28b2:	df 91       	pop	r29
    28b4:	cf 91       	pop	r28
    28b6:	1f 91       	pop	r17
    28b8:	0f 91       	pop	r16
    28ba:	08 95       	ret

000028bc <xTaskPriorityDisinherit>:
    28bc:	0f 93       	push	r16
    28be:	1f 93       	push	r17
    28c0:	cf 93       	push	r28
    28c2:	df 93       	push	r29
    28c4:	fc 01       	movw	r30, r24
    28c6:	89 2b       	or	r24, r25
    28c8:	09 f4       	brne	.+2      	; 0x28cc <xTaskPriorityDisinherit+0x10>
    28ca:	49 c0       	rjmp	.+146    	; 0x295e <xTaskPriorityDisinherit+0xa2>
    28cc:	86 a5       	ldd	r24, Z+46	; 0x2e
    28ce:	81 50       	subi	r24, 0x01	; 1
    28d0:	86 a7       	std	Z+46, r24	; 0x2e
    28d2:	22 8d       	ldd	r18, Z+26	; 0x1a
    28d4:	95 a5       	ldd	r25, Z+45	; 0x2d
    28d6:	29 17       	cp	r18, r25
    28d8:	09 f4       	brne	.+2      	; 0x28dc <xTaskPriorityDisinherit+0x20>
    28da:	43 c0       	rjmp	.+134    	; 0x2962 <xTaskPriorityDisinherit+0xa6>
    28dc:	81 11       	cpse	r24, r1
    28de:	43 c0       	rjmp	.+134    	; 0x2966 <xTaskPriorityDisinherit+0xaa>
    28e0:	ef 01       	movw	r28, r30
    28e2:	8f 01       	movw	r16, r30
    28e4:	0e 5f       	subi	r16, 0xFE	; 254
    28e6:	1f 4f       	sbci	r17, 0xFF	; 255
    28e8:	c8 01       	movw	r24, r16
    28ea:	0e 94 15 04 	call	0x82a	; 0x82a <uxListRemove>
    28ee:	ed a5       	ldd	r30, Y+45	; 0x2d
    28f0:	ea 8f       	std	Y+26, r30	; 0x1a
    28f2:	8a e0       	ldi	r24, 0x0A	; 10
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	a0 e0       	ldi	r26, 0x00	; 0
    28f8:	b0 e0       	ldi	r27, 0x00	; 0
    28fa:	8e 1b       	sub	r24, r30
    28fc:	91 09       	sbc	r25, r1
    28fe:	a1 09       	sbc	r26, r1
    2900:	b1 09       	sbc	r27, r1
    2902:	8e 87       	std	Y+14, r24	; 0x0e
    2904:	9f 87       	std	Y+15, r25	; 0x0f
    2906:	a8 8b       	std	Y+16, r26	; 0x10
    2908:	b9 8b       	std	Y+17, r27	; 0x11
    290a:	80 91 ff 15 	lds	r24, 0x15FF	; 0x8015ff <uxTopReadyPriority>
    290e:	8e 17       	cp	r24, r30
    2910:	10 f4       	brcc	.+4      	; 0x2916 <xTaskPriorityDisinherit+0x5a>
    2912:	e0 93 ff 15 	sts	0x15FF, r30	; 0x8015ff <uxTopReadyPriority>
    2916:	8b e0       	ldi	r24, 0x0B	; 11
    2918:	8e 9f       	mul	r24, r30
    291a:	f0 01       	movw	r30, r0
    291c:	11 24       	eor	r1, r1
    291e:	ef 5b       	subi	r30, 0xBF	; 191
    2920:	f9 4e       	sbci	r31, 0xE9	; 233
    2922:	01 80       	ldd	r0, Z+1	; 0x01
    2924:	f2 81       	ldd	r31, Z+2	; 0x02
    2926:	e0 2d       	mov	r30, r0
    2928:	ff 83       	std	Y+7, r31	; 0x07
    292a:	ee 83       	std	Y+6, r30	; 0x06
    292c:	26 81       	ldd	r18, Z+6	; 0x06
    292e:	37 81       	ldd	r19, Z+7	; 0x07
    2930:	39 87       	std	Y+9, r19	; 0x09
    2932:	28 87       	std	Y+8, r18	; 0x08
    2934:	a6 81       	ldd	r26, Z+6	; 0x06
    2936:	b7 81       	ldd	r27, Z+7	; 0x07
    2938:	15 96       	adiw	r26, 0x05	; 5
    293a:	1c 93       	st	X, r17
    293c:	0e 93       	st	-X, r16
    293e:	14 97       	sbiw	r26, 0x04	; 4
    2940:	17 83       	std	Z+7, r17	; 0x07
    2942:	06 83       	std	Z+6, r16	; 0x06
    2944:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2946:	8e 9f       	mul	r24, r30
    2948:	f0 01       	movw	r30, r0
    294a:	11 24       	eor	r1, r1
    294c:	ef 5b       	subi	r30, 0xBF	; 191
    294e:	f9 4e       	sbci	r31, 0xE9	; 233
    2950:	fd 87       	std	Y+13, r31	; 0x0d
    2952:	ec 87       	std	Y+12, r30	; 0x0c
    2954:	80 81       	ld	r24, Z
    2956:	8f 5f       	subi	r24, 0xFF	; 255
    2958:	80 83       	st	Z, r24
    295a:	81 e0       	ldi	r24, 0x01	; 1
    295c:	05 c0       	rjmp	.+10     	; 0x2968 <xTaskPriorityDisinherit+0xac>
    295e:	80 e0       	ldi	r24, 0x00	; 0
    2960:	03 c0       	rjmp	.+6      	; 0x2968 <xTaskPriorityDisinherit+0xac>
    2962:	80 e0       	ldi	r24, 0x00	; 0
    2964:	01 c0       	rjmp	.+2      	; 0x2968 <xTaskPriorityDisinherit+0xac>
    2966:	80 e0       	ldi	r24, 0x00	; 0
    2968:	df 91       	pop	r29
    296a:	cf 91       	pop	r28
    296c:	1f 91       	pop	r17
    296e:	0f 91       	pop	r16
    2970:	08 95       	ret

00002972 <vTaskPriorityDisinheritAfterTimeout>:
    2972:	0f 93       	push	r16
    2974:	1f 93       	push	r17
    2976:	cf 93       	push	r28
    2978:	df 93       	push	r29
    297a:	fc 01       	movw	r30, r24
    297c:	89 2b       	or	r24, r25
    297e:	09 f4       	brne	.+2      	; 0x2982 <vTaskPriorityDisinheritAfterTimeout+0x10>
    2980:	5a c0       	rjmp	.+180    	; 0x2a36 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2982:	85 a5       	ldd	r24, Z+45	; 0x2d
    2984:	86 17       	cp	r24, r22
    2986:	08 f4       	brcc	.+2      	; 0x298a <vTaskPriorityDisinheritAfterTimeout+0x18>
    2988:	86 2f       	mov	r24, r22
    298a:	92 8d       	ldd	r25, Z+26	; 0x1a
    298c:	89 17       	cp	r24, r25
    298e:	09 f4       	brne	.+2      	; 0x2992 <vTaskPriorityDisinheritAfterTimeout+0x20>
    2990:	52 c0       	rjmp	.+164    	; 0x2a36 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2992:	26 a5       	ldd	r18, Z+46	; 0x2e
    2994:	21 30       	cpi	r18, 0x01	; 1
    2996:	09 f0       	breq	.+2      	; 0x299a <vTaskPriorityDisinheritAfterTimeout+0x28>
    2998:	4e c0       	rjmp	.+156    	; 0x2a36 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    299a:	82 8f       	std	Z+26, r24	; 0x1a
    299c:	46 85       	ldd	r20, Z+14	; 0x0e
    299e:	57 85       	ldd	r21, Z+15	; 0x0f
    29a0:	60 89       	ldd	r22, Z+16	; 0x10
    29a2:	71 89       	ldd	r23, Z+17	; 0x11
    29a4:	77 23       	and	r23, r23
    29a6:	64 f0       	brlt	.+24     	; 0x29c0 <vTaskPriorityDisinheritAfterTimeout+0x4e>
    29a8:	4a e0       	ldi	r20, 0x0A	; 10
    29aa:	50 e0       	ldi	r21, 0x00	; 0
    29ac:	60 e0       	ldi	r22, 0x00	; 0
    29ae:	70 e0       	ldi	r23, 0x00	; 0
    29b0:	48 1b       	sub	r20, r24
    29b2:	51 09       	sbc	r21, r1
    29b4:	61 09       	sbc	r22, r1
    29b6:	71 09       	sbc	r23, r1
    29b8:	46 87       	std	Z+14, r20	; 0x0e
    29ba:	57 87       	std	Z+15, r21	; 0x0f
    29bc:	60 8b       	std	Z+16, r22	; 0x10
    29be:	71 8b       	std	Z+17, r23	; 0x11
    29c0:	24 85       	ldd	r18, Z+12	; 0x0c
    29c2:	35 85       	ldd	r19, Z+13	; 0x0d
    29c4:	4b e0       	ldi	r20, 0x0B	; 11
    29c6:	94 9f       	mul	r25, r20
    29c8:	c0 01       	movw	r24, r0
    29ca:	11 24       	eor	r1, r1
    29cc:	8f 5b       	subi	r24, 0xBF	; 191
    29ce:	99 4e       	sbci	r25, 0xE9	; 233
    29d0:	28 17       	cp	r18, r24
    29d2:	39 07       	cpc	r19, r25
    29d4:	81 f5       	brne	.+96     	; 0x2a36 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    29d6:	ef 01       	movw	r28, r30
    29d8:	8f 01       	movw	r16, r30
    29da:	0e 5f       	subi	r16, 0xFE	; 254
    29dc:	1f 4f       	sbci	r17, 0xFF	; 255
    29de:	c8 01       	movw	r24, r16
    29e0:	0e 94 15 04 	call	0x82a	; 0x82a <uxListRemove>
    29e4:	ea 8d       	ldd	r30, Y+26	; 0x1a
    29e6:	80 91 ff 15 	lds	r24, 0x15FF	; 0x8015ff <uxTopReadyPriority>
    29ea:	8e 17       	cp	r24, r30
    29ec:	10 f4       	brcc	.+4      	; 0x29f2 <vTaskPriorityDisinheritAfterTimeout+0x80>
    29ee:	e0 93 ff 15 	sts	0x15FF, r30	; 0x8015ff <uxTopReadyPriority>
    29f2:	8b e0       	ldi	r24, 0x0B	; 11
    29f4:	8e 9f       	mul	r24, r30
    29f6:	f0 01       	movw	r30, r0
    29f8:	11 24       	eor	r1, r1
    29fa:	ef 5b       	subi	r30, 0xBF	; 191
    29fc:	f9 4e       	sbci	r31, 0xE9	; 233
    29fe:	01 80       	ldd	r0, Z+1	; 0x01
    2a00:	f2 81       	ldd	r31, Z+2	; 0x02
    2a02:	e0 2d       	mov	r30, r0
    2a04:	ff 83       	std	Y+7, r31	; 0x07
    2a06:	ee 83       	std	Y+6, r30	; 0x06
    2a08:	26 81       	ldd	r18, Z+6	; 0x06
    2a0a:	37 81       	ldd	r19, Z+7	; 0x07
    2a0c:	39 87       	std	Y+9, r19	; 0x09
    2a0e:	28 87       	std	Y+8, r18	; 0x08
    2a10:	a6 81       	ldd	r26, Z+6	; 0x06
    2a12:	b7 81       	ldd	r27, Z+7	; 0x07
    2a14:	15 96       	adiw	r26, 0x05	; 5
    2a16:	1c 93       	st	X, r17
    2a18:	0e 93       	st	-X, r16
    2a1a:	14 97       	sbiw	r26, 0x04	; 4
    2a1c:	17 83       	std	Z+7, r17	; 0x07
    2a1e:	06 83       	std	Z+6, r16	; 0x06
    2a20:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2a22:	8e 9f       	mul	r24, r30
    2a24:	f0 01       	movw	r30, r0
    2a26:	11 24       	eor	r1, r1
    2a28:	ef 5b       	subi	r30, 0xBF	; 191
    2a2a:	f9 4e       	sbci	r31, 0xE9	; 233
    2a2c:	fd 87       	std	Y+13, r31	; 0x0d
    2a2e:	ec 87       	std	Y+12, r30	; 0x0c
    2a30:	80 81       	ld	r24, Z
    2a32:	8f 5f       	subi	r24, 0xFF	; 255
    2a34:	80 83       	st	Z, r24
    2a36:	df 91       	pop	r29
    2a38:	cf 91       	pop	r28
    2a3a:	1f 91       	pop	r17
    2a3c:	0f 91       	pop	r16
    2a3e:	08 95       	ret

00002a40 <uxTaskResetEventItemValue>:
    2a40:	cf 92       	push	r12
    2a42:	df 92       	push	r13
    2a44:	ef 92       	push	r14
    2a46:	ff 92       	push	r15
    2a48:	e0 91 af 16 	lds	r30, 0x16AF	; 0x8016af <pxCurrentTCB>
    2a4c:	f0 91 b0 16 	lds	r31, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    2a50:	66 85       	ldd	r22, Z+14	; 0x0e
    2a52:	77 85       	ldd	r23, Z+15	; 0x0f
    2a54:	80 89       	ldd	r24, Z+16	; 0x10
    2a56:	91 89       	ldd	r25, Z+17	; 0x11
    2a58:	e0 91 af 16 	lds	r30, 0x16AF	; 0x8016af <pxCurrentTCB>
    2a5c:	f0 91 b0 16 	lds	r31, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    2a60:	a0 91 af 16 	lds	r26, 0x16AF	; 0x8016af <pxCurrentTCB>
    2a64:	b0 91 b0 16 	lds	r27, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    2a68:	5a 96       	adiw	r26, 0x1a	; 26
    2a6a:	2c 91       	ld	r18, X
    2a6c:	0f 2e       	mov	r0, r31
    2a6e:	fa e0       	ldi	r31, 0x0A	; 10
    2a70:	cf 2e       	mov	r12, r31
    2a72:	d1 2c       	mov	r13, r1
    2a74:	e1 2c       	mov	r14, r1
    2a76:	f1 2c       	mov	r15, r1
    2a78:	f0 2d       	mov	r31, r0
    2a7a:	c2 1a       	sub	r12, r18
    2a7c:	d1 08       	sbc	r13, r1
    2a7e:	e1 08       	sbc	r14, r1
    2a80:	f1 08       	sbc	r15, r1
    2a82:	c6 86       	std	Z+14, r12	; 0x0e
    2a84:	d7 86       	std	Z+15, r13	; 0x0f
    2a86:	e0 8a       	std	Z+16, r14	; 0x10
    2a88:	f1 8a       	std	Z+17, r15	; 0x11
    2a8a:	ff 90       	pop	r15
    2a8c:	ef 90       	pop	r14
    2a8e:	df 90       	pop	r13
    2a90:	cf 90       	pop	r12
    2a92:	08 95       	ret

00002a94 <pvTaskIncrementMutexHeldCount>:
    2a94:	80 91 af 16 	lds	r24, 0x16AF	; 0x8016af <pxCurrentTCB>
    2a98:	90 91 b0 16 	lds	r25, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    2a9c:	89 2b       	or	r24, r25
    2a9e:	39 f0       	breq	.+14     	; 0x2aae <pvTaskIncrementMutexHeldCount+0x1a>
    2aa0:	e0 91 af 16 	lds	r30, 0x16AF	; 0x8016af <pxCurrentTCB>
    2aa4:	f0 91 b0 16 	lds	r31, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    2aa8:	86 a5       	ldd	r24, Z+46	; 0x2e
    2aaa:	8f 5f       	subi	r24, 0xFF	; 255
    2aac:	86 a7       	std	Z+46, r24	; 0x2e
    2aae:	80 91 af 16 	lds	r24, 0x16AF	; 0x8016af <pxCurrentTCB>
    2ab2:	90 91 b0 16 	lds	r25, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    2ab6:	08 95       	ret

00002ab8 <xTaskGenericNotifyWait>:
    2ab8:	4f 92       	push	r4
    2aba:	5f 92       	push	r5
    2abc:	6f 92       	push	r6
    2abe:	7f 92       	push	r7
    2ac0:	af 92       	push	r10
    2ac2:	bf 92       	push	r11
    2ac4:	cf 92       	push	r12
    2ac6:	df 92       	push	r13
    2ac8:	ef 92       	push	r14
    2aca:	ff 92       	push	r15
    2acc:	0f 93       	push	r16
    2ace:	1f 93       	push	r17
    2ad0:	cf 93       	push	r28
    2ad2:	df 93       	push	r29
    2ad4:	28 01       	movw	r4, r16
    2ad6:	39 01       	movw	r6, r18
    2ad8:	0f b6       	in	r0, 0x3f	; 63
    2ada:	f8 94       	cli
    2adc:	0f 92       	push	r0
    2ade:	e0 91 af 16 	lds	r30, 0x16AF	; 0x8016af <pxCurrentTCB>
    2ae2:	f0 91 b0 16 	lds	r31, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    2ae6:	c8 2f       	mov	r28, r24
    2ae8:	d0 e0       	ldi	r29, 0x00	; 0
    2aea:	ec 0f       	add	r30, r28
    2aec:	fd 1f       	adc	r31, r29
    2aee:	83 a9       	ldd	r24, Z+51	; 0x33
    2af0:	82 30       	cpi	r24, 0x02	; 2
    2af2:	79 f1       	breq	.+94     	; 0x2b52 <xTaskGenericNotifyWait+0x9a>
    2af4:	e0 91 af 16 	lds	r30, 0x16AF	; 0x8016af <pxCurrentTCB>
    2af8:	f0 91 b0 16 	lds	r31, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    2afc:	ce 01       	movw	r24, r28
    2afe:	88 0f       	add	r24, r24
    2b00:	99 1f       	adc	r25, r25
    2b02:	88 0f       	add	r24, r24
    2b04:	99 1f       	adc	r25, r25
    2b06:	e8 0f       	add	r30, r24
    2b08:	f9 1f       	adc	r31, r25
    2b0a:	87 a5       	ldd	r24, Z+47	; 0x2f
    2b0c:	90 a9       	ldd	r25, Z+48	; 0x30
    2b0e:	a1 a9       	ldd	r26, Z+49	; 0x31
    2b10:	b2 a9       	ldd	r27, Z+50	; 0x32
    2b12:	40 95       	com	r20
    2b14:	50 95       	com	r21
    2b16:	60 95       	com	r22
    2b18:	70 95       	com	r23
    2b1a:	48 23       	and	r20, r24
    2b1c:	59 23       	and	r21, r25
    2b1e:	6a 23       	and	r22, r26
    2b20:	7b 23       	and	r23, r27
    2b22:	47 a7       	std	Z+47, r20	; 0x2f
    2b24:	50 ab       	std	Z+48, r21	; 0x30
    2b26:	61 ab       	std	Z+49, r22	; 0x31
    2b28:	72 ab       	std	Z+50, r23	; 0x32
    2b2a:	e0 91 af 16 	lds	r30, 0x16AF	; 0x8016af <pxCurrentTCB>
    2b2e:	f0 91 b0 16 	lds	r31, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    2b32:	ec 0f       	add	r30, r28
    2b34:	fd 1f       	adc	r31, r29
    2b36:	81 e0       	ldi	r24, 0x01	; 1
    2b38:	83 ab       	std	Z+51, r24	; 0x33
    2b3a:	a1 14       	cp	r10, r1
    2b3c:	b1 04       	cpc	r11, r1
    2b3e:	c1 04       	cpc	r12, r1
    2b40:	d1 04       	cpc	r13, r1
    2b42:	39 f0       	breq	.+14     	; 0x2b52 <xTaskGenericNotifyWait+0x9a>
    2b44:	41 e0       	ldi	r20, 0x01	; 1
    2b46:	c6 01       	movw	r24, r12
    2b48:	b5 01       	movw	r22, r10
    2b4a:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <prvAddCurrentTaskToDelayedList>
    2b4e:	0e 94 91 04 	call	0x922	; 0x922 <vPortYield>
    2b52:	0f 90       	pop	r0
    2b54:	0f be       	out	0x3f, r0	; 63
    2b56:	0f b6       	in	r0, 0x3f	; 63
    2b58:	f8 94       	cli
    2b5a:	0f 92       	push	r0
    2b5c:	e1 14       	cp	r14, r1
    2b5e:	f1 04       	cpc	r15, r1
    2b60:	a1 f0       	breq	.+40     	; 0x2b8a <xTaskGenericNotifyWait+0xd2>
    2b62:	e0 91 af 16 	lds	r30, 0x16AF	; 0x8016af <pxCurrentTCB>
    2b66:	f0 91 b0 16 	lds	r31, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    2b6a:	ce 01       	movw	r24, r28
    2b6c:	88 0f       	add	r24, r24
    2b6e:	99 1f       	adc	r25, r25
    2b70:	88 0f       	add	r24, r24
    2b72:	99 1f       	adc	r25, r25
    2b74:	e8 0f       	add	r30, r24
    2b76:	f9 1f       	adc	r31, r25
    2b78:	87 a5       	ldd	r24, Z+47	; 0x2f
    2b7a:	90 a9       	ldd	r25, Z+48	; 0x30
    2b7c:	a1 a9       	ldd	r26, Z+49	; 0x31
    2b7e:	b2 a9       	ldd	r27, Z+50	; 0x32
    2b80:	f7 01       	movw	r30, r14
    2b82:	80 83       	st	Z, r24
    2b84:	91 83       	std	Z+1, r25	; 0x01
    2b86:	a2 83       	std	Z+2, r26	; 0x02
    2b88:	b3 83       	std	Z+3, r27	; 0x03
    2b8a:	e0 91 af 16 	lds	r30, 0x16AF	; 0x8016af <pxCurrentTCB>
    2b8e:	f0 91 b0 16 	lds	r31, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    2b92:	ec 0f       	add	r30, r28
    2b94:	fd 1f       	adc	r31, r29
    2b96:	83 a9       	ldd	r24, Z+51	; 0x33
    2b98:	82 30       	cpi	r24, 0x02	; 2
    2b9a:	e9 f4       	brne	.+58     	; 0x2bd6 <xTaskGenericNotifyWait+0x11e>
    2b9c:	e0 91 af 16 	lds	r30, 0x16AF	; 0x8016af <pxCurrentTCB>
    2ba0:	f0 91 b0 16 	lds	r31, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    2ba4:	ce 01       	movw	r24, r28
    2ba6:	88 0f       	add	r24, r24
    2ba8:	99 1f       	adc	r25, r25
    2baa:	88 0f       	add	r24, r24
    2bac:	99 1f       	adc	r25, r25
    2bae:	e8 0f       	add	r30, r24
    2bb0:	f9 1f       	adc	r31, r25
    2bb2:	87 a5       	ldd	r24, Z+47	; 0x2f
    2bb4:	90 a9       	ldd	r25, Z+48	; 0x30
    2bb6:	a1 a9       	ldd	r26, Z+49	; 0x31
    2bb8:	b2 a9       	ldd	r27, Z+50	; 0x32
    2bba:	40 94       	com	r4
    2bbc:	50 94       	com	r5
    2bbe:	60 94       	com	r6
    2bc0:	70 94       	com	r7
    2bc2:	48 22       	and	r4, r24
    2bc4:	59 22       	and	r5, r25
    2bc6:	6a 22       	and	r6, r26
    2bc8:	7b 22       	and	r7, r27
    2bca:	47 a6       	std	Z+47, r4	; 0x2f
    2bcc:	50 aa       	std	Z+48, r5	; 0x30
    2bce:	61 aa       	std	Z+49, r6	; 0x31
    2bd0:	72 aa       	std	Z+50, r7	; 0x32
    2bd2:	81 e0       	ldi	r24, 0x01	; 1
    2bd4:	01 c0       	rjmp	.+2      	; 0x2bd8 <xTaskGenericNotifyWait+0x120>
    2bd6:	80 e0       	ldi	r24, 0x00	; 0
    2bd8:	20 91 af 16 	lds	r18, 0x16AF	; 0x8016af <pxCurrentTCB>
    2bdc:	30 91 b0 16 	lds	r19, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    2be0:	c2 0f       	add	r28, r18
    2be2:	d3 1f       	adc	r29, r19
    2be4:	1b aa       	std	Y+51, r1	; 0x33
    2be6:	0f 90       	pop	r0
    2be8:	0f be       	out	0x3f, r0	; 63
    2bea:	df 91       	pop	r29
    2bec:	cf 91       	pop	r28
    2bee:	1f 91       	pop	r17
    2bf0:	0f 91       	pop	r16
    2bf2:	ff 90       	pop	r15
    2bf4:	ef 90       	pop	r14
    2bf6:	df 90       	pop	r13
    2bf8:	cf 90       	pop	r12
    2bfa:	bf 90       	pop	r11
    2bfc:	af 90       	pop	r10
    2bfe:	7f 90       	pop	r7
    2c00:	6f 90       	pop	r6
    2c02:	5f 90       	pop	r5
    2c04:	4f 90       	pop	r4
    2c06:	08 95       	ret

00002c08 <xTaskGenericNotify>:
    2c08:	8f 92       	push	r8
    2c0a:	9f 92       	push	r9
    2c0c:	af 92       	push	r10
    2c0e:	bf 92       	push	r11
    2c10:	ef 92       	push	r14
    2c12:	ff 92       	push	r15
    2c14:	0f 93       	push	r16
    2c16:	cf 93       	push	r28
    2c18:	df 93       	push	r29
    2c1a:	dc 01       	movw	r26, r24
    2c1c:	0f b6       	in	r0, 0x3f	; 63
    2c1e:	f8 94       	cli
    2c20:	0f 92       	push	r0
    2c22:	e1 14       	cp	r14, r1
    2c24:	f1 04       	cpc	r15, r1
    2c26:	89 f0       	breq	.+34     	; 0x2c4a <xTaskGenericNotify+0x42>
    2c28:	e6 2f       	mov	r30, r22
    2c2a:	f0 e0       	ldi	r31, 0x00	; 0
    2c2c:	ee 0f       	add	r30, r30
    2c2e:	ff 1f       	adc	r31, r31
    2c30:	ee 0f       	add	r30, r30
    2c32:	ff 1f       	adc	r31, r31
    2c34:	e8 0f       	add	r30, r24
    2c36:	f9 1f       	adc	r31, r25
    2c38:	87 a4       	ldd	r8, Z+47	; 0x2f
    2c3a:	90 a8       	ldd	r9, Z+48	; 0x30
    2c3c:	a1 a8       	ldd	r10, Z+49	; 0x31
    2c3e:	b2 a8       	ldd	r11, Z+50	; 0x32
    2c40:	f7 01       	movw	r30, r14
    2c42:	80 82       	st	Z, r8
    2c44:	91 82       	std	Z+1, r9	; 0x01
    2c46:	a2 82       	std	Z+2, r10	; 0x02
    2c48:	b3 82       	std	Z+3, r11	; 0x03
    2c4a:	70 e0       	ldi	r23, 0x00	; 0
    2c4c:	fd 01       	movw	r30, r26
    2c4e:	e6 0f       	add	r30, r22
    2c50:	f7 1f       	adc	r31, r23
    2c52:	83 a9       	ldd	r24, Z+51	; 0x33
    2c54:	92 e0       	ldi	r25, 0x02	; 2
    2c56:	93 ab       	std	Z+51, r25	; 0x33
    2c58:	02 30       	cpi	r16, 0x02	; 2
    2c5a:	01 f1       	breq	.+64     	; 0x2c9c <xTaskGenericNotify+0x94>
    2c5c:	18 f4       	brcc	.+6      	; 0x2c64 <xTaskGenericNotify+0x5c>
    2c5e:	01 30       	cpi	r16, 0x01	; 1
    2c60:	31 f0       	breq	.+12     	; 0x2c6e <xTaskGenericNotify+0x66>
    2c62:	4d c0       	rjmp	.+154    	; 0x2cfe <xTaskGenericNotify+0xf6>
    2c64:	03 30       	cpi	r16, 0x03	; 3
    2c66:	79 f1       	breq	.+94     	; 0x2cc6 <xTaskGenericNotify+0xbe>
    2c68:	04 30       	cpi	r16, 0x04	; 4
    2c6a:	d1 f1       	breq	.+116    	; 0x2ce0 <xTaskGenericNotify+0xd8>
    2c6c:	48 c0       	rjmp	.+144    	; 0x2cfe <xTaskGenericNotify+0xf6>
    2c6e:	66 0f       	add	r22, r22
    2c70:	77 1f       	adc	r23, r23
    2c72:	66 0f       	add	r22, r22
    2c74:	77 1f       	adc	r23, r23
    2c76:	fd 01       	movw	r30, r26
    2c78:	e6 0f       	add	r30, r22
    2c7a:	f7 1f       	adc	r31, r23
    2c7c:	87 a4       	ldd	r8, Z+47	; 0x2f
    2c7e:	90 a8       	ldd	r9, Z+48	; 0x30
    2c80:	a1 a8       	ldd	r10, Z+49	; 0x31
    2c82:	b2 a8       	ldd	r11, Z+50	; 0x32
    2c84:	ba 01       	movw	r22, r20
    2c86:	a9 01       	movw	r20, r18
    2c88:	48 29       	or	r20, r8
    2c8a:	59 29       	or	r21, r9
    2c8c:	6a 29       	or	r22, r10
    2c8e:	7b 29       	or	r23, r11
    2c90:	47 a7       	std	Z+47, r20	; 0x2f
    2c92:	50 ab       	std	Z+48, r21	; 0x30
    2c94:	61 ab       	std	Z+49, r22	; 0x31
    2c96:	72 ab       	std	Z+50, r23	; 0x32
    2c98:	01 e0       	ldi	r16, 0x01	; 1
    2c9a:	34 c0       	rjmp	.+104    	; 0x2d04 <xTaskGenericNotify+0xfc>
    2c9c:	66 0f       	add	r22, r22
    2c9e:	77 1f       	adc	r23, r23
    2ca0:	66 0f       	add	r22, r22
    2ca2:	77 1f       	adc	r23, r23
    2ca4:	fd 01       	movw	r30, r26
    2ca6:	e6 0f       	add	r30, r22
    2ca8:	f7 1f       	adc	r31, r23
    2caa:	47 a5       	ldd	r20, Z+47	; 0x2f
    2cac:	50 a9       	ldd	r21, Z+48	; 0x30
    2cae:	61 a9       	ldd	r22, Z+49	; 0x31
    2cb0:	72 a9       	ldd	r23, Z+50	; 0x32
    2cb2:	4f 5f       	subi	r20, 0xFF	; 255
    2cb4:	5f 4f       	sbci	r21, 0xFF	; 255
    2cb6:	6f 4f       	sbci	r22, 0xFF	; 255
    2cb8:	7f 4f       	sbci	r23, 0xFF	; 255
    2cba:	47 a7       	std	Z+47, r20	; 0x2f
    2cbc:	50 ab       	std	Z+48, r21	; 0x30
    2cbe:	61 ab       	std	Z+49, r22	; 0x31
    2cc0:	72 ab       	std	Z+50, r23	; 0x32
    2cc2:	01 e0       	ldi	r16, 0x01	; 1
    2cc4:	1f c0       	rjmp	.+62     	; 0x2d04 <xTaskGenericNotify+0xfc>
    2cc6:	66 0f       	add	r22, r22
    2cc8:	77 1f       	adc	r23, r23
    2cca:	66 0f       	add	r22, r22
    2ccc:	77 1f       	adc	r23, r23
    2cce:	fd 01       	movw	r30, r26
    2cd0:	e6 0f       	add	r30, r22
    2cd2:	f7 1f       	adc	r31, r23
    2cd4:	27 a7       	std	Z+47, r18	; 0x2f
    2cd6:	30 ab       	std	Z+48, r19	; 0x30
    2cd8:	41 ab       	std	Z+49, r20	; 0x31
    2cda:	52 ab       	std	Z+50, r21	; 0x32
    2cdc:	01 e0       	ldi	r16, 0x01	; 1
    2cde:	12 c0       	rjmp	.+36     	; 0x2d04 <xTaskGenericNotify+0xfc>
    2ce0:	82 30       	cpi	r24, 0x02	; 2
    2ce2:	79 f0       	breq	.+30     	; 0x2d02 <xTaskGenericNotify+0xfa>
    2ce4:	66 0f       	add	r22, r22
    2ce6:	77 1f       	adc	r23, r23
    2ce8:	66 0f       	add	r22, r22
    2cea:	77 1f       	adc	r23, r23
    2cec:	fd 01       	movw	r30, r26
    2cee:	e6 0f       	add	r30, r22
    2cf0:	f7 1f       	adc	r31, r23
    2cf2:	27 a7       	std	Z+47, r18	; 0x2f
    2cf4:	30 ab       	std	Z+48, r19	; 0x30
    2cf6:	41 ab       	std	Z+49, r20	; 0x31
    2cf8:	52 ab       	std	Z+50, r21	; 0x32
    2cfa:	01 e0       	ldi	r16, 0x01	; 1
    2cfc:	03 c0       	rjmp	.+6      	; 0x2d04 <xTaskGenericNotify+0xfc>
    2cfe:	01 e0       	ldi	r16, 0x01	; 1
    2d00:	01 c0       	rjmp	.+2      	; 0x2d04 <xTaskGenericNotify+0xfc>
    2d02:	00 e0       	ldi	r16, 0x00	; 0
    2d04:	81 30       	cpi	r24, 0x01	; 1
    2d06:	09 f0       	breq	.+2      	; 0x2d0a <xTaskGenericNotify+0x102>
    2d08:	69 c0       	rjmp	.+210    	; 0x2ddc <xTaskGenericNotify+0x1d4>
    2d0a:	1c 96       	adiw	r26, 0x0c	; 12
    2d0c:	ed 91       	ld	r30, X+
    2d0e:	fc 91       	ld	r31, X
    2d10:	1d 97       	sbiw	r26, 0x0d	; 13
    2d12:	16 96       	adiw	r26, 0x06	; 6
    2d14:	cd 91       	ld	r28, X+
    2d16:	dc 91       	ld	r29, X
    2d18:	17 97       	sbiw	r26, 0x07	; 7
    2d1a:	18 96       	adiw	r26, 0x08	; 8
    2d1c:	8d 91       	ld	r24, X+
    2d1e:	9c 91       	ld	r25, X
    2d20:	19 97       	sbiw	r26, 0x09	; 9
    2d22:	9f 83       	std	Y+7, r25	; 0x07
    2d24:	8e 83       	std	Y+6, r24	; 0x06
    2d26:	18 96       	adiw	r26, 0x08	; 8
    2d28:	cd 91       	ld	r28, X+
    2d2a:	dc 91       	ld	r29, X
    2d2c:	19 97       	sbiw	r26, 0x09	; 9
    2d2e:	16 96       	adiw	r26, 0x06	; 6
    2d30:	8d 91       	ld	r24, X+
    2d32:	9c 91       	ld	r25, X
    2d34:	17 97       	sbiw	r26, 0x07	; 7
    2d36:	9d 83       	std	Y+5, r25	; 0x05
    2d38:	8c 83       	std	Y+4, r24	; 0x04
    2d3a:	81 81       	ldd	r24, Z+1	; 0x01
    2d3c:	92 81       	ldd	r25, Z+2	; 0x02
    2d3e:	9d 01       	movw	r18, r26
    2d40:	2e 5f       	subi	r18, 0xFE	; 254
    2d42:	3f 4f       	sbci	r19, 0xFF	; 255
    2d44:	82 17       	cp	r24, r18
    2d46:	93 07       	cpc	r25, r19
    2d48:	31 f4       	brne	.+12     	; 0x2d56 <xTaskGenericNotify+0x14e>
    2d4a:	18 96       	adiw	r26, 0x08	; 8
    2d4c:	8d 91       	ld	r24, X+
    2d4e:	9c 91       	ld	r25, X
    2d50:	19 97       	sbiw	r26, 0x09	; 9
    2d52:	92 83       	std	Z+2, r25	; 0x02
    2d54:	81 83       	std	Z+1, r24	; 0x01
    2d56:	1d 96       	adiw	r26, 0x0d	; 13
    2d58:	1c 92       	st	X, r1
    2d5a:	1e 92       	st	-X, r1
    2d5c:	1c 97       	sbiw	r26, 0x0c	; 12
    2d5e:	80 81       	ld	r24, Z
    2d60:	81 50       	subi	r24, 0x01	; 1
    2d62:	80 83       	st	Z, r24
    2d64:	5a 96       	adiw	r26, 0x1a	; 26
    2d66:	ec 91       	ld	r30, X
    2d68:	5a 97       	sbiw	r26, 0x1a	; 26
    2d6a:	80 91 ff 15 	lds	r24, 0x15FF	; 0x8015ff <uxTopReadyPriority>
    2d6e:	8e 17       	cp	r24, r30
    2d70:	10 f4       	brcc	.+4      	; 0x2d76 <xTaskGenericNotify+0x16e>
    2d72:	e0 93 ff 15 	sts	0x15FF, r30	; 0x8015ff <uxTopReadyPriority>
    2d76:	8b e0       	ldi	r24, 0x0B	; 11
    2d78:	8e 9f       	mul	r24, r30
    2d7a:	f0 01       	movw	r30, r0
    2d7c:	11 24       	eor	r1, r1
    2d7e:	ef 5b       	subi	r30, 0xBF	; 191
    2d80:	f9 4e       	sbci	r31, 0xE9	; 233
    2d82:	01 80       	ldd	r0, Z+1	; 0x01
    2d84:	f2 81       	ldd	r31, Z+2	; 0x02
    2d86:	e0 2d       	mov	r30, r0
    2d88:	17 96       	adiw	r26, 0x07	; 7
    2d8a:	fc 93       	st	X, r31
    2d8c:	ee 93       	st	-X, r30
    2d8e:	16 97       	sbiw	r26, 0x06	; 6
    2d90:	46 81       	ldd	r20, Z+6	; 0x06
    2d92:	57 81       	ldd	r21, Z+7	; 0x07
    2d94:	19 96       	adiw	r26, 0x09	; 9
    2d96:	5c 93       	st	X, r21
    2d98:	4e 93       	st	-X, r20
    2d9a:	18 97       	sbiw	r26, 0x08	; 8
    2d9c:	c6 81       	ldd	r28, Z+6	; 0x06
    2d9e:	d7 81       	ldd	r29, Z+7	; 0x07
    2da0:	3d 83       	std	Y+5, r19	; 0x05
    2da2:	2c 83       	std	Y+4, r18	; 0x04
    2da4:	37 83       	std	Z+7, r19	; 0x07
    2da6:	26 83       	std	Z+6, r18	; 0x06
    2da8:	5a 96       	adiw	r26, 0x1a	; 26
    2daa:	ec 91       	ld	r30, X
    2dac:	5a 97       	sbiw	r26, 0x1a	; 26
    2dae:	8e 9f       	mul	r24, r30
    2db0:	f0 01       	movw	r30, r0
    2db2:	11 24       	eor	r1, r1
    2db4:	ef 5b       	subi	r30, 0xBF	; 191
    2db6:	f9 4e       	sbci	r31, 0xE9	; 233
    2db8:	1d 96       	adiw	r26, 0x0d	; 13
    2dba:	fc 93       	st	X, r31
    2dbc:	ee 93       	st	-X, r30
    2dbe:	1c 97       	sbiw	r26, 0x0c	; 12
    2dc0:	80 81       	ld	r24, Z
    2dc2:	8f 5f       	subi	r24, 0xFF	; 255
    2dc4:	80 83       	st	Z, r24
    2dc6:	5a 96       	adiw	r26, 0x1a	; 26
    2dc8:	9c 91       	ld	r25, X
    2dca:	e0 91 af 16 	lds	r30, 0x16AF	; 0x8016af <pxCurrentTCB>
    2dce:	f0 91 b0 16 	lds	r31, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    2dd2:	82 8d       	ldd	r24, Z+26	; 0x1a
    2dd4:	89 17       	cp	r24, r25
    2dd6:	10 f4       	brcc	.+4      	; 0x2ddc <xTaskGenericNotify+0x1d4>
    2dd8:	0e 94 91 04 	call	0x922	; 0x922 <vPortYield>
    2ddc:	0f 90       	pop	r0
    2dde:	0f be       	out	0x3f, r0	; 63
    2de0:	80 2f       	mov	r24, r16
    2de2:	df 91       	pop	r29
    2de4:	cf 91       	pop	r28
    2de6:	0f 91       	pop	r16
    2de8:	ff 90       	pop	r15
    2dea:	ef 90       	pop	r14
    2dec:	bf 90       	pop	r11
    2dee:	af 90       	pop	r10
    2df0:	9f 90       	pop	r9
    2df2:	8f 90       	pop	r8
    2df4:	08 95       	ret

00002df6 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2df6:	00 97       	sbiw	r24, 0x00	; 0
    2df8:	21 f4       	brne	.+8      	; 0x2e02 <xTaskGenericNotifyStateClear+0xc>
    2dfa:	80 91 af 16 	lds	r24, 0x16AF	; 0x8016af <pxCurrentTCB>
    2dfe:	90 91 b0 16 	lds	r25, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    2e02:	0f b6       	in	r0, 0x3f	; 63
    2e04:	f8 94       	cli
    2e06:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    2e08:	70 e0       	ldi	r23, 0x00	; 0
    2e0a:	fc 01       	movw	r30, r24
    2e0c:	e6 0f       	add	r30, r22
    2e0e:	f7 1f       	adc	r31, r23
    2e10:	23 a9       	ldd	r18, Z+51	; 0x33
    2e12:	22 30       	cpi	r18, 0x02	; 2
    2e14:	31 f4       	brne	.+12     	; 0x2e22 <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    2e16:	fc 01       	movw	r30, r24
    2e18:	e6 0f       	add	r30, r22
    2e1a:	f7 1f       	adc	r31, r23
    2e1c:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    2e1e:	81 e0       	ldi	r24, 0x01	; 1
    2e20:	01 c0       	rjmp	.+2      	; 0x2e24 <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    2e22:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2e24:	0f 90       	pop	r0
    2e26:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    2e28:	08 95       	ret

00002e2a <prvGetNextExpireTime>:
    2e2a:	dc 01       	movw	r26, r24
    2e2c:	e0 91 bb 16 	lds	r30, 0x16BB	; 0x8016bb <pxCurrentTimerList>
    2e30:	f0 91 bc 16 	lds	r31, 0x16BC	; 0x8016bc <pxCurrentTimerList+0x1>
    2e34:	80 81       	ld	r24, Z
    2e36:	91 e0       	ldi	r25, 0x01	; 1
    2e38:	81 11       	cpse	r24, r1
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	9c 93       	st	X, r25
    2e3e:	91 11       	cpse	r25, r1
    2e40:	08 c0       	rjmp	.+16     	; 0x2e52 <prvGetNextExpireTime+0x28>
    2e42:	07 80       	ldd	r0, Z+7	; 0x07
    2e44:	f0 85       	ldd	r31, Z+8	; 0x08
    2e46:	e0 2d       	mov	r30, r0
    2e48:	60 81       	ld	r22, Z
    2e4a:	71 81       	ldd	r23, Z+1	; 0x01
    2e4c:	82 81       	ldd	r24, Z+2	; 0x02
    2e4e:	93 81       	ldd	r25, Z+3	; 0x03
    2e50:	08 95       	ret
    2e52:	60 e0       	ldi	r22, 0x00	; 0
    2e54:	70 e0       	ldi	r23, 0x00	; 0
    2e56:	cb 01       	movw	r24, r22
    2e58:	08 95       	ret

00002e5a <prvInsertTimerInActiveList>:
    2e5a:	cf 92       	push	r12
    2e5c:	df 92       	push	r13
    2e5e:	ef 92       	push	r14
    2e60:	ff 92       	push	r15
    2e62:	0f 93       	push	r16
    2e64:	1f 93       	push	r17
    2e66:	fc 01       	movw	r30, r24
    2e68:	42 83       	std	Z+2, r20	; 0x02
    2e6a:	53 83       	std	Z+3, r21	; 0x03
    2e6c:	64 83       	std	Z+4, r22	; 0x04
    2e6e:	75 83       	std	Z+5, r23	; 0x05
    2e70:	93 87       	std	Z+11, r25	; 0x0b
    2e72:	82 87       	std	Z+10, r24	; 0x0a
    2e74:	04 17       	cp	r16, r20
    2e76:	15 07       	cpc	r17, r21
    2e78:	26 07       	cpc	r18, r22
    2e7a:	37 07       	cpc	r19, r23
    2e7c:	c0 f0       	brcs	.+48     	; 0x2eae <prvInsertTimerInActiveList+0x54>
    2e7e:	0c 19       	sub	r16, r12
    2e80:	1d 09       	sbc	r17, r13
    2e82:	2e 09       	sbc	r18, r14
    2e84:	3f 09       	sbc	r19, r15
    2e86:	86 85       	ldd	r24, Z+14	; 0x0e
    2e88:	97 85       	ldd	r25, Z+15	; 0x0f
    2e8a:	a0 89       	ldd	r26, Z+16	; 0x10
    2e8c:	b1 89       	ldd	r27, Z+17	; 0x11
    2e8e:	08 17       	cp	r16, r24
    2e90:	19 07       	cpc	r17, r25
    2e92:	2a 07       	cpc	r18, r26
    2e94:	3b 07       	cpc	r19, r27
    2e96:	00 f5       	brcc	.+64     	; 0x2ed8 <prvInsertTimerInActiveList+0x7e>
    2e98:	bf 01       	movw	r22, r30
    2e9a:	6e 5f       	subi	r22, 0xFE	; 254
    2e9c:	7f 4f       	sbci	r23, 0xFF	; 255
    2e9e:	80 91 b9 16 	lds	r24, 0x16B9	; 0x8016b9 <pxOverflowTimerList>
    2ea2:	90 91 ba 16 	lds	r25, 0x16BA	; 0x8016ba <pxOverflowTimerList+0x1>
    2ea6:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <vListInsert>
    2eaa:	80 e0       	ldi	r24, 0x00	; 0
    2eac:	18 c0       	rjmp	.+48     	; 0x2ede <prvInsertTimerInActiveList+0x84>
    2eae:	0c 15       	cp	r16, r12
    2eb0:	1d 05       	cpc	r17, r13
    2eb2:	2e 05       	cpc	r18, r14
    2eb4:	3f 05       	cpc	r19, r15
    2eb6:	28 f4       	brcc	.+10     	; 0x2ec2 <prvInsertTimerInActiveList+0x68>
    2eb8:	4c 15       	cp	r20, r12
    2eba:	5d 05       	cpc	r21, r13
    2ebc:	6e 05       	cpc	r22, r14
    2ebe:	7f 05       	cpc	r23, r15
    2ec0:	68 f4       	brcc	.+26     	; 0x2edc <prvInsertTimerInActiveList+0x82>
    2ec2:	bf 01       	movw	r22, r30
    2ec4:	6e 5f       	subi	r22, 0xFE	; 254
    2ec6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ec8:	80 91 bb 16 	lds	r24, 0x16BB	; 0x8016bb <pxCurrentTimerList>
    2ecc:	90 91 bc 16 	lds	r25, 0x16BC	; 0x8016bc <pxCurrentTimerList+0x1>
    2ed0:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <vListInsert>
    2ed4:	80 e0       	ldi	r24, 0x00	; 0
    2ed6:	03 c0       	rjmp	.+6      	; 0x2ede <prvInsertTimerInActiveList+0x84>
    2ed8:	81 e0       	ldi	r24, 0x01	; 1
    2eda:	01 c0       	rjmp	.+2      	; 0x2ede <prvInsertTimerInActiveList+0x84>
    2edc:	81 e0       	ldi	r24, 0x01	; 1
    2ede:	1f 91       	pop	r17
    2ee0:	0f 91       	pop	r16
    2ee2:	ff 90       	pop	r15
    2ee4:	ef 90       	pop	r14
    2ee6:	df 90       	pop	r13
    2ee8:	cf 90       	pop	r12
    2eea:	08 95       	ret

00002eec <prvCheckForValidListAndQueue>:
    2eec:	0f b6       	in	r0, 0x3f	; 63
    2eee:	f8 94       	cli
    2ef0:	0f 92       	push	r0
    2ef2:	80 91 b7 16 	lds	r24, 0x16B7	; 0x8016b7 <xTimerQueue>
    2ef6:	90 91 b8 16 	lds	r25, 0x16B8	; 0x8016b8 <xTimerQueue+0x1>
    2efa:	89 2b       	or	r24, r25
    2efc:	e9 f4       	brne	.+58     	; 0x2f38 <prvCheckForValidListAndQueue+0x4c>
    2efe:	88 ec       	ldi	r24, 0xC8	; 200
    2f00:	96 e1       	ldi	r25, 0x16	; 22
    2f02:	0e 94 c3 03 	call	0x786	; 0x786 <vListInitialise>
    2f06:	8d eb       	ldi	r24, 0xBD	; 189
    2f08:	96 e1       	ldi	r25, 0x16	; 22
    2f0a:	0e 94 c3 03 	call	0x786	; 0x786 <vListInitialise>
    2f0e:	88 ec       	ldi	r24, 0xC8	; 200
    2f10:	96 e1       	ldi	r25, 0x16	; 22
    2f12:	90 93 bc 16 	sts	0x16BC, r25	; 0x8016bc <pxCurrentTimerList+0x1>
    2f16:	80 93 bb 16 	sts	0x16BB, r24	; 0x8016bb <pxCurrentTimerList>
    2f1a:	8d eb       	ldi	r24, 0xBD	; 189
    2f1c:	96 e1       	ldi	r25, 0x16	; 22
    2f1e:	90 93 ba 16 	sts	0x16BA, r25	; 0x8016ba <pxOverflowTimerList+0x1>
    2f22:	80 93 b9 16 	sts	0x16B9, r24	; 0x8016b9 <pxOverflowTimerList>
    2f26:	40 e0       	ldi	r20, 0x00	; 0
    2f28:	67 e0       	ldi	r22, 0x07	; 7
    2f2a:	8a e0       	ldi	r24, 0x0A	; 10
    2f2c:	0e 94 86 06 	call	0xd0c	; 0xd0c <xQueueGenericCreate>
    2f30:	90 93 b8 16 	sts	0x16B8, r25	; 0x8016b8 <xTimerQueue+0x1>
    2f34:	80 93 b7 16 	sts	0x16B7, r24	; 0x8016b7 <xTimerQueue>
    2f38:	0f 90       	pop	r0
    2f3a:	0f be       	out	0x3f, r0	; 63
    2f3c:	08 95       	ret

00002f3e <xTimerCreateTimerTask>:
    2f3e:	ef 92       	push	r14
    2f40:	ff 92       	push	r15
    2f42:	0f 93       	push	r16
    2f44:	d3 df       	rcall	.-90     	; 0x2eec <prvCheckForValidListAndQueue>
    2f46:	80 91 b7 16 	lds	r24, 0x16B7	; 0x8016b7 <xTimerQueue>
    2f4a:	90 91 b8 16 	lds	r25, 0x16B8	; 0x8016b8 <xTimerQueue+0x1>
    2f4e:	89 2b       	or	r24, r25
    2f50:	91 f0       	breq	.+36     	; 0x2f76 <xTimerCreateTimerTask+0x38>
    2f52:	0f 2e       	mov	r0, r31
    2f54:	f5 eb       	ldi	r31, 0xB5	; 181
    2f56:	ef 2e       	mov	r14, r31
    2f58:	f6 e1       	ldi	r31, 0x16	; 22
    2f5a:	ff 2e       	mov	r15, r31
    2f5c:	f0 2d       	mov	r31, r0
    2f5e:	03 e0       	ldi	r16, 0x03	; 3
    2f60:	20 e0       	ldi	r18, 0x00	; 0
    2f62:	30 e0       	ldi	r19, 0x00	; 0
    2f64:	40 ec       	ldi	r20, 0xC0	; 192
    2f66:	50 e0       	ldi	r21, 0x00	; 0
    2f68:	64 e7       	ldi	r22, 0x74	; 116
    2f6a:	72 e0       	ldi	r23, 0x02	; 2
    2f6c:	87 ed       	ldi	r24, 0xD7	; 215
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <xTaskCreate>
    2f74:	01 c0       	rjmp	.+2      	; 0x2f78 <xTimerCreateTimerTask+0x3a>
    2f76:	80 e0       	ldi	r24, 0x00	; 0
    2f78:	0f 91       	pop	r16
    2f7a:	ff 90       	pop	r15
    2f7c:	ef 90       	pop	r14
    2f7e:	08 95       	ret

00002f80 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    2f80:	8f 92       	push	r8
    2f82:	9f 92       	push	r9
    2f84:	af 92       	push	r10
    2f86:	bf 92       	push	r11
    2f88:	cf 92       	push	r12
    2f8a:	df 92       	push	r13
    2f8c:	ef 92       	push	r14
    2f8e:	ff 92       	push	r15
    2f90:	0f 93       	push	r16
    2f92:	1f 93       	push	r17
    2f94:	cf 93       	push	r28
    2f96:	df 93       	push	r29
    2f98:	cd b7       	in	r28, 0x3d	; 61
    2f9a:	de b7       	in	r29, 0x3e	; 62
    2f9c:	27 97       	sbiw	r28, 0x07	; 7
    2f9e:	0f b6       	in	r0, 0x3f	; 63
    2fa0:	f8 94       	cli
    2fa2:	de bf       	out	0x3e, r29	; 62
    2fa4:	0f be       	out	0x3f, r0	; 63
    2fa6:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2fa8:	e0 91 b7 16 	lds	r30, 0x16B7	; 0x8016b7 <xTimerQueue>
    2fac:	f0 91 b8 16 	lds	r31, 0x16B8	; 0x8016b8 <xTimerQueue+0x1>
    2fb0:	30 97       	sbiw	r30, 0x00	; 0
    2fb2:	81 f1       	breq	.+96     	; 0x3014 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2fb4:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2fb6:	2a 83       	std	Y+2, r18	; 0x02
    2fb8:	3b 83       	std	Y+3, r19	; 0x03
    2fba:	4c 83       	std	Y+4, r20	; 0x04
    2fbc:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    2fbe:	9f 83       	std	Y+7, r25	; 0x07
    2fc0:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2fc2:	66 30       	cpi	r22, 0x06	; 6
    2fc4:	f4 f4       	brge	.+60     	; 0x3002 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2fc6:	e5 db       	rcall	.-2102   	; 0x2792 <xTaskGetSchedulerState>
    2fc8:	82 30       	cpi	r24, 0x02	; 2
    2fca:	69 f4       	brne	.+26     	; 0x2fe6 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2fcc:	00 e0       	ldi	r16, 0x00	; 0
    2fce:	a7 01       	movw	r20, r14
    2fd0:	96 01       	movw	r18, r12
    2fd2:	be 01       	movw	r22, r28
    2fd4:	6f 5f       	subi	r22, 0xFF	; 255
    2fd6:	7f 4f       	sbci	r23, 0xFF	; 255
    2fd8:	80 91 b7 16 	lds	r24, 0x16B7	; 0x8016b7 <xTimerQueue>
    2fdc:	90 91 b8 16 	lds	r25, 0x16B8	; 0x8016b8 <xTimerQueue+0x1>
    2fe0:	0e 94 a9 06 	call	0xd52	; 0xd52 <xQueueGenericSend>
    2fe4:	18 c0       	rjmp	.+48     	; 0x3016 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2fe6:	00 e0       	ldi	r16, 0x00	; 0
    2fe8:	20 e0       	ldi	r18, 0x00	; 0
    2fea:	30 e0       	ldi	r19, 0x00	; 0
    2fec:	a9 01       	movw	r20, r18
    2fee:	be 01       	movw	r22, r28
    2ff0:	6f 5f       	subi	r22, 0xFF	; 255
    2ff2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ff4:	80 91 b7 16 	lds	r24, 0x16B7	; 0x8016b7 <xTimerQueue>
    2ff8:	90 91 b8 16 	lds	r25, 0x16B8	; 0x8016b8 <xTimerQueue+0x1>
    2ffc:	0e 94 a9 06 	call	0xd52	; 0xd52 <xQueueGenericSend>
    3000:	0a c0       	rjmp	.+20     	; 0x3016 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3002:	20 e0       	ldi	r18, 0x00	; 0
    3004:	a8 01       	movw	r20, r16
    3006:	be 01       	movw	r22, r28
    3008:	6f 5f       	subi	r22, 0xFF	; 255
    300a:	7f 4f       	sbci	r23, 0xFF	; 255
    300c:	cf 01       	movw	r24, r30
    300e:	0e 94 59 07 	call	0xeb2	; 0xeb2 <xQueueGenericSendFromISR>
    3012:	01 c0       	rjmp	.+2      	; 0x3016 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    3014:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    3016:	27 96       	adiw	r28, 0x07	; 7
    3018:	0f b6       	in	r0, 0x3f	; 63
    301a:	f8 94       	cli
    301c:	de bf       	out	0x3e, r29	; 62
    301e:	0f be       	out	0x3f, r0	; 63
    3020:	cd bf       	out	0x3d, r28	; 61
    3022:	df 91       	pop	r29
    3024:	cf 91       	pop	r28
    3026:	1f 91       	pop	r17
    3028:	0f 91       	pop	r16
    302a:	ff 90       	pop	r15
    302c:	ef 90       	pop	r14
    302e:	df 90       	pop	r13
    3030:	cf 90       	pop	r12
    3032:	bf 90       	pop	r11
    3034:	af 90       	pop	r10
    3036:	9f 90       	pop	r9
    3038:	8f 90       	pop	r8
    303a:	08 95       	ret

0000303c <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    303c:	8f 92       	push	r8
    303e:	9f 92       	push	r9
    3040:	af 92       	push	r10
    3042:	bf 92       	push	r11
    3044:	cf 92       	push	r12
    3046:	df 92       	push	r13
    3048:	ef 92       	push	r14
    304a:	ff 92       	push	r15
    304c:	0f 93       	push	r16
    304e:	1f 93       	push	r17
    3050:	cf 93       	push	r28
    3052:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3054:	3b c0       	rjmp	.+118    	; 0x30cc <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3056:	07 80       	ldd	r0, Z+7	; 0x07
    3058:	f0 85       	ldd	r31, Z+8	; 0x08
    305a:	e0 2d       	mov	r30, r0
    305c:	80 80       	ld	r8, Z
    305e:	91 80       	ldd	r9, Z+1	; 0x01
    3060:	a2 80       	ldd	r10, Z+2	; 0x02
    3062:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3064:	c0 85       	ldd	r28, Z+8	; 0x08
    3066:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3068:	8e 01       	movw	r16, r28
    306a:	0e 5f       	subi	r16, 0xFE	; 254
    306c:	1f 4f       	sbci	r17, 0xFF	; 255
    306e:	c8 01       	movw	r24, r16
    3070:	0e 94 15 04 	call	0x82a	; 0x82a <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3074:	ec 89       	ldd	r30, Y+20	; 0x14
    3076:	fd 89       	ldd	r31, Y+21	; 0x15
    3078:	ce 01       	movw	r24, r28
    307a:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    307c:	8e 89       	ldd	r24, Y+22	; 0x16
    307e:	82 ff       	sbrs	r24, 2
    3080:	25 c0       	rjmp	.+74     	; 0x30cc <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    3082:	8e 85       	ldd	r24, Y+14	; 0x0e
    3084:	9f 85       	ldd	r25, Y+15	; 0x0f
    3086:	a8 89       	ldd	r26, Y+16	; 0x10
    3088:	b9 89       	ldd	r27, Y+17	; 0x11
    308a:	88 0d       	add	r24, r8
    308c:	99 1d       	adc	r25, r9
    308e:	aa 1d       	adc	r26, r10
    3090:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    3092:	88 16       	cp	r8, r24
    3094:	99 06       	cpc	r9, r25
    3096:	aa 06       	cpc	r10, r26
    3098:	bb 06       	cpc	r11, r27
    309a:	70 f4       	brcc	.+28     	; 0x30b8 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    309c:	8a 83       	std	Y+2, r24	; 0x02
    309e:	9b 83       	std	Y+3, r25	; 0x03
    30a0:	ac 83       	std	Y+4, r26	; 0x04
    30a2:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    30a4:	db 87       	std	Y+11, r29	; 0x0b
    30a6:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    30a8:	b8 01       	movw	r22, r16
    30aa:	80 91 bb 16 	lds	r24, 0x16BB	; 0x8016bb <pxCurrentTimerList>
    30ae:	90 91 bc 16 	lds	r25, 0x16BC	; 0x8016bc <pxCurrentTimerList+0x1>
    30b2:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <vListInsert>
    30b6:	0a c0       	rjmp	.+20     	; 0x30cc <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    30b8:	c1 2c       	mov	r12, r1
    30ba:	d1 2c       	mov	r13, r1
    30bc:	76 01       	movw	r14, r12
    30be:	00 e0       	ldi	r16, 0x00	; 0
    30c0:	10 e0       	ldi	r17, 0x00	; 0
    30c2:	a5 01       	movw	r20, r10
    30c4:	94 01       	movw	r18, r8
    30c6:	60 e0       	ldi	r22, 0x00	; 0
    30c8:	ce 01       	movw	r24, r28
    30ca:	5a df       	rcall	.-332    	; 0x2f80 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    30cc:	e0 91 bb 16 	lds	r30, 0x16BB	; 0x8016bb <pxCurrentTimerList>
    30d0:	f0 91 bc 16 	lds	r31, 0x16BC	; 0x8016bc <pxCurrentTimerList+0x1>
    30d4:	80 81       	ld	r24, Z
    30d6:	81 11       	cpse	r24, r1
    30d8:	be cf       	rjmp	.-132    	; 0x3056 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    30da:	80 91 b9 16 	lds	r24, 0x16B9	; 0x8016b9 <pxOverflowTimerList>
    30de:	90 91 ba 16 	lds	r25, 0x16BA	; 0x8016ba <pxOverflowTimerList+0x1>
    30e2:	90 93 bc 16 	sts	0x16BC, r25	; 0x8016bc <pxCurrentTimerList+0x1>
    30e6:	80 93 bb 16 	sts	0x16BB, r24	; 0x8016bb <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    30ea:	f0 93 ba 16 	sts	0x16BA, r31	; 0x8016ba <pxOverflowTimerList+0x1>
    30ee:	e0 93 b9 16 	sts	0x16B9, r30	; 0x8016b9 <pxOverflowTimerList>
    }
    30f2:	df 91       	pop	r29
    30f4:	cf 91       	pop	r28
    30f6:	1f 91       	pop	r17
    30f8:	0f 91       	pop	r16
    30fa:	ff 90       	pop	r15
    30fc:	ef 90       	pop	r14
    30fe:	df 90       	pop	r13
    3100:	cf 90       	pop	r12
    3102:	bf 90       	pop	r11
    3104:	af 90       	pop	r10
    3106:	9f 90       	pop	r9
    3108:	8f 90       	pop	r8
    310a:	08 95       	ret

0000310c <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    310c:	cf 92       	push	r12
    310e:	df 92       	push	r13
    3110:	ef 92       	push	r14
    3112:	ff 92       	push	r15
    3114:	cf 93       	push	r28
    3116:	df 93       	push	r29
    3118:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    311a:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <xTaskGetTickCount>
    311e:	6b 01       	movw	r12, r22
    3120:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    3122:	80 91 b1 16 	lds	r24, 0x16B1	; 0x8016b1 <xLastTime.2436>
    3126:	90 91 b2 16 	lds	r25, 0x16B2	; 0x8016b2 <xLastTime.2436+0x1>
    312a:	a0 91 b3 16 	lds	r26, 0x16B3	; 0x8016b3 <xLastTime.2436+0x2>
    312e:	b0 91 b4 16 	lds	r27, 0x16B4	; 0x8016b4 <xLastTime.2436+0x3>
    3132:	c8 16       	cp	r12, r24
    3134:	d9 06       	cpc	r13, r25
    3136:	ea 06       	cpc	r14, r26
    3138:	fb 06       	cpc	r15, r27
    313a:	20 f4       	brcc	.+8      	; 0x3144 <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    313c:	7f df       	rcall	.-258    	; 0x303c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    313e:	81 e0       	ldi	r24, 0x01	; 1
    3140:	88 83       	st	Y, r24
    3142:	01 c0       	rjmp	.+2      	; 0x3146 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    3144:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    3146:	c0 92 b1 16 	sts	0x16B1, r12	; 0x8016b1 <xLastTime.2436>
    314a:	d0 92 b2 16 	sts	0x16B2, r13	; 0x8016b2 <xLastTime.2436+0x1>
    314e:	e0 92 b3 16 	sts	0x16B3, r14	; 0x8016b3 <xLastTime.2436+0x2>
    3152:	f0 92 b4 16 	sts	0x16B4, r15	; 0x8016b4 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    3156:	c7 01       	movw	r24, r14
    3158:	b6 01       	movw	r22, r12
    315a:	df 91       	pop	r29
    315c:	cf 91       	pop	r28
    315e:	ff 90       	pop	r15
    3160:	ef 90       	pop	r14
    3162:	df 90       	pop	r13
    3164:	cf 90       	pop	r12
    3166:	08 95       	ret

00003168 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    3168:	4f 92       	push	r4
    316a:	5f 92       	push	r5
    316c:	6f 92       	push	r6
    316e:	7f 92       	push	r7
    3170:	8f 92       	push	r8
    3172:	9f 92       	push	r9
    3174:	af 92       	push	r10
    3176:	bf 92       	push	r11
    3178:	cf 92       	push	r12
    317a:	df 92       	push	r13
    317c:	ef 92       	push	r14
    317e:	ff 92       	push	r15
    3180:	0f 93       	push	r16
    3182:	1f 93       	push	r17
    3184:	cf 93       	push	r28
    3186:	df 93       	push	r29
    3188:	4b 01       	movw	r8, r22
    318a:	5c 01       	movw	r10, r24
    318c:	29 01       	movw	r4, r18
    318e:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3190:	e0 91 bb 16 	lds	r30, 0x16BB	; 0x8016bb <pxCurrentTimerList>
    3194:	f0 91 bc 16 	lds	r31, 0x16BC	; 0x8016bc <pxCurrentTimerList+0x1>
    3198:	07 80       	ldd	r0, Z+7	; 0x07
    319a:	f0 85       	ldd	r31, Z+8	; 0x08
    319c:	e0 2d       	mov	r30, r0
    319e:	c0 85       	ldd	r28, Z+8	; 0x08
    31a0:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    31a2:	ce 01       	movw	r24, r28
    31a4:	02 96       	adiw	r24, 0x02	; 2
    31a6:	0e 94 15 04 	call	0x82a	; 0x82a <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    31aa:	8e 89       	ldd	r24, Y+22	; 0x16
    31ac:	82 ff       	sbrs	r24, 2
    31ae:	1b c0       	rjmp	.+54     	; 0x31e6 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    31b0:	4e 85       	ldd	r20, Y+14	; 0x0e
    31b2:	5f 85       	ldd	r21, Y+15	; 0x0f
    31b4:	68 89       	ldd	r22, Y+16	; 0x10
    31b6:	79 89       	ldd	r23, Y+17	; 0x11
    31b8:	48 0d       	add	r20, r8
    31ba:	59 1d       	adc	r21, r9
    31bc:	6a 1d       	adc	r22, r10
    31be:	7b 1d       	adc	r23, r11
    31c0:	75 01       	movw	r14, r10
    31c2:	64 01       	movw	r12, r8
    31c4:	93 01       	movw	r18, r6
    31c6:	82 01       	movw	r16, r4
    31c8:	ce 01       	movw	r24, r28
    31ca:	47 de       	rcall	.-882    	; 0x2e5a <prvInsertTimerInActiveList>
    31cc:	88 23       	and	r24, r24
    31ce:	69 f0       	breq	.+26     	; 0x31ea <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    31d0:	c1 2c       	mov	r12, r1
    31d2:	d1 2c       	mov	r13, r1
    31d4:	76 01       	movw	r14, r12
    31d6:	00 e0       	ldi	r16, 0x00	; 0
    31d8:	10 e0       	ldi	r17, 0x00	; 0
    31da:	a5 01       	movw	r20, r10
    31dc:	94 01       	movw	r18, r8
    31de:	60 e0       	ldi	r22, 0x00	; 0
    31e0:	ce 01       	movw	r24, r28
    31e2:	ce de       	rcall	.-612    	; 0x2f80 <xTimerGenericCommand>
    31e4:	02 c0       	rjmp	.+4      	; 0x31ea <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    31e6:	8e 7f       	andi	r24, 0xFE	; 254
    31e8:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    31ea:	ec 89       	ldd	r30, Y+20	; 0x14
    31ec:	fd 89       	ldd	r31, Y+21	; 0x15
    31ee:	ce 01       	movw	r24, r28
    31f0:	19 95       	eicall
    }
    31f2:	df 91       	pop	r29
    31f4:	cf 91       	pop	r28
    31f6:	1f 91       	pop	r17
    31f8:	0f 91       	pop	r16
    31fa:	ff 90       	pop	r15
    31fc:	ef 90       	pop	r14
    31fe:	df 90       	pop	r13
    3200:	cf 90       	pop	r12
    3202:	bf 90       	pop	r11
    3204:	af 90       	pop	r10
    3206:	9f 90       	pop	r9
    3208:	8f 90       	pop	r8
    320a:	7f 90       	pop	r7
    320c:	6f 90       	pop	r6
    320e:	5f 90       	pop	r5
    3210:	4f 90       	pop	r4
    3212:	08 95       	ret

00003214 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    3214:	8f 92       	push	r8
    3216:	9f 92       	push	r9
    3218:	af 92       	push	r10
    321a:	bf 92       	push	r11
    321c:	cf 92       	push	r12
    321e:	df 92       	push	r13
    3220:	ef 92       	push	r14
    3222:	ff 92       	push	r15
    3224:	1f 93       	push	r17
    3226:	cf 93       	push	r28
    3228:	df 93       	push	r29
    322a:	1f 92       	push	r1
    322c:	cd b7       	in	r28, 0x3d	; 61
    322e:	de b7       	in	r29, 0x3e	; 62
    3230:	6b 01       	movw	r12, r22
    3232:	7c 01       	movw	r14, r24
    3234:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    3236:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    323a:	ce 01       	movw	r24, r28
    323c:	01 96       	adiw	r24, 0x01	; 1
    323e:	66 df       	rcall	.-308    	; 0x310c <prvSampleTimeNow>
    3240:	4b 01       	movw	r8, r22
    3242:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    3244:	89 81       	ldd	r24, Y+1	; 0x01
    3246:	81 11       	cpse	r24, r1
    3248:	2d c0       	rjmp	.+90     	; 0x32a4 <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    324a:	11 11       	cpse	r17, r1
    324c:	0d c0       	rjmp	.+26     	; 0x3268 <prvProcessTimerOrBlockTask+0x54>
    324e:	8c 14       	cp	r8, r12
    3250:	9d 04       	cpc	r9, r13
    3252:	ae 04       	cpc	r10, r14
    3254:	bf 04       	cpc	r11, r15
    3256:	40 f0       	brcs	.+16     	; 0x3268 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    3258:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    325c:	a5 01       	movw	r20, r10
    325e:	94 01       	movw	r18, r8
    3260:	c7 01       	movw	r24, r14
    3262:	b6 01       	movw	r22, r12
    3264:	81 df       	rcall	.-254    	; 0x3168 <prvProcessExpiredTimer>
    3266:	20 c0       	rjmp	.+64     	; 0x32a8 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    3268:	11 23       	and	r17, r17
    326a:	41 f0       	breq	.+16     	; 0x327c <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    326c:	e0 91 b9 16 	lds	r30, 0x16B9	; 0x8016b9 <pxOverflowTimerList>
    3270:	f0 91 ba 16 	lds	r31, 0x16BA	; 0x8016ba <pxOverflowTimerList+0x1>
    3274:	80 81       	ld	r24, Z
    3276:	11 e0       	ldi	r17, 0x01	; 1
    3278:	81 11       	cpse	r24, r1
    327a:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    327c:	b7 01       	movw	r22, r14
    327e:	a6 01       	movw	r20, r12
    3280:	48 19       	sub	r20, r8
    3282:	59 09       	sbc	r21, r9
    3284:	6a 09       	sbc	r22, r10
    3286:	7b 09       	sbc	r23, r11
    3288:	21 2f       	mov	r18, r17
    328a:	80 91 b7 16 	lds	r24, 0x16B7	; 0x8016b7 <xTimerQueue>
    328e:	90 91 b8 16 	lds	r25, 0x16B8	; 0x8016b8 <xTimerQueue+0x1>
    3292:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    3296:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <xTaskResumeAll>
    329a:	81 11       	cpse	r24, r1
    329c:	05 c0       	rjmp	.+10     	; 0x32a8 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    329e:	0e 94 91 04 	call	0x922	; 0x922 <vPortYield>
    32a2:	02 c0       	rjmp	.+4      	; 0x32a8 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    32a4:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <xTaskResumeAll>
            }
        }
    }
    32a8:	0f 90       	pop	r0
    32aa:	df 91       	pop	r29
    32ac:	cf 91       	pop	r28
    32ae:	1f 91       	pop	r17
    32b0:	ff 90       	pop	r15
    32b2:	ef 90       	pop	r14
    32b4:	df 90       	pop	r13
    32b6:	cf 90       	pop	r12
    32b8:	bf 90       	pop	r11
    32ba:	af 90       	pop	r10
    32bc:	9f 90       	pop	r9
    32be:	8f 90       	pop	r8
    32c0:	08 95       	ret

000032c2 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    32c2:	af 92       	push	r10
    32c4:	bf 92       	push	r11
    32c6:	cf 92       	push	r12
    32c8:	df 92       	push	r13
    32ca:	ef 92       	push	r14
    32cc:	ff 92       	push	r15
    32ce:	0f 93       	push	r16
    32d0:	1f 93       	push	r17
    32d2:	cf 93       	push	r28
    32d4:	df 93       	push	r29
    32d6:	cd b7       	in	r28, 0x3d	; 61
    32d8:	de b7       	in	r29, 0x3e	; 62
    32da:	28 97       	sbiw	r28, 0x08	; 8
    32dc:	0f b6       	in	r0, 0x3f	; 63
    32de:	f8 94       	cli
    32e0:	de bf       	out	0x3e, r29	; 62
    32e2:	0f be       	out	0x3f, r0	; 63
    32e4:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    32e6:	82 c0       	rjmp	.+260    	; 0x33ec <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    32e8:	89 81       	ldd	r24, Y+1	; 0x01
    32ea:	88 23       	and	r24, r24
    32ec:	0c f4       	brge	.+2      	; 0x32f0 <prvProcessReceivedCommands+0x2e>
    32ee:	7e c0       	rjmp	.+252    	; 0x33ec <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    32f0:	ae 80       	ldd	r10, Y+6	; 0x06
    32f2:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    32f4:	d5 01       	movw	r26, r10
    32f6:	1c 96       	adiw	r26, 0x0c	; 12
    32f8:	8d 91       	ld	r24, X+
    32fa:	9c 91       	ld	r25, X
    32fc:	1d 97       	sbiw	r26, 0x0d	; 13
    32fe:	89 2b       	or	r24, r25
    3300:	21 f0       	breq	.+8      	; 0x330a <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3302:	c5 01       	movw	r24, r10
    3304:	02 96       	adiw	r24, 0x02	; 2
    3306:	0e 94 15 04 	call	0x82a	; 0x82a <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    330a:	ce 01       	movw	r24, r28
    330c:	08 96       	adiw	r24, 0x08	; 8
    330e:	fe de       	rcall	.-516    	; 0x310c <prvSampleTimeNow>
    3310:	8b 01       	movw	r16, r22
    3312:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    3314:	e9 81       	ldd	r30, Y+1	; 0x01
    3316:	0e 2e       	mov	r0, r30
    3318:	00 0c       	add	r0, r0
    331a:	ff 0b       	sbc	r31, r31
    331c:	ea 30       	cpi	r30, 0x0A	; 10
    331e:	f1 05       	cpc	r31, r1
    3320:	08 f0       	brcs	.+2      	; 0x3324 <prvProcessReceivedCommands+0x62>
    3322:	64 c0       	rjmp	.+200    	; 0x33ec <prvProcessReceivedCommands+0x12a>
    3324:	88 27       	eor	r24, r24
    3326:	ee 58       	subi	r30, 0x8E	; 142
    3328:	ff 4f       	sbci	r31, 0xFF	; 255
    332a:	8f 4f       	sbci	r24, 0xFF	; 255
    332c:	0c 94 60 2e 	jmp	0x5cc0	; 0x5cc0 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3330:	f5 01       	movw	r30, r10
    3332:	86 89       	ldd	r24, Z+22	; 0x16
    3334:	81 60       	ori	r24, 0x01	; 1
    3336:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    3338:	ca 80       	ldd	r12, Y+2	; 0x02
    333a:	db 80       	ldd	r13, Y+3	; 0x03
    333c:	ec 80       	ldd	r14, Y+4	; 0x04
    333e:	fd 80       	ldd	r15, Y+5	; 0x05
    3340:	46 85       	ldd	r20, Z+14	; 0x0e
    3342:	57 85       	ldd	r21, Z+15	; 0x0f
    3344:	60 89       	ldd	r22, Z+16	; 0x10
    3346:	71 89       	ldd	r23, Z+17	; 0x11
    3348:	4c 0d       	add	r20, r12
    334a:	5d 1d       	adc	r21, r13
    334c:	6e 1d       	adc	r22, r14
    334e:	7f 1d       	adc	r23, r15
    3350:	c5 01       	movw	r24, r10
    3352:	83 dd       	rcall	.-1274   	; 0x2e5a <prvInsertTimerInActiveList>
    3354:	88 23       	and	r24, r24
    3356:	09 f4       	brne	.+2      	; 0x335a <prvProcessReceivedCommands+0x98>
    3358:	49 c0       	rjmp	.+146    	; 0x33ec <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    335a:	d5 01       	movw	r26, r10
    335c:	54 96       	adiw	r26, 0x14	; 20
    335e:	ed 91       	ld	r30, X+
    3360:	fc 91       	ld	r31, X
    3362:	55 97       	sbiw	r26, 0x15	; 21
    3364:	c5 01       	movw	r24, r10
    3366:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3368:	f5 01       	movw	r30, r10
    336a:	86 89       	ldd	r24, Z+22	; 0x16
    336c:	82 ff       	sbrs	r24, 2
    336e:	3e c0       	rjmp	.+124    	; 0x33ec <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    3370:	4a 81       	ldd	r20, Y+2	; 0x02
    3372:	5b 81       	ldd	r21, Y+3	; 0x03
    3374:	6c 81       	ldd	r22, Y+4	; 0x04
    3376:	7d 81       	ldd	r23, Y+5	; 0x05
    3378:	86 85       	ldd	r24, Z+14	; 0x0e
    337a:	97 85       	ldd	r25, Z+15	; 0x0f
    337c:	a0 89       	ldd	r26, Z+16	; 0x10
    337e:	b1 89       	ldd	r27, Z+17	; 0x11
    3380:	9a 01       	movw	r18, r20
    3382:	ab 01       	movw	r20, r22
    3384:	28 0f       	add	r18, r24
    3386:	39 1f       	adc	r19, r25
    3388:	4a 1f       	adc	r20, r26
    338a:	5b 1f       	adc	r21, r27
    338c:	c1 2c       	mov	r12, r1
    338e:	d1 2c       	mov	r13, r1
    3390:	76 01       	movw	r14, r12
    3392:	00 e0       	ldi	r16, 0x00	; 0
    3394:	10 e0       	ldi	r17, 0x00	; 0
    3396:	60 e0       	ldi	r22, 0x00	; 0
    3398:	c5 01       	movw	r24, r10
    339a:	f2 dd       	rcall	.-1052   	; 0x2f80 <xTimerGenericCommand>
    339c:	27 c0       	rjmp	.+78     	; 0x33ec <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    339e:	d5 01       	movw	r26, r10
    33a0:	56 96       	adiw	r26, 0x16	; 22
    33a2:	8c 91       	ld	r24, X
    33a4:	56 97       	sbiw	r26, 0x16	; 22
    33a6:	8e 7f       	andi	r24, 0xFE	; 254
    33a8:	56 96       	adiw	r26, 0x16	; 22
    33aa:	8c 93       	st	X, r24
                        break;
    33ac:	1f c0       	rjmp	.+62     	; 0x33ec <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    33ae:	f5 01       	movw	r30, r10
    33b0:	86 89       	ldd	r24, Z+22	; 0x16
    33b2:	81 60       	ori	r24, 0x01	; 1
    33b4:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    33b6:	4a 81       	ldd	r20, Y+2	; 0x02
    33b8:	5b 81       	ldd	r21, Y+3	; 0x03
    33ba:	6c 81       	ldd	r22, Y+4	; 0x04
    33bc:	7d 81       	ldd	r23, Y+5	; 0x05
    33be:	46 87       	std	Z+14, r20	; 0x0e
    33c0:	57 87       	std	Z+15, r21	; 0x0f
    33c2:	60 8b       	std	Z+16, r22	; 0x10
    33c4:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    33c6:	40 0f       	add	r20, r16
    33c8:	51 1f       	adc	r21, r17
    33ca:	62 1f       	adc	r22, r18
    33cc:	73 1f       	adc	r23, r19
    33ce:	68 01       	movw	r12, r16
    33d0:	79 01       	movw	r14, r18
    33d2:	c5 01       	movw	r24, r10
    33d4:	42 dd       	rcall	.-1404   	; 0x2e5a <prvInsertTimerInActiveList>
                        break;
    33d6:	0a c0       	rjmp	.+20     	; 0x33ec <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    33d8:	f5 01       	movw	r30, r10
    33da:	86 89       	ldd	r24, Z+22	; 0x16
    33dc:	81 fd       	sbrc	r24, 1
    33de:	04 c0       	rjmp	.+8      	; 0x33e8 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    33e0:	c5 01       	movw	r24, r10
    33e2:	0e 94 86 03 	call	0x70c	; 0x70c <vPortFree>
    33e6:	02 c0       	rjmp	.+4      	; 0x33ec <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    33e8:	8e 7f       	andi	r24, 0xFE	; 254
    33ea:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    33ec:	20 e0       	ldi	r18, 0x00	; 0
    33ee:	30 e0       	ldi	r19, 0x00	; 0
    33f0:	a9 01       	movw	r20, r18
    33f2:	be 01       	movw	r22, r28
    33f4:	6f 5f       	subi	r22, 0xFF	; 255
    33f6:	7f 4f       	sbci	r23, 0xFF	; 255
    33f8:	80 91 b7 16 	lds	r24, 0x16B7	; 0x8016b7 <xTimerQueue>
    33fc:	90 91 b8 16 	lds	r25, 0x16B8	; 0x8016b8 <xTimerQueue+0x1>
    3400:	0e 94 94 07 	call	0xf28	; 0xf28 <xQueueReceive>
    3404:	81 11       	cpse	r24, r1
    3406:	70 cf       	rjmp	.-288    	; 0x32e8 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    3408:	28 96       	adiw	r28, 0x08	; 8
    340a:	0f b6       	in	r0, 0x3f	; 63
    340c:	f8 94       	cli
    340e:	de bf       	out	0x3e, r29	; 62
    3410:	0f be       	out	0x3f, r0	; 63
    3412:	cd bf       	out	0x3d, r28	; 61
    3414:	df 91       	pop	r29
    3416:	cf 91       	pop	r28
    3418:	1f 91       	pop	r17
    341a:	0f 91       	pop	r16
    341c:	ff 90       	pop	r15
    341e:	ef 90       	pop	r14
    3420:	df 90       	pop	r13
    3422:	cf 90       	pop	r12
    3424:	bf 90       	pop	r11
    3426:	af 90       	pop	r10
    3428:	08 95       	ret

0000342a <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    342a:	08 95       	ret

0000342c <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    342c:	84 b1       	in	r24, 0x04	; 4
    342e:	80 68       	ori	r24, 0x80	; 128
    3430:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3432:	85 b1       	in	r24, 0x05	; 5
    3434:	80 68       	ori	r24, 0x80	; 128
    3436:	85 b9       	out	0x05, r24	; 5
    3438:	08 95       	ret

0000343a <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    343a:	83 b1       	in	r24, 0x03	; 3
    343c:	80 68       	ori	r24, 0x80	; 128
    343e:	83 b9       	out	0x03, r24	; 3
    3440:	08 95       	ret

00003442 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    3442:	f4 df       	rcall	.-24     	; 0x342c <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3444:	2f ef       	ldi	r18, 0xFF	; 255
    3446:	80 e7       	ldi	r24, 0x70	; 112
    3448:	92 e0       	ldi	r25, 0x02	; 2
    344a:	21 50       	subi	r18, 0x01	; 1
    344c:	80 40       	sbci	r24, 0x00	; 0
    344e:	90 40       	sbci	r25, 0x00	; 0
    3450:	e1 f7       	brne	.-8      	; 0x344a <vApplicationMallocFailedHook+0x8>
    3452:	00 c0       	rjmp	.+0      	; 0x3454 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    3454:	00 00       	nop
    3456:	f1 df       	rcall	.-30     	; 0x343a <prvBlinkMainLed>
    3458:	f5 cf       	rjmp	.-22     	; 0x3444 <vApplicationMallocFailedHook+0x2>

0000345a <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    345a:	e8 df       	rcall	.-48     	; 0x342c <prvSetMainLedOn>
    345c:	2f ef       	ldi	r18, 0xFF	; 255
    345e:	87 ea       	ldi	r24, 0xA7	; 167
    3460:	91 e6       	ldi	r25, 0x61	; 97
    3462:	21 50       	subi	r18, 0x01	; 1
    3464:	80 40       	sbci	r24, 0x00	; 0
    3466:	90 40       	sbci	r25, 0x00	; 0
    3468:	e1 f7       	brne	.-8      	; 0x3462 <vApplicationStackOverflowHook+0x8>
    346a:	00 c0       	rjmp	.+0      	; 0x346c <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    346c:	00 00       	nop
    346e:	e5 df       	rcall	.-54     	; 0x343a <prvBlinkMainLed>
    3470:	f5 cf       	rjmp	.-22     	; 0x345c <vApplicationStackOverflowHook+0x2>

00003472 <_createQueues>:
static SemaphoreHandle_t _mutex;

static MessageBufferHandle_t _messageBuffer;

static void _createQueues(void) {
	_humidityQueue = xQueueCreate(10, sizeof(uint16_t));
    3472:	40 e0       	ldi	r20, 0x00	; 0
    3474:	62 e0       	ldi	r22, 0x02	; 2
    3476:	8a e0       	ldi	r24, 0x0A	; 10
    3478:	0e 94 86 06 	call	0xd0c	; 0xd0c <xQueueGenericCreate>
    347c:	90 93 e2 16 	sts	0x16E2, r25	; 0x8016e2 <_humidityQueue+0x1>
    3480:	80 93 e1 16 	sts	0x16E1, r24	; 0x8016e1 <_humidityQueue>
	_temperatureQueue = xQueueCreate(10, sizeof(int16_t));
    3484:	40 e0       	ldi	r20, 0x00	; 0
    3486:	62 e0       	ldi	r22, 0x02	; 2
    3488:	8a e0       	ldi	r24, 0x0A	; 10
    348a:	0e 94 86 06 	call	0xd0c	; 0xd0c <xQueueGenericCreate>
    348e:	90 93 e0 16 	sts	0x16E0, r25	; 0x8016e0 <_temperatureQueue+0x1>
    3492:	80 93 df 16 	sts	0x16DF, r24	; 0x8016df <_temperatureQueue>
	_co2Queue = xQueueCreate(10, sizeof(uint16_t));
    3496:	40 e0       	ldi	r20, 0x00	; 0
    3498:	62 e0       	ldi	r22, 0x02	; 2
    349a:	8a e0       	ldi	r24, 0x0A	; 10
    349c:	0e 94 86 06 	call	0xd0c	; 0xd0c <xQueueGenericCreate>
    34a0:	90 93 de 16 	sts	0x16DE, r25	; 0x8016de <_co2Queue+0x1>
    34a4:	80 93 dd 16 	sts	0x16DD, r24	; 0x8016dd <_co2Queue>
	_soundQueue = xQueueCreate(10, sizeof(uint16_t));
    34a8:	40 e0       	ldi	r20, 0x00	; 0
    34aa:	62 e0       	ldi	r22, 0x02	; 2
    34ac:	8a e0       	ldi	r24, 0x0A	; 10
    34ae:	0e 94 86 06 	call	0xd0c	; 0xd0c <xQueueGenericCreate>
    34b2:	90 93 dc 16 	sts	0x16DC, r25	; 0x8016dc <_soundQueue+0x1>
    34b6:	80 93 db 16 	sts	0x16DB, r24	; 0x8016db <_soundQueue>
	_servoQueue = xQueueCreate(10, sizeof(int16_t));
    34ba:	40 e0       	ldi	r20, 0x00	; 0
    34bc:	62 e0       	ldi	r22, 0x02	; 2
    34be:	8a e0       	ldi	r24, 0x0A	; 10
    34c0:	0e 94 86 06 	call	0xd0c	; 0xd0c <xQueueGenericCreate>
    34c4:	90 93 da 16 	sts	0x16DA, r25	; 0x8016da <_servoQueue+0x1>
    34c8:	80 93 d9 16 	sts	0x16D9, r24	; 0x8016d9 <_servoQueue>
    34cc:	08 95       	ret

000034ce <_initDrivers>:
static void _createMutexes(void){
	_mutex = xSemaphoreCreateMutex();
}

static void _initDrivers(void) {
	puts("Initializing drivers...");
    34ce:	8c e7       	ldi	r24, 0x7C	; 124
    34d0:	92 e0       	ldi	r25, 0x02	; 2
    34d2:	0e 94 ff 2f 	call	0x5ffe	; 0x5ffe <puts>
	hih8120_initialise();
    34d6:	08 d6       	rcall	.+3088   	; 0x40e8 <hih8120_initialise>
	mh_z19_initialise(ser_USART3);
    34d8:	83 e0       	ldi	r24, 0x03	; 3
    34da:	0e 94 38 25 	call	0x4a70	; 0x4a70 <mh_z19_initialise>
	rc_servo_initialise();
    34de:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <rc_servo_initialise>
	sen14262_initialise();
    34e2:	0c 94 d8 25 	jmp	0x4bb0	; 0x4bb0 <sen14262_initialise>
    34e6:	08 95       	ret

000034e8 <_createEventGroups>:
	_soundQueue = xQueueCreate(10, sizeof(uint16_t));
	_servoQueue = xQueueCreate(10, sizeof(int16_t));
}

static void _createEventGroups(void) {
	_actEventGroup = xEventGroupCreate();
    34e8:	0e 94 29 01 	call	0x252	; 0x252 <xEventGroupCreate>
    34ec:	90 93 d8 16 	sts	0x16D8, r25	; 0x8016d8 <_actEventGroup+0x1>
    34f0:	80 93 d7 16 	sts	0x16D7, r24	; 0x8016d7 <_actEventGroup>
	_doneEventGroup = xEventGroupCreate();
    34f4:	0e 94 29 01 	call	0x252	; 0x252 <xEventGroupCreate>
    34f8:	90 93 d6 16 	sts	0x16D6, r25	; 0x8016d6 <_doneEventGroup+0x1>
    34fc:	80 93 d5 16 	sts	0x16D5, r24	; 0x8016d5 <_doneEventGroup>
    3500:	08 95       	ret

00003502 <_createTasks>:
	mh_z19_initialise(ser_USART3);
	rc_servo_initialise();
	sen14262_initialise();
}

static void _createTasks(void) {
    3502:	af 92       	push	r10
    3504:	bf 92       	push	r11
    3506:	cf 92       	push	r12
    3508:	df 92       	push	r13
    350a:	ef 92       	push	r14
    350c:	ff 92       	push	r15
    350e:	0f 93       	push	r16
    3510:	1f 93       	push	r17
	farmerama_create(_senderQueue, _humidityQueue, _temperatureQueue, _co2Queue, _soundQueue, _servoQueue, _actEventGroup, _doneEventGroup);
    3512:	a0 90 d5 16 	lds	r10, 0x16D5	; 0x8016d5 <_doneEventGroup>
    3516:	b0 90 d6 16 	lds	r11, 0x16D6	; 0x8016d6 <_doneEventGroup+0x1>
    351a:	c0 90 d7 16 	lds	r12, 0x16D7	; 0x8016d7 <_actEventGroup>
    351e:	d0 90 d8 16 	lds	r13, 0x16D8	; 0x8016d8 <_actEventGroup+0x1>
    3522:	e0 90 d9 16 	lds	r14, 0x16D9	; 0x8016d9 <_servoQueue>
    3526:	f0 90 da 16 	lds	r15, 0x16DA	; 0x8016da <_servoQueue+0x1>
    352a:	00 91 db 16 	lds	r16, 0x16DB	; 0x8016db <_soundQueue>
    352e:	10 91 dc 16 	lds	r17, 0x16DC	; 0x8016dc <_soundQueue+0x1>
    3532:	20 91 dd 16 	lds	r18, 0x16DD	; 0x8016dd <_co2Queue>
    3536:	30 91 de 16 	lds	r19, 0x16DE	; 0x8016de <_co2Queue+0x1>
    353a:	40 91 df 16 	lds	r20, 0x16DF	; 0x8016df <_temperatureQueue>
    353e:	50 91 e0 16 	lds	r21, 0x16E0	; 0x8016e0 <_temperatureQueue+0x1>
    3542:	60 91 e1 16 	lds	r22, 0x16E1	; 0x8016e1 <_humidityQueue>
    3546:	70 91 e2 16 	lds	r23, 0x16E2	; 0x8016e2 <_humidityQueue+0x1>
    354a:	80 e0       	ldi	r24, 0x00	; 0
    354c:	90 e0       	ldi	r25, 0x00	; 0
    354e:	36 d1       	rcall	.+620    	; 0x37bc <farmerama_create>
	humidityTemperatureTask_create(_humidityQueue, _temperatureQueue, _actEventGroup, _doneEventGroup);
    3550:	20 91 d5 16 	lds	r18, 0x16D5	; 0x8016d5 <_doneEventGroup>
    3554:	30 91 d6 16 	lds	r19, 0x16D6	; 0x8016d6 <_doneEventGroup+0x1>
    3558:	40 91 d7 16 	lds	r20, 0x16D7	; 0x8016d7 <_actEventGroup>
    355c:	50 91 d8 16 	lds	r21, 0x16D8	; 0x8016d8 <_actEventGroup+0x1>
    3560:	60 91 df 16 	lds	r22, 0x16DF	; 0x8016df <_temperatureQueue>
    3564:	70 91 e0 16 	lds	r23, 0x16E0	; 0x8016e0 <_temperatureQueue+0x1>
    3568:	80 91 e1 16 	lds	r24, 0x16E1	; 0x8016e1 <_humidityQueue>
    356c:	90 91 e2 16 	lds	r25, 0x16E2	; 0x8016e2 <_humidityQueue+0x1>
    3570:	5d d2       	rcall	.+1210   	; 0x3a2c <humidityTemperatureTask_create>
	co2Task_create(_co2Queue, _actEventGroup, _doneEventGroup);
    3572:	40 91 d5 16 	lds	r20, 0x16D5	; 0x8016d5 <_doneEventGroup>
    3576:	50 91 d6 16 	lds	r21, 0x16D6	; 0x8016d6 <_doneEventGroup+0x1>
    357a:	60 91 d7 16 	lds	r22, 0x16D7	; 0x8016d7 <_actEventGroup>
    357e:	70 91 d8 16 	lds	r23, 0x16D8	; 0x8016d8 <_actEventGroup+0x1>
    3582:	80 91 dd 16 	lds	r24, 0x16DD	; 0x8016dd <_co2Queue>
    3586:	90 91 de 16 	lds	r25, 0x16DE	; 0x8016de <_co2Queue+0x1>
    358a:	5b d0       	rcall	.+182    	; 0x3642 <co2Task_create>
	soundTask_create(_soundQueue, _actEventGroup, _doneEventGroup);
    358c:	40 91 d5 16 	lds	r20, 0x16D5	; 0x8016d5 <_doneEventGroup>
    3590:	50 91 d6 16 	lds	r21, 0x16D6	; 0x8016d6 <_doneEventGroup+0x1>
    3594:	60 91 d7 16 	lds	r22, 0x16D7	; 0x8016d7 <_actEventGroup>
    3598:	70 91 d8 16 	lds	r23, 0x16D8	; 0x8016d8 <_actEventGroup+0x1>
    359c:	80 91 db 16 	lds	r24, 0x16DB	; 0x8016db <_soundQueue>
    35a0:	90 91 dc 16 	lds	r25, 0x16DC	; 0x8016dc <_soundQueue+0x1>
    35a4:	f2 d4       	rcall	.+2532   	; 0x3f8a <soundTask_create>
	servoTask_create(_servoQueue);
    35a6:	80 91 d9 16 	lds	r24, 0x16D9	; 0x8016d9 <_servoQueue>
    35aa:	90 91 da 16 	lds	r25, 0x16DA	; 0x8016da <_servoQueue+0x1>
	senderTask_create(_senderQueue);
    35ae:	33 d4       	rcall	.+2150   	; 0x3e16 <servoTask_create>
    35b0:	80 e0       	ldi	r24, 0x00	; 0
    35b2:	90 e0       	ldi	r25, 0x00	; 0
	receiverTask_create(_messageBuffer);
    35b4:	cc d3       	rcall	.+1944   	; 0x3d4e <senderTask_create>
    35b6:	80 e0       	ldi	r24, 0x00	; 0
    35b8:	90 e0       	ldi	r25, 0x00	; 0
    35ba:	d0 d2       	rcall	.+1440   	; 0x3b5c <receiverTask_create>
}
    35bc:	1f 91       	pop	r17
    35be:	0f 91       	pop	r16
    35c0:	ff 90       	pop	r15
    35c2:	ef 90       	pop	r14
    35c4:	df 90       	pop	r13
    35c6:	cf 90       	pop	r12
    35c8:	bf 90       	pop	r11
    35ca:	af 90       	pop	r10
    35cc:	08 95       	ret

000035ce <_createMutexes>:
	_actEventGroup = xEventGroupCreate();
	_doneEventGroup = xEventGroupCreate();
}

static void _createMutexes(void){
	_mutex = xSemaphoreCreateMutex();
    35ce:	81 e0       	ldi	r24, 0x01	; 1
    35d0:	0e 94 4d 07 	call	0xe9a	; 0xe9a <xQueueCreateMutex>
    35d4:	90 93 d4 16 	sts	0x16D4, r25	; 0x8016d4 <_mutex+0x1>
    35d8:	80 93 d3 16 	sts	0x16D3, r24	; 0x8016d3 <_mutex>
    35dc:	08 95       	ret

000035de <main>:
	senderTask_create(_senderQueue);
	receiverTask_create(_messageBuffer);
}

int main(void) {
	stdio_initialise(ser_USART0);
    35de:	80 e0       	ldi	r24, 0x00	; 0
    35e0:	0e 94 dc 29 	call	0x53b8	; 0x53b8 <stdio_initialise>
	
	_createQueues();
    35e4:	46 df       	rcall	.-372    	; 0x3472 <_createQueues>
	_initDrivers();
    35e6:	73 df       	rcall	.-282    	; 0x34ce <_initDrivers>
	_createEventGroups();
    35e8:	7f df       	rcall	.-258    	; 0x34e8 <_createEventGroups>
	_createTasks();
    35ea:	8b df       	rcall	.-234    	; 0x3502 <_createTasks>
    35ec:	f0 df       	rcall	.-32     	; 0x35ce <_createMutexes>
	_createMutexes();
    35ee:	80 91 d3 16 	lds	r24, 0x16D3	; 0x8016d3 <_mutex>
	configuration_create(_mutex);
    35f2:	90 91 d4 16 	lds	r25, 0x16D4	; 0x8016d4 <_mutex+0x1>
    35f6:	75 d0       	rcall	.+234    	; 0x36e2 <configuration_create>
    35f8:	84 e9       	ldi	r24, 0x94	; 148
    35fa:	92 e0       	ldi	r25, 0x02	; 2
	
	puts("Starting...");
    35fc:	0e 94 ff 2f 	call	0x5ffe	; 0x5ffe <puts>
    3600:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <vTaskStartScheduler>
	vTaskStartScheduler();
    3604:	80 e0       	ldi	r24, 0x00	; 0
    3606:	90 e0       	ldi	r25, 0x00	; 0
    3608:	08 95       	ret

0000360a <_co2CallBack>:
    360a:	0f 93       	push	r16
    360c:	cf 93       	push	r28
	}	
		
	xEventGroupSetBits(_doneEventGroup, BIT_CO2_DONE);
}

static void _co2CallBack(uint16_t ppm){
    360e:	df 93       	push	r29
    3610:	1f 92       	push	r1
    3612:	1f 92       	push	r1
    3614:	cd b7       	in	r28, 0x3d	; 61
    3616:	de b7       	in	r29, 0x3e	; 62
    3618:	9a 83       	std	Y+2, r25	; 0x02
    361a:	89 83       	std	Y+1, r24	; 0x01
	xQueueSendToBack(_co2Queue, &ppm, portMAX_DELAY);
    361c:	00 e0       	ldi	r16, 0x00	; 0
    361e:	2f ef       	ldi	r18, 0xFF	; 255
    3620:	3f ef       	ldi	r19, 0xFF	; 255
    3622:	a9 01       	movw	r20, r18
    3624:	be 01       	movw	r22, r28
    3626:	6f 5f       	subi	r22, 0xFF	; 255
    3628:	7f 4f       	sbci	r23, 0xFF	; 255
    362a:	80 91 e5 16 	lds	r24, 0x16E5	; 0x8016e5 <_co2Queue>
    362e:	90 91 e6 16 	lds	r25, 0x16E6	; 0x8016e6 <_co2Queue+0x1>
    3632:	0e 94 a9 06 	call	0xd52	; 0xd52 <xQueueGenericSend>
}
    3636:	0f 90       	pop	r0
    3638:	0f 90       	pop	r0
    363a:	df 91       	pop	r29
    363c:	cf 91       	pop	r28
    363e:	0f 91       	pop	r16
    3640:	08 95       	ret

00003642 <co2Task_create>:
static QueueHandle_t _co2Queue;
static EventGroupHandle_t _actEventGroup;
static EventGroupHandle_t _doneEventGroup;
static uint16_t ppm;

void co2Task_create(QueueHandle_t co2Queue, EventGroupHandle_t actEventGroup, EventGroupHandle_t doneEventGroup) {
    3642:	ef 92       	push	r14
    3644:	ff 92       	push	r15
    3646:	0f 93       	push	r16
	_co2Queue = co2Queue;
    3648:	90 93 e6 16 	sts	0x16E6, r25	; 0x8016e6 <_co2Queue+0x1>
    364c:	80 93 e5 16 	sts	0x16E5, r24	; 0x8016e5 <_co2Queue>
	_actEventGroup = actEventGroup;
	_doneEventGroup = doneEventGroup;
    3650:	50 93 e4 16 	sts	0x16E4, r21	; 0x8016e4 <_doneEventGroup+0x1>
    3654:	40 93 e3 16 	sts	0x16E3, r20	; 0x8016e3 <_doneEventGroup>
	
	xTaskCreate(_run, 
    3658:	e1 2c       	mov	r14, r1
    365a:	f1 2c       	mov	r15, r1
    365c:	08 e0       	ldi	r16, 0x08	; 8
    365e:	20 e0       	ldi	r18, 0x00	; 0
    3660:	30 e0       	ldi	r19, 0x00	; 0
    3662:	40 ec       	ldi	r20, 0xC0	; 192
    3664:	50 e0       	ldi	r21, 0x00	; 0
    3666:	60 ea       	ldi	r22, 0xA0	; 160
    3668:	72 e0       	ldi	r23, 0x02	; 2
    366a:	8e e6       	ldi	r24, 0x6E	; 110
    366c:	9b e1       	ldi	r25, 0x1B	; 27
    366e:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <xTaskCreate>
				TASK_NAME, 
				configMINIMAL_STACK_SIZE, 
				NULL, 
				TASK_PRIORITY, 
				NULL);
}
    3672:	0f 91       	pop	r16
    3674:	ff 90       	pop	r15
    3676:	ef 90       	pop	r14
    3678:	08 95       	ret

0000367a <co2Task_initTask>:

void co2Task_initTask(void* params) {
	mh_z19_injectCallBack(_co2CallBack);
    367a:	85 e0       	ldi	r24, 0x05	; 5
    367c:	9b e1       	ldi	r25, 0x1B	; 27
    367e:	0c 94 5d 25 	jmp	0x4aba	; 0x4aba <mh_z19_injectCallBack>
    3682:	08 95       	ret

00003684 <co2Task_runTask>:
}

void co2Task_runTask() {
    3684:	cf 92       	push	r12
    3686:	df 92       	push	r13
    3688:	ef 92       	push	r14
    368a:	ff 92       	push	r15
    368c:	0f 93       	push	r16
	xEventGroupWaitBits(_doneEventGroup, 
    368e:	cc 24       	eor	r12, r12
    3690:	ca 94       	dec	r12
    3692:	dc 2c       	mov	r13, r12
    3694:	76 01       	movw	r14, r12
    3696:	01 e0       	ldi	r16, 0x01	; 1
    3698:	20 e0       	ldi	r18, 0x00	; 0
    369a:	43 e0       	ldi	r20, 0x03	; 3
    369c:	50 e0       	ldi	r21, 0x00	; 0
    369e:	60 e0       	ldi	r22, 0x00	; 0
    36a0:	70 e0       	ldi	r23, 0x00	; 0
    36a2:	80 91 e3 16 	lds	r24, 0x16E3	; 0x8016e3 <_doneEventGroup>
    36a6:	90 91 e4 16 	lds	r25, 0x16E4	; 0x8016e4 <_doneEventGroup+0x1>
    36aa:	0e 94 3c 01 	call	0x278	; 0x278 <xEventGroupWaitBits>
						pdFALSE, 
						pdTRUE, 
						portMAX_DELAY
	);
	
	if ((mh_z19_takeMeassuring()) != MHZ19_OK) {
    36ae:	0e 94 62 25 	call	0x4ac4	; 0x4ac4 <mh_z19_takeMeassuring>
    36b2:	88 23       	and	r24, r24
    36b4:	19 f0       	breq	.+6      	; 0x36bc <co2Task_runTask+0x38>
		ppm = CONFIG_INVALID_CO2_VALUE;
		_co2CallBack(ppm);
    36b6:	80 e0       	ldi	r24, 0x00	; 0
    36b8:	90 e0       	ldi	r25, 0x00	; 0
    36ba:	a7 df       	rcall	.-178    	; 0x360a <_co2CallBack>
	}	
		
	xEventGroupSetBits(_doneEventGroup, BIT_CO2_DONE);
    36bc:	44 e0       	ldi	r20, 0x04	; 4
    36be:	50 e0       	ldi	r21, 0x00	; 0
    36c0:	60 e0       	ldi	r22, 0x00	; 0
    36c2:	70 e0       	ldi	r23, 0x00	; 0
    36c4:	80 91 e3 16 	lds	r24, 0x16E3	; 0x8016e3 <_doneEventGroup>
    36c8:	90 91 e4 16 	lds	r25, 0x16E4	; 0x8016e4 <_doneEventGroup+0x1>
    36cc:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <xEventGroupSetBits>
}
    36d0:	0f 91       	pop	r16
    36d2:	ff 90       	pop	r15
    36d4:	ef 90       	pop	r14
    36d6:	df 90       	pop	r13
    36d8:	cf 90       	pop	r12
    36da:	08 95       	ret

000036dc <_run>:
static void _co2CallBack(uint16_t ppm){
	xQueueSendToBack(_co2Queue, &ppm, portMAX_DELAY);
}

static void _run(void* params) {
	co2Task_initTask(params);
    36dc:	ce df       	rcall	.-100    	; 0x367a <co2Task_initTask>
	
	while (1) {
		co2Task_runTask();
    36de:	d2 df       	rcall	.-92     	; 0x3684 <co2Task_runTask>
    36e0:	fe cf       	rjmp	.-4      	; 0x36de <_run+0x2>

000036e2 <configuration_create>:
    36e2:	90 93 f4 16 	sts	0x16F4, r25	; 0x8016f4 <_mutex+0x1>
	if (xSemaphoreTake(_mutex, pdMS_TO_TICKS(3000)) == pdTRUE) {
		int16_t temp = _humidityHIGH;
		xSemaphoreGive(_mutex);
		return temp;
	}
}
    36e6:	80 93 f3 16 	sts	0x16F3, r24	; 0x8016f3 <_mutex>
    36ea:	80 ed       	ldi	r24, 0xD0	; 208
    36ec:	97 e0       	ldi	r25, 0x07	; 7
    36ee:	90 93 f2 16 	sts	0x16F2, r25	; 0x8016f2 <_humidityLOW+0x1>
    36f2:	80 93 f1 16 	sts	0x16F1, r24	; 0x8016f1 <_humidityLOW>
    36f6:	90 93 f0 16 	sts	0x16F0, r25	; 0x8016f0 <_humidityHIGH+0x1>
    36fa:	80 93 ef 16 	sts	0x16EF, r24	; 0x8016ef <_humidityHIGH>
    36fe:	88 e1       	ldi	r24, 0x18	; 24
    3700:	9c ef       	ldi	r25, 0xFC	; 252
    3702:	90 93 ee 16 	sts	0x16EE, r25	; 0x8016ee <_temperatureLOW+0x1>
    3706:	80 93 ed 16 	sts	0x16ED, r24	; 0x8016ed <_temperatureLOW>
    370a:	90 93 ec 16 	sts	0x16EC, r25	; 0x8016ec <_temperatureHIGH+0x1>
    370e:	80 93 eb 16 	sts	0x16EB, r24	; 0x8016eb <_temperatureHIGH>
    3712:	10 92 ea 16 	sts	0x16EA, r1	; 0x8016ea <_ppmLOW+0x1>
    3716:	10 92 e9 16 	sts	0x16E9, r1	; 0x8016e9 <_ppmLOW>
    371a:	10 92 e8 16 	sts	0x16E8, r1	; 0x8016e8 <_ppmHIGH+0x1>
    371e:	10 92 e7 16 	sts	0x16E7, r1	; 0x8016e7 <_ppmHIGH>
    3722:	08 95       	ret

00003724 <configuration_getLowTemperatureThreshold>:
    3724:	0f 93       	push	r16
    3726:	cf 93       	push	r28
    3728:	df 93       	push	r29
    372a:	4a eb       	ldi	r20, 0xBA	; 186
    372c:	50 e0       	ldi	r21, 0x00	; 0
    372e:	60 e0       	ldi	r22, 0x00	; 0
    3730:	70 e0       	ldi	r23, 0x00	; 0
    3732:	80 91 f3 16 	lds	r24, 0x16F3	; 0x8016f3 <_mutex>
    3736:	90 91 f4 16 	lds	r25, 0x16F4	; 0x8016f4 <_mutex+0x1>
    373a:	0e 94 23 08 	call	0x1046	; 0x1046 <xQueueSemaphoreTake>
    373e:	81 30       	cpi	r24, 0x01	; 1
    3740:	99 f4       	brne	.+38     	; 0x3768 <configuration_getLowTemperatureThreshold+0x44>
    3742:	d0 91 ed 16 	lds	r29, 0x16ED	; 0x8016ed <_temperatureLOW>
    3746:	c0 91 ee 16 	lds	r28, 0x16EE	; 0x8016ee <_temperatureLOW+0x1>
    374a:	00 e0       	ldi	r16, 0x00	; 0
    374c:	20 e0       	ldi	r18, 0x00	; 0
    374e:	30 e0       	ldi	r19, 0x00	; 0
    3750:	a9 01       	movw	r20, r18
    3752:	60 e0       	ldi	r22, 0x00	; 0
    3754:	70 e0       	ldi	r23, 0x00	; 0
    3756:	80 91 f3 16 	lds	r24, 0x16F3	; 0x8016f3 <_mutex>
    375a:	90 91 f4 16 	lds	r25, 0x16F4	; 0x8016f4 <_mutex+0x1>
    375e:	0e 94 a9 06 	call	0xd52	; 0xd52 <xQueueGenericSend>
    3762:	8d 2f       	mov	r24, r29
    3764:	9c 2f       	mov	r25, r28
    3766:	00 c0       	rjmp	.+0      	; 0x3768 <configuration_getLowTemperatureThreshold+0x44>
    3768:	df 91       	pop	r29
    376a:	cf 91       	pop	r28
    376c:	0f 91       	pop	r16
    376e:	08 95       	ret

00003770 <configuration_getHighTemperatureThreshold>:

int16_t configuration_getHighTemperatureThreshold() {
    3770:	0f 93       	push	r16
    3772:	cf 93       	push	r28
    3774:	df 93       	push	r29
	if (xSemaphoreTake(_mutex, pdMS_TO_TICKS(3000)) == pdTRUE) {
    3776:	4a eb       	ldi	r20, 0xBA	; 186
    3778:	50 e0       	ldi	r21, 0x00	; 0
    377a:	60 e0       	ldi	r22, 0x00	; 0
    377c:	70 e0       	ldi	r23, 0x00	; 0
    377e:	80 91 f3 16 	lds	r24, 0x16F3	; 0x8016f3 <_mutex>
    3782:	90 91 f4 16 	lds	r25, 0x16F4	; 0x8016f4 <_mutex+0x1>
    3786:	0e 94 23 08 	call	0x1046	; 0x1046 <xQueueSemaphoreTake>
    378a:	81 30       	cpi	r24, 0x01	; 1
    378c:	99 f4       	brne	.+38     	; 0x37b4 <configuration_getHighTemperatureThreshold+0x44>
		int16_t temp = _temperatureHIGH;
    378e:	d0 91 eb 16 	lds	r29, 0x16EB	; 0x8016eb <_temperatureHIGH>
    3792:	c0 91 ec 16 	lds	r28, 0x16EC	; 0x8016ec <_temperatureHIGH+0x1>
		xSemaphoreGive(_mutex);
    3796:	00 e0       	ldi	r16, 0x00	; 0
    3798:	20 e0       	ldi	r18, 0x00	; 0
    379a:	30 e0       	ldi	r19, 0x00	; 0
    379c:	a9 01       	movw	r20, r18
    379e:	60 e0       	ldi	r22, 0x00	; 0
    37a0:	70 e0       	ldi	r23, 0x00	; 0
    37a2:	80 91 f3 16 	lds	r24, 0x16F3	; 0x8016f3 <_mutex>
    37a6:	90 91 f4 16 	lds	r25, 0x16F4	; 0x8016f4 <_mutex+0x1>
    37aa:	0e 94 a9 06 	call	0xd52	; 0xd52 <xQueueGenericSend>
		return temp;
    37ae:	8d 2f       	mov	r24, r29
    37b0:	9c 2f       	mov	r25, r28
    37b2:	00 c0       	rjmp	.+0      	; 0x37b4 <configuration_getHighTemperatureThreshold+0x44>
	}
}
    37b4:	df 91       	pop	r29
    37b6:	cf 91       	pop	r28
    37b8:	0f 91       	pop	r16
    37ba:	08 95       	ret

000037bc <farmerama_create>:
					  QueueHandle_t temperatureQueue, 
					  QueueHandle_t co2Queue, 
					  QueueHandle_t soundQueue, 
					  QueueHandle_t servoQueue, 
					  EventGroupHandle_t actEventGroup, 
					  EventGroupHandle_t doneEventGroup) {
    37bc:	af 92       	push	r10
    37be:	bf 92       	push	r11
    37c0:	cf 92       	push	r12
    37c2:	df 92       	push	r13
    37c4:	ef 92       	push	r14
    37c6:	ff 92       	push	r15
    37c8:	0f 93       	push	r16
    37ca:	1f 93       	push	r17
	_senderQueue = senderQueue;
	_humidityQueue = humidityQueue;
    37cc:	70 93 03 17 	sts	0x1703, r23	; 0x801703 <_humidityQueue+0x1>
    37d0:	60 93 02 17 	sts	0x1702, r22	; 0x801702 <_humidityQueue>
	_temperatureQueue = temperatureQueue;
    37d4:	50 93 01 17 	sts	0x1701, r21	; 0x801701 <_temperatureQueue+0x1>
    37d8:	40 93 00 17 	sts	0x1700, r20	; 0x801700 <_temperatureQueue>
	_co2Queue = co2Queue;
    37dc:	30 93 ff 16 	sts	0x16FF, r19	; 0x8016ff <_co2Queue+0x1>
    37e0:	20 93 fe 16 	sts	0x16FE, r18	; 0x8016fe <_co2Queue>
	_soundQueue = soundQueue;
    37e4:	10 93 fd 16 	sts	0x16FD, r17	; 0x8016fd <_soundQueue+0x1>
    37e8:	00 93 fc 16 	sts	0x16FC, r16	; 0x8016fc <_soundQueue>
	_servoQueue = servoQueue;
    37ec:	f0 92 fb 16 	sts	0x16FB, r15	; 0x8016fb <_servoQueue+0x1>
    37f0:	e0 92 fa 16 	sts	0x16FA, r14	; 0x8016fa <_servoQueue>
	_actEventGroup = actEventGroup;
    37f4:	d0 92 f9 16 	sts	0x16F9, r13	; 0x8016f9 <_actEventGroup+0x1>
    37f8:	c0 92 f8 16 	sts	0x16F8, r12	; 0x8016f8 <_actEventGroup>
	_doneEventGroup = doneEventGroup;
    37fc:	b0 92 f7 16 	sts	0x16F7, r11	; 0x8016f7 <_doneEventGroup+0x1>
    3800:	a0 92 f6 16 	sts	0x16F6, r10	; 0x8016f6 <_doneEventGroup>
	
	xTaskCreate(_run, 
    3804:	e1 2c       	mov	r14, r1
    3806:	f1 2c       	mov	r15, r1
    3808:	09 e0       	ldi	r16, 0x09	; 9
    380a:	20 e0       	ldi	r18, 0x00	; 0
    380c:	30 e0       	ldi	r19, 0x00	; 0
    380e:	40 ec       	ldi	r20, 0xC0	; 192
    3810:	50 e0       	ldi	r21, 0x00	; 0
    3812:	68 ea       	ldi	r22, 0xA8	; 168
    3814:	72 e0       	ldi	r23, 0x02	; 2
    3816:	83 e1       	ldi	r24, 0x13	; 19
    3818:	9d e1       	ldi	r25, 0x1D	; 29
    381a:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <xTaskCreate>
				configMINIMAL_STACK_SIZE, 
				NULL, 
				TASK_PRIORITY, 
				NULL
	);
}
    381e:	1f 91       	pop	r17
    3820:	0f 91       	pop	r16
    3822:	ff 90       	pop	r15
    3824:	ef 90       	pop	r14
    3826:	df 90       	pop	r13
    3828:	cf 90       	pop	r12
    382a:	bf 90       	pop	r11
    382c:	af 90       	pop	r10
    382e:	08 95       	ret

00003830 <farmerama_initTask>:

void farmerama_initTask(void* params) {
	lastWakeTime = xTaskGetTickCount();
    3830:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <xTaskGetTickCount>
    3834:	60 93 04 17 	sts	0x1704, r22	; 0x801704 <lastWakeTime>
    3838:	70 93 05 17 	sts	0x1705, r23	; 0x801705 <lastWakeTime+0x1>
    383c:	80 93 06 17 	sts	0x1706, r24	; 0x801706 <lastWakeTime+0x2>
    3840:	90 93 07 17 	sts	0x1707, r25	; 0x801707 <lastWakeTime+0x3>
    3844:	08 95       	ret

00003846 <farmerama_runTask>:
}

void farmerama_runTask(void) {	
    3846:	cf 92       	push	r12
    3848:	df 92       	push	r13
    384a:	ef 92       	push	r14
    384c:	ff 92       	push	r15
    384e:	0f 93       	push	r16
    3850:	cf 93       	push	r28
    3852:	df 93       	push	r29
    3854:	cd b7       	in	r28, 0x3d	; 61
    3856:	de b7       	in	r29, 0x3e	; 62
    3858:	28 97       	sbiw	r28, 0x08	; 8
    385a:	0f b6       	in	r0, 0x3f	; 63
    385c:	f8 94       	cli
    385e:	de bf       	out	0x3e, r29	; 62
    3860:	0f be       	out	0x3f, r0	; 63
    3862:	cd bf       	out	0x3d, r28	; 61
	EventBits_t uxBits = xEventGroupSetBits(_actEventGroup, BIT_HUMIDITY_ACT | BIT_TEMPERATURE_ACT);
    3864:	43 e0       	ldi	r20, 0x03	; 3
    3866:	50 e0       	ldi	r21, 0x00	; 0
    3868:	60 e0       	ldi	r22, 0x00	; 0
    386a:	70 e0       	ldi	r23, 0x00	; 0
    386c:	80 91 f8 16 	lds	r24, 0x16F8	; 0x8016f8 <_actEventGroup>
    3870:	90 91 f9 16 	lds	r25, 0x16F9	; 0x8016f9 <_actEventGroup+0x1>
    3874:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <xEventGroupSetBits>
	
	if ((uxBits & (BIT_HUMIDITY_ACT | BIT_TEMPERATURE_ACT)) 
    3878:	dc 01       	movw	r26, r24
    387a:	cb 01       	movw	r24, r22
    387c:	83 70       	andi	r24, 0x03	; 3
    387e:	99 27       	eor	r25, r25
    3880:	aa 27       	eor	r26, r26
    3882:	bb 27       	eor	r27, r27
    3884:	03 97       	sbiw	r24, 0x03	; 3
    3886:	a1 05       	cpc	r26, r1
    3888:	b1 05       	cpc	r27, r1
    388a:	19 f4       	brne	.+6      	; 0x3892 <farmerama_runTask+0x4c>
				== (BIT_HUMIDITY_ACT | BIT_TEMPERATURE_ACT)){
		_errorState = true;
    388c:	81 e0       	ldi	r24, 0x01	; 1
    388e:	80 93 f5 16 	sts	0x16F5, r24	; 0x8016f5 <_errorState>
	}

	EventBits_t waitBits = xEventGroupWaitBits(_doneEventGroup,
    3892:	0f 2e       	mov	r0, r31
    3894:	f8 ea       	ldi	r31, 0xA8	; 168
    3896:	cf 2e       	mov	r12, r31
    3898:	f8 e4       	ldi	r31, 0x48	; 72
    389a:	df 2e       	mov	r13, r31
    389c:	e1 2c       	mov	r14, r1
    389e:	f1 2c       	mov	r15, r1
    38a0:	f0 2d       	mov	r31, r0
    38a2:	01 e0       	ldi	r16, 0x01	; 1
    38a4:	21 e0       	ldi	r18, 0x01	; 1
    38a6:	4f e0       	ldi	r20, 0x0F	; 15
    38a8:	50 e0       	ldi	r21, 0x00	; 0
    38aa:	60 e0       	ldi	r22, 0x00	; 0
    38ac:	70 e0       	ldi	r23, 0x00	; 0
    38ae:	80 91 f6 16 	lds	r24, 0x16F6	; 0x8016f6 <_doneEventGroup>
    38b2:	90 91 f7 16 	lds	r25, 0x16F7	; 0x8016f7 <_doneEventGroup+0x1>
    38b6:	0e 94 3c 01 	call	0x278	; 0x278 <xEventGroupWaitBits>
						pdTRUE, 
						pdTRUE, 
						pdMS_TO_TICKS(TASK_INTERVAL)
	);
	
	if ((waitBits & (BIT_HUMIDITY_DONE | BIT_TEMPERATURE_DONE | BIT_CO2_DONE | BIT_SOUND_DONE))
    38ba:	dc 01       	movw	r26, r24
    38bc:	cb 01       	movw	r24, r22
    38be:	8f 70       	andi	r24, 0x0F	; 15
    38c0:	99 27       	eor	r25, r25
    38c2:	aa 27       	eor	r26, r26
    38c4:	bb 27       	eor	r27, r27
    38c6:	0f 97       	sbiw	r24, 0x0f	; 15
    38c8:	a1 05       	cpc	r26, r1
    38ca:	b1 05       	cpc	r27, r1
    38cc:	19 f0       	breq	.+6      	; 0x38d4 <farmerama_runTask+0x8e>
				!= (BIT_HUMIDITY_DONE | BIT_TEMPERATURE_DONE | BIT_CO2_DONE | BIT_SOUND_DONE)) {
		_errorState = true;
    38ce:	81 e0       	ldi	r24, 0x01	; 1
    38d0:	80 93 f5 16 	sts	0x16F5, r24	; 0x8016f5 <_errorState>
	uint16_t humidity;
	int16_t temperature;
	uint16_t ppm;
	uint16_t sound;

	if (xQueueReceive(_humidityQueue, &humidity, pdMS_TO_TICKS(10000)) != pdTRUE){
    38d4:	2c e6       	ldi	r18, 0x6C	; 108
    38d6:	32 e0       	ldi	r19, 0x02	; 2
    38d8:	40 e0       	ldi	r20, 0x00	; 0
    38da:	50 e0       	ldi	r21, 0x00	; 0
    38dc:	be 01       	movw	r22, r28
    38de:	6f 5f       	subi	r22, 0xFF	; 255
    38e0:	7f 4f       	sbci	r23, 0xFF	; 255
    38e2:	80 91 02 17 	lds	r24, 0x1702	; 0x801702 <_humidityQueue>
    38e6:	90 91 03 17 	lds	r25, 0x1703	; 0x801703 <_humidityQueue+0x1>
    38ea:	0e 94 94 07 	call	0xf28	; 0xf28 <xQueueReceive>
    38ee:	81 30       	cpi	r24, 0x01	; 1
    38f0:	21 f0       	breq	.+8      	; 0x38fa <farmerama_runTask+0xb4>
		humidity = CONFIG_INVALID_HUMIDITY_VALUE;}
    38f2:	80 ed       	ldi	r24, 0xD0	; 208
    38f4:	97 e0       	ldi	r25, 0x07	; 7
    38f6:	9a 83       	std	Y+2, r25	; 0x02
    38f8:	89 83       	std	Y+1, r24	; 0x01
	if (xQueueReceive(_temperatureQueue, &temperature, pdMS_TO_TICKS(10000)) != pdTRUE){
    38fa:	2c e6       	ldi	r18, 0x6C	; 108
    38fc:	32 e0       	ldi	r19, 0x02	; 2
    38fe:	40 e0       	ldi	r20, 0x00	; 0
    3900:	50 e0       	ldi	r21, 0x00	; 0
    3902:	be 01       	movw	r22, r28
    3904:	6d 5f       	subi	r22, 0xFD	; 253
    3906:	7f 4f       	sbci	r23, 0xFF	; 255
    3908:	80 91 00 17 	lds	r24, 0x1700	; 0x801700 <_temperatureQueue>
    390c:	90 91 01 17 	lds	r25, 0x1701	; 0x801701 <_temperatureQueue+0x1>
    3910:	0e 94 94 07 	call	0xf28	; 0xf28 <xQueueReceive>
    3914:	81 30       	cpi	r24, 0x01	; 1
    3916:	21 f0       	breq	.+8      	; 0x3920 <farmerama_runTask+0xda>
		temperature = CONFIG_INVALID_TEMPERATURE_VALUE;}
    3918:	88 e1       	ldi	r24, 0x18	; 24
    391a:	9c ef       	ldi	r25, 0xFC	; 252
    391c:	9c 83       	std	Y+4, r25	; 0x04
    391e:	8b 83       	std	Y+3, r24	; 0x03
	if (xQueueReceive(_co2Queue, &ppm, pdMS_TO_TICKS(10000)) != pdTRUE){
    3920:	2c e6       	ldi	r18, 0x6C	; 108
    3922:	32 e0       	ldi	r19, 0x02	; 2
    3924:	40 e0       	ldi	r20, 0x00	; 0
    3926:	50 e0       	ldi	r21, 0x00	; 0
    3928:	be 01       	movw	r22, r28
    392a:	6b 5f       	subi	r22, 0xFB	; 251
    392c:	7f 4f       	sbci	r23, 0xFF	; 255
    392e:	80 91 fe 16 	lds	r24, 0x16FE	; 0x8016fe <_co2Queue>
    3932:	90 91 ff 16 	lds	r25, 0x16FF	; 0x8016ff <_co2Queue+0x1>
    3936:	0e 94 94 07 	call	0xf28	; 0xf28 <xQueueReceive>
    393a:	81 30       	cpi	r24, 0x01	; 1
    393c:	11 f0       	breq	.+4      	; 0x3942 <farmerama_runTask+0xfc>
		ppm = CONFIG_INVALID_CO2_VALUE;}
    393e:	1e 82       	std	Y+6, r1	; 0x06
    3940:	1d 82       	std	Y+5, r1	; 0x05
	if (xQueueReceive(_soundQueue, &sound, pdMS_TO_TICKS(10000)) != pdTRUE){
    3942:	2c e6       	ldi	r18, 0x6C	; 108
    3944:	32 e0       	ldi	r19, 0x02	; 2
    3946:	40 e0       	ldi	r20, 0x00	; 0
    3948:	50 e0       	ldi	r21, 0x00	; 0
    394a:	be 01       	movw	r22, r28
    394c:	69 5f       	subi	r22, 0xF9	; 249
    394e:	7f 4f       	sbci	r23, 0xFF	; 255
    3950:	80 91 fc 16 	lds	r24, 0x16FC	; 0x8016fc <_soundQueue>
    3954:	90 91 fd 16 	lds	r25, 0x16FD	; 0x8016fd <_soundQueue+0x1>
    3958:	0e 94 94 07 	call	0xf28	; 0xf28 <xQueueReceive>
    395c:	81 30       	cpi	r24, 0x01	; 1
    395e:	11 f0       	breq	.+4      	; 0x3964 <farmerama_runTask+0x11e>
		sound = CONFIG_INVALID_SOUND_VALUE;}
    3960:	18 86       	std	Y+8, r1	; 0x08
    3962:	1f 82       	std	Y+7, r1	; 0x07
		
	uplinkMessageBuilder_setHumidityData(humidity);
    3964:	89 81       	ldd	r24, Y+1	; 0x01
    3966:	9a 81       	ldd	r25, Y+2	; 0x02
    3968:	6d d3       	rcall	.+1754   	; 0x4044 <uplinkMessageBuilder_setHumidityData>
	uplinkMessageBuilder_setTemperatureData(temperature);
    396a:	8b 81       	ldd	r24, Y+3	; 0x03
    396c:	9c 81       	ldd	r25, Y+4	; 0x04
    396e:	73 d3       	rcall	.+1766   	; 0x4056 <uplinkMessageBuilder_setTemperatureData>
	uplinkMessageBuilder_setCO2Data(ppm);
    3970:	8d 81       	ldd	r24, Y+5	; 0x05
    3972:	9e 81       	ldd	r25, Y+6	; 0x06
    3974:	79 d3       	rcall	.+1778   	; 0x4068 <uplinkMessageBuilder_setCO2Data>
	uplinkMessageBuilder_setSoundData(sound);
    3976:	8f 81       	ldd	r24, Y+7	; 0x07
    3978:	98 85       	ldd	r25, Y+8	; 0x08
    397a:	7e d3       	rcall	.+1788   	; 0x4078 <uplinkMessageBuilder_setSoundData>
	
	if (true == _errorState){ uplinkMessageBuilder_setSystemErrorState(); }
    397c:	80 91 f5 16 	lds	r24, 0x16F5	; 0x8016f5 <_errorState>
    3980:	81 11       	cpse	r24, r1
    3982:	82 d3       	rcall	.+1796   	; 0x4088 <uplinkMessageBuilder_setSystemErrorState>
    3984:	80 91 f5 16 	lds	r24, 0x16F5	; 0x8016f5 <_errorState>
	
	if (false == _errorState){
    3988:	81 11       	cpse	r24, r1
    398a:	35 c0       	rjmp	.+106    	; 0x39f6 <farmerama_runTask+0x1b0>
    398c:	00 e0       	ldi	r16, 0x00	; 0
		xQueueSendToBack(_servoQueue, &humidity, pdMS_TO_TICKS(10000));
    398e:	2c e6       	ldi	r18, 0x6C	; 108
    3990:	32 e0       	ldi	r19, 0x02	; 2
    3992:	40 e0       	ldi	r20, 0x00	; 0
    3994:	50 e0       	ldi	r21, 0x00	; 0
    3996:	be 01       	movw	r22, r28
    3998:	6f 5f       	subi	r22, 0xFF	; 255
    399a:	7f 4f       	sbci	r23, 0xFF	; 255
    399c:	80 91 fa 16 	lds	r24, 0x16FA	; 0x8016fa <_servoQueue>
    39a0:	90 91 fb 16 	lds	r25, 0x16FB	; 0x8016fb <_servoQueue+0x1>
    39a4:	0e 94 a9 06 	call	0xd52	; 0xd52 <xQueueGenericSend>
    39a8:	2c e6       	ldi	r18, 0x6C	; 108
		xQueueSendToBack(_servoQueue, &temperature, pdMS_TO_TICKS(10000));
    39aa:	32 e0       	ldi	r19, 0x02	; 2
    39ac:	40 e0       	ldi	r20, 0x00	; 0
    39ae:	50 e0       	ldi	r21, 0x00	; 0
    39b0:	be 01       	movw	r22, r28
    39b2:	6d 5f       	subi	r22, 0xFD	; 253
    39b4:	7f 4f       	sbci	r23, 0xFF	; 255
    39b6:	80 91 fa 16 	lds	r24, 0x16FA	; 0x8016fa <_servoQueue>
    39ba:	90 91 fb 16 	lds	r25, 0x16FB	; 0x8016fb <_servoQueue+0x1>
    39be:	0e 94 a9 06 	call	0xd52	; 0xd52 <xQueueGenericSend>
    39c2:	2c e6       	ldi	r18, 0x6C	; 108
		xQueueSendToBack(_servoQueue, &ppm, pdMS_TO_TICKS(10000));
    39c4:	32 e0       	ldi	r19, 0x02	; 2
    39c6:	40 e0       	ldi	r20, 0x00	; 0
    39c8:	50 e0       	ldi	r21, 0x00	; 0
    39ca:	be 01       	movw	r22, r28
    39cc:	6b 5f       	subi	r22, 0xFB	; 251
    39ce:	7f 4f       	sbci	r23, 0xFF	; 255
    39d0:	80 91 fa 16 	lds	r24, 0x16FA	; 0x8016fa <_servoQueue>
    39d4:	90 91 fb 16 	lds	r25, 0x16FB	; 0x8016fb <_servoQueue+0x1>
    39d8:	0e 94 a9 06 	call	0xd52	; 0xd52 <xQueueGenericSend>
    39dc:	2c e6       	ldi	r18, 0x6C	; 108
		xQueueSendToBack(_servoQueue, &sound, pdMS_TO_TICKS(10000));
    39de:	32 e0       	ldi	r19, 0x02	; 2
    39e0:	40 e0       	ldi	r20, 0x00	; 0
    39e2:	50 e0       	ldi	r21, 0x00	; 0
    39e4:	be 01       	movw	r22, r28
    39e6:	69 5f       	subi	r22, 0xF9	; 249
    39e8:	7f 4f       	sbci	r23, 0xFF	; 255
    39ea:	80 91 fa 16 	lds	r24, 0x16FA	; 0x8016fa <_servoQueue>
    39ee:	90 91 fb 16 	lds	r25, 0x16FB	; 0x8016fb <_servoQueue+0x1>
    39f2:	0e 94 a9 06 	call	0xd52	; 0xd52 <xQueueGenericSend>
    39f6:	10 92 f5 16 	sts	0x16F5, r1	; 0x8016f5 <_errorState>
	}

	_errorState = false;
    39fa:	48 ea       	ldi	r20, 0xA8	; 168
	xTaskDelayUntil(&lastWakeTime, pdMS_TO_TICKS(TASK_INTERVAL));
    39fc:	58 e4       	ldi	r21, 0x48	; 72
    39fe:	60 e0       	ldi	r22, 0x00	; 0
    3a00:	70 e0       	ldi	r23, 0x00	; 0
    3a02:	84 e0       	ldi	r24, 0x04	; 4
    3a04:	97 e1       	ldi	r25, 0x17	; 23
    3a06:	0e 94 62 10 	call	0x20c4	; 0x20c4 <xTaskDelayUntil>
    3a0a:	28 96       	adiw	r28, 0x08	; 8
}
    3a0c:	0f b6       	in	r0, 0x3f	; 63
    3a0e:	f8 94       	cli
    3a10:	de bf       	out	0x3e, r29	; 62
    3a12:	0f be       	out	0x3f, r0	; 63
    3a14:	cd bf       	out	0x3d, r28	; 61
    3a16:	df 91       	pop	r29
    3a18:	cf 91       	pop	r28
    3a1a:	0f 91       	pop	r16
    3a1c:	ff 90       	pop	r15
    3a1e:	ef 90       	pop	r14
    3a20:	df 90       	pop	r13
    3a22:	cf 90       	pop	r12
    3a24:	08 95       	ret

00003a26 <_run>:
    3a26:	04 df       	rcall	.-504    	; 0x3830 <farmerama_initTask>

static void _run(void* params) {
	farmerama_initTask(params);
	
	while (1) {
		farmerama_runTask();
    3a28:	0e df       	rcall	.-484    	; 0x3846 <farmerama_runTask>
    3a2a:	fe cf       	rjmp	.-4      	; 0x3a28 <_run+0x2>

00003a2c <humidityTemperatureTask_create>:
    3a2c:	ef 92       	push	r14
				TASK_PRIORITY, 
				NULL
	);
}

void humidityTemperatureTask_initTask(void* params) {
    3a2e:	ff 92       	push	r15
    3a30:	0f 93       	push	r16
    3a32:	90 93 13 17 	sts	0x1713, r25	; 0x801713 <_humidityQueue+0x1>
    3a36:	80 93 12 17 	sts	0x1712, r24	; 0x801712 <_humidityQueue>
    3a3a:	70 93 11 17 	sts	0x1711, r23	; 0x801711 <_temperatureQueue+0x1>
    3a3e:	60 93 10 17 	sts	0x1710, r22	; 0x801710 <_temperatureQueue>
    3a42:	50 93 0f 17 	sts	0x170F, r21	; 0x80170f <_actEventGroup+0x1>
    3a46:	40 93 0e 17 	sts	0x170E, r20	; 0x80170e <_actEventGroup>
    3a4a:	30 93 0d 17 	sts	0x170D, r19	; 0x80170d <_doneEventGroup+0x1>
    3a4e:	20 93 0c 17 	sts	0x170C, r18	; 0x80170c <_doneEventGroup>
    3a52:	e1 2c       	mov	r14, r1
    3a54:	f1 2c       	mov	r15, r1
    3a56:	08 e0       	ldi	r16, 0x08	; 8
    3a58:	20 e0       	ldi	r18, 0x00	; 0
    3a5a:	30 e0       	ldi	r19, 0x00	; 0
    3a5c:	40 ec       	ldi	r20, 0xC0	; 192
    3a5e:	50 e0       	ldi	r21, 0x00	; 0
    3a60:	66 eb       	ldi	r22, 0xB6	; 182
    3a62:	72 e0       	ldi	r23, 0x02	; 2
    3a64:	8c ea       	ldi	r24, 0xAC	; 172
    3a66:	9d e1       	ldi	r25, 0x1D	; 29
    3a68:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <xTaskCreate>
    3a6c:	0f 91       	pop	r16
    3a6e:	ff 90       	pop	r15
    3a70:	ef 90       	pop	r14
    3a72:	08 95       	ret

00003a74 <humidityTemperatureTask_runTask>:
	
}

void humidityTemperatureTask_runTask() {
    3a74:	cf 92       	push	r12
    3a76:	df 92       	push	r13
    3a78:	ef 92       	push	r14
    3a7a:	ff 92       	push	r15
    3a7c:	0f 93       	push	r16
	xEventGroupWaitBits(_actEventGroup, 
    3a7e:	cc 24       	eor	r12, r12
    3a80:	ca 94       	dec	r12
    3a82:	dc 2c       	mov	r13, r12
    3a84:	76 01       	movw	r14, r12
    3a86:	00 e0       	ldi	r16, 0x00	; 0
    3a88:	21 e0       	ldi	r18, 0x01	; 1
    3a8a:	43 e0       	ldi	r20, 0x03	; 3
    3a8c:	50 e0       	ldi	r21, 0x00	; 0
    3a8e:	60 e0       	ldi	r22, 0x00	; 0
    3a90:	70 e0       	ldi	r23, 0x00	; 0
    3a92:	80 91 0e 17 	lds	r24, 0x170E	; 0x80170e <_actEventGroup>
    3a96:	90 91 0f 17 	lds	r25, 0x170F	; 0x80170f <_actEventGroup+0x1>
    3a9a:	0e 94 3c 01 	call	0x278	; 0x278 <xEventGroupWaitBits>
						pdTRUE,	
						pdFALSE, 
						portMAX_DELAY
	);
	
	if (hih8120_wakeup() == HIH8120_OK) {
    3a9e:	3c d3       	rcall	.+1656   	; 0x4118 <hih8120_wakeup>
    3aa0:	81 11       	cpse	r24, r1
    3aa2:	27 c0       	rjmp	.+78     	; 0x3af2 <humidityTemperatureTask_runTask+0x7e>
		vTaskDelay(pdMS_TO_TICKS(100));
    3aa4:	66 e0       	ldi	r22, 0x06	; 6
    3aa6:	70 e0       	ldi	r23, 0x00	; 0
    3aa8:	80 e0       	ldi	r24, 0x00	; 0
    3aaa:	90 e0       	ldi	r25, 0x00	; 0
    3aac:	0e 94 c7 10 	call	0x218e	; 0x218e <vTaskDelay>
		
		if (hih8120_measure() == HIH8120_OK) {
    3ab0:	48 d3       	rcall	.+1680   	; 0x4142 <hih8120_measure>
    3ab2:	81 11       	cpse	r24, r1
    3ab4:	11 c0       	rjmp	.+34     	; 0x3ad8 <humidityTemperatureTask_runTask+0x64>
			vTaskDelay(pdMS_TO_TICKS(50));
    3ab6:	63 e0       	ldi	r22, 0x03	; 3
    3ab8:	70 e0       	ldi	r23, 0x00	; 0
    3aba:	80 e0       	ldi	r24, 0x00	; 0
    3abc:	90 e0       	ldi	r25, 0x00	; 0
    3abe:	0e 94 c7 10 	call	0x218e	; 0x218e <vTaskDelay>
			_latestHumidity = hih8120_getHumidityPercent_x10();
    3ac2:	65 d3       	rcall	.+1738   	; 0x418e <hih8120_getHumidityPercent_x10>
    3ac4:	90 93 0b 17 	sts	0x170B, r25	; 0x80170b <_latestHumidity+0x1>
    3ac8:	80 93 0a 17 	sts	0x170A, r24	; 0x80170a <_latestHumidity>
			_latestTemperature = hih8120_getTemperature_x10();
    3acc:	86 d3       	rcall	.+1804   	; 0x41da <hih8120_getTemperature_x10>
    3ace:	90 93 09 17 	sts	0x1709, r25	; 0x801709 <_latestTemperature+0x1>
    3ad2:	80 93 08 17 	sts	0x1708, r24	; 0x801708 <_latestTemperature>
    3ad6:	19 c0       	rjmp	.+50     	; 0x3b0a <humidityTemperatureTask_runTask+0x96>
		} else {
			_latestHumidity = CONFIG_INVALID_HUMIDITY_VALUE;
    3ad8:	80 ed       	ldi	r24, 0xD0	; 208
    3ada:	97 e0       	ldi	r25, 0x07	; 7
    3adc:	90 93 0b 17 	sts	0x170B, r25	; 0x80170b <_latestHumidity+0x1>
    3ae0:	80 93 0a 17 	sts	0x170A, r24	; 0x80170a <_latestHumidity>
			_latestTemperature = CONFIG_INVALID_TEMPERATURE_VALUE;
    3ae4:	88 e1       	ldi	r24, 0x18	; 24
    3ae6:	9c ef       	ldi	r25, 0xFC	; 252
    3ae8:	90 93 09 17 	sts	0x1709, r25	; 0x801709 <_latestTemperature+0x1>
    3aec:	80 93 08 17 	sts	0x1708, r24	; 0x801708 <_latestTemperature>
    3af0:	0c c0       	rjmp	.+24     	; 0x3b0a <humidityTemperatureTask_runTask+0x96>
		}
	} else {
		_latestHumidity = CONFIG_INVALID_HUMIDITY_VALUE;
    3af2:	80 ed       	ldi	r24, 0xD0	; 208
    3af4:	97 e0       	ldi	r25, 0x07	; 7
    3af6:	90 93 0b 17 	sts	0x170B, r25	; 0x80170b <_latestHumidity+0x1>
    3afa:	80 93 0a 17 	sts	0x170A, r24	; 0x80170a <_latestHumidity>
		_latestTemperature = CONFIG_INVALID_TEMPERATURE_VALUE;
    3afe:	88 e1       	ldi	r24, 0x18	; 24
    3b00:	9c ef       	ldi	r25, 0xFC	; 252
    3b02:	90 93 09 17 	sts	0x1709, r25	; 0x801709 <_latestTemperature+0x1>
    3b06:	80 93 08 17 	sts	0x1708, r24	; 0x801708 <_latestTemperature>
	}
	
	xQueueSendToBack(_humidityQueue, &_latestHumidity, portMAX_DELAY);
    3b0a:	00 e0       	ldi	r16, 0x00	; 0
    3b0c:	2f ef       	ldi	r18, 0xFF	; 255
    3b0e:	3f ef       	ldi	r19, 0xFF	; 255
    3b10:	a9 01       	movw	r20, r18
    3b12:	6a e0       	ldi	r22, 0x0A	; 10
    3b14:	77 e1       	ldi	r23, 0x17	; 23
    3b16:	80 91 12 17 	lds	r24, 0x1712	; 0x801712 <_humidityQueue>
    3b1a:	90 91 13 17 	lds	r25, 0x1713	; 0x801713 <_humidityQueue+0x1>
    3b1e:	0e 94 a9 06 	call	0xd52	; 0xd52 <xQueueGenericSend>
	xQueueSendToBack(_temperatureQueue, &_latestTemperature, portMAX_DELAY);
    3b22:	2f ef       	ldi	r18, 0xFF	; 255
    3b24:	3f ef       	ldi	r19, 0xFF	; 255
    3b26:	a9 01       	movw	r20, r18
    3b28:	68 e0       	ldi	r22, 0x08	; 8
    3b2a:	77 e1       	ldi	r23, 0x17	; 23
    3b2c:	80 91 10 17 	lds	r24, 0x1710	; 0x801710 <_temperatureQueue>
    3b30:	90 91 11 17 	lds	r25, 0x1711	; 0x801711 <_temperatureQueue+0x1>
    3b34:	0e 94 a9 06 	call	0xd52	; 0xd52 <xQueueGenericSend>
	xEventGroupSetBits(_doneEventGroup, BIT_HUMIDITY_DONE | BIT_TEMPERATURE_DONE);
    3b38:	43 e0       	ldi	r20, 0x03	; 3
    3b3a:	50 e0       	ldi	r21, 0x00	; 0
    3b3c:	60 e0       	ldi	r22, 0x00	; 0
    3b3e:	70 e0       	ldi	r23, 0x00	; 0
    3b40:	80 91 0c 17 	lds	r24, 0x170C	; 0x80170c <_doneEventGroup>
    3b44:	90 91 0d 17 	lds	r25, 0x170D	; 0x80170d <_doneEventGroup+0x1>
    3b48:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <xEventGroupSetBits>
}
    3b4c:	0f 91       	pop	r16
    3b4e:	ff 90       	pop	r15
    3b50:	ef 90       	pop	r14
    3b52:	df 90       	pop	r13
    3b54:	cf 90       	pop	r12
    3b56:	08 95       	ret

00003b58 <_run>:

static void _run(void* params) {
	humidityTemperatureTask_initTask(params);
	
	while (1) {
		humidityTemperatureTask_runTask();
    3b58:	8d df       	rcall	.-230    	; 0x3a74 <humidityTemperatureTask_runTask>
    3b5a:	fe cf       	rjmp	.-4      	; 0x3b58 <_run>

00003b5c <receiverTask_create>:
				TASK_PRIORITY, 
				NULL
	);
}

void receiverTask_initTask(void* params) {
    3b5c:	ef 92       	push	r14
    3b5e:	ff 92       	push	r15
    3b60:	0f 93       	push	r16
    3b62:	90 93 15 17 	sts	0x1715, r25	; 0x801715 <_receiverBuffer+0x1>
    3b66:	80 93 14 17 	sts	0x1714, r24	; 0x801714 <_receiverBuffer>
    3b6a:	e1 2c       	mov	r14, r1
    3b6c:	f1 2c       	mov	r15, r1
    3b6e:	08 e0       	ldi	r16, 0x08	; 8
    3b70:	20 e0       	ldi	r18, 0x00	; 0
    3b72:	30 e0       	ldi	r19, 0x00	; 0
    3b74:	40 ec       	ldi	r20, 0xC0	; 192
    3b76:	50 e0       	ldi	r21, 0x00	; 0
    3b78:	6e ec       	ldi	r22, 0xCE	; 206
    3b7a:	72 e0       	ldi	r23, 0x02	; 2
    3b7c:	8b ee       	ldi	r24, 0xEB	; 235
    3b7e:	9d e1       	ldi	r25, 0x1D	; 29
    3b80:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <xTaskCreate>
    3b84:	0f 91       	pop	r16
    3b86:	ff 90       	pop	r15
    3b88:	ef 90       	pop	r14
    3b8a:	08 95       	ret

00003b8c <receiverTask_runTask>:
	
}

void receiverTask_runTask(void) {
    3b8c:	0f 93       	push	r16
    3b8e:	1f 93       	push	r17
    3b90:	cf 93       	push	r28
    3b92:	df 93       	push	r29
    3b94:	cd b7       	in	r28, 0x3d	; 61
    3b96:	de b7       	in	r29, 0x3e	; 62
    3b98:	66 97       	sbiw	r28, 0x16	; 22
    3b9a:	0f b6       	in	r0, 0x3f	; 63
    3b9c:	f8 94       	cli
    3b9e:	de bf       	out	0x3e, r29	; 62
    3ba0:	0f be       	out	0x3f, r0	; 63
    3ba2:	cd bf       	out	0x3d, r28	; 61
	lora_driver_payload_t payload;
	xMessageBufferReceive(_receiverBuffer, 
    3ba4:	0f ef       	ldi	r16, 0xFF	; 255
    3ba6:	1f ef       	ldi	r17, 0xFF	; 255
    3ba8:	98 01       	movw	r18, r16
    3baa:	46 e1       	ldi	r20, 0x16	; 22
    3bac:	50 e0       	ldi	r21, 0x00	; 0
    3bae:	be 01       	movw	r22, r28
    3bb0:	6f 5f       	subi	r22, 0xFF	; 255
    3bb2:	7f 4f       	sbci	r23, 0xFF	; 255
    3bb4:	80 91 14 17 	lds	r24, 0x1714	; 0x801714 <_receiverBuffer>
    3bb8:	90 91 15 17 	lds	r25, 0x1715	; 0x801715 <_receiverBuffer+0x1>
    3bbc:	0e 94 28 0b 	call	0x1650	; 0x1650 <xStreamBufferReceive>
						  portMAX_DELAY
	);

	if (payload.len == EXPECTED_PAYLOAD_LENGTH) {
	}
}
    3bc0:	66 96       	adiw	r28, 0x16	; 22
    3bc2:	0f b6       	in	r0, 0x3f	; 63
    3bc4:	f8 94       	cli
    3bc6:	de bf       	out	0x3e, r29	; 62
    3bc8:	0f be       	out	0x3f, r0	; 63
    3bca:	cd bf       	out	0x3d, r28	; 61
    3bcc:	df 91       	pop	r29
    3bce:	cf 91       	pop	r28
    3bd0:	1f 91       	pop	r17
    3bd2:	0f 91       	pop	r16
    3bd4:	08 95       	ret

00003bd6 <_run>:

static void _run(void* params) {
	receiverTask_initTask(params);
	
	while (1) {
		receiverTask_runTask();
    3bd6:	da df       	rcall	.-76     	; 0x3b8c <receiverTask_runTask>
    3bd8:	fe cf       	rjmp	.-4      	; 0x3bd6 <_run>

00003bda <_connectToLoRaWAN>:
	while (1) {
		senderTask_runTask();
	}
}

static void _connectToLoRaWAN() {
    3bda:	0f 93       	push	r16
    3bdc:	1f 93       	push	r17
    3bde:	cf 93       	push	r28
    3be0:	df 93       	push	r29
    3be2:	cd b7       	in	r28, 0x3d	; 61
    3be4:	de b7       	in	r29, 0x3e	; 62
    3be6:	64 97       	sbiw	r28, 0x14	; 20
    3be8:	0f b6       	in	r0, 0x3f	; 63
    3bea:	f8 94       	cli
    3bec:	de bf       	out	0x3e, r29	; 62
    3bee:	0f be       	out	0x3f, r0	; 63
    3bf0:	cd bf       	out	0x3d, r28	; 61
	char _out_buf[20];
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    3bf2:	81 e0       	ldi	r24, 0x01	; 1
    3bf4:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    3bf8:	e2 d3       	rcall	.+1988   	; 0x43be <lora_driver_rn2483FactoryReset>
    3bfa:	5e d6       	rcall	.+3260   	; 0x48b8 <lora_driver_mapReturnCodeToText>
    3bfc:	9f 93       	push	r25
    3bfe:	8f 93       	push	r24
    3c00:	8b ed       	ldi	r24, 0xDB	; 219
    3c02:	92 e0       	ldi	r25, 0x02	; 2
    3c04:	9f 93       	push	r25
    3c06:	8f 93       	push	r24
    3c08:	0e 94 ec 2f 	call	0x5fd8	; 0x5fd8 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    3c0c:	56 d5       	rcall	.+2732   	; 0x46ba <lora_driver_configureToEu868>
    3c0e:	54 d6       	rcall	.+3240   	; 0x48b8 <lora_driver_mapReturnCodeToText>
    3c10:	9f 93       	push	r25
    3c12:	8f 93       	push	r24
    3c14:	8e ee       	ldi	r24, 0xEE	; 238
    3c16:	92 e0       	ldi	r25, 0x02	; 2
    3c18:	9f 93       	push	r25
    3c1a:	8f 93       	push	r24
    3c1c:	0e 94 ec 2f 	call	0x5fd8	; 0x5fd8 <printf>
    3c20:	8e 01       	movw	r16, r28
    3c22:	0f 5f       	subi	r16, 0xFF	; 255

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    3c24:	1f 4f       	sbci	r17, 0xFF	; 255
    3c26:	c8 01       	movw	r24, r16
    3c28:	dc d3       	rcall	.+1976   	; 0x43e2 <lora_driver_getRn2483Hweui>
    3c2a:	46 d6       	rcall	.+3212   	; 0x48b8 <lora_driver_mapReturnCodeToText>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    3c2c:	1f 93       	push	r17
    3c2e:	0f 93       	push	r16
    3c30:	9f 93       	push	r25
    3c32:	8f 93       	push	r24
    3c34:	87 e0       	ldi	r24, 0x07	; 7
    3c36:	93 e0       	ldi	r25, 0x03	; 3
    3c38:	9f 93       	push	r25
    3c3a:	8f 93       	push	r24
    3c3c:	0e 94 ec 2f 	call	0x5fd8	; 0x5fd8 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    3c40:	c8 01       	movw	r24, r16
    3c42:	eb d3       	rcall	.+2006   	; 0x441a <lora_driver_setDeviceIdentifier>
    3c44:	39 d6       	rcall	.+3186   	; 0x48b8 <lora_driver_mapReturnCodeToText>
    3c46:	9f 93       	push	r25
    3c48:	8f 93       	push	r24
    3c4a:	1f 93       	push	r17
    3c4c:	0f 93       	push	r16
    3c4e:	8b e1       	ldi	r24, 0x1B	; 27
    3c50:	93 e0       	ldi	r25, 0x03	; 3
    3c52:	9f 93       	push	r25
    3c54:	8f 93       	push	r24
    3c56:	0e 94 ec 2f 	call	0x5fd8	; 0x5fd8 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    3c5a:	a8 01       	movw	r20, r16
    3c5c:	60 e3       	ldi	r22, 0x30	; 48
    3c5e:	73 e0       	ldi	r23, 0x03	; 3
    3c60:	81 e5       	ldi	r24, 0x51	; 81
    3c62:	93 e0       	ldi	r25, 0x03	; 3
    3c64:	08 d6       	rcall	.+3088   	; 0x4876 <lora_driver_setOtaaIdentity>
    3c66:	28 d6       	rcall	.+3152   	; 0x48b8 <lora_driver_mapReturnCodeToText>
    3c68:	9f 93       	push	r25
    3c6a:	8f 93       	push	r24
    3c6c:	1f 93       	push	r17
    3c6e:	0f 93       	push	r16
    3c70:	80 e3       	ldi	r24, 0x30	; 48
    3c72:	93 e0       	ldi	r25, 0x03	; 3
    3c74:	9f 93       	push	r25
    3c76:	8f 93       	push	r24
    3c78:	81 e5       	ldi	r24, 0x51	; 81
    3c7a:	93 e0       	ldi	r25, 0x03	; 3
    3c7c:	9f 93       	push	r25
    3c7e:	8f 93       	push	r24
    3c80:	82 e6       	ldi	r24, 0x62	; 98
    3c82:	93 e0       	ldi	r25, 0x03	; 3
    3c84:	9f 93       	push	r25
    3c86:	8f 93       	push	r24
    3c88:	0e 94 ec 2f 	call	0x5fd8	; 0x5fd8 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    3c8c:	f9 d3       	rcall	.+2034   	; 0x4480 <lora_driver_saveMac>
    3c8e:	14 d6       	rcall	.+3112   	; 0x48b8 <lora_driver_mapReturnCodeToText>
    3c90:	9f 93       	push	r25
    3c92:	8f 93       	push	r24
    3c94:	88 e9       	ldi	r24, 0x98	; 152
    3c96:	93 e0       	ldi	r25, 0x03	; 3
    3c98:	9f 93       	push	r25
    3c9a:	8f 93       	push	r24
    3c9c:	0e 94 ec 2f 	call	0x5fd8	; 0x5fd8 <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    3ca0:	0f b6       	in	r0, 0x3f	; 63
    3ca2:	f8 94       	cli
    3ca4:	de bf       	out	0x3e, r29	; 62
    3ca6:	0f be       	out	0x3f, r0	; 63
    3ca8:	cd bf       	out	0x3d, r28	; 61
    3caa:	81 e0       	ldi	r24, 0x01	; 1
    3cac:	e3 d4       	rcall	.+2502   	; 0x4674 <lora_driver_setAdaptiveDataRate>
    3cae:	04 d6       	rcall	.+3080   	; 0x48b8 <lora_driver_mapReturnCodeToText>
    3cb0:	9f 93       	push	r25
    3cb2:	8f 93       	push	r24
    3cb4:	87 ea       	ldi	r24, 0xA7	; 167
    3cb6:	93 e0       	ldi	r25, 0x03	; 3
    3cb8:	9f 93       	push	r25
    3cba:	8f 93       	push	r24
    3cbc:	0e 94 ec 2f 	call	0x5fd8	; 0x5fd8 <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    3cc0:	84 ef       	ldi	r24, 0xF4	; 244
    3cc2:	91 e0       	ldi	r25, 0x01	; 1
    3cc4:	e2 d4       	rcall	.+2500   	; 0x468a <lora_driver_setReceiveDelay>
    3cc6:	f8 d5       	rcall	.+3056   	; 0x48b8 <lora_driver_mapReturnCodeToText>
    3cc8:	9f 93       	push	r25
    3cca:	8f 93       	push	r24
    3ccc:	81 e0       	ldi	r24, 0x01	; 1
    3cce:	8f 93       	push	r24
    3cd0:	84 ef       	ldi	r24, 0xF4	; 244
    3cd2:	8f 93       	push	r24
    3cd4:	88 ec       	ldi	r24, 0xC8	; 200
    3cd6:	93 e0       	ldi	r25, 0x03	; 3
    3cd8:	9f 93       	push	r25
    3cda:	8f 93       	push	r24
    3cdc:	0e 94 ec 2f 	call	0x5fd8	; 0x5fd8 <printf>
    3ce0:	0f b6       	in	r0, 0x3f	; 63
    3ce2:	f8 94       	cli
    3ce4:	de bf       	out	0x3e, r29	; 62
    3ce6:	0f be       	out	0x3f, r0	; 63
    3ce8:	cd bf       	out	0x3d, r28	; 61

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    3cea:	1a e0       	ldi	r17, 0x0A	; 10
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    3cec:	80 e0       	ldi	r24, 0x00	; 0
    3cee:	ce d3       	rcall	.+1948   	; 0x448c <lora_driver_join>
    3cf0:	08 2f       	mov	r16, r24
    3cf2:	e2 d5       	rcall	.+3012   	; 0x48b8 <lora_driver_mapReturnCodeToText>
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    3cf4:	9f 93       	push	r25
    3cf6:	8f 93       	push	r24
    3cf8:	1f 92       	push	r1
    3cfa:	1f 93       	push	r17
    3cfc:	88 ee       	ldi	r24, 0xE8	; 232
    3cfe:	93 e0       	ldi	r25, 0x03	; 3
    3d00:	9f 93       	push	r25
    3d02:	8f 93       	push	r24
    3d04:	0e 94 ec 2f 	call	0x5fd8	; 0x5fd8 <printf>
    3d08:	0f 90       	pop	r0
    3d0a:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    3d0c:	0f 90       	pop	r0
    3d0e:	0f 90       	pop	r0
    3d10:	0f 90       	pop	r0
    3d12:	0f 90       	pop	r0
    3d14:	08 30       	cpi	r16, 0x08	; 8
    3d16:	59 f0       	breq	.+22     	; 0x3d2e <_connectToLoRaWAN+0x154>
    3d18:	80 e0       	ldi	r24, 0x00	; 0
    3d1a:	0e 94 83 2a 	call	0x5506	; 0x5506 <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    3d1e:	66 e3       	ldi	r22, 0x36	; 54
    3d20:	71 e0       	ldi	r23, 0x01	; 1
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    3d22:	80 e0       	ldi	r24, 0x00	; 0
    3d24:	90 e0       	ldi	r25, 0x00	; 0
    3d26:	0e 94 c7 10 	call	0x218e	; 0x218e <vTaskDelay>
    3d2a:	11 50       	subi	r17, 0x01	; 1
    3d2c:	f9 f6       	brne	.-66     	; 0x3cec <_connectToLoRaWAN+0x112>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    3d2e:	08 30       	cpi	r16, 0x08	; 8
    3d30:	19 f4       	brne	.+6      	; 0x3d38 <_connectToLoRaWAN+0x15e>

	if (rc == LORA_ACCEPTED)
    3d32:	81 e0       	ldi	r24, 0x01	; 1
    3d34:	0e 94 74 2a 	call	0x54e8	; 0x54e8 <status_leds_ledOn>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    3d38:	64 96       	adiw	r28, 0x14	; 20
    3d3a:	0f b6       	in	r0, 0x3f	; 63
	}
}
    3d3c:	f8 94       	cli
    3d3e:	de bf       	out	0x3e, r29	; 62
    3d40:	0f be       	out	0x3f, r0	; 63
    3d42:	cd bf       	out	0x3d, r28	; 61
    3d44:	df 91       	pop	r29
    3d46:	cf 91       	pop	r28
    3d48:	1f 91       	pop	r17
    3d4a:	0f 91       	pop	r16
    3d4c:	08 95       	ret

00003d4e <senderTask_create>:
    3d4e:	ef 92       	push	r14
    3d50:	ff 92       	push	r15
static void _run(void* params);
static void _connectToLoRaWAN();

static QueueHandle_t _senderQueue;

void senderTask_create(QueueHandle_t senderQueue) {
    3d52:	0f 93       	push	r16
	_senderQueue = senderQueue;
    3d54:	90 93 17 17 	sts	0x1717, r25	; 0x801717 <_senderQueue+0x1>
    3d58:	80 93 16 17 	sts	0x1716, r24	; 0x801716 <_senderQueue>
	
	xTaskCreate(_run,
    3d5c:	e1 2c       	mov	r14, r1
    3d5e:	f1 2c       	mov	r15, r1
    3d60:	08 e0       	ldi	r16, 0x08	; 8
    3d62:	20 e0       	ldi	r18, 0x00	; 0
    3d64:	30 e0       	ldi	r19, 0x00	; 0
    3d66:	40 ec       	ldi	r20, 0xC0	; 192
    3d68:	50 e0       	ldi	r21, 0x00	; 0
    3d6a:	68 e0       	ldi	r22, 0x08	; 8
    3d6c:	74 e0       	ldi	r23, 0x04	; 4
    3d6e:	88 e0       	ldi	r24, 0x08	; 8
    3d70:	9f e1       	ldi	r25, 0x1F	; 31
    3d72:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <xTaskCreate>
	configMINIMAL_STACK_SIZE,
	NULL,
	TASK_PRIORITY,
	NULL
	);
}
    3d76:	0f 91       	pop	r16
    3d78:	ff 90       	pop	r15
    3d7a:	ef 90       	pop	r14
    3d7c:	08 95       	ret

00003d7e <senderTask_initTask>:

void senderTask_initTask(void* params) {
	lora_driver_resetRn2483(1);
    3d7e:	81 e0       	ldi	r24, 0x01	; 1
    3d80:	10 d3       	rcall	.+1568   	; 0x43a2 <lora_driver_resetRn2483>
	vTaskDelay(2);
    3d82:	62 e0       	ldi	r22, 0x02	; 2
    3d84:	70 e0       	ldi	r23, 0x00	; 0
    3d86:	80 e0       	ldi	r24, 0x00	; 0
    3d88:	90 e0       	ldi	r25, 0x00	; 0
    3d8a:	0e 94 c7 10 	call	0x218e	; 0x218e <vTaskDelay>
	lora_driver_resetRn2483(0);
    3d8e:	80 e0       	ldi	r24, 0x00	; 0
    3d90:	08 d3       	rcall	.+1552   	; 0x43a2 <lora_driver_resetRn2483>
	vTaskDelay(150);
    3d92:	66 e9       	ldi	r22, 0x96	; 150
    3d94:	70 e0       	ldi	r23, 0x00	; 0
    3d96:	80 e0       	ldi	r24, 0x00	; 0
    3d98:	90 e0       	ldi	r25, 0x00	; 0
    3d9a:	0e 94 c7 10 	call	0x218e	; 0x218e <vTaskDelay>
	lora_driver_flushBuffers();
    3d9e:	fa d2       	rcall	.+1524   	; 0x4394 <lora_driver_flushBuffers>
	
	_connectToLoRaWAN();
    3da0:	1c cf       	rjmp	.-456    	; 0x3bda <_connectToLoRaWAN>
    3da2:	08 95       	ret

00003da4 <senderTask_runTask>:
    3da4:	cf 93       	push	r28
}

void senderTask_runTask() {
    3da6:	df 93       	push	r29
    3da8:	cd b7       	in	r28, 0x3d	; 61
    3daa:	de b7       	in	r29, 0x3e	; 62
    3dac:	66 97       	sbiw	r28, 0x16	; 22
    3dae:	0f b6       	in	r0, 0x3f	; 63
    3db0:	f8 94       	cli
    3db2:	de bf       	out	0x3e, r29	; 62
    3db4:	0f be       	out	0x3f, r0	; 63
    3db6:	cd bf       	out	0x3d, r28	; 61
	lora_driver_payload_t uplinkPayload;
	xQueueReceive(_senderQueue, &uplinkPayload, portMAX_DELAY);
    3db8:	2f ef       	ldi	r18, 0xFF	; 255
    3dba:	3f ef       	ldi	r19, 0xFF	; 255
    3dbc:	a9 01       	movw	r20, r18
    3dbe:	be 01       	movw	r22, r28
    3dc0:	6f 5f       	subi	r22, 0xFF	; 255
    3dc2:	7f 4f       	sbci	r23, 0xFF	; 255
    3dc4:	80 91 16 17 	lds	r24, 0x1716	; 0x801716 <_senderQueue>
    3dc8:	90 91 17 17 	lds	r25, 0x1717	; 0x801717 <_senderQueue+0x1>
    3dcc:	0e 94 94 07 	call	0xf28	; 0xf28 <xQueueReceive>
	lora_driver_returnCode_t status;
	if ((status = lora_driver_sendUploadMessage(false, &uplinkPayload)) == LORA_MAC_TX_OK){
    3dd0:	be 01       	movw	r22, r28
    3dd2:	6f 5f       	subi	r22, 0xFF	; 255
    3dd4:	7f 4f       	sbci	r23, 0xFF	; 255
    3dd6:	80 e0       	ldi	r24, 0x00	; 0
    3dd8:	82 d3       	rcall	.+1796   	; 0x44de <lora_driver_sendUploadMessage>
    3dda:	8d 30       	cpi	r24, 0x0D	; 13
    3ddc:	29 f4       	brne	.+10     	; 0x3de8 <senderTask_runTask+0x44>
		puts("Message sent - no downlink");
    3dde:	83 e1       	ldi	r24, 0x13	; 19
    3de0:	94 e0       	ldi	r25, 0x04	; 4
    3de2:	0e 94 ff 2f 	call	0x5ffe	; 0x5ffe <puts>
    3de6:	0b c0       	rjmp	.+22     	; 0x3dfe <senderTask_runTask+0x5a>
	} else if (status == LORA_MAC_RX){
    3de8:	8e 30       	cpi	r24, 0x0E	; 14
    3dea:	29 f4       	brne	.+10     	; 0x3df6 <senderTask_runTask+0x52>
		puts("Message sent - with downlink");
    3dec:	8e e2       	ldi	r24, 0x2E	; 46
    3dee:	94 e0       	ldi	r25, 0x04	; 4
    3df0:	0e 94 ff 2f 	call	0x5ffe	; 0x5ffe <puts>
    3df4:	04 c0       	rjmp	.+8      	; 0x3dfe <senderTask_runTask+0x5a>
	} else {
		puts("Message not sent");
    3df6:	8b e4       	ldi	r24, 0x4B	; 75
    3df8:	94 e0       	ldi	r25, 0x04	; 4
    3dfa:	0e 94 ff 2f 	call	0x5ffe	; 0x5ffe <puts>
	}
}
    3dfe:	66 96       	adiw	r28, 0x16	; 22
    3e00:	0f b6       	in	r0, 0x3f	; 63
    3e02:	f8 94       	cli
    3e04:	de bf       	out	0x3e, r29	; 62
    3e06:	0f be       	out	0x3f, r0	; 63
    3e08:	cd bf       	out	0x3d, r28	; 61
    3e0a:	df 91       	pop	r29
    3e0c:	cf 91       	pop	r28
    3e0e:	08 95       	ret

00003e10 <_run>:

static void _run(void* params) {
	senderTask_initTask(params);
    3e10:	b6 df       	rcall	.-148    	; 0x3d7e <senderTask_initTask>
	
	while (1) {
		senderTask_runTask();
    3e12:	c8 df       	rcall	.-112    	; 0x3da4 <senderTask_runTask>
    3e14:	fe cf       	rjmp	.-4      	; 0x3e12 <_run+0x2>

00003e16 <servoTask_create>:
    3e16:	ef 92       	push	r14

static void _run(void* params);

static QueueHandle_t _servoQueue;

void servoTask_create(QueueHandle_t servoQueue) {
    3e18:	ff 92       	push	r15
    3e1a:	0f 93       	push	r16
	_servoQueue = servoQueue;
    3e1c:	90 93 19 17 	sts	0x1719, r25	; 0x801719 <_servoQueue+0x1>
    3e20:	80 93 18 17 	sts	0x1718, r24	; 0x801718 <_servoQueue>
	
	xTaskCreate(_run, 
    3e24:	e1 2c       	mov	r14, r1
    3e26:	f1 2c       	mov	r15, r1
    3e28:	08 e0       	ldi	r16, 0x08	; 8
    3e2a:	20 e0       	ldi	r18, 0x00	; 0
    3e2c:	30 e0       	ldi	r19, 0x00	; 0
    3e2e:	40 ec       	ldi	r20, 0xC0	; 192
    3e30:	50 e0       	ldi	r21, 0x00	; 0
    3e32:	6c e5       	ldi	r22, 0x5C	; 92
    3e34:	74 e0       	ldi	r23, 0x04	; 4
    3e36:	82 ec       	ldi	r24, 0xC2	; 194
    3e38:	9f e1       	ldi	r25, 0x1F	; 31
    3e3a:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <xTaskCreate>
				configMINIMAL_STACK_SIZE, 
				NULL, 
				TASK_PRIORITY, 
				NULL
	);
}
    3e3e:	0f 91       	pop	r16
    3e40:	ff 90       	pop	r15
    3e42:	ef 90       	pop	r14
    3e44:	08 95       	ret

00003e46 <servoTask_initTask>:

void servoTask_initTask(void* params) {
	// Default the starting window position to be between open and closed.
	rc_servo_setPosition(SERVO_PORT, SERVO_POS_MIDDLE);
    3e46:	60 e0       	ldi	r22, 0x00	; 0
    3e48:	81 e0       	ldi	r24, 0x01	; 1
    3e4a:	6b c6       	rjmp	.+3286   	; 0x4b22 <rc_servo_setPosition>
    3e4c:	08 95       	ret

00003e4e <servoTask_runTask>:
}

void servoTask_runTask() {
    3e4e:	0f 93       	push	r16
    3e50:	1f 93       	push	r17
    3e52:	cf 93       	push	r28
    3e54:	df 93       	push	r29
    3e56:	cd b7       	in	r28, 0x3d	; 61
    3e58:	de b7       	in	r29, 0x3e	; 62
    3e5a:	28 97       	sbiw	r28, 0x08	; 8
    3e5c:	0f b6       	in	r0, 0x3f	; 63
    3e5e:	f8 94       	cli
    3e60:	de bf       	out	0x3e, r29	; 62
    3e62:	0f be       	out	0x3f, r0	; 63
    3e64:	cd bf       	out	0x3d, r28	; 61
	uint16_t humidity;
	int16_t temperature;
	uint16_t co2;
	uint16_t sound;
	xQueueReceive(_servoQueue, &humidity, portMAX_DELAY);
    3e66:	2f ef       	ldi	r18, 0xFF	; 255
    3e68:	3f ef       	ldi	r19, 0xFF	; 255
    3e6a:	a9 01       	movw	r20, r18
    3e6c:	be 01       	movw	r22, r28
    3e6e:	6f 5f       	subi	r22, 0xFF	; 255
    3e70:	7f 4f       	sbci	r23, 0xFF	; 255
    3e72:	80 91 18 17 	lds	r24, 0x1718	; 0x801718 <_servoQueue>
    3e76:	90 91 19 17 	lds	r25, 0x1719	; 0x801719 <_servoQueue+0x1>
    3e7a:	0e 94 94 07 	call	0xf28	; 0xf28 <xQueueReceive>
	xQueueReceive(_servoQueue, &temperature, portMAX_DELAY);
    3e7e:	2f ef       	ldi	r18, 0xFF	; 255
    3e80:	3f ef       	ldi	r19, 0xFF	; 255
    3e82:	a9 01       	movw	r20, r18
    3e84:	be 01       	movw	r22, r28
    3e86:	6d 5f       	subi	r22, 0xFD	; 253
    3e88:	7f 4f       	sbci	r23, 0xFF	; 255
    3e8a:	80 91 18 17 	lds	r24, 0x1718	; 0x801718 <_servoQueue>
    3e8e:	90 91 19 17 	lds	r25, 0x1719	; 0x801719 <_servoQueue+0x1>
    3e92:	0e 94 94 07 	call	0xf28	; 0xf28 <xQueueReceive>
	xQueueReceive(_servoQueue, &co2, portMAX_DELAY);
    3e96:	2f ef       	ldi	r18, 0xFF	; 255
    3e98:	3f ef       	ldi	r19, 0xFF	; 255
    3e9a:	a9 01       	movw	r20, r18
    3e9c:	be 01       	movw	r22, r28
    3e9e:	6b 5f       	subi	r22, 0xFB	; 251
    3ea0:	7f 4f       	sbci	r23, 0xFF	; 255
    3ea2:	80 91 18 17 	lds	r24, 0x1718	; 0x801718 <_servoQueue>
    3ea6:	90 91 19 17 	lds	r25, 0x1719	; 0x801719 <_servoQueue+0x1>
    3eaa:	0e 94 94 07 	call	0xf28	; 0xf28 <xQueueReceive>
	xQueueReceive(_servoQueue, &sound, portMAX_DELAY);
    3eae:	2f ef       	ldi	r18, 0xFF	; 255
    3eb0:	3f ef       	ldi	r19, 0xFF	; 255
    3eb2:	a9 01       	movw	r20, r18
    3eb4:	be 01       	movw	r22, r28
    3eb6:	69 5f       	subi	r22, 0xF9	; 249
    3eb8:	7f 4f       	sbci	r23, 0xFF	; 255
    3eba:	80 91 18 17 	lds	r24, 0x1718	; 0x801718 <_servoQueue>
    3ebe:	90 91 19 17 	lds	r25, 0x1719	; 0x801719 <_servoQueue+0x1>
    3ec2:	0e 94 94 07 	call	0xf28	; 0xf28 <xQueueReceive>
	
	// Delay introduced such that the thresholds are updated before reading them.
	vTaskDelay(pdMS_TO_TICKS(5000));
    3ec6:	66 e3       	ldi	r22, 0x36	; 54
    3ec8:	71 e0       	ldi	r23, 0x01	; 1
    3eca:	80 e0       	ldi	r24, 0x00	; 0
    3ecc:	90 e0       	ldi	r25, 0x00	; 0
    3ece:	0e 94 c7 10 	call	0x218e	; 0x218e <vTaskDelay>
	
	int16_t lowThreshold = configuration_getLowTemperatureThreshold();
    3ed2:	28 dc       	rcall	.-1968   	; 0x3724 <configuration_getLowTemperatureThreshold>
    3ed4:	8c 01       	movw	r16, r24
	int16_t highThreshold = configuration_getHighTemperatureThreshold();
    3ed6:	4c dc       	rcall	.-1896   	; 0x3770 <configuration_getHighTemperatureThreshold>
    3ed8:	08 31       	cpi	r16, 0x18	; 24
	
	// Only open or close the window if the stored thresholds are not set to
	// the default temperature threshold values - the invalid temperature value.
	if (lowThreshold != CONFIG_INVALID_TEMPERATURE_VALUE && temperature < lowThreshold) {
    3eda:	2c ef       	ldi	r18, 0xFC	; 252
    3edc:	12 07       	cpc	r17, r18
    3ede:	c9 f0       	breq	.+50     	; 0x3f12 <servoTask_runTask+0xc4>
    3ee0:	2b 81       	ldd	r18, Y+3	; 0x03
    3ee2:	3c 81       	ldd	r19, Y+4	; 0x04
    3ee4:	20 17       	cp	r18, r16
    3ee6:	31 07       	cpc	r19, r17
    3ee8:	a4 f4       	brge	.+40     	; 0x3f12 <servoTask_runTask+0xc4>
    3eea:	1f 93       	push	r17
		printf("Measured temperature - %d, low threshold - %d - too cold, the window is closing\n", temperature, lowThreshold);
    3eec:	0f 93       	push	r16
    3eee:	3f 93       	push	r19
    3ef0:	2f 93       	push	r18
    3ef2:	86 e6       	ldi	r24, 0x66	; 102
    3ef4:	94 e0       	ldi	r25, 0x04	; 4
    3ef6:	9f 93       	push	r25
    3ef8:	8f 93       	push	r24
    3efa:	0e 94 ec 2f 	call	0x5fd8	; 0x5fd8 <printf>
    3efe:	6c e9       	ldi	r22, 0x9C	; 156
		rc_servo_setPosition(SERVO_PORT, SERVO_POS_CLOSED);
    3f00:	81 e0       	ldi	r24, 0x01	; 1
    3f02:	0f d6       	rcall	.+3102   	; 0x4b22 <rc_servo_setPosition>
    3f04:	0f 90       	pop	r0
    3f06:	0f 90       	pop	r0
    3f08:	0f 90       	pop	r0
    3f0a:	0f 90       	pop	r0
    3f0c:	0f 90       	pop	r0
    3f0e:	0f 90       	pop	r0
    3f10:	2e c0       	rjmp	.+92     	; 0x3f6e <servoTask_runTask+0x120>
    3f12:	88 31       	cpi	r24, 0x18	; 24
	} else if (highThreshold != CONFIG_INVALID_TEMPERATURE_VALUE && temperature > highThreshold) {
    3f14:	2c ef       	ldi	r18, 0xFC	; 252
    3f16:	92 07       	cpc	r25, r18
    3f18:	c9 f0       	breq	.+50     	; 0x3f4c <servoTask_runTask+0xfe>
    3f1a:	2b 81       	ldd	r18, Y+3	; 0x03
    3f1c:	3c 81       	ldd	r19, Y+4	; 0x04
    3f1e:	82 17       	cp	r24, r18
    3f20:	93 07       	cpc	r25, r19
    3f22:	a4 f4       	brge	.+40     	; 0x3f4c <servoTask_runTask+0xfe>
    3f24:	9f 93       	push	r25
		printf("Measured temperature - %d, high threshold - %d - too worm, the window is opening\n", temperature, highThreshold);
    3f26:	8f 93       	push	r24
    3f28:	3f 93       	push	r19
    3f2a:	2f 93       	push	r18
    3f2c:	87 eb       	ldi	r24, 0xB7	; 183
    3f2e:	94 e0       	ldi	r25, 0x04	; 4
    3f30:	9f 93       	push	r25
    3f32:	8f 93       	push	r24
    3f34:	0e 94 ec 2f 	call	0x5fd8	; 0x5fd8 <printf>
		rc_servo_setPosition(SERVO_PORT, SERVO_POS_OPEN);
    3f38:	64 e6       	ldi	r22, 0x64	; 100
    3f3a:	81 e0       	ldi	r24, 0x01	; 1
    3f3c:	f2 d5       	rcall	.+3044   	; 0x4b22 <rc_servo_setPosition>
    3f3e:	0f 90       	pop	r0
    3f40:	0f 90       	pop	r0
    3f42:	0f 90       	pop	r0
    3f44:	0f 90       	pop	r0
    3f46:	0f 90       	pop	r0
    3f48:	0f 90       	pop	r0
    3f4a:	11 c0       	rjmp	.+34     	; 0x3f6e <servoTask_runTask+0x120>
    3f4c:	8c 81       	ldd	r24, Y+4	; 0x04
	} else {
		printf("Measured temperature - %d - is within the thresholds. The window is in mid position\n", temperature);
    3f4e:	8f 93       	push	r24
    3f50:	8b 81       	ldd	r24, Y+3	; 0x03
    3f52:	8f 93       	push	r24
    3f54:	89 e0       	ldi	r24, 0x09	; 9
    3f56:	95 e0       	ldi	r25, 0x05	; 5
    3f58:	9f 93       	push	r25
    3f5a:	8f 93       	push	r24
    3f5c:	0e 94 ec 2f 	call	0x5fd8	; 0x5fd8 <printf>
		rc_servo_setPosition(SERVO_PORT, SERVO_POS_MIDDLE);
    3f60:	60 e0       	ldi	r22, 0x00	; 0
    3f62:	81 e0       	ldi	r24, 0x01	; 1
    3f64:	de d5       	rcall	.+3004   	; 0x4b22 <rc_servo_setPosition>
    3f66:	0f 90       	pop	r0
    3f68:	0f 90       	pop	r0
    3f6a:	0f 90       	pop	r0
    3f6c:	0f 90       	pop	r0
    3f6e:	28 96       	adiw	r28, 0x08	; 8
	}
}
    3f70:	0f b6       	in	r0, 0x3f	; 63
    3f72:	f8 94       	cli
    3f74:	de bf       	out	0x3e, r29	; 62
    3f76:	0f be       	out	0x3f, r0	; 63
    3f78:	cd bf       	out	0x3d, r28	; 61
    3f7a:	df 91       	pop	r29
    3f7c:	cf 91       	pop	r28
    3f7e:	1f 91       	pop	r17
    3f80:	0f 91       	pop	r16
    3f82:	08 95       	ret

00003f84 <_run>:
    3f84:	60 df       	rcall	.-320    	; 0x3e46 <servoTask_initTask>

static void _run(void* params) {
	servoTask_initTask(params);
	
	while (1) {
		servoTask_runTask();
    3f86:	63 df       	rcall	.-314    	; 0x3e4e <servoTask_runTask>
    3f88:	fe cf       	rjmp	.-4      	; 0x3f86 <_run+0x2>

00003f8a <soundTask_create>:
    3f8a:	ef 92       	push	r14
				TASK_PRIORITY, 
				NULL
	);
}

void soundTask_initTask(void* params) {
    3f8c:	ff 92       	push	r15
    3f8e:	0f 93       	push	r16
    3f90:	90 93 1d 17 	sts	0x171D, r25	; 0x80171d <_soundQueue+0x1>
    3f94:	80 93 1c 17 	sts	0x171C, r24	; 0x80171c <_soundQueue>
    3f98:	50 93 1b 17 	sts	0x171B, r21	; 0x80171b <_doneEventGroup+0x1>
    3f9c:	40 93 1a 17 	sts	0x171A, r20	; 0x80171a <_doneEventGroup>
    3fa0:	e1 2c       	mov	r14, r1
    3fa2:	f1 2c       	mov	r15, r1
    3fa4:	08 e0       	ldi	r16, 0x08	; 8
    3fa6:	20 e0       	ldi	r18, 0x00	; 0
    3fa8:	30 e0       	ldi	r19, 0x00	; 0
    3faa:	40 ec       	ldi	r20, 0xC0	; 192
    3fac:	50 e0       	ldi	r21, 0x00	; 0
    3fae:	6e e5       	ldi	r22, 0x5E	; 94
    3fb0:	75 e0       	ldi	r23, 0x05	; 5
    3fb2:	80 e2       	ldi	r24, 0x20	; 32
    3fb4:	90 e2       	ldi	r25, 0x20	; 32
    3fb6:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <xTaskCreate>
    3fba:	0f 91       	pop	r16
    3fbc:	ff 90       	pop	r15
    3fbe:	ef 90       	pop	r14
    3fc0:	08 95       	ret

00003fc2 <soundTask_runTask>:
	
}

void soundTask_runTask() {
    3fc2:	cf 92       	push	r12
    3fc4:	df 92       	push	r13
    3fc6:	ef 92       	push	r14
    3fc8:	ff 92       	push	r15
    3fca:	0f 93       	push	r16
    3fcc:	cf 93       	push	r28
    3fce:	df 93       	push	r29
    3fd0:	1f 92       	push	r1
    3fd2:	1f 92       	push	r1
    3fd4:	cd b7       	in	r28, 0x3d	; 61
    3fd6:	de b7       	in	r29, 0x3e	; 62
	xEventGroupWaitBits(_doneEventGroup, 
    3fd8:	cc 24       	eor	r12, r12
    3fda:	ca 94       	dec	r12
    3fdc:	dc 2c       	mov	r13, r12
    3fde:	76 01       	movw	r14, r12
    3fe0:	01 e0       	ldi	r16, 0x01	; 1
    3fe2:	20 e0       	ldi	r18, 0x00	; 0
    3fe4:	44 e0       	ldi	r20, 0x04	; 4
    3fe6:	50 e0       	ldi	r21, 0x00	; 0
    3fe8:	60 e0       	ldi	r22, 0x00	; 0
    3fea:	70 e0       	ldi	r23, 0x00	; 0
    3fec:	80 91 1a 17 	lds	r24, 0x171A	; 0x80171a <_doneEventGroup>
    3ff0:	90 91 1b 17 	lds	r25, 0x171B	; 0x80171b <_doneEventGroup+0x1>
    3ff4:	0e 94 3c 01 	call	0x278	; 0x278 <xEventGroupWaitBits>
						pdFALSE, 
						pdTRUE, 
						portMAX_DELAY
	);
	
	uint16_t sound = sen14262_envelope();
    3ff8:	f3 d5       	rcall	.+3046   	; 0x4be0 <sen14262_envelope>
    3ffa:	9a 83       	std	Y+2, r25	; 0x02
    3ffc:	89 83       	std	Y+1, r24	; 0x01
	xQueueSendToBack(_soundQueue, &sound, portMAX_DELAY);
    3ffe:	00 e0       	ldi	r16, 0x00	; 0
    4000:	2f ef       	ldi	r18, 0xFF	; 255
    4002:	3f ef       	ldi	r19, 0xFF	; 255
    4004:	a9 01       	movw	r20, r18
    4006:	be 01       	movw	r22, r28
    4008:	6f 5f       	subi	r22, 0xFF	; 255
    400a:	7f 4f       	sbci	r23, 0xFF	; 255
    400c:	80 91 1c 17 	lds	r24, 0x171C	; 0x80171c <_soundQueue>
    4010:	90 91 1d 17 	lds	r25, 0x171D	; 0x80171d <_soundQueue+0x1>
    4014:	0e 94 a9 06 	call	0xd52	; 0xd52 <xQueueGenericSend>
	xEventGroupSetBits(_doneEventGroup, BIT_SOUND_DONE);
    4018:	48 e0       	ldi	r20, 0x08	; 8
    401a:	50 e0       	ldi	r21, 0x00	; 0
    401c:	60 e0       	ldi	r22, 0x00	; 0
    401e:	70 e0       	ldi	r23, 0x00	; 0
    4020:	80 91 1a 17 	lds	r24, 0x171A	; 0x80171a <_doneEventGroup>
    4024:	90 91 1b 17 	lds	r25, 0x171B	; 0x80171b <_doneEventGroup+0x1>
    4028:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <xEventGroupSetBits>
}
    402c:	0f 90       	pop	r0
    402e:	0f 90       	pop	r0
    4030:	df 91       	pop	r29
    4032:	cf 91       	pop	r28
    4034:	0f 91       	pop	r16
    4036:	ff 90       	pop	r15
    4038:	ef 90       	pop	r14
    403a:	df 90       	pop	r13
    403c:	cf 90       	pop	r12
    403e:	08 95       	ret

00004040 <_run>:

static void _run(void* params) {
	soundTask_initTask(params);
	
	while (1) {
		soundTask_runTask();
    4040:	c0 df       	rcall	.-128    	; 0x3fc2 <soundTask_runTask>
    4042:	fe cf       	rjmp	.-4      	; 0x4040 <_run>

00004044 <uplinkMessageBuilder_setHumidityData>:
static int8_t _validationBits;

void uplinkMessageBuilder_setHumidityData(uint16_t data) {
	_humidity = data;
	
	if (data == CONFIG_INVALID_HUMIDITY_VALUE) {
    4044:	80 3d       	cpi	r24, 0xD0	; 208
    4046:	97 40       	sbci	r25, 0x07	; 7
    4048:	29 f0       	breq	.+10     	; 0x4054 <uplinkMessageBuilder_setHumidityData+0x10>
		_validationBits |= 0 << 3;
	} else {
		_validationBits |= 1 << 3;
    404a:	80 91 1e 17 	lds	r24, 0x171E	; 0x80171e <_validationBits>
    404e:	88 60       	ori	r24, 0x08	; 8
    4050:	80 93 1e 17 	sts	0x171E, r24	; 0x80171e <_validationBits>
    4054:	08 95       	ret

00004056 <uplinkMessageBuilder_setTemperatureData>:
}

void uplinkMessageBuilder_setTemperatureData(int16_t data) {
	_temperature = data;
	
	if (data == CONFIG_INVALID_TEMPERATURE_VALUE) {
    4056:	88 31       	cpi	r24, 0x18	; 24
    4058:	9c 4f       	sbci	r25, 0xFC	; 252
    405a:	29 f0       	breq	.+10     	; 0x4066 <uplinkMessageBuilder_setTemperatureData+0x10>
		_validationBits |= 0 << 2;
	} else {
		_validationBits |= 1 << 2;
    405c:	80 91 1e 17 	lds	r24, 0x171E	; 0x80171e <_validationBits>
    4060:	84 60       	ori	r24, 0x04	; 4
    4062:	80 93 1e 17 	sts	0x171E, r24	; 0x80171e <_validationBits>
    4066:	08 95       	ret

00004068 <uplinkMessageBuilder_setCO2Data>:
}

void uplinkMessageBuilder_setCO2Data(uint16_t data) {
	_ppm = data;
	
	if (data == CONFIG_INVALID_CO2_VALUE) {
    4068:	89 2b       	or	r24, r25
    406a:	29 f0       	breq	.+10     	; 0x4076 <uplinkMessageBuilder_setCO2Data+0xe>
		_validationBits |= 0 << 1;
	} else {
		_validationBits |= 1 << 1;
    406c:	80 91 1e 17 	lds	r24, 0x171E	; 0x80171e <_validationBits>
    4070:	82 60       	ori	r24, 0x02	; 2
    4072:	80 93 1e 17 	sts	0x171E, r24	; 0x80171e <_validationBits>
    4076:	08 95       	ret

00004078 <uplinkMessageBuilder_setSoundData>:
}

void uplinkMessageBuilder_setSoundData(uint16_t data) {
	_sound = data;
	
	if (data == CONFIG_INVALID_SOUND_VALUE) {
    4078:	89 2b       	or	r24, r25
    407a:	29 f0       	breq	.+10     	; 0x4086 <uplinkMessageBuilder_setSoundData+0xe>
		_validationBits |= 0 << 0;
	} else {
		_validationBits |= 1 << 0;
    407c:	80 91 1e 17 	lds	r24, 0x171E	; 0x80171e <_validationBits>
    4080:	81 60       	ori	r24, 0x01	; 1
    4082:	80 93 1e 17 	sts	0x171E, r24	; 0x80171e <_validationBits>
    4086:	08 95       	ret

00004088 <uplinkMessageBuilder_setSystemErrorState>:
	}
}

void uplinkMessageBuilder_setSystemErrorState(){
	_validationBits = 0;
    4088:	10 92 1e 17 	sts	0x171E, r1	; 0x80171e <_validationBits>
    408c:	08 95       	ret

0000408e <_hihTwiCallback>:
    408e:	65 30       	cpi	r22, 0x05	; 5
    4090:	f1 f4       	brne	.+60     	; 0x40ce <_hihTwiCallback+0x40>
    4092:	fa 01       	movw	r30, r20
    4094:	80 81       	ld	r24, Z
    4096:	8f 73       	andi	r24, 0x3F	; 63
    4098:	90 e0       	ldi	r25, 0x00	; 0
    409a:	98 2f       	mov	r25, r24
    409c:	88 27       	eor	r24, r24
    409e:	21 81       	ldd	r18, Z+1	; 0x01
    40a0:	82 2b       	or	r24, r18
    40a2:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    40a6:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    40aa:	82 81       	ldd	r24, Z+2	; 0x02
    40ac:	f0 e4       	ldi	r31, 0x40	; 64
    40ae:	8f 9f       	mul	r24, r31
    40b0:	c0 01       	movw	r24, r0
    40b2:	11 24       	eor	r1, r1
    40b4:	fa 01       	movw	r30, r20
    40b6:	23 81       	ldd	r18, Z+3	; 0x03
    40b8:	26 95       	lsr	r18
    40ba:	26 95       	lsr	r18
    40bc:	82 2b       	or	r24, r18
    40be:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    40c2:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    40c6:	81 e0       	ldi	r24, 0x01	; 1
    40c8:	80 93 1f 17 	sts	0x171F, r24	; 0x80171f <_measuringIsReady>
    40cc:	08 95       	ret
    40ce:	64 30       	cpi	r22, 0x04	; 4
    40d0:	51 f0       	breq	.+20     	; 0x40e6 <_hihTwiCallback+0x58>
    40d2:	80 e0       	ldi	r24, 0x00	; 0
    40d4:	90 e4       	ldi	r25, 0x40	; 64
    40d6:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    40da:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    40de:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    40e2:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    40e6:	08 95       	ret

000040e8 <hih8120_initialise>:
    40e8:	0f 93       	push	r16
    40ea:	1f 93       	push	r17
    40ec:	07 e4       	ldi	r16, 0x47	; 71
    40ee:	10 e2       	ldi	r17, 0x20	; 32
    40f0:	20 e0       	ldi	r18, 0x00	; 0
    40f2:	34 e2       	ldi	r19, 0x24	; 36
    40f4:	44 ef       	ldi	r20, 0xF4	; 244
    40f6:	50 e0       	ldi	r21, 0x00	; 0
    40f8:	60 e0       	ldi	r22, 0x00	; 0
    40fa:	87 e2       	ldi	r24, 0x27	; 39
    40fc:	0e 94 a6 2a 	call	0x554c	; 0x554c <twiCreate>
    4100:	90 93 21 17 	sts	0x1721, r25	; 0x801721 <_hih8120Handler+0x1>
    4104:	80 93 20 17 	sts	0x1720, r24	; 0x801720 <_hih8120Handler>
    4108:	21 e0       	ldi	r18, 0x01	; 1
    410a:	89 2b       	or	r24, r25
    410c:	09 f0       	breq	.+2      	; 0x4110 <hih8120_initialise+0x28>
    410e:	20 e0       	ldi	r18, 0x00	; 0
    4110:	82 2f       	mov	r24, r18
    4112:	1f 91       	pop	r17
    4114:	0f 91       	pop	r16
    4116:	08 95       	ret

00004118 <hih8120_wakeup>:
    4118:	80 91 20 17 	lds	r24, 0x1720	; 0x801720 <_hih8120Handler>
    411c:	90 91 21 17 	lds	r25, 0x1721	; 0x801721 <_hih8120Handler+0x1>
    4120:	00 97       	sbiw	r24, 0x00	; 0
    4122:	59 f0       	breq	.+22     	; 0x413a <hih8120_wakeup+0x22>
    4124:	40 e0       	ldi	r20, 0x00	; 0
    4126:	60 e0       	ldi	r22, 0x00	; 0
    4128:	70 e0       	ldi	r23, 0x00	; 0
    412a:	0e 94 f7 2a 	call	0x55ee	; 0x55ee <twiTransmit>
    412e:	84 30       	cpi	r24, 0x04	; 4
    4130:	31 f4       	brne	.+12     	; 0x413e <hih8120_wakeup+0x26>
    4132:	10 92 1f 17 	sts	0x171F, r1	; 0x80171f <_measuringIsReady>
    4136:	80 e0       	ldi	r24, 0x00	; 0
    4138:	08 95       	ret
    413a:	82 e0       	ldi	r24, 0x02	; 2
    413c:	08 95       	ret
    413e:	83 e0       	ldi	r24, 0x03	; 3
    4140:	08 95       	ret

00004142 <hih8120_measure>:
    4142:	80 91 20 17 	lds	r24, 0x1720	; 0x801720 <_hih8120Handler>
    4146:	90 91 21 17 	lds	r25, 0x1721	; 0x801721 <_hih8120Handler+0x1>
    414a:	00 97       	sbiw	r24, 0x00	; 0
    414c:	39 f0       	breq	.+14     	; 0x415c <hih8120_measure+0x1a>
    414e:	64 e0       	ldi	r22, 0x04	; 4
    4150:	0e 94 43 2b 	call	0x5686	; 0x5686 <twiReceive>
    4154:	85 30       	cpi	r24, 0x05	; 5
    4156:	21 f0       	breq	.+8      	; 0x4160 <hih8120_measure+0x1e>
    4158:	83 e0       	ldi	r24, 0x03	; 3
    415a:	08 95       	ret
    415c:	82 e0       	ldi	r24, 0x02	; 2
    415e:	08 95       	ret
    4160:	80 e0       	ldi	r24, 0x00	; 0
    4162:	08 95       	ret

00004164 <hih8120_getHumidity>:
    4164:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    4168:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    416c:	80 e0       	ldi	r24, 0x00	; 0
    416e:	90 e0       	ldi	r25, 0x00	; 0
    4170:	0e 94 4d 2d 	call	0x5a9a	; 0x5a9a <__floatunsisf>
    4174:	20 e0       	ldi	r18, 0x00	; 0
    4176:	30 e0       	ldi	r19, 0x00	; 0
    4178:	48 ec       	ldi	r20, 0xC8	; 200
    417a:	52 e4       	ldi	r21, 0x42	; 66
    417c:	0e 94 db 2d 	call	0x5bb6	; 0x5bb6 <__mulsf3>
    4180:	20 e0       	ldi	r18, 0x00	; 0
    4182:	38 ef       	ldi	r19, 0xF8	; 248
    4184:	4f e7       	ldi	r20, 0x7F	; 127
    4186:	56 e4       	ldi	r21, 0x46	; 70
    4188:	0c 94 b4 2c 	jmp	0x5968	; 0x5968 <__divsf3>
    418c:	08 95       	ret

0000418e <hih8120_getHumidityPercent_x10>:
    418e:	ea df       	rcall	.-44     	; 0x4164 <hih8120_getHumidity>
    4190:	20 e0       	ldi	r18, 0x00	; 0
    4192:	30 e0       	ldi	r19, 0x00	; 0
    4194:	40 e2       	ldi	r20, 0x20	; 32
    4196:	51 e4       	ldi	r21, 0x41	; 65
    4198:	0e 94 db 2d 	call	0x5bb6	; 0x5bb6 <__mulsf3>
    419c:	0e 94 21 2d 	call	0x5a42	; 0x5a42 <__fixunssfsi>
    41a0:	cb 01       	movw	r24, r22
    41a2:	08 95       	ret

000041a4 <hih8120_getTemperature>:
    41a4:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    41a8:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    41ac:	80 e0       	ldi	r24, 0x00	; 0
    41ae:	90 e0       	ldi	r25, 0x00	; 0
    41b0:	0e 94 4d 2d 	call	0x5a9a	; 0x5a9a <__floatunsisf>
    41b4:	20 e0       	ldi	r18, 0x00	; 0
    41b6:	30 e0       	ldi	r19, 0x00	; 0
    41b8:	45 e2       	ldi	r20, 0x25	; 37
    41ba:	53 e4       	ldi	r21, 0x43	; 67
    41bc:	0e 94 db 2d 	call	0x5bb6	; 0x5bb6 <__mulsf3>
    41c0:	20 e0       	ldi	r18, 0x00	; 0
    41c2:	38 ef       	ldi	r19, 0xF8	; 248
    41c4:	4f e7       	ldi	r20, 0x7F	; 127
    41c6:	56 e4       	ldi	r21, 0x46	; 70
    41c8:	0e 94 b4 2c 	call	0x5968	; 0x5968 <__divsf3>
    41cc:	20 e0       	ldi	r18, 0x00	; 0
    41ce:	30 e0       	ldi	r19, 0x00	; 0
    41d0:	40 e2       	ldi	r20, 0x20	; 32
    41d2:	52 e4       	ldi	r21, 0x42	; 66
    41d4:	0c 94 4f 2c 	jmp	0x589e	; 0x589e <__subsf3>
    41d8:	08 95       	ret

000041da <hih8120_getTemperature_x10>:
    41da:	e4 df       	rcall	.-56     	; 0x41a4 <hih8120_getTemperature>
    41dc:	20 e0       	ldi	r18, 0x00	; 0
    41de:	30 e0       	ldi	r19, 0x00	; 0
    41e0:	40 e2       	ldi	r20, 0x20	; 32
    41e2:	51 e4       	ldi	r21, 0x41	; 65
    41e4:	0e 94 db 2d 	call	0x5bb6	; 0x5bb6 <__mulsf3>
    41e8:	0e 94 1c 2d 	call	0x5a38	; 0x5a38 <__fixsfsi>
    41ec:	cb 01       	movw	r24, r22
    41ee:	08 95       	ret

000041f0 <_uploadMessage>:
    41f0:	0f 93       	push	r16
    41f2:	1f 93       	push	r17
    41f4:	cf 93       	push	r28
    41f6:	df 93       	push	r29
    41f8:	8c 01       	movw	r16, r24
    41fa:	eb 01       	movw	r28, r22
    41fc:	80 91 5b 17 	lds	r24, 0x175B	; 0x80175b <_serialReplyBufferHandle>
    4200:	90 91 5c 17 	lds	r25, 0x175C	; 0x80175c <_serialReplyBufferHandle+0x1>
    4204:	0e 94 33 0a 	call	0x1466	; 0x1466 <xStreamBufferReset>
    4208:	b8 01       	movw	r22, r16
    420a:	82 e2       	ldi	r24, 0x22	; 34
    420c:	97 e1       	ldi	r25, 0x17	; 23
    420e:	0e 94 cd 2f 	call	0x5f9a	; 0x5f9a <strcpy>
    4212:	20 97       	sbiw	r28, 0x00	; 0
    4214:	79 f0       	breq	.+30     	; 0x4234 <_uploadMessage+0x44>
    4216:	e2 e2       	ldi	r30, 0x22	; 34
    4218:	f7 e1       	ldi	r31, 0x17	; 23
    421a:	01 90       	ld	r0, Z+
    421c:	00 20       	and	r0, r0
    421e:	e9 f7       	brne	.-6      	; 0x421a <_uploadMessage+0x2a>
    4220:	31 97       	sbiw	r30, 0x01	; 1
    4222:	80 e2       	ldi	r24, 0x20	; 32
    4224:	90 e0       	ldi	r25, 0x00	; 0
    4226:	91 83       	std	Z+1, r25	; 0x01
    4228:	80 83       	st	Z, r24
    422a:	be 01       	movw	r22, r28
    422c:	82 e2       	ldi	r24, 0x22	; 34
    422e:	97 e1       	ldi	r25, 0x17	; 23
    4230:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <strcat>
    4234:	e2 e2       	ldi	r30, 0x22	; 34
    4236:	f7 e1       	ldi	r31, 0x17	; 23
    4238:	df 01       	movw	r26, r30
    423a:	0d 90       	ld	r0, X+
    423c:	00 20       	and	r0, r0
    423e:	e9 f7       	brne	.-6      	; 0x423a <_uploadMessage+0x4a>
    4240:	11 97       	sbiw	r26, 0x01	; 1
    4242:	8d e0       	ldi	r24, 0x0D	; 13
    4244:	9a e0       	ldi	r25, 0x0A	; 10
    4246:	11 96       	adiw	r26, 0x01	; 1
    4248:	9c 93       	st	X, r25
    424a:	8e 93       	st	-X, r24
    424c:	12 96       	adiw	r26, 0x02	; 2
    424e:	1c 92       	st	X, r1
    4250:	01 90       	ld	r0, Z+
    4252:	00 20       	and	r0, r0
    4254:	e9 f7       	brne	.-6      	; 0x4250 <_uploadMessage+0x60>
    4256:	31 97       	sbiw	r30, 0x01	; 1
    4258:	e2 52       	subi	r30, 0x22	; 34
    425a:	f7 41       	sbci	r31, 0x17	; 23
    425c:	ae 2f       	mov	r26, r30
    425e:	82 e2       	ldi	r24, 0x22	; 34
    4260:	97 e1       	ldi	r25, 0x17	; 23
    4262:	ac 01       	movw	r20, r24
    4264:	6a 2f       	mov	r22, r26
    4266:	80 91 5d 17 	lds	r24, 0x175D	; 0x80175d <_rn2483_serial>
    426a:	90 91 5e 17 	lds	r25, 0x175E	; 0x80175e <_rn2483_serial+0x1>
    426e:	b9 d5       	rcall	.+2930   	; 0x4de2 <serial_sendBytes>
    4270:	81 11       	cpse	r24, r1
    4272:	11 c0       	rjmp	.+34     	; 0x4296 <_uploadMessage+0xa6>
    4274:	08 e2       	ldi	r16, 0x28	; 40
    4276:	15 e0       	ldi	r17, 0x05	; 5
    4278:	20 e0       	ldi	r18, 0x00	; 0
    427a:	30 e0       	ldi	r19, 0x00	; 0
    427c:	4d e2       	ldi	r20, 0x2D	; 45
    427e:	50 e0       	ldi	r21, 0x00	; 0
    4280:	67 eb       	ldi	r22, 0xB7	; 183
    4282:	77 e1       	ldi	r23, 0x17	; 23
    4284:	80 91 5b 17 	lds	r24, 0x175B	; 0x80175b <_serialReplyBufferHandle>
    4288:	90 91 5c 17 	lds	r25, 0x175C	; 0x80175c <_serialReplyBufferHandle+0x1>
    428c:	0e 94 28 0b 	call	0x1650	; 0x1650 <xStreamBufferReceive>
    4290:	87 eb       	ldi	r24, 0xB7	; 183
    4292:	97 e1       	ldi	r25, 0x17	; 23
    4294:	02 c0       	rjmp	.+4      	; 0x429a <_uploadMessage+0xaa>
    4296:	80 e0       	ldi	r24, 0x00	; 0
    4298:	90 e0       	ldi	r25, 0x00	; 0
    429a:	df 91       	pop	r29
    429c:	cf 91       	pop	r28
    429e:	1f 91       	pop	r17
    42a0:	0f 91       	pop	r16
    42a2:	08 95       	ret

000042a4 <_reply2ReturnCode>:
    42a4:	2f 92       	push	r2
    42a6:	3f 92       	push	r3
    42a8:	4f 92       	push	r4
    42aa:	5f 92       	push	r5
    42ac:	6f 92       	push	r6
    42ae:	7f 92       	push	r7
    42b0:	8f 92       	push	r8
    42b2:	9f 92       	push	r9
    42b4:	af 92       	push	r10
    42b6:	bf 92       	push	r11
    42b8:	cf 92       	push	r12
    42ba:	df 92       	push	r13
    42bc:	ef 92       	push	r14
    42be:	ff 92       	push	r15
    42c0:	0f 93       	push	r16
    42c2:	1f 93       	push	r17
    42c4:	cf 93       	push	r28
    42c6:	df 93       	push	r29
    42c8:	5c 01       	movw	r10, r24
    42ca:	fc 01       	movw	r30, r24
    42cc:	01 90       	ld	r0, Z+
    42ce:	00 20       	and	r0, r0
    42d0:	e9 f7       	brne	.-6      	; 0x42cc <_reply2ReturnCode+0x28>
    42d2:	31 97       	sbiw	r30, 0x01	; 1
    42d4:	6f 01       	movw	r12, r30
    42d6:	c8 1a       	sub	r12, r24
    42d8:	d9 0a       	sbc	r13, r25
    42da:	5c 2c       	mov	r5, r12
    42dc:	0f 2e       	mov	r0, r31
    42de:	f1 e0       	ldi	r31, 0x01	; 1
    42e0:	8f 2e       	mov	r8, r31
    42e2:	f8 e0       	ldi	r31, 0x08	; 8
    42e4:	9f 2e       	mov	r9, r31
    42e6:	f0 2d       	mov	r31, r0
    42e8:	e1 2c       	mov	r14, r1
    42ea:	f1 2c       	mov	r15, r1
    42ec:	4c 2c       	mov	r4, r12
    42ee:	37 01       	movw	r6, r14
    42f0:	f4 01       	movw	r30, r8
    42f2:	01 81       	ldd	r16, Z+1	; 0x01
    42f4:	12 81       	ldd	r17, Z+2	; 0x02
    42f6:	e8 01       	movw	r28, r16
    42f8:	09 90       	ld	r0, Y+
    42fa:	00 20       	and	r0, r0
    42fc:	e9 f7       	brne	.-6      	; 0x42f8 <_reply2ReturnCode+0x54>
    42fe:	21 97       	sbiw	r28, 0x01	; 1
    4300:	c0 1b       	sub	r28, r16
    4302:	d1 0b       	sbc	r29, r17
    4304:	3c 2e       	mov	r3, r28
    4306:	f9 e0       	ldi	r31, 0x09	; 9
    4308:	cf 16       	cp	r12, r31
    430a:	d1 04       	cpc	r13, r1
    430c:	58 f0       	brcs	.+22     	; 0x4324 <_reply2ReturnCode+0x80>
    430e:	f4 01       	movw	r30, r8
    4310:	20 80       	ld	r2, Z
    4312:	fe e0       	ldi	r31, 0x0E	; 14
    4314:	2f 12       	cpse	r2, r31
    4316:	06 c0       	rjmp	.+12     	; 0x4324 <_reply2ReturnCode+0x80>
    4318:	b8 01       	movw	r22, r16
    431a:	c5 01       	movw	r24, r10
    431c:	0e 94 9d 2f 	call	0x5f3a	; 0x5f3a <strcasestr>
    4320:	89 2b       	or	r24, r25
    4322:	09 f5       	brne	.+66     	; 0x4366 <_reply2ReturnCode+0xc2>
    4324:	44 2d       	mov	r20, r4
    4326:	35 14       	cp	r3, r5
    4328:	08 f4       	brcc	.+2      	; 0x432c <_reply2ReturnCode+0x88>
    432a:	4c 2f       	mov	r20, r28
    432c:	50 e0       	ldi	r21, 0x00	; 0
    432e:	b8 01       	movw	r22, r16
    4330:	c5 01       	movw	r24, r10
    4332:	0e 94 d4 2f 	call	0x5fa8	; 0x5fa8 <strncasecmp>
    4336:	89 2b       	or	r24, r25
    4338:	49 f4       	brne	.+18     	; 0x434c <_reply2ReturnCode+0xa8>
    433a:	f3 01       	movw	r30, r6
    433c:	ee 0f       	add	r30, r30
    433e:	ff 1f       	adc	r31, r31
    4340:	e6 0d       	add	r30, r6
    4342:	f7 1d       	adc	r31, r7
    4344:	ef 5f       	subi	r30, 0xFF	; 255
    4346:	f7 4f       	sbci	r31, 0xF7	; 247
    4348:	20 80       	ld	r2, Z
    434a:	0d c0       	rjmp	.+26     	; 0x4366 <_reply2ReturnCode+0xc2>
    434c:	8f ef       	ldi	r24, 0xFF	; 255
    434e:	e8 1a       	sub	r14, r24
    4350:	f8 0a       	sbc	r15, r24
    4352:	e3 e0       	ldi	r30, 0x03	; 3
    4354:	8e 0e       	add	r8, r30
    4356:	91 1c       	adc	r9, r1
    4358:	f1 e1       	ldi	r31, 0x11	; 17
    435a:	ef 16       	cp	r14, r31
    435c:	f1 04       	cpc	r15, r1
    435e:	39 f6       	brne	.-114    	; 0x42ee <_reply2ReturnCode+0x4a>
    4360:	68 94       	set
    4362:	22 24       	eor	r2, r2
    4364:	24 f8       	bld	r2, 4
    4366:	82 2d       	mov	r24, r2
    4368:	df 91       	pop	r29
    436a:	cf 91       	pop	r28
    436c:	1f 91       	pop	r17
    436e:	0f 91       	pop	r16
    4370:	ff 90       	pop	r15
    4372:	ef 90       	pop	r14
    4374:	df 90       	pop	r13
    4376:	cf 90       	pop	r12
    4378:	bf 90       	pop	r11
    437a:	af 90       	pop	r10
    437c:	9f 90       	pop	r9
    437e:	8f 90       	pop	r8
    4380:	7f 90       	pop	r7
    4382:	6f 90       	pop	r6
    4384:	5f 90       	pop	r5
    4386:	4f 90       	pop	r4
    4388:	3f 90       	pop	r3
    438a:	2f 90       	pop	r2
    438c:	08 95       	ret

0000438e <_uploadMessageRc>:
    438e:	30 df       	rcall	.-416    	; 0x41f0 <_uploadMessage>
    4390:	89 cf       	rjmp	.-238    	; 0x42a4 <_reply2ReturnCode>
    4392:	08 95       	ret

00004394 <lora_driver_flushBuffers>:
    4394:	80 91 5b 17 	lds	r24, 0x175B	; 0x80175b <_serialReplyBufferHandle>
    4398:	90 91 5c 17 	lds	r25, 0x175C	; 0x80175c <_serialReplyBufferHandle+0x1>
    439c:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <xStreamBufferReset>
    43a0:	08 95       	ret

000043a2 <lora_driver_resetRn2483>:
    43a2:	88 23       	and	r24, r24
    43a4:	31 f0       	breq	.+12     	; 0x43b2 <lora_driver_resetRn2483+0x10>
    43a6:	e8 e0       	ldi	r30, 0x08	; 8
    43a8:	f1 e0       	ldi	r31, 0x01	; 1
    43aa:	80 81       	ld	r24, Z
    43ac:	8f 7e       	andi	r24, 0xEF	; 239
    43ae:	80 83       	st	Z, r24
    43b0:	08 95       	ret
    43b2:	e8 e0       	ldi	r30, 0x08	; 8
    43b4:	f1 e0       	ldi	r31, 0x01	; 1
    43b6:	80 81       	ld	r24, Z
    43b8:	80 61       	ori	r24, 0x10	; 16
    43ba:	80 83       	st	Z, r24
    43bc:	08 95       	ret

000043be <lora_driver_rn2483FactoryReset>:
    43be:	60 e0       	ldi	r22, 0x00	; 0
    43c0:	70 e0       	ldi	r23, 0x00	; 0
    43c2:	87 e8       	ldi	r24, 0x87	; 135
    43c4:	95 e0       	ldi	r25, 0x05	; 5
    43c6:	14 df       	rcall	.-472    	; 0x41f0 <_uploadMessage>
    43c8:	e7 eb       	ldi	r30, 0xB7	; 183
    43ca:	f7 e1       	ldi	r31, 0x17	; 23
    43cc:	01 90       	ld	r0, Z+
    43ce:	00 20       	and	r0, r0
    43d0:	e9 f7       	brne	.-6      	; 0x43cc <lora_driver_rn2483FactoryReset+0xe>
    43d2:	31 97       	sbiw	r30, 0x01	; 1
    43d4:	e7 5b       	subi	r30, 0xB7	; 183
    43d6:	f7 41       	sbci	r31, 0x17	; 23
    43d8:	81 e0       	ldi	r24, 0x01	; 1
    43da:	75 97       	sbiw	r30, 0x15	; 21
    43dc:	08 f0       	brcs	.+2      	; 0x43e0 <lora_driver_rn2483FactoryReset+0x22>
    43de:	80 e0       	ldi	r24, 0x00	; 0
    43e0:	08 95       	ret

000043e2 <lora_driver_getRn2483Hweui>:
    43e2:	cf 93       	push	r28
    43e4:	df 93       	push	r29
    43e6:	ec 01       	movw	r28, r24
    43e8:	60 e0       	ldi	r22, 0x00	; 0
    43ea:	70 e0       	ldi	r23, 0x00	; 0
    43ec:	88 e9       	ldi	r24, 0x98	; 152
    43ee:	95 e0       	ldi	r25, 0x05	; 5
    43f0:	ff de       	rcall	.-514    	; 0x41f0 <_uploadMessage>
    43f2:	e7 eb       	ldi	r30, 0xB7	; 183
    43f4:	f7 e1       	ldi	r31, 0x17	; 23
    43f6:	01 90       	ld	r0, Z+
    43f8:	00 20       	and	r0, r0
    43fa:	e9 f7       	brne	.-6      	; 0x43f6 <lora_driver_getRn2483Hweui+0x14>
    43fc:	e8 5c       	subi	r30, 0xC8	; 200
    43fe:	f7 41       	sbci	r31, 0x17	; 23
    4400:	39 f4       	brne	.+14     	; 0x4410 <lora_driver_getRn2483Hweui+0x2e>
    4402:	67 eb       	ldi	r22, 0xB7	; 183
    4404:	77 e1       	ldi	r23, 0x17	; 23
    4406:	ce 01       	movw	r24, r28
    4408:	0e 94 cd 2f 	call	0x5f9a	; 0x5f9a <strcpy>
    440c:	80 e0       	ldi	r24, 0x00	; 0
    440e:	02 c0       	rjmp	.+4      	; 0x4414 <lora_driver_getRn2483Hweui+0x32>
    4410:	18 82       	st	Y, r1
    4412:	81 e0       	ldi	r24, 0x01	; 1
    4414:	df 91       	pop	r29
    4416:	cf 91       	pop	r28
    4418:	08 95       	ret

0000441a <lora_driver_setDeviceIdentifier>:
    441a:	fc 01       	movw	r30, r24
    441c:	01 90       	ld	r0, Z+
    441e:	00 20       	and	r0, r0
    4420:	e9 f7       	brne	.-6      	; 0x441c <lora_driver_setDeviceIdentifier+0x2>
    4422:	9f 01       	movw	r18, r30
    4424:	21 51       	subi	r18, 0x11	; 17
    4426:	31 09       	sbc	r19, r1
    4428:	28 17       	cp	r18, r24
    442a:	39 07       	cpc	r19, r25
    442c:	29 f4       	brne	.+10     	; 0x4438 <lora_driver_setDeviceIdentifier+0x1e>
    442e:	bc 01       	movw	r22, r24
    4430:	86 ec       	ldi	r24, 0xC6	; 198
    4432:	95 e0       	ldi	r25, 0x05	; 5
    4434:	ac cf       	rjmp	.-168    	; 0x438e <_uploadMessageRc>
    4436:	08 95       	ret
    4438:	89 e0       	ldi	r24, 0x09	; 9
    443a:	08 95       	ret

0000443c <lora_driver_setApplicationIdentifier>:
    443c:	fc 01       	movw	r30, r24
    443e:	01 90       	ld	r0, Z+
    4440:	00 20       	and	r0, r0
    4442:	e9 f7       	brne	.-6      	; 0x443e <lora_driver_setApplicationIdentifier+0x2>
    4444:	9f 01       	movw	r18, r30
    4446:	21 51       	subi	r18, 0x11	; 17
    4448:	31 09       	sbc	r19, r1
    444a:	28 17       	cp	r18, r24
    444c:	39 07       	cpc	r19, r25
    444e:	29 f4       	brne	.+10     	; 0x445a <lora_driver_setApplicationIdentifier+0x1e>
    4450:	bc 01       	movw	r22, r24
    4452:	85 ed       	ldi	r24, 0xD5	; 213
    4454:	95 e0       	ldi	r25, 0x05	; 5
    4456:	9b cf       	rjmp	.-202    	; 0x438e <_uploadMessageRc>
    4458:	08 95       	ret
    445a:	89 e0       	ldi	r24, 0x09	; 9
    445c:	08 95       	ret

0000445e <lora_driver_setApplicationKey>:
    445e:	fc 01       	movw	r30, r24
    4460:	01 90       	ld	r0, Z+
    4462:	00 20       	and	r0, r0
    4464:	e9 f7       	brne	.-6      	; 0x4460 <lora_driver_setApplicationKey+0x2>
    4466:	9f 01       	movw	r18, r30
    4468:	21 52       	subi	r18, 0x21	; 33
    446a:	31 09       	sbc	r19, r1
    446c:	28 17       	cp	r18, r24
    446e:	39 07       	cpc	r19, r25
    4470:	29 f4       	brne	.+10     	; 0x447c <lora_driver_setApplicationKey+0x1e>
    4472:	bc 01       	movw	r22, r24
    4474:	84 ee       	ldi	r24, 0xE4	; 228
    4476:	95 e0       	ldi	r25, 0x05	; 5
    4478:	8a cf       	rjmp	.-236    	; 0x438e <_uploadMessageRc>
    447a:	08 95       	ret
    447c:	89 e0       	ldi	r24, 0x09	; 9
    447e:	08 95       	ret

00004480 <lora_driver_saveMac>:
    4480:	60 e0       	ldi	r22, 0x00	; 0
    4482:	70 e0       	ldi	r23, 0x00	; 0
    4484:	83 e2       	ldi	r24, 0x23	; 35
    4486:	96 e0       	ldi	r25, 0x06	; 6
    4488:	82 cf       	rjmp	.-252    	; 0x438e <_uploadMessageRc>
    448a:	08 95       	ret

0000448c <lora_driver_join>:
    448c:	0f 93       	push	r16
    448e:	1f 93       	push	r17
    4490:	e8 2f       	mov	r30, r24
    4492:	f0 e0       	ldi	r31, 0x00	; 0
    4494:	ee 0f       	add	r30, r30
    4496:	ff 1f       	adc	r31, r31
    4498:	e3 50       	subi	r30, 0x03	; 3
    449a:	f8 4f       	sbci	r31, 0xF8	; 248
    449c:	60 81       	ld	r22, Z
    449e:	71 81       	ldd	r23, Z+1	; 0x01
    44a0:	8c e2       	ldi	r24, 0x2C	; 44
    44a2:	96 e0       	ldi	r25, 0x06	; 6
    44a4:	74 df       	rcall	.-280    	; 0x438e <_uploadMessageRc>
    44a6:	81 11       	cpse	r24, r1
    44a8:	14 c0       	rjmp	.+40     	; 0x44d2 <lora_driver_join+0x46>
    44aa:	08 e2       	ldi	r16, 0x28	; 40
    44ac:	15 e0       	ldi	r17, 0x05	; 5
    44ae:	20 e0       	ldi	r18, 0x00	; 0
    44b0:	30 e0       	ldi	r19, 0x00	; 0
    44b2:	4d e2       	ldi	r20, 0x2D	; 45
    44b4:	50 e0       	ldi	r21, 0x00	; 0
    44b6:	67 eb       	ldi	r22, 0xB7	; 183
    44b8:	77 e1       	ldi	r23, 0x17	; 23
    44ba:	80 91 5b 17 	lds	r24, 0x175B	; 0x80175b <_serialReplyBufferHandle>
    44be:	90 91 5c 17 	lds	r25, 0x175C	; 0x80175c <_serialReplyBufferHandle+0x1>
    44c2:	0e 94 28 0b 	call	0x1650	; 0x1650 <xStreamBufferReceive>
    44c6:	88 23       	and	r24, r24
    44c8:	21 f0       	breq	.+8      	; 0x44d2 <lora_driver_join+0x46>
    44ca:	87 eb       	ldi	r24, 0xB7	; 183
    44cc:	97 e1       	ldi	r25, 0x17	; 23
    44ce:	ea de       	rcall	.-556    	; 0x42a4 <_reply2ReturnCode>
    44d0:	03 c0       	rjmp	.+6      	; 0x44d8 <lora_driver_join+0x4c>
    44d2:	87 eb       	ldi	r24, 0xB7	; 183
    44d4:	97 e1       	ldi	r25, 0x17	; 23
    44d6:	e6 de       	rcall	.-564    	; 0x42a4 <_reply2ReturnCode>
    44d8:	1f 91       	pop	r17
    44da:	0f 91       	pop	r16
    44dc:	08 95       	ret

000044de <lora_driver_sendUploadMessage>:
    44de:	0f 93       	push	r16
    44e0:	1f 93       	push	r17
    44e2:	cf 93       	push	r28
    44e4:	df 93       	push	r29
    44e6:	1f 92       	push	r1
    44e8:	cd b7       	in	r28, 0x3d	; 61
    44ea:	de b7       	in	r29, 0x3e	; 62
    44ec:	db 01       	movw	r26, r22
    44ee:	11 96       	adiw	r26, 0x01	; 1
    44f0:	9c 91       	ld	r25, X
    44f2:	11 97       	sbiw	r26, 0x01	; 1
    44f4:	95 31       	cpi	r25, 0x15	; 21
    44f6:	08 f0       	brcs	.+2      	; 0x44fa <lora_driver_sendUploadMessage+0x1c>
    44f8:	b4 c0       	rjmp	.+360    	; 0x4662 <lora_driver_sendUploadMessage+0x184>
    44fa:	99 23       	and	r25, r25
    44fc:	81 f1       	breq	.+96     	; 0x455e <lora_driver_sendUploadMessage+0x80>
    44fe:	60 e0       	ldi	r22, 0x00	; 0
    4500:	70 e0       	ldi	r23, 0x00	; 0
    4502:	27 2f       	mov	r18, r23
    4504:	30 e0       	ldi	r19, 0x00	; 0
    4506:	46 2f       	mov	r20, r22
    4508:	50 e0       	ldi	r21, 0x00	; 0
    450a:	fd 01       	movw	r30, r26
    450c:	e4 0f       	add	r30, r20
    450e:	f5 1f       	adc	r31, r21
    4510:	92 81       	ldd	r25, Z+2	; 0x02
    4512:	92 95       	swap	r25
    4514:	9f 70       	andi	r25, 0x0F	; 15
    4516:	9a 30       	cpi	r25, 0x0A	; 10
    4518:	10 f0       	brcs	.+4      	; 0x451e <lora_driver_sendUploadMessage+0x40>
    451a:	99 5c       	subi	r25, 0xC9	; 201
    451c:	01 c0       	rjmp	.+2      	; 0x4520 <lora_driver_sendUploadMessage+0x42>
    451e:	90 5d       	subi	r25, 0xD0	; 208
    4520:	f9 01       	movw	r30, r18
    4522:	eb 58       	subi	r30, 0x8B	; 139
    4524:	f8 4e       	sbci	r31, 0xE8	; 232
    4526:	90 83       	st	Z, r25
    4528:	2f 5f       	subi	r18, 0xFF	; 255
    452a:	3f 4f       	sbci	r19, 0xFF	; 255
    452c:	fd 01       	movw	r30, r26
    452e:	e4 0f       	add	r30, r20
    4530:	f5 1f       	adc	r31, r21
    4532:	92 81       	ldd	r25, Z+2	; 0x02
    4534:	9f 70       	andi	r25, 0x0F	; 15
    4536:	49 2f       	mov	r20, r25
    4538:	50 e0       	ldi	r21, 0x00	; 0
    453a:	4a 30       	cpi	r20, 0x0A	; 10
    453c:	51 05       	cpc	r21, r1
    453e:	14 f0       	brlt	.+4      	; 0x4544 <lora_driver_sendUploadMessage+0x66>
    4540:	99 5c       	subi	r25, 0xC9	; 201
    4542:	01 c0       	rjmp	.+2      	; 0x4546 <lora_driver_sendUploadMessage+0x68>
    4544:	90 5d       	subi	r25, 0xD0	; 208
    4546:	f9 01       	movw	r30, r18
    4548:	eb 58       	subi	r30, 0x8B	; 139
    454a:	f8 4e       	sbci	r31, 0xE8	; 232
    454c:	90 83       	st	Z, r25
    454e:	7e 5f       	subi	r23, 0xFE	; 254
    4550:	6f 5f       	subi	r22, 0xFF	; 255
    4552:	11 96       	adiw	r26, 0x01	; 1
    4554:	9c 91       	ld	r25, X
    4556:	11 97       	sbiw	r26, 0x01	; 1
    4558:	69 17       	cp	r22, r25
    455a:	98 f2       	brcs	.-90     	; 0x4502 <lora_driver_sendUploadMessage+0x24>
    455c:	01 c0       	rjmp	.+2      	; 0x4560 <lora_driver_sendUploadMessage+0x82>
    455e:	70 e0       	ldi	r23, 0x00	; 0
    4560:	e7 2f       	mov	r30, r23
    4562:	f0 e0       	ldi	r31, 0x00	; 0
    4564:	eb 58       	subi	r30, 0x8B	; 139
    4566:	f8 4e       	sbci	r31, 0xE8	; 232
    4568:	10 82       	st	Z, r1
    456a:	4c 91       	ld	r20, X
    456c:	81 11       	cpse	r24, r1
    456e:	03 c0       	rjmp	.+6      	; 0x4576 <lora_driver_sendUploadMessage+0x98>
    4570:	85 e3       	ldi	r24, 0x35	; 53
    4572:	96 e0       	ldi	r25, 0x06	; 6
    4574:	02 c0       	rjmp	.+4      	; 0x457a <lora_driver_sendUploadMessage+0x9c>
    4576:	87 e3       	ldi	r24, 0x37	; 55
    4578:	96 e0       	ldi	r25, 0x06	; 6
    457a:	25 e7       	ldi	r18, 0x75	; 117
    457c:	37 e1       	ldi	r19, 0x17	; 23
    457e:	3f 93       	push	r19
    4580:	2f 93       	push	r18
    4582:	1f 92       	push	r1
    4584:	4f 93       	push	r20
    4586:	9f 93       	push	r25
    4588:	8f 93       	push	r24
    458a:	8b e3       	ldi	r24, 0x3B	; 59
    458c:	96 e0       	ldi	r25, 0x06	; 6
    458e:	9f 93       	push	r25
    4590:	8f 93       	push	r24
    4592:	8a e8       	ldi	r24, 0x8A	; 138
    4594:	97 e1       	ldi	r25, 0x17	; 23
    4596:	9f 93       	push	r25
    4598:	8f 93       	push	r24
    459a:	0e 94 2f 30 	call	0x605e	; 0x605e <sprintf>
    459e:	60 e0       	ldi	r22, 0x00	; 0
    45a0:	70 e0       	ldi	r23, 0x00	; 0
    45a2:	8a e8       	ldi	r24, 0x8A	; 138
    45a4:	97 e1       	ldi	r25, 0x17	; 23
    45a6:	f3 de       	rcall	.-538    	; 0x438e <_uploadMessageRc>
    45a8:	0f b6       	in	r0, 0x3f	; 63
    45aa:	f8 94       	cli
    45ac:	de bf       	out	0x3e, r29	; 62
    45ae:	0f be       	out	0x3f, r0	; 63
    45b0:	cd bf       	out	0x3d, r28	; 61
    45b2:	81 11       	cpse	r24, r1
    45b4:	59 c0       	rjmp	.+178    	; 0x4668 <lora_driver_sendUploadMessage+0x18a>
    45b6:	08 e2       	ldi	r16, 0x28	; 40
    45b8:	15 e0       	ldi	r17, 0x05	; 5
    45ba:	20 e0       	ldi	r18, 0x00	; 0
    45bc:	30 e0       	ldi	r19, 0x00	; 0
    45be:	4d e2       	ldi	r20, 0x2D	; 45
    45c0:	50 e0       	ldi	r21, 0x00	; 0
    45c2:	67 eb       	ldi	r22, 0xB7	; 183
    45c4:	77 e1       	ldi	r23, 0x17	; 23
    45c6:	80 91 5b 17 	lds	r24, 0x175B	; 0x80175b <_serialReplyBufferHandle>
    45ca:	90 91 5c 17 	lds	r25, 0x175C	; 0x80175c <_serialReplyBufferHandle+0x1>
    45ce:	0e 94 28 0b 	call	0x1650	; 0x1650 <xStreamBufferReceive>
    45d2:	88 23       	and	r24, r24
    45d4:	09 f4       	brne	.+2      	; 0x45d8 <lora_driver_sendUploadMessage+0xfa>
    45d6:	47 c0       	rjmp	.+142    	; 0x4666 <lora_driver_sendUploadMessage+0x188>
    45d8:	87 eb       	ldi	r24, 0xB7	; 183
    45da:	97 e1       	ldi	r25, 0x17	; 23
    45dc:	63 de       	rcall	.-826    	; 0x42a4 <_reply2ReturnCode>
    45de:	8e 30       	cpi	r24, 0x0E	; 14
    45e0:	09 f0       	breq	.+2      	; 0x45e4 <lora_driver_sendUploadMessage+0x106>
    45e2:	42 c0       	rjmp	.+132    	; 0x4668 <lora_driver_sendUploadMessage+0x18a>
    45e4:	87 e0       	ldi	r24, 0x07	; 7
    45e6:	89 83       	std	Y+1, r24	; 0x01
    45e8:	80 91 59 17 	lds	r24, 0x1759	; 0x801759 <_downlinkMessageBuffer>
    45ec:	90 91 5a 17 	lds	r25, 0x175A	; 0x80175a <_downlinkMessageBuffer+0x1>
    45f0:	89 2b       	or	r24, r25
    45f2:	a9 f1       	breq	.+106    	; 0x465e <lora_driver_sendUploadMessage+0x180>
    45f4:	be 01       	movw	r22, r28
    45f6:	6f 5f       	subi	r22, 0xFF	; 255
    45f8:	7f 4f       	sbci	r23, 0xFF	; 255
    45fa:	87 eb       	ldi	r24, 0xB7	; 183
    45fc:	97 e1       	ldi	r25, 0x17	; 23
    45fe:	68 d1       	rcall	.+720    	; 0x48d0 <decode_port_no>
    4600:	80 93 5f 17 	sts	0x175F, r24	; 0x80175f <_downlinkPayload>
    4604:	e9 81       	ldd	r30, Y+1	; 0x01
    4606:	f0 e0       	ldi	r31, 0x00	; 0
    4608:	e9 54       	subi	r30, 0x49	; 73
    460a:	f8 4e       	sbci	r31, 0xE8	; 232
    460c:	df 01       	movw	r26, r30
    460e:	0d 90       	ld	r0, X+
    4610:	00 20       	and	r0, r0
    4612:	e9 f7       	brne	.-6      	; 0x460e <lora_driver_sendUploadMessage+0x130>
    4614:	11 97       	sbiw	r26, 0x01	; 1
    4616:	ae 1b       	sub	r26, r30
    4618:	bf 0b       	sbc	r27, r31
    461a:	aa 23       	and	r26, r26
    461c:	91 f0       	breq	.+36     	; 0x4642 <lora_driver_sendUploadMessage+0x164>
    461e:	bb 27       	eor	r27, r27
    4620:	cd 01       	movw	r24, r26
    4622:	01 97       	sbiw	r24, 0x01	; 1
    4624:	9c 01       	movw	r18, r24
    4626:	12 f4       	brpl	.+4      	; 0x462c <lora_driver_sendUploadMessage+0x14e>
    4628:	2f 5f       	subi	r18, 0xFF	; 255
    462a:	3f 4f       	sbci	r19, 0xFF	; 255
    462c:	35 95       	asr	r19
    462e:	27 95       	ror	r18
    4630:	20 93 60 17 	sts	0x1760, r18	; 0x801760 <_downlinkPayload+0x1>
    4634:	af 01       	movw	r20, r30
    4636:	4f 5f       	subi	r20, 0xFF	; 255
    4638:	5f 4f       	sbci	r21, 0xFF	; 255
    463a:	64 e1       	ldi	r22, 0x14	; 20
    463c:	81 e6       	ldi	r24, 0x61	; 97
    463e:	97 e1       	ldi	r25, 0x17	; 23
    4640:	73 d1       	rcall	.+742    	; 0x4928 <decode_hexadecimal_string_bytes>
    4642:	01 e0       	ldi	r16, 0x01	; 1
    4644:	10 e0       	ldi	r17, 0x00	; 0
    4646:	20 e0       	ldi	r18, 0x00	; 0
    4648:	30 e0       	ldi	r19, 0x00	; 0
    464a:	46 e1       	ldi	r20, 0x16	; 22
    464c:	50 e0       	ldi	r21, 0x00	; 0
    464e:	6f e5       	ldi	r22, 0x5F	; 95
    4650:	77 e1       	ldi	r23, 0x17	; 23
    4652:	80 91 59 17 	lds	r24, 0x1759	; 0x801759 <_downlinkMessageBuffer>
    4656:	90 91 5a 17 	lds	r25, 0x175A	; 0x80175a <_downlinkMessageBuffer+0x1>
    465a:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <xStreamBufferSend>
    465e:	8e e0       	ldi	r24, 0x0E	; 14
    4660:	03 c0       	rjmp	.+6      	; 0x4668 <lora_driver_sendUploadMessage+0x18a>
    4662:	84 e1       	ldi	r24, 0x14	; 20
    4664:	01 c0       	rjmp	.+2      	; 0x4668 <lora_driver_sendUploadMessage+0x18a>
    4666:	80 e0       	ldi	r24, 0x00	; 0
    4668:	0f 90       	pop	r0
    466a:	df 91       	pop	r29
    466c:	cf 91       	pop	r28
    466e:	1f 91       	pop	r17
    4670:	0f 91       	pop	r16
    4672:	08 95       	ret

00004674 <lora_driver_setAdaptiveDataRate>:
    4674:	81 30       	cpi	r24, 0x01	; 1
    4676:	19 f0       	breq	.+6      	; 0x467e <lora_driver_setAdaptiveDataRate+0xa>
    4678:	6b e4       	ldi	r22, 0x4B	; 75
    467a:	76 e0       	ldi	r23, 0x06	; 6
    467c:	02 c0       	rjmp	.+4      	; 0x4682 <lora_driver_setAdaptiveDataRate+0xe>
    467e:	64 e2       	ldi	r22, 0x24	; 36
    4680:	77 e0       	ldi	r23, 0x07	; 7
    4682:	8f e4       	ldi	r24, 0x4F	; 79
    4684:	96 e0       	ldi	r25, 0x06	; 6
    4686:	83 ce       	rjmp	.-762    	; 0x438e <_uploadMessageRc>
    4688:	08 95       	ret

0000468a <lora_driver_setReceiveDelay>:
    468a:	9f 93       	push	r25
    468c:	8f 93       	push	r24
    468e:	80 e8       	ldi	r24, 0x80	; 128
    4690:	96 e0       	ldi	r25, 0x06	; 6
    4692:	9f 93       	push	r25
    4694:	8f 93       	push	r24
    4696:	8a e8       	ldi	r24, 0x8A	; 138
    4698:	97 e1       	ldi	r25, 0x17	; 23
    469a:	9f 93       	push	r25
    469c:	8f 93       	push	r24
    469e:	0e 94 2f 30 	call	0x605e	; 0x605e <sprintf>
    46a2:	60 e0       	ldi	r22, 0x00	; 0
    46a4:	70 e0       	ldi	r23, 0x00	; 0
    46a6:	8a e8       	ldi	r24, 0x8A	; 138
    46a8:	97 e1       	ldi	r25, 0x17	; 23
    46aa:	71 de       	rcall	.-798    	; 0x438e <_uploadMessageRc>
    46ac:	0f 90       	pop	r0
    46ae:	0f 90       	pop	r0
    46b0:	0f 90       	pop	r0
    46b2:	0f 90       	pop	r0
    46b4:	0f 90       	pop	r0
    46b6:	0f 90       	pop	r0
    46b8:	08 95       	ret

000046ba <lora_driver_configureToEu868>:
    46ba:	2f 92       	push	r2
    46bc:	3f 92       	push	r3
    46be:	4f 92       	push	r4
    46c0:	5f 92       	push	r5
    46c2:	6f 92       	push	r6
    46c4:	7f 92       	push	r7
    46c6:	8f 92       	push	r8
    46c8:	9f 92       	push	r9
    46ca:	af 92       	push	r10
    46cc:	bf 92       	push	r11
    46ce:	cf 92       	push	r12
    46d0:	df 92       	push	r13
    46d2:	ef 92       	push	r14
    46d4:	ff 92       	push	r15
    46d6:	0f 93       	push	r16
    46d8:	1f 93       	push	r17
    46da:	cf 93       	push	r28
    46dc:	df 93       	push	r29
    46de:	cd b7       	in	r28, 0x3d	; 61
    46e0:	de b7       	in	r29, 0x3e	; 62
    46e2:	a0 97       	sbiw	r28, 0x20	; 32
    46e4:	0f b6       	in	r0, 0x3f	; 63
    46e6:	f8 94       	cli
    46e8:	de bf       	out	0x3e, r29	; 62
    46ea:	0f be       	out	0x3f, r0	; 63
    46ec:	cd bf       	out	0x3d, r28	; 61
    46ee:	6d ea       	ldi	r22, 0xAD	; 173
    46f0:	76 e0       	ldi	r23, 0x06	; 6
    46f2:	89 eb       	ldi	r24, 0xB9	; 185
    46f4:	96 e0       	ldi	r25, 0x06	; 6
    46f6:	7c dd       	rcall	.-1288   	; 0x41f0 <_uploadMessage>
    46f8:	d5 dd       	rcall	.-1110   	; 0x42a4 <_reply2ReturnCode>
    46fa:	81 11       	cpse	r24, r1
    46fc:	a3 c0       	rjmp	.+326    	; 0x4844 <lora_driver_configureToEu868+0x18a>
    46fe:	80 e2       	ldi	r24, 0x20	; 32
    4700:	e2 e2       	ldi	r30, 0x22	; 34
    4702:	f2 e0       	ldi	r31, 0x02	; 2
    4704:	de 01       	movw	r26, r28
    4706:	11 96       	adiw	r26, 0x01	; 1
    4708:	01 90       	ld	r0, Z+
    470a:	0d 92       	st	X+, r0
    470c:	8a 95       	dec	r24
    470e:	e1 f7       	brne	.-8      	; 0x4708 <lora_driver_configureToEu868+0x4e>
    4710:	9e 01       	movw	r18, r28
    4712:	2f 5f       	subi	r18, 0xFF	; 255
    4714:	3f 4f       	sbci	r19, 0xFF	; 255
    4716:	69 01       	movw	r12, r18
    4718:	e1 2c       	mov	r14, r1
    471a:	f1 2c       	mov	r15, r1
    471c:	0f 2e       	mov	r0, r31
    471e:	f5 ec       	ldi	r31, 0xC5	; 197
    4720:	af 2e       	mov	r10, r31
    4722:	f6 e0       	ldi	r31, 0x06	; 6
    4724:	bf 2e       	mov	r11, r31
    4726:	f0 2d       	mov	r31, r0
    4728:	0a e8       	ldi	r16, 0x8A	; 138
    472a:	17 e1       	ldi	r17, 0x17	; 23
    472c:	0f 2e       	mov	r0, r31
    472e:	fe ed       	ldi	r31, 0xDE	; 222
    4730:	4f 2e       	mov	r4, r31
    4732:	f6 e0       	ldi	r31, 0x06	; 6
    4734:	5f 2e       	mov	r5, r31
    4736:	f0 2d       	mov	r31, r0
    4738:	0f 2e       	mov	r0, r31
    473a:	f5 ef       	ldi	r31, 0xF5	; 245
    473c:	8f 2e       	mov	r8, r31
    473e:	f6 e0       	ldi	r31, 0x06	; 6
    4740:	9f 2e       	mov	r9, r31
    4742:	f0 2d       	mov	r31, r0
    4744:	0f 2e       	mov	r0, r31
    4746:	ff e0       	ldi	r31, 0x0F	; 15
    4748:	6f 2e       	mov	r6, r31
    474a:	f7 e0       	ldi	r31, 0x07	; 7
    474c:	7f 2e       	mov	r7, r31
    474e:	f0 2d       	mov	r31, r0
    4750:	3e 2c       	mov	r3, r14
    4752:	2f 2c       	mov	r2, r15
    4754:	ff 92       	push	r15
    4756:	ef 92       	push	r14
    4758:	bf 92       	push	r11
    475a:	af 92       	push	r10
    475c:	1f 93       	push	r17
    475e:	0f 93       	push	r16
    4760:	0e 94 2f 30 	call	0x605e	; 0x605e <sprintf>
    4764:	60 e0       	ldi	r22, 0x00	; 0
    4766:	70 e0       	ldi	r23, 0x00	; 0
    4768:	c8 01       	movw	r24, r16
    476a:	42 dd       	rcall	.-1404   	; 0x41f0 <_uploadMessage>
    476c:	9b dd       	rcall	.-1226   	; 0x42a4 <_reply2ReturnCode>
    476e:	0f 90       	pop	r0
    4770:	0f 90       	pop	r0
    4772:	0f 90       	pop	r0
    4774:	0f 90       	pop	r0
    4776:	0f 90       	pop	r0
    4778:	0f 90       	pop	r0
    477a:	81 11       	cpse	r24, r1
    477c:	63 c0       	rjmp	.+198    	; 0x4844 <lora_driver_configureToEu868+0x18a>
    477e:	32 e0       	ldi	r19, 0x02	; 2
    4780:	3e 15       	cp	r19, r14
    4782:	e8 f4       	brcc	.+58     	; 0x47be <lora_driver_configureToEu868+0x104>
    4784:	f6 01       	movw	r30, r12
    4786:	83 81       	ldd	r24, Z+3	; 0x03
    4788:	8f 93       	push	r24
    478a:	82 81       	ldd	r24, Z+2	; 0x02
    478c:	8f 93       	push	r24
    478e:	81 81       	ldd	r24, Z+1	; 0x01
    4790:	8f 93       	push	r24
    4792:	80 81       	ld	r24, Z
    4794:	8f 93       	push	r24
    4796:	ff 92       	push	r15
    4798:	ef 92       	push	r14
    479a:	5f 92       	push	r5
    479c:	4f 92       	push	r4
    479e:	1f 93       	push	r17
    47a0:	0f 93       	push	r16
    47a2:	0e 94 2f 30 	call	0x605e	; 0x605e <sprintf>
    47a6:	60 e0       	ldi	r22, 0x00	; 0
    47a8:	70 e0       	ldi	r23, 0x00	; 0
    47aa:	c8 01       	movw	r24, r16
    47ac:	21 dd       	rcall	.-1470   	; 0x41f0 <_uploadMessage>
    47ae:	7a dd       	rcall	.-1292   	; 0x42a4 <_reply2ReturnCode>
    47b0:	0f b6       	in	r0, 0x3f	; 63
    47b2:	f8 94       	cli
    47b4:	de bf       	out	0x3e, r29	; 62
    47b6:	0f be       	out	0x3f, r0	; 63
    47b8:	cd bf       	out	0x3d, r28	; 61
    47ba:	81 11       	cpse	r24, r1
    47bc:	43 c0       	rjmp	.+134    	; 0x4844 <lora_driver_configureToEu868+0x18a>
    47be:	2f 92       	push	r2
    47c0:	3f 92       	push	r3
    47c2:	9f 92       	push	r9
    47c4:	8f 92       	push	r8
    47c6:	1f 93       	push	r17
    47c8:	0f 93       	push	r16
    47ca:	0e 94 2f 30 	call	0x605e	; 0x605e <sprintf>
    47ce:	60 e0       	ldi	r22, 0x00	; 0
    47d0:	70 e0       	ldi	r23, 0x00	; 0
    47d2:	c8 01       	movw	r24, r16
    47d4:	0d dd       	rcall	.-1510   	; 0x41f0 <_uploadMessage>
    47d6:	66 dd       	rcall	.-1332   	; 0x42a4 <_reply2ReturnCode>
    47d8:	0f 90       	pop	r0
    47da:	0f 90       	pop	r0
    47dc:	0f 90       	pop	r0
    47de:	0f 90       	pop	r0
    47e0:	0f 90       	pop	r0
    47e2:	0f 90       	pop	r0
    47e4:	81 11       	cpse	r24, r1
    47e6:	2e c0       	rjmp	.+92     	; 0x4844 <lora_driver_configureToEu868+0x18a>
    47e8:	2f 92       	push	r2
    47ea:	3f 92       	push	r3
    47ec:	7f 92       	push	r7
    47ee:	6f 92       	push	r6
    47f0:	1f 93       	push	r17
    47f2:	0f 93       	push	r16
    47f4:	0e 94 2f 30 	call	0x605e	; 0x605e <sprintf>
    47f8:	60 e0       	ldi	r22, 0x00	; 0
    47fa:	70 e0       	ldi	r23, 0x00	; 0
    47fc:	c8 01       	movw	r24, r16
    47fe:	f8 dc       	rcall	.-1552   	; 0x41f0 <_uploadMessage>
    4800:	51 dd       	rcall	.-1374   	; 0x42a4 <_reply2ReturnCode>
    4802:	0f 90       	pop	r0
    4804:	0f 90       	pop	r0
    4806:	0f 90       	pop	r0
    4808:	0f 90       	pop	r0
    480a:	0f 90       	pop	r0
    480c:	0f 90       	pop	r0
    480e:	81 11       	cpse	r24, r1
    4810:	19 c0       	rjmp	.+50     	; 0x4844 <lora_driver_configureToEu868+0x18a>
    4812:	3f ef       	ldi	r19, 0xFF	; 255
    4814:	e3 1a       	sub	r14, r19
    4816:	f3 0a       	sbc	r15, r19
    4818:	84 e0       	ldi	r24, 0x04	; 4
    481a:	c8 0e       	add	r12, r24
    481c:	d1 1c       	adc	r13, r1
    481e:	98 e0       	ldi	r25, 0x08	; 8
    4820:	e9 16       	cp	r14, r25
    4822:	f1 04       	cpc	r15, r1
    4824:	09 f0       	breq	.+2      	; 0x4828 <lora_driver_configureToEu868+0x16e>
    4826:	94 cf       	rjmp	.-216    	; 0x4750 <lora_driver_configureToEu868+0x96>
    4828:	60 e0       	ldi	r22, 0x00	; 0
    482a:	70 e0       	ldi	r23, 0x00	; 0
    482c:	87 e2       	ldi	r24, 0x27	; 39
    482e:	97 e0       	ldi	r25, 0x07	; 7
    4830:	df dc       	rcall	.-1602   	; 0x41f0 <_uploadMessage>
    4832:	38 dd       	rcall	.-1424   	; 0x42a4 <_reply2ReturnCode>
    4834:	81 11       	cpse	r24, r1
    4836:	06 c0       	rjmp	.+12     	; 0x4844 <lora_driver_configureToEu868+0x18a>
    4838:	60 e0       	ldi	r22, 0x00	; 0
    483a:	70 e0       	ldi	r23, 0x00	; 0
    483c:	88 e3       	ldi	r24, 0x38	; 56
    483e:	97 e0       	ldi	r25, 0x07	; 7
    4840:	d7 dc       	rcall	.-1618   	; 0x41f0 <_uploadMessage>
    4842:	30 dd       	rcall	.-1440   	; 0x42a4 <_reply2ReturnCode>
    4844:	a0 96       	adiw	r28, 0x20	; 32
    4846:	0f b6       	in	r0, 0x3f	; 63
    4848:	f8 94       	cli
    484a:	de bf       	out	0x3e, r29	; 62
    484c:	0f be       	out	0x3f, r0	; 63
    484e:	cd bf       	out	0x3d, r28	; 61
    4850:	df 91       	pop	r29
    4852:	cf 91       	pop	r28
    4854:	1f 91       	pop	r17
    4856:	0f 91       	pop	r16
    4858:	ff 90       	pop	r15
    485a:	ef 90       	pop	r14
    485c:	df 90       	pop	r13
    485e:	cf 90       	pop	r12
    4860:	bf 90       	pop	r11
    4862:	af 90       	pop	r10
    4864:	9f 90       	pop	r9
    4866:	8f 90       	pop	r8
    4868:	7f 90       	pop	r7
    486a:	6f 90       	pop	r6
    486c:	5f 90       	pop	r5
    486e:	4f 90       	pop	r4
    4870:	3f 90       	pop	r3
    4872:	2f 90       	pop	r2
    4874:	08 95       	ret

00004876 <lora_driver_setOtaaIdentity>:
    4876:	ef 92       	push	r14
    4878:	ff 92       	push	r15
    487a:	0f 93       	push	r16
    487c:	1f 93       	push	r17
    487e:	cf 93       	push	r28
    4880:	df 93       	push	r29
    4882:	ec 01       	movw	r28, r24
    4884:	8b 01       	movw	r16, r22
    4886:	7a 01       	movw	r14, r20
    4888:	81 e0       	ldi	r24, 0x01	; 1
    488a:	f4 de       	rcall	.-536    	; 0x4674 <lora_driver_setAdaptiveDataRate>
    488c:	81 11       	cpse	r24, r1
    488e:	0d c0       	rjmp	.+26     	; 0x48aa <lora_driver_setOtaaIdentity+0x34>
    4890:	ce 01       	movw	r24, r28
    4892:	d4 dd       	rcall	.-1112   	; 0x443c <lora_driver_setApplicationIdentifier>
    4894:	81 11       	cpse	r24, r1
    4896:	09 c0       	rjmp	.+18     	; 0x48aa <lora_driver_setOtaaIdentity+0x34>
    4898:	c8 01       	movw	r24, r16
    489a:	e1 dd       	rcall	.-1086   	; 0x445e <lora_driver_setApplicationKey>
    489c:	81 11       	cpse	r24, r1
    489e:	05 c0       	rjmp	.+10     	; 0x48aa <lora_driver_setOtaaIdentity+0x34>
    48a0:	c7 01       	movw	r24, r14
    48a2:	bb dd       	rcall	.-1162   	; 0x441a <lora_driver_setDeviceIdentifier>
    48a4:	81 11       	cpse	r24, r1
    48a6:	01 c0       	rjmp	.+2      	; 0x48aa <lora_driver_setOtaaIdentity+0x34>
    48a8:	eb dd       	rcall	.-1066   	; 0x4480 <lora_driver_saveMac>
    48aa:	df 91       	pop	r29
    48ac:	cf 91       	pop	r28
    48ae:	1f 91       	pop	r17
    48b0:	0f 91       	pop	r16
    48b2:	ff 90       	pop	r15
    48b4:	ef 90       	pop	r14
    48b6:	08 95       	ret

000048b8 <lora_driver_mapReturnCodeToText>:
    48b8:	90 e0       	ldi	r25, 0x00	; 0
    48ba:	fc 01       	movw	r30, r24
    48bc:	ee 0f       	add	r30, r30
    48be:	ff 1f       	adc	r31, r31
    48c0:	8e 0f       	add	r24, r30
    48c2:	9f 1f       	adc	r25, r31
    48c4:	fc 01       	movw	r30, r24
    48c6:	ef 5f       	subi	r30, 0xFF	; 255
    48c8:	f7 4f       	sbci	r31, 0xF7	; 247
    48ca:	81 81       	ldd	r24, Z+1	; 0x01
    48cc:	92 81       	ldd	r25, Z+2	; 0x02
    48ce:	08 95       	ret

000048d0 <decode_port_no>:
    48d0:	dc 01       	movw	r26, r24
    48d2:	00 97       	sbiw	r24, 0x00	; 0
    48d4:	29 f1       	breq	.+74     	; 0x4920 <decode_port_no+0x50>
    48d6:	fb 01       	movw	r30, r22
    48d8:	20 81       	ld	r18, Z
    48da:	fc 01       	movw	r30, r24
    48dc:	01 90       	ld	r0, Z+
    48de:	00 20       	and	r0, r0
    48e0:	e9 f7       	brne	.-6      	; 0x48dc <decode_port_no+0xc>
    48e2:	31 97       	sbiw	r30, 0x01	; 1
    48e4:	e8 1b       	sub	r30, r24
    48e6:	f9 0b       	sbc	r31, r25
    48e8:	82 2f       	mov	r24, r18
    48ea:	90 e0       	ldi	r25, 0x00	; 0
    48ec:	e8 17       	cp	r30, r24
    48ee:	f9 07       	cpc	r31, r25
    48f0:	c8 f0       	brcs	.+50     	; 0x4924 <decode_port_no+0x54>
    48f2:	80 e0       	ldi	r24, 0x00	; 0
    48f4:	08 c0       	rjmp	.+16     	; 0x4906 <decode_port_no+0x36>
    48f6:	88 0f       	add	r24, r24
    48f8:	38 2f       	mov	r19, r24
    48fa:	33 0f       	add	r19, r19
    48fc:	33 0f       	add	r19, r19
    48fe:	83 0f       	add	r24, r19
    4900:	80 53       	subi	r24, 0x30	; 48
    4902:	89 0f       	add	r24, r25
    4904:	2f 5f       	subi	r18, 0xFF	; 255
    4906:	fd 01       	movw	r30, r26
    4908:	e2 0f       	add	r30, r18
    490a:	f1 1d       	adc	r31, r1
    490c:	90 81       	ld	r25, Z
    490e:	30 ed       	ldi	r19, 0xD0	; 208
    4910:	39 0f       	add	r19, r25
    4912:	3a 30       	cpi	r19, 0x0A	; 10
    4914:	10 f4       	brcc	.+4      	; 0x491a <decode_port_no+0x4a>
    4916:	91 11       	cpse	r25, r1
    4918:	ee cf       	rjmp	.-36     	; 0x48f6 <decode_port_no+0x26>
    491a:	fb 01       	movw	r30, r22
    491c:	20 83       	st	Z, r18
    491e:	08 95       	ret
    4920:	80 e0       	ldi	r24, 0x00	; 0
    4922:	08 95       	ret
    4924:	80 e0       	ldi	r24, 0x00	; 0
    4926:	08 95       	ret

00004928 <decode_hexadecimal_string_bytes>:
    4928:	0f 93       	push	r16
    492a:	1f 93       	push	r17
    492c:	cf 93       	push	r28
    492e:	df 93       	push	r29
    4930:	dc 01       	movw	r26, r24
    4932:	ea 01       	movw	r28, r20
    4934:	20 97       	sbiw	r28, 0x00	; 0
    4936:	e1 f1       	breq	.+120    	; 0x49b0 <decode_hexadecimal_string_bytes+0x88>
    4938:	fa 01       	movw	r30, r20
    493a:	01 90       	ld	r0, Z+
    493c:	00 20       	and	r0, r0
    493e:	e9 f7       	brne	.-6      	; 0x493a <decode_hexadecimal_string_bytes+0x12>
    4940:	31 97       	sbiw	r30, 0x01	; 1
    4942:	e4 1b       	sub	r30, r20
    4944:	f5 0b       	sbc	r31, r21
    4946:	32 97       	sbiw	r30, 0x02	; 2
    4948:	10 f5       	brcc	.+68     	; 0x498e <decode_hexadecimal_string_bytes+0x66>
    494a:	32 c0       	rjmp	.+100    	; 0x49b0 <decode_hexadecimal_string_bytes+0x88>
    494c:	8d 01       	movw	r16, r26
    494e:	04 0f       	add	r16, r20
    4950:	15 1f       	adc	r17, r21
    4952:	30 e0       	ldi	r19, 0x00	; 0
    4954:	ae 01       	movw	r20, r28
    4956:	42 0f       	add	r20, r18
    4958:	53 1f       	adc	r21, r19
    495a:	fa 01       	movw	r30, r20
    495c:	90 81       	ld	r25, Z
    495e:	91 34       	cpi	r25, 0x41	; 65
    4960:	28 f0       	brcs	.+10     	; 0x496c <decode_hexadecimal_string_bytes+0x44>
    4962:	97 53       	subi	r25, 0x37	; 55
    4964:	59 2f       	mov	r21, r25
    4966:	52 95       	swap	r21
    4968:	50 7f       	andi	r21, 0xF0	; 240
    496a:	03 c0       	rjmp	.+6      	; 0x4972 <decode_hexadecimal_string_bytes+0x4a>
    496c:	59 2f       	mov	r21, r25
    496e:	52 95       	swap	r21
    4970:	50 7f       	andi	r21, 0xF0	; 240
    4972:	2c 0f       	add	r18, r28
    4974:	3d 1f       	adc	r19, r29
    4976:	f9 01       	movw	r30, r18
    4978:	91 81       	ldd	r25, Z+1	; 0x01
    497a:	91 34       	cpi	r25, 0x41	; 65
    497c:	10 f0       	brcs	.+4      	; 0x4982 <decode_hexadecimal_string_bytes+0x5a>
    497e:	97 53       	subi	r25, 0x37	; 55
    4980:	01 c0       	rjmp	.+2      	; 0x4984 <decode_hexadecimal_string_bytes+0x5c>
    4982:	90 53       	subi	r25, 0x30	; 48
    4984:	95 0f       	add	r25, r21
    4986:	f8 01       	movw	r30, r16
    4988:	90 83       	st	Z, r25
    498a:	8f 5f       	subi	r24, 0xFF	; 255
    498c:	01 c0       	rjmp	.+2      	; 0x4990 <decode_hexadecimal_string_bytes+0x68>
    498e:	80 e0       	ldi	r24, 0x00	; 0
    4990:	28 2f       	mov	r18, r24
    4992:	22 0f       	add	r18, r18
    4994:	48 2f       	mov	r20, r24
    4996:	50 e0       	ldi	r21, 0x00	; 0
    4998:	fe 01       	movw	r30, r28
    499a:	01 90       	ld	r0, Z+
    499c:	00 20       	and	r0, r0
    499e:	e9 f7       	brne	.-6      	; 0x499a <decode_hexadecimal_string_bytes+0x72>
    49a0:	31 97       	sbiw	r30, 0x01	; 1
    49a2:	ec 1b       	sub	r30, r28
    49a4:	fd 0b       	sbc	r31, r29
    49a6:	4e 17       	cp	r20, r30
    49a8:	5f 07       	cpc	r21, r31
    49aa:	10 f4       	brcc	.+4      	; 0x49b0 <decode_hexadecimal_string_bytes+0x88>
    49ac:	86 13       	cpse	r24, r22
    49ae:	ce cf       	rjmp	.-100    	; 0x494c <decode_hexadecimal_string_bytes+0x24>
    49b0:	df 91       	pop	r29
    49b2:	cf 91       	pop	r28
    49b4:	1f 91       	pop	r17
    49b6:	0f 91       	pop	r16
    49b8:	08 95       	ret

000049ba <_serialCallBack>:
    49ba:	80 91 e7 17 	lds	r24, 0x17E7	; 0x8017e7 <crc_sum.1945>
    49be:	86 0f       	add	r24, r22
    49c0:	80 93 e7 17 	sts	0x17E7, r24	; 0x8017e7 <crc_sum.1945>
    49c4:	90 91 ea 17 	lds	r25, 0x17EA	; 0x8017ea <_mh_state>
    49c8:	91 30       	cpi	r25, 0x01	; 1
    49ca:	79 f0       	breq	.+30     	; 0x49ea <_serialCallBack+0x30>
    49cc:	28 f0       	brcs	.+10     	; 0x49d8 <_serialCallBack+0x1e>
    49ce:	92 30       	cpi	r25, 0x02	; 2
    49d0:	a9 f0       	breq	.+42     	; 0x49fc <_serialCallBack+0x42>
    49d2:	93 30       	cpi	r25, 0x03	; 3
    49d4:	19 f1       	breq	.+70     	; 0x4a1c <_serialCallBack+0x62>
    49d6:	08 95       	ret
    49d8:	6f 3f       	cpi	r22, 0xFF	; 255
    49da:	09 f0       	breq	.+2      	; 0x49de <_serialCallBack+0x24>
    49dc:	48 c0       	rjmp	.+144    	; 0x4a6e <_serialCallBack+0xb4>
    49de:	10 92 e7 17 	sts	0x17E7, r1	; 0x8017e7 <crc_sum.1945>
    49e2:	81 e0       	ldi	r24, 0x01	; 1
    49e4:	80 93 ea 17 	sts	0x17EA, r24	; 0x8017ea <_mh_state>
    49e8:	08 95       	ret
    49ea:	66 38       	cpi	r22, 0x86	; 134
    49ec:	09 f0       	breq	.+2      	; 0x49f0 <_serialCallBack+0x36>
    49ee:	3f c0       	rjmp	.+126    	; 0x4a6e <_serialCallBack+0xb4>
    49f0:	10 92 e6 17 	sts	0x17E6, r1	; 0x8017e6 <inDex.1943>
    49f4:	82 e0       	ldi	r24, 0x02	; 2
    49f6:	80 93 ea 17 	sts	0x17EA, r24	; 0x8017ea <_mh_state>
    49fa:	08 95       	ret
    49fc:	e0 91 e6 17 	lds	r30, 0x17E6	; 0x8017e6 <inDex.1943>
    4a00:	81 e0       	ldi	r24, 0x01	; 1
    4a02:	8e 0f       	add	r24, r30
    4a04:	80 93 e6 17 	sts	0x17E6, r24	; 0x8017e6 <inDex.1943>
    4a08:	f0 e0       	ldi	r31, 0x00	; 0
    4a0a:	ec 51       	subi	r30, 0x1C	; 28
    4a0c:	f8 4e       	sbci	r31, 0xE8	; 232
    4a0e:	60 83       	st	Z, r22
    4a10:	82 30       	cpi	r24, 0x02	; 2
    4a12:	69 f5       	brne	.+90     	; 0x4a6e <_serialCallBack+0xb4>
    4a14:	83 e0       	ldi	r24, 0x03	; 3
    4a16:	80 93 ea 17 	sts	0x17EA, r24	; 0x8017ea <_mh_state>
    4a1a:	08 95       	ret
    4a1c:	90 91 e6 17 	lds	r25, 0x17E6	; 0x8017e6 <inDex.1943>
    4a20:	21 e0       	ldi	r18, 0x01	; 1
    4a22:	29 0f       	add	r18, r25
    4a24:	20 93 e6 17 	sts	0x17E6, r18	; 0x8017e6 <inDex.1943>
    4a28:	96 30       	cpi	r25, 0x06	; 6
    4a2a:	09 f5       	brne	.+66     	; 0x4a6e <_serialCallBack+0xb4>
    4a2c:	81 11       	cpse	r24, r1
    4a2e:	0e c0       	rjmp	.+28     	; 0x4a4c <_serialCallBack+0x92>
    4a30:	e4 ee       	ldi	r30, 0xE4	; 228
    4a32:	f7 e1       	ldi	r31, 0x17	; 23
    4a34:	80 81       	ld	r24, Z
    4a36:	90 e0       	ldi	r25, 0x00	; 0
    4a38:	98 2f       	mov	r25, r24
    4a3a:	88 27       	eor	r24, r24
    4a3c:	21 81       	ldd	r18, Z+1	; 0x01
    4a3e:	82 0f       	add	r24, r18
    4a40:	91 1d       	adc	r25, r1
    4a42:	90 93 ec 17 	sts	0x17EC, r25	; 0x8017ec <_ppm+0x1>
    4a46:	80 93 eb 17 	sts	0x17EB, r24	; 0x8017eb <_ppm>
    4a4a:	04 c0       	rjmp	.+8      	; 0x4a54 <_serialCallBack+0x9a>
    4a4c:	10 92 ec 17 	sts	0x17EC, r1	; 0x8017ec <_ppm+0x1>
    4a50:	10 92 eb 17 	sts	0x17EB, r1	; 0x8017eb <_ppm>
    4a54:	10 92 ea 17 	sts	0x17EA, r1	; 0x8017ea <_mh_state>
    4a58:	e0 91 e8 17 	lds	r30, 0x17E8	; 0x8017e8 <_appCallBack>
    4a5c:	f0 91 e9 17 	lds	r31, 0x17E9	; 0x8017e9 <_appCallBack+0x1>
    4a60:	30 97       	sbiw	r30, 0x00	; 0
    4a62:	29 f0       	breq	.+10     	; 0x4a6e <_serialCallBack+0xb4>
    4a64:	80 91 eb 17 	lds	r24, 0x17EB	; 0x8017eb <_ppm>
    4a68:	90 91 ec 17 	lds	r25, 0x17EC	; 0x8017ec <_ppm+0x1>
    4a6c:	19 95       	eicall
    4a6e:	08 95       	ret

00004a70 <mh_z19_initialise>:
    4a70:	8f 92       	push	r8
    4a72:	9f 92       	push	r9
    4a74:	af 92       	push	r10
    4a76:	cf 92       	push	r12
    4a78:	ef 92       	push	r14
    4a7a:	0f 93       	push	r16
    4a7c:	0f 2e       	mov	r0, r31
    4a7e:	fd ed       	ldi	r31, 0xDD	; 221
    4a80:	8f 2e       	mov	r8, r31
    4a82:	f4 e2       	ldi	r31, 0x24	; 36
    4a84:	9f 2e       	mov	r9, r31
    4a86:	f0 2d       	mov	r31, r0
    4a88:	68 94       	set
    4a8a:	aa 24       	eor	r10, r10
    4a8c:	a4 f8       	bld	r10, 4
    4a8e:	68 94       	set
    4a90:	cc 24       	eor	r12, r12
    4a92:	c4 f8       	bld	r12, 4
    4a94:	e1 2c       	mov	r14, r1
    4a96:	00 e0       	ldi	r16, 0x00	; 0
    4a98:	23 e0       	ldi	r18, 0x03	; 3
    4a9a:	40 e8       	ldi	r20, 0x80	; 128
    4a9c:	55 e2       	ldi	r21, 0x25	; 37
    4a9e:	60 e0       	ldi	r22, 0x00	; 0
    4aa0:	70 e0       	ldi	r23, 0x00	; 0
    4aa2:	d5 d0       	rcall	.+426    	; 0x4c4e <serial_create>
    4aa4:	90 93 ee 17 	sts	0x17EE, r25	; 0x8017ee <_serial+0x1>
    4aa8:	80 93 ed 17 	sts	0x17ED, r24	; 0x8017ed <_serial>
    4aac:	0f 91       	pop	r16
    4aae:	ef 90       	pop	r14
    4ab0:	cf 90       	pop	r12
    4ab2:	af 90       	pop	r10
    4ab4:	9f 90       	pop	r9
    4ab6:	8f 90       	pop	r8
    4ab8:	08 95       	ret

00004aba <mh_z19_injectCallBack>:
    4aba:	90 93 e9 17 	sts	0x17E9, r25	; 0x8017e9 <_appCallBack+0x1>
    4abe:	80 93 e8 17 	sts	0x17E8, r24	; 0x8017e8 <_appCallBack>
    4ac2:	08 95       	ret

00004ac4 <mh_z19_takeMeassuring>:
    4ac4:	cf 93       	push	r28
    4ac6:	df 93       	push	r29
    4ac8:	cd b7       	in	r28, 0x3d	; 61
    4aca:	de b7       	in	r29, 0x3e	; 62
    4acc:	29 97       	sbiw	r28, 0x09	; 9
    4ace:	0f b6       	in	r0, 0x3f	; 63
    4ad0:	f8 94       	cli
    4ad2:	de bf       	out	0x3e, r29	; 62
    4ad4:	0f be       	out	0x3f, r0	; 63
    4ad6:	cd bf       	out	0x3d, r28	; 61
    4ad8:	89 e0       	ldi	r24, 0x09	; 9
    4ada:	e2 e4       	ldi	r30, 0x42	; 66
    4adc:	f2 e0       	ldi	r31, 0x02	; 2
    4ade:	9e 01       	movw	r18, r28
    4ae0:	2f 5f       	subi	r18, 0xFF	; 255
    4ae2:	3f 4f       	sbci	r19, 0xFF	; 255
    4ae4:	d9 01       	movw	r26, r18
    4ae6:	01 90       	ld	r0, Z+
    4ae8:	0d 92       	st	X+, r0
    4aea:	8a 95       	dec	r24
    4aec:	e1 f7       	brne	.-8      	; 0x4ae6 <mh_z19_takeMeassuring+0x22>
    4aee:	10 92 ec 17 	sts	0x17EC, r1	; 0x8017ec <_ppm+0x1>
    4af2:	10 92 eb 17 	sts	0x17EB, r1	; 0x8017eb <_ppm>
    4af6:	80 91 ed 17 	lds	r24, 0x17ED	; 0x8017ed <_serial>
    4afa:	90 91 ee 17 	lds	r25, 0x17EE	; 0x8017ee <_serial+0x1>
    4afe:	00 97       	sbiw	r24, 0x00	; 0
    4b00:	31 f0       	breq	.+12     	; 0x4b0e <mh_z19_takeMeassuring+0x4a>
    4b02:	42 2f       	mov	r20, r18
    4b04:	53 2f       	mov	r21, r19
    4b06:	69 e0       	ldi	r22, 0x09	; 9
    4b08:	6c d1       	rcall	.+728    	; 0x4de2 <serial_sendBytes>
    4b0a:	80 e0       	ldi	r24, 0x00	; 0
    4b0c:	01 c0       	rjmp	.+2      	; 0x4b10 <mh_z19_takeMeassuring+0x4c>
    4b0e:	82 e0       	ldi	r24, 0x02	; 2
    4b10:	29 96       	adiw	r28, 0x09	; 9
    4b12:	0f b6       	in	r0, 0x3f	; 63
    4b14:	f8 94       	cli
    4b16:	de bf       	out	0x3e, r29	; 62
    4b18:	0f be       	out	0x3f, r0	; 63
    4b1a:	cd bf       	out	0x3d, r28	; 61
    4b1c:	df 91       	pop	r29
    4b1e:	cf 91       	pop	r28
    4b20:	08 95       	ret

00004b22 <rc_servo_setPosition>:
    4b22:	65 36       	cpi	r22, 0x65	; 101
    4b24:	0c f0       	brlt	.+2      	; 0x4b28 <rc_servo_setPosition+0x6>
    4b26:	64 e6       	ldi	r22, 0x64	; 100
    4b28:	6c 39       	cpi	r22, 0x9C	; 156
    4b2a:	0c f4       	brge	.+2      	; 0x4b2e <rc_servo_setPosition+0xc>
    4b2c:	6c e9       	ldi	r22, 0x9C	; 156
    4b2e:	96 ef       	ldi	r25, 0xF6	; 246
    4b30:	69 02       	muls	r22, r25
    4b32:	b0 01       	movw	r22, r0
    4b34:	11 24       	eor	r1, r1
    4b36:	68 54       	subi	r22, 0x48	; 72
    4b38:	74 4f       	sbci	r23, 0xF4	; 244
    4b3a:	81 11       	cpse	r24, r1
    4b3c:	05 c0       	rjmp	.+10     	; 0x4b48 <rc_servo_setPosition+0x26>
    4b3e:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
    4b42:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
    4b46:	08 95       	ret
    4b48:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x7c012b>
    4b4c:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x7c012a>
    4b50:	08 95       	ret

00004b52 <rc_servo_initialise>:
    4b52:	ea e0       	ldi	r30, 0x0A	; 10
    4b54:	f1 e0       	ldi	r31, 0x01	; 1
    4b56:	80 81       	ld	r24, Z
    4b58:	88 61       	ori	r24, 0x18	; 24
    4b5a:	80 83       	st	Z, r24
    4b5c:	8f e3       	ldi	r24, 0x3F	; 63
    4b5e:	9c e9       	ldi	r25, 0x9C	; 156
    4b60:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
    4b64:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
    4b68:	60 e0       	ldi	r22, 0x00	; 0
    4b6a:	80 e0       	ldi	r24, 0x00	; 0
    4b6c:	da df       	rcall	.-76     	; 0x4b22 <rc_servo_setPosition>
    4b6e:	60 e0       	ldi	r22, 0x00	; 0
    4b70:	81 e0       	ldi	r24, 0x01	; 1
    4b72:	d7 df       	rcall	.-82     	; 0x4b22 <rc_servo_setPosition>
    4b74:	e0 e2       	ldi	r30, 0x20	; 32
    4b76:	f1 e0       	ldi	r31, 0x01	; 1
    4b78:	80 81       	ld	r24, Z
    4b7a:	82 6a       	ori	r24, 0xA2	; 162
    4b7c:	80 83       	st	Z, r24
    4b7e:	e1 e2       	ldi	r30, 0x21	; 33
    4b80:	f1 e0       	ldi	r31, 0x01	; 1
    4b82:	80 81       	ld	r24, Z
    4b84:	8a 61       	ori	r24, 0x1A	; 26
    4b86:	80 83       	st	Z, r24
    4b88:	08 95       	ret

00004b8a <_startConversion>:
    4b8a:	ec e7       	ldi	r30, 0x7C	; 124
    4b8c:	f0 e0       	ldi	r31, 0x00	; 0
    4b8e:	80 81       	ld	r24, Z
    4b90:	80 7e       	andi	r24, 0xE0	; 224
    4b92:	80 83       	st	Z, r24
    4b94:	ab e7       	ldi	r26, 0x7B	; 123
    4b96:	b0 e0       	ldi	r27, 0x00	; 0
    4b98:	8c 91       	ld	r24, X
    4b9a:	88 60       	ori	r24, 0x08	; 8
    4b9c:	8c 93       	st	X, r24
    4b9e:	80 81       	ld	r24, Z
    4ba0:	82 60       	ori	r24, 0x02	; 2
    4ba2:	80 83       	st	Z, r24
    4ba4:	ea e7       	ldi	r30, 0x7A	; 122
    4ba6:	f0 e0       	ldi	r31, 0x00	; 0
    4ba8:	80 81       	ld	r24, Z
    4baa:	80 64       	ori	r24, 0x40	; 64
    4bac:	80 83       	st	Z, r24
    4bae:	08 95       	ret

00004bb0 <sen14262_initialise>:
    4bb0:	6c 98       	cbi	0x0d, 4	; 13
    4bb2:	ec e7       	ldi	r30, 0x7C	; 124
    4bb4:	f0 e0       	ldi	r31, 0x00	; 0
    4bb6:	80 81       	ld	r24, Z
    4bb8:	80 6c       	ori	r24, 0xC0	; 192
    4bba:	80 83       	st	Z, r24
    4bbc:	ea e7       	ldi	r30, 0x7A	; 122
    4bbe:	f0 e0       	ldi	r31, 0x00	; 0
    4bc0:	80 81       	ld	r24, Z
    4bc2:	87 60       	ori	r24, 0x07	; 7
    4bc4:	80 83       	st	Z, r24
    4bc6:	80 81       	ld	r24, Z
    4bc8:	88 60       	ori	r24, 0x08	; 8
    4bca:	80 83       	st	Z, r24
    4bcc:	ad e7       	ldi	r26, 0x7D	; 125
    4bce:	b0 e0       	ldi	r27, 0x00	; 0
    4bd0:	8c 91       	ld	r24, X
    4bd2:	86 60       	ori	r24, 0x06	; 6
    4bd4:	8c 93       	st	X, r24
    4bd6:	80 81       	ld	r24, Z
    4bd8:	80 68       	ori	r24, 0x80	; 128
    4bda:	80 83       	st	Z, r24
    4bdc:	d6 cf       	rjmp	.-84     	; 0x4b8a <_startConversion>
    4bde:	08 95       	ret

00004be0 <sen14262_envelope>:
    4be0:	2f b7       	in	r18, 0x3f	; 63
    4be2:	f8 94       	cli
    4be4:	80 91 ef 17 	lds	r24, 0x17EF	; 0x8017ef <_lastAdc>
    4be8:	90 91 f0 17 	lds	r25, 0x17F0	; 0x8017f0 <_lastAdc+0x1>
    4bec:	2f bf       	out	0x3f, r18	; 63
    4bee:	08 95       	ret

00004bf0 <__vector_29>:
    4bf0:	1f 92       	push	r1
    4bf2:	0f 92       	push	r0
    4bf4:	0f b6       	in	r0, 0x3f	; 63
    4bf6:	0f 92       	push	r0
    4bf8:	11 24       	eor	r1, r1
    4bfa:	0b b6       	in	r0, 0x3b	; 59
    4bfc:	0f 92       	push	r0
    4bfe:	2f 93       	push	r18
    4c00:	3f 93       	push	r19
    4c02:	4f 93       	push	r20
    4c04:	5f 93       	push	r21
    4c06:	6f 93       	push	r22
    4c08:	7f 93       	push	r23
    4c0a:	8f 93       	push	r24
    4c0c:	9f 93       	push	r25
    4c0e:	af 93       	push	r26
    4c10:	bf 93       	push	r27
    4c12:	ef 93       	push	r30
    4c14:	ff 93       	push	r31
    4c16:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
    4c1a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
    4c1e:	90 93 f0 17 	sts	0x17F0, r25	; 0x8017f0 <_lastAdc+0x1>
    4c22:	80 93 ef 17 	sts	0x17EF, r24	; 0x8017ef <_lastAdc>
    4c26:	b1 df       	rcall	.-158    	; 0x4b8a <_startConversion>
    4c28:	ff 91       	pop	r31
    4c2a:	ef 91       	pop	r30
    4c2c:	bf 91       	pop	r27
    4c2e:	af 91       	pop	r26
    4c30:	9f 91       	pop	r25
    4c32:	8f 91       	pop	r24
    4c34:	7f 91       	pop	r23
    4c36:	6f 91       	pop	r22
    4c38:	5f 91       	pop	r21
    4c3a:	4f 91       	pop	r20
    4c3c:	3f 91       	pop	r19
    4c3e:	2f 91       	pop	r18
    4c40:	0f 90       	pop	r0
    4c42:	0b be       	out	0x3b, r0	; 59
    4c44:	0f 90       	pop	r0
    4c46:	0f be       	out	0x3f, r0	; 63
    4c48:	0f 90       	pop	r0
    4c4a:	1f 90       	pop	r1
    4c4c:	18 95       	reti

00004c4e <serial_create>:
    4c4e:	2f 92       	push	r2
    4c50:	3f 92       	push	r3
    4c52:	4f 92       	push	r4
    4c54:	5f 92       	push	r5
    4c56:	6f 92       	push	r6
    4c58:	7f 92       	push	r7
    4c5a:	8f 92       	push	r8
    4c5c:	9f 92       	push	r9
    4c5e:	af 92       	push	r10
    4c60:	cf 92       	push	r12
    4c62:	ef 92       	push	r14
    4c64:	ff 92       	push	r15
    4c66:	0f 93       	push	r16
    4c68:	1f 93       	push	r17
    4c6a:	cf 93       	push	r28
    4c6c:	df 93       	push	r29
    4c6e:	cd b7       	in	r28, 0x3d	; 61
    4c70:	de b7       	in	r29, 0x3e	; 62
    4c72:	f8 2e       	mov	r15, r24
    4c74:	2a 01       	movw	r4, r20
    4c76:	3b 01       	movw	r6, r22
    4c78:	88 e0       	ldi	r24, 0x08	; 8
    4c7a:	90 e0       	ldi	r25, 0x00	; 0
    4c7c:	0e 94 68 2e 	call	0x5cd0	; 0x5cd0 <malloc>
    4c80:	8c 01       	movw	r16, r24
    4c82:	8f 2d       	mov	r24, r15
    4c84:	90 e0       	ldi	r25, 0x00	; 0
    4c86:	fc 01       	movw	r30, r24
    4c88:	ee 0f       	add	r30, r30
    4c8a:	ff 1f       	adc	r31, r31
    4c8c:	ef 50       	subi	r30, 0x0F	; 15
    4c8e:	f8 4e       	sbci	r31, 0xE8	; 232
    4c90:	11 83       	std	Z+1, r17	; 0x01
    4c92:	00 83       	st	Z, r16
    4c94:	01 15       	cp	r16, r1
    4c96:	11 05       	cpc	r17, r1
    4c98:	09 f4       	brne	.+2      	; 0x4c9c <serial_create+0x4e>
    4c9a:	66 c0       	rjmp	.+204    	; 0x4d68 <serial_create+0x11a>
    4c9c:	88 0f       	add	r24, r24
    4c9e:	99 1f       	adc	r25, r25
    4ca0:	fc 01       	movw	r30, r24
    4ca2:	e5 5f       	subi	r30, 0xF5	; 245
    4ca4:	fd 4f       	sbci	r31, 0xFD	; 253
    4ca6:	80 81       	ld	r24, Z
    4ca8:	91 81       	ldd	r25, Z+1	; 0x01
    4caa:	d8 01       	movw	r26, r16
    4cac:	8d 93       	st	X+, r24
    4cae:	9c 93       	st	X, r25
    4cb0:	8c 2d       	mov	r24, r12
    4cb2:	90 e0       	ldi	r25, 0x00	; 0
    4cb4:	88 0f       	add	r24, r24
    4cb6:	99 1f       	adc	r25, r25
    4cb8:	88 0f       	add	r24, r24
    4cba:	99 1f       	adc	r25, r25
    4cbc:	0e 94 68 2e 	call	0x5cd0	; 0x5cd0 <malloc>
    4cc0:	1c 01       	movw	r2, r24
    4cc2:	86 e0       	ldi	r24, 0x06	; 6
    4cc4:	90 e0       	ldi	r25, 0x00	; 0
    4cc6:	0e 94 68 2e 	call	0x5cd0	; 0x5cd0 <malloc>
    4cca:	7c 01       	movw	r14, r24
    4ccc:	4c 2d       	mov	r20, r12
    4cce:	b1 01       	movw	r22, r2
    4cd0:	ca d5       	rcall	.+2964   	; 0x5866 <fifo_init>
    4cd2:	f8 01       	movw	r30, r16
    4cd4:	f5 82       	std	Z+5, r15	; 0x05
    4cd6:	e4 82       	std	Z+4, r14	; 0x04
    4cd8:	8a 2d       	mov	r24, r10
    4cda:	90 e0       	ldi	r25, 0x00	; 0
    4cdc:	88 0f       	add	r24, r24
    4cde:	99 1f       	adc	r25, r25
    4ce0:	88 0f       	add	r24, r24
    4ce2:	99 1f       	adc	r25, r25
    4ce4:	f5 d7       	rcall	.+4074   	; 0x5cd0 <malloc>
    4ce6:	1c 01       	movw	r2, r24
    4ce8:	86 e0       	ldi	r24, 0x06	; 6
    4cea:	90 e0       	ldi	r25, 0x00	; 0
    4cec:	f1 d7       	rcall	.+4066   	; 0x5cd0 <malloc>
    4cee:	7c 01       	movw	r14, r24
    4cf0:	4a 2d       	mov	r20, r10
    4cf2:	b1 01       	movw	r22, r2
    4cf4:	b8 d5       	rcall	.+2928   	; 0x5866 <fifo_init>
    4cf6:	d8 01       	movw	r26, r16
    4cf8:	13 96       	adiw	r26, 0x03	; 3
    4cfa:	fc 92       	st	X, r15
    4cfc:	ee 92       	st	-X, r14
    4cfe:	12 97       	sbiw	r26, 0x02	; 2
    4d00:	17 96       	adiw	r26, 0x07	; 7
    4d02:	9c 92       	st	X, r9
    4d04:	8e 92       	st	-X, r8
    4d06:	16 97       	sbiw	r26, 0x06	; 6
    4d08:	ff b6       	in	r15, 0x3f	; 63
    4d0a:	f8 94       	cli
    4d0c:	ed 91       	ld	r30, X+
    4d0e:	fc 91       	ld	r31, X
    4d10:	11 97       	sbiw	r26, 0x01	; 1
    4d12:	36 97       	sbiw	r30, 0x06	; 6
    4d14:	80 81       	ld	r24, Z
    4d16:	82 60       	ori	r24, 0x02	; 2
    4d18:	80 83       	st	Z, r24
    4d1a:	8d 90       	ld	r8, X+
    4d1c:	9c 90       	ld	r9, X
    4d1e:	c3 01       	movw	r24, r6
    4d20:	b2 01       	movw	r22, r4
    4d22:	bb d6       	rcall	.+3446   	; 0x5a9a <__floatunsisf>
    4d24:	20 e0       	ldi	r18, 0x00	; 0
    4d26:	30 e0       	ldi	r19, 0x00	; 0
    4d28:	40 e0       	ldi	r20, 0x00	; 0
    4d2a:	51 e4       	ldi	r21, 0x41	; 65
    4d2c:	44 d7       	rcall	.+3720   	; 0x5bb6 <__mulsf3>
    4d2e:	9b 01       	movw	r18, r22
    4d30:	ac 01       	movw	r20, r24
    4d32:	60 e0       	ldi	r22, 0x00	; 0
    4d34:	74 e2       	ldi	r23, 0x24	; 36
    4d36:	84 e7       	ldi	r24, 0x74	; 116
    4d38:	9b e4       	ldi	r25, 0x4B	; 75
    4d3a:	16 d6       	rcall	.+3116   	; 0x5968 <__divsf3>
    4d3c:	20 e0       	ldi	r18, 0x00	; 0
    4d3e:	30 e0       	ldi	r19, 0x00	; 0
    4d40:	40 e8       	ldi	r20, 0x80	; 128
    4d42:	5f e3       	ldi	r21, 0x3F	; 63
    4d44:	ac d5       	rcall	.+2904   	; 0x589e <__subsf3>
    4d46:	7d d6       	rcall	.+3322   	; 0x5a42 <__fixunssfsi>
    4d48:	f4 01       	movw	r30, r8
    4d4a:	32 97       	sbiw	r30, 0x02	; 2
    4d4c:	60 83       	st	Z, r22
    4d4e:	d8 01       	movw	r26, r16
    4d50:	ed 91       	ld	r30, X+
    4d52:	fc 91       	ld	r31, X
    4d54:	11 97       	sbiw	r26, 0x01	; 1
    4d56:	35 97       	sbiw	r30, 0x05	; 5
    4d58:	88 e9       	ldi	r24, 0x98	; 152
    4d5a:	80 83       	st	Z, r24
    4d5c:	ed 91       	ld	r30, X+
    4d5e:	fc 91       	ld	r31, X
    4d60:	34 97       	sbiw	r30, 0x04	; 4
    4d62:	86 e0       	ldi	r24, 0x06	; 6
    4d64:	80 83       	st	Z, r24
    4d66:	ff be       	out	0x3f, r15	; 63
    4d68:	c8 01       	movw	r24, r16
    4d6a:	df 91       	pop	r29
    4d6c:	cf 91       	pop	r28
    4d6e:	1f 91       	pop	r17
    4d70:	0f 91       	pop	r16
    4d72:	ff 90       	pop	r15
    4d74:	ef 90       	pop	r14
    4d76:	cf 90       	pop	r12
    4d78:	af 90       	pop	r10
    4d7a:	9f 90       	pop	r9
    4d7c:	8f 90       	pop	r8
    4d7e:	7f 90       	pop	r7
    4d80:	6f 90       	pop	r6
    4d82:	5f 90       	pop	r5
    4d84:	4f 90       	pop	r4
    4d86:	3f 90       	pop	r3
    4d88:	2f 90       	pop	r2
    4d8a:	08 95       	ret

00004d8c <serial_sendByte>:
    4d8c:	cf 93       	push	r28
    4d8e:	df 93       	push	r29
    4d90:	dc 01       	movw	r26, r24
    4d92:	89 2b       	or	r24, r25
    4d94:	01 f1       	breq	.+64     	; 0x4dd6 <serial_sendByte+0x4a>
    4d96:	12 96       	adiw	r26, 0x02	; 2
    4d98:	ed 91       	ld	r30, X+
    4d9a:	fc 91       	ld	r31, X
    4d9c:	13 97       	sbiw	r26, 0x03	; 3
    4d9e:	93 81       	ldd	r25, Z+3	; 0x03
    4da0:	82 81       	ldd	r24, Z+2	; 0x02
    4da2:	25 81       	ldd	r18, Z+5	; 0x05
    4da4:	98 1b       	sub	r25, r24
    4da6:	92 23       	and	r25, r18
    4da8:	84 81       	ldd	r24, Z+4	; 0x04
    4daa:	98 17       	cp	r25, r24
    4dac:	b1 f0       	breq	.+44     	; 0x4dda <serial_sendByte+0x4e>
    4dae:	83 81       	ldd	r24, Z+3	; 0x03
    4db0:	26 95       	lsr	r18
    4db2:	28 23       	and	r18, r24
    4db4:	c0 81       	ld	r28, Z
    4db6:	d1 81       	ldd	r29, Z+1	; 0x01
    4db8:	c2 0f       	add	r28, r18
    4dba:	d1 1d       	adc	r29, r1
    4dbc:	68 83       	st	Y, r22
    4dbe:	8f 5f       	subi	r24, 0xFF	; 255
    4dc0:	95 81       	ldd	r25, Z+5	; 0x05
    4dc2:	89 23       	and	r24, r25
    4dc4:	83 83       	std	Z+3, r24	; 0x03
    4dc6:	ed 91       	ld	r30, X+
    4dc8:	fc 91       	ld	r31, X
    4dca:	35 97       	sbiw	r30, 0x05	; 5
    4dcc:	80 81       	ld	r24, Z
    4dce:	80 62       	ori	r24, 0x20	; 32
    4dd0:	80 83       	st	Z, r24
    4dd2:	80 e0       	ldi	r24, 0x00	; 0
    4dd4:	03 c0       	rjmp	.+6      	; 0x4ddc <serial_sendByte+0x50>
    4dd6:	81 e0       	ldi	r24, 0x01	; 1
    4dd8:	01 c0       	rjmp	.+2      	; 0x4ddc <serial_sendByte+0x50>
    4dda:	82 e0       	ldi	r24, 0x02	; 2
    4ddc:	df 91       	pop	r29
    4dde:	cf 91       	pop	r28
    4de0:	08 95       	ret

00004de2 <serial_sendBytes>:
    4de2:	ef 92       	push	r14
    4de4:	ff 92       	push	r15
    4de6:	0f 93       	push	r16
    4de8:	1f 93       	push	r17
    4dea:	cf 93       	push	r28
    4dec:	df 93       	push	r29
    4dee:	7c 01       	movw	r14, r24
    4df0:	00 97       	sbiw	r24, 0x00	; 0
    4df2:	09 f4       	brne	.+2      	; 0x4df6 <serial_sendBytes+0x14>
    4df4:	41 c0       	rjmp	.+130    	; 0x4e78 <serial_sendBytes+0x96>
    4df6:	dc 01       	movw	r26, r24
    4df8:	12 96       	adiw	r26, 0x02	; 2
    4dfa:	ed 91       	ld	r30, X+
    4dfc:	fc 91       	ld	r31, X
    4dfe:	13 97       	sbiw	r26, 0x03	; 3
    4e00:	93 81       	ldd	r25, Z+3	; 0x03
    4e02:	82 81       	ldd	r24, Z+2	; 0x02
    4e04:	98 1b       	sub	r25, r24
    4e06:	85 81       	ldd	r24, Z+5	; 0x05
    4e08:	98 23       	and	r25, r24
    4e0a:	84 81       	ldd	r24, Z+4	; 0x04
    4e0c:	89 1b       	sub	r24, r25
    4e0e:	86 17       	cp	r24, r22
    4e10:	a8 f1       	brcs	.+106    	; 0x4e7c <serial_sendBytes+0x9a>
    4e12:	66 23       	and	r22, r22
    4e14:	41 f1       	breq	.+80     	; 0x4e66 <serial_sendBytes+0x84>
    4e16:	84 2f       	mov	r24, r20
    4e18:	95 2f       	mov	r25, r21
    4e1a:	dc 01       	movw	r26, r24
    4e1c:	61 50       	subi	r22, 0x01	; 1
    4e1e:	46 2f       	mov	r20, r22
    4e20:	50 e0       	ldi	r21, 0x00	; 0
    4e22:	4f 5f       	subi	r20, 0xFF	; 255
    4e24:	5f 4f       	sbci	r21, 0xFF	; 255
    4e26:	48 0f       	add	r20, r24
    4e28:	59 1f       	adc	r21, r25
    4e2a:	e7 01       	movw	r28, r14
    4e2c:	ea 81       	ldd	r30, Y+2	; 0x02
    4e2e:	fb 81       	ldd	r31, Y+3	; 0x03
    4e30:	93 81       	ldd	r25, Z+3	; 0x03
    4e32:	82 81       	ldd	r24, Z+2	; 0x02
    4e34:	25 81       	ldd	r18, Z+5	; 0x05
    4e36:	98 1b       	sub	r25, r24
    4e38:	92 23       	and	r25, r18
    4e3a:	84 81       	ldd	r24, Z+4	; 0x04
    4e3c:	98 17       	cp	r25, r24
    4e3e:	79 f0       	breq	.+30     	; 0x4e5e <serial_sendBytes+0x7c>
    4e40:	8c 91       	ld	r24, X
    4e42:	93 81       	ldd	r25, Z+3	; 0x03
    4e44:	26 95       	lsr	r18
    4e46:	29 23       	and	r18, r25
    4e48:	60 81       	ld	r22, Z
    4e4a:	71 81       	ldd	r23, Z+1	; 0x01
    4e4c:	8b 01       	movw	r16, r22
    4e4e:	02 0f       	add	r16, r18
    4e50:	11 1d       	adc	r17, r1
    4e52:	e8 01       	movw	r28, r16
    4e54:	88 83       	st	Y, r24
    4e56:	9f 5f       	subi	r25, 0xFF	; 255
    4e58:	85 81       	ldd	r24, Z+5	; 0x05
    4e5a:	98 23       	and	r25, r24
    4e5c:	93 83       	std	Z+3, r25	; 0x03
    4e5e:	11 96       	adiw	r26, 0x01	; 1
    4e60:	a4 17       	cp	r26, r20
    4e62:	b5 07       	cpc	r27, r21
    4e64:	11 f7       	brne	.-60     	; 0x4e2a <serial_sendBytes+0x48>
    4e66:	d7 01       	movw	r26, r14
    4e68:	ed 91       	ld	r30, X+
    4e6a:	fc 91       	ld	r31, X
    4e6c:	35 97       	sbiw	r30, 0x05	; 5
    4e6e:	80 81       	ld	r24, Z
    4e70:	80 62       	ori	r24, 0x20	; 32
    4e72:	80 83       	st	Z, r24
    4e74:	80 e0       	ldi	r24, 0x00	; 0
    4e76:	03 c0       	rjmp	.+6      	; 0x4e7e <serial_sendBytes+0x9c>
    4e78:	81 e0       	ldi	r24, 0x01	; 1
    4e7a:	01 c0       	rjmp	.+2      	; 0x4e7e <serial_sendBytes+0x9c>
    4e7c:	82 e0       	ldi	r24, 0x02	; 2
    4e7e:	df 91       	pop	r29
    4e80:	cf 91       	pop	r28
    4e82:	1f 91       	pop	r17
    4e84:	0f 91       	pop	r16
    4e86:	ff 90       	pop	r15
    4e88:	ef 90       	pop	r14
    4e8a:	08 95       	ret

00004e8c <serial_getByte>:
    4e8c:	00 97       	sbiw	r24, 0x00	; 0
    4e8e:	d1 f0       	breq	.+52     	; 0x4ec4 <serial_getByte+0x38>
    4e90:	dc 01       	movw	r26, r24
    4e92:	14 96       	adiw	r26, 0x04	; 4
    4e94:	ed 91       	ld	r30, X+
    4e96:	fc 91       	ld	r31, X
    4e98:	15 97       	sbiw	r26, 0x05	; 5
    4e9a:	93 81       	ldd	r25, Z+3	; 0x03
    4e9c:	82 81       	ldd	r24, Z+2	; 0x02
    4e9e:	98 17       	cp	r25, r24
    4ea0:	99 f0       	breq	.+38     	; 0x4ec8 <serial_getByte+0x3c>
    4ea2:	92 81       	ldd	r25, Z+2	; 0x02
    4ea4:	85 81       	ldd	r24, Z+5	; 0x05
    4ea6:	86 95       	lsr	r24
    4ea8:	89 23       	and	r24, r25
    4eaa:	a0 81       	ld	r26, Z
    4eac:	b1 81       	ldd	r27, Z+1	; 0x01
    4eae:	a8 0f       	add	r26, r24
    4eb0:	b1 1d       	adc	r27, r1
    4eb2:	8c 91       	ld	r24, X
    4eb4:	db 01       	movw	r26, r22
    4eb6:	8c 93       	st	X, r24
    4eb8:	9f 5f       	subi	r25, 0xFF	; 255
    4eba:	85 81       	ldd	r24, Z+5	; 0x05
    4ebc:	98 23       	and	r25, r24
    4ebe:	92 83       	std	Z+2, r25	; 0x02
    4ec0:	80 e0       	ldi	r24, 0x00	; 0
    4ec2:	08 95       	ret
    4ec4:	81 e0       	ldi	r24, 0x01	; 1
    4ec6:	08 95       	ret
    4ec8:	83 e0       	ldi	r24, 0x03	; 3
    4eca:	08 95       	ret

00004ecc <__vector_25>:
    4ecc:	1f 92       	push	r1
    4ece:	0f 92       	push	r0
    4ed0:	0f b6       	in	r0, 0x3f	; 63
    4ed2:	0f 92       	push	r0
    4ed4:	11 24       	eor	r1, r1
    4ed6:	0b b6       	in	r0, 0x3b	; 59
    4ed8:	0f 92       	push	r0
    4eda:	2f 93       	push	r18
    4edc:	3f 93       	push	r19
    4ede:	4f 93       	push	r20
    4ee0:	5f 93       	push	r21
    4ee2:	6f 93       	push	r22
    4ee4:	7f 93       	push	r23
    4ee6:	8f 93       	push	r24
    4ee8:	9f 93       	push	r25
    4eea:	af 93       	push	r26
    4eec:	bf 93       	push	r27
    4eee:	cf 93       	push	r28
    4ef0:	df 93       	push	r29
    4ef2:	ef 93       	push	r30
    4ef4:	ff 93       	push	r31
    4ef6:	a0 91 f1 17 	lds	r26, 0x17F1	; 0x8017f1 <_ser_handle>
    4efa:	b0 91 f2 17 	lds	r27, 0x17F2	; 0x8017f2 <_ser_handle+0x1>
    4efe:	10 97       	sbiw	r26, 0x00	; 0
    4f00:	11 f1       	breq	.+68     	; 0x4f46 <__vector_25+0x7a>
    4f02:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4f06:	14 96       	adiw	r26, 0x04	; 4
    4f08:	ed 91       	ld	r30, X+
    4f0a:	fc 91       	ld	r31, X
    4f0c:	15 97       	sbiw	r26, 0x05	; 5
    4f0e:	93 81       	ldd	r25, Z+3	; 0x03
    4f10:	82 81       	ldd	r24, Z+2	; 0x02
    4f12:	25 81       	ldd	r18, Z+5	; 0x05
    4f14:	98 1b       	sub	r25, r24
    4f16:	92 23       	and	r25, r18
    4f18:	84 81       	ldd	r24, Z+4	; 0x04
    4f1a:	98 17       	cp	r25, r24
    4f1c:	61 f0       	breq	.+24     	; 0x4f36 <__vector_25+0x6a>
    4f1e:	83 81       	ldd	r24, Z+3	; 0x03
    4f20:	26 95       	lsr	r18
    4f22:	28 23       	and	r18, r24
    4f24:	c0 81       	ld	r28, Z
    4f26:	d1 81       	ldd	r29, Z+1	; 0x01
    4f28:	c2 0f       	add	r28, r18
    4f2a:	d1 1d       	adc	r29, r1
    4f2c:	68 83       	st	Y, r22
    4f2e:	8f 5f       	subi	r24, 0xFF	; 255
    4f30:	95 81       	ldd	r25, Z+5	; 0x05
    4f32:	89 23       	and	r24, r25
    4f34:	83 83       	std	Z+3, r24	; 0x03
    4f36:	16 96       	adiw	r26, 0x06	; 6
    4f38:	ed 91       	ld	r30, X+
    4f3a:	fc 91       	ld	r31, X
    4f3c:	17 97       	sbiw	r26, 0x07	; 7
    4f3e:	30 97       	sbiw	r30, 0x00	; 0
    4f40:	11 f0       	breq	.+4      	; 0x4f46 <__vector_25+0x7a>
    4f42:	cd 01       	movw	r24, r26
    4f44:	19 95       	eicall
    4f46:	ff 91       	pop	r31
    4f48:	ef 91       	pop	r30
    4f4a:	df 91       	pop	r29
    4f4c:	cf 91       	pop	r28
    4f4e:	bf 91       	pop	r27
    4f50:	af 91       	pop	r26
    4f52:	9f 91       	pop	r25
    4f54:	8f 91       	pop	r24
    4f56:	7f 91       	pop	r23
    4f58:	6f 91       	pop	r22
    4f5a:	5f 91       	pop	r21
    4f5c:	4f 91       	pop	r20
    4f5e:	3f 91       	pop	r19
    4f60:	2f 91       	pop	r18
    4f62:	0f 90       	pop	r0
    4f64:	0b be       	out	0x3b, r0	; 59
    4f66:	0f 90       	pop	r0
    4f68:	0f be       	out	0x3f, r0	; 63
    4f6a:	0f 90       	pop	r0
    4f6c:	1f 90       	pop	r1
    4f6e:	18 95       	reti

00004f70 <__vector_26>:
    4f70:	1f 92       	push	r1
    4f72:	0f 92       	push	r0
    4f74:	0f b6       	in	r0, 0x3f	; 63
    4f76:	0f 92       	push	r0
    4f78:	11 24       	eor	r1, r1
    4f7a:	0b b6       	in	r0, 0x3b	; 59
    4f7c:	0f 92       	push	r0
    4f7e:	2f 93       	push	r18
    4f80:	8f 93       	push	r24
    4f82:	9f 93       	push	r25
    4f84:	af 93       	push	r26
    4f86:	bf 93       	push	r27
    4f88:	ef 93       	push	r30
    4f8a:	ff 93       	push	r31
    4f8c:	e0 91 f1 17 	lds	r30, 0x17F1	; 0x8017f1 <_ser_handle>
    4f90:	f0 91 f2 17 	lds	r31, 0x17F2	; 0x8017f2 <_ser_handle+0x1>
    4f94:	30 97       	sbiw	r30, 0x00	; 0
    4f96:	b9 f0       	breq	.+46     	; 0x4fc6 <__vector_26+0x56>
    4f98:	02 80       	ldd	r0, Z+2	; 0x02
    4f9a:	f3 81       	ldd	r31, Z+3	; 0x03
    4f9c:	e0 2d       	mov	r30, r0
    4f9e:	93 81       	ldd	r25, Z+3	; 0x03
    4fa0:	82 81       	ldd	r24, Z+2	; 0x02
    4fa2:	98 17       	cp	r25, r24
    4fa4:	b1 f0       	breq	.+44     	; 0x4fd2 <__vector_26+0x62>
    4fa6:	92 81       	ldd	r25, Z+2	; 0x02
    4fa8:	85 81       	ldd	r24, Z+5	; 0x05
    4faa:	28 2f       	mov	r18, r24
    4fac:	26 95       	lsr	r18
    4fae:	29 23       	and	r18, r25
    4fb0:	a0 81       	ld	r26, Z
    4fb2:	b1 81       	ldd	r27, Z+1	; 0x01
    4fb4:	a2 0f       	add	r26, r18
    4fb6:	b1 1d       	adc	r27, r1
    4fb8:	2c 91       	ld	r18, X
    4fba:	9f 5f       	subi	r25, 0xFF	; 255
    4fbc:	89 23       	and	r24, r25
    4fbe:	82 83       	std	Z+2, r24	; 0x02
    4fc0:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4fc4:	0b c0       	rjmp	.+22     	; 0x4fdc <__vector_26+0x6c>
    4fc6:	e1 ec       	ldi	r30, 0xC1	; 193
    4fc8:	f0 e0       	ldi	r31, 0x00	; 0
    4fca:	80 81       	ld	r24, Z
    4fcc:	8f 7d       	andi	r24, 0xDF	; 223
    4fce:	80 83       	st	Z, r24
    4fd0:	05 c0       	rjmp	.+10     	; 0x4fdc <__vector_26+0x6c>
    4fd2:	e1 ec       	ldi	r30, 0xC1	; 193
    4fd4:	f0 e0       	ldi	r31, 0x00	; 0
    4fd6:	80 81       	ld	r24, Z
    4fd8:	8f 7d       	andi	r24, 0xDF	; 223
    4fda:	80 83       	st	Z, r24
    4fdc:	ff 91       	pop	r31
    4fde:	ef 91       	pop	r30
    4fe0:	bf 91       	pop	r27
    4fe2:	af 91       	pop	r26
    4fe4:	9f 91       	pop	r25
    4fe6:	8f 91       	pop	r24
    4fe8:	2f 91       	pop	r18
    4fea:	0f 90       	pop	r0
    4fec:	0b be       	out	0x3b, r0	; 59
    4fee:	0f 90       	pop	r0
    4ff0:	0f be       	out	0x3f, r0	; 63
    4ff2:	0f 90       	pop	r0
    4ff4:	1f 90       	pop	r1
    4ff6:	18 95       	reti

00004ff8 <__vector_36>:
    4ff8:	1f 92       	push	r1
    4ffa:	0f 92       	push	r0
    4ffc:	0f b6       	in	r0, 0x3f	; 63
    4ffe:	0f 92       	push	r0
    5000:	11 24       	eor	r1, r1
    5002:	0b b6       	in	r0, 0x3b	; 59
    5004:	0f 92       	push	r0
    5006:	2f 93       	push	r18
    5008:	3f 93       	push	r19
    500a:	4f 93       	push	r20
    500c:	5f 93       	push	r21
    500e:	6f 93       	push	r22
    5010:	7f 93       	push	r23
    5012:	8f 93       	push	r24
    5014:	9f 93       	push	r25
    5016:	af 93       	push	r26
    5018:	bf 93       	push	r27
    501a:	cf 93       	push	r28
    501c:	df 93       	push	r29
    501e:	ef 93       	push	r30
    5020:	ff 93       	push	r31
    5022:	a0 91 f3 17 	lds	r26, 0x17F3	; 0x8017f3 <_ser_handle+0x2>
    5026:	b0 91 f4 17 	lds	r27, 0x17F4	; 0x8017f4 <_ser_handle+0x3>
    502a:	10 97       	sbiw	r26, 0x00	; 0
    502c:	11 f1       	breq	.+68     	; 0x5072 <__vector_36+0x7a>
    502e:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    5032:	14 96       	adiw	r26, 0x04	; 4
    5034:	ed 91       	ld	r30, X+
    5036:	fc 91       	ld	r31, X
    5038:	15 97       	sbiw	r26, 0x05	; 5
    503a:	93 81       	ldd	r25, Z+3	; 0x03
    503c:	82 81       	ldd	r24, Z+2	; 0x02
    503e:	25 81       	ldd	r18, Z+5	; 0x05
    5040:	98 1b       	sub	r25, r24
    5042:	92 23       	and	r25, r18
    5044:	84 81       	ldd	r24, Z+4	; 0x04
    5046:	98 17       	cp	r25, r24
    5048:	61 f0       	breq	.+24     	; 0x5062 <__vector_36+0x6a>
    504a:	83 81       	ldd	r24, Z+3	; 0x03
    504c:	26 95       	lsr	r18
    504e:	28 23       	and	r18, r24
    5050:	c0 81       	ld	r28, Z
    5052:	d1 81       	ldd	r29, Z+1	; 0x01
    5054:	c2 0f       	add	r28, r18
    5056:	d1 1d       	adc	r29, r1
    5058:	68 83       	st	Y, r22
    505a:	8f 5f       	subi	r24, 0xFF	; 255
    505c:	95 81       	ldd	r25, Z+5	; 0x05
    505e:	89 23       	and	r24, r25
    5060:	83 83       	std	Z+3, r24	; 0x03
    5062:	16 96       	adiw	r26, 0x06	; 6
    5064:	ed 91       	ld	r30, X+
    5066:	fc 91       	ld	r31, X
    5068:	17 97       	sbiw	r26, 0x07	; 7
    506a:	30 97       	sbiw	r30, 0x00	; 0
    506c:	11 f0       	breq	.+4      	; 0x5072 <__vector_36+0x7a>
    506e:	cd 01       	movw	r24, r26
    5070:	19 95       	eicall
    5072:	ff 91       	pop	r31
    5074:	ef 91       	pop	r30
    5076:	df 91       	pop	r29
    5078:	cf 91       	pop	r28
    507a:	bf 91       	pop	r27
    507c:	af 91       	pop	r26
    507e:	9f 91       	pop	r25
    5080:	8f 91       	pop	r24
    5082:	7f 91       	pop	r23
    5084:	6f 91       	pop	r22
    5086:	5f 91       	pop	r21
    5088:	4f 91       	pop	r20
    508a:	3f 91       	pop	r19
    508c:	2f 91       	pop	r18
    508e:	0f 90       	pop	r0
    5090:	0b be       	out	0x3b, r0	; 59
    5092:	0f 90       	pop	r0
    5094:	0f be       	out	0x3f, r0	; 63
    5096:	0f 90       	pop	r0
    5098:	1f 90       	pop	r1
    509a:	18 95       	reti

0000509c <__vector_37>:
    509c:	1f 92       	push	r1
    509e:	0f 92       	push	r0
    50a0:	0f b6       	in	r0, 0x3f	; 63
    50a2:	0f 92       	push	r0
    50a4:	11 24       	eor	r1, r1
    50a6:	0b b6       	in	r0, 0x3b	; 59
    50a8:	0f 92       	push	r0
    50aa:	2f 93       	push	r18
    50ac:	8f 93       	push	r24
    50ae:	9f 93       	push	r25
    50b0:	af 93       	push	r26
    50b2:	bf 93       	push	r27
    50b4:	ef 93       	push	r30
    50b6:	ff 93       	push	r31
    50b8:	e0 91 f3 17 	lds	r30, 0x17F3	; 0x8017f3 <_ser_handle+0x2>
    50bc:	f0 91 f4 17 	lds	r31, 0x17F4	; 0x8017f4 <_ser_handle+0x3>
    50c0:	30 97       	sbiw	r30, 0x00	; 0
    50c2:	b9 f0       	breq	.+46     	; 0x50f2 <__vector_37+0x56>
    50c4:	02 80       	ldd	r0, Z+2	; 0x02
    50c6:	f3 81       	ldd	r31, Z+3	; 0x03
    50c8:	e0 2d       	mov	r30, r0
    50ca:	93 81       	ldd	r25, Z+3	; 0x03
    50cc:	82 81       	ldd	r24, Z+2	; 0x02
    50ce:	98 17       	cp	r25, r24
    50d0:	b1 f0       	breq	.+44     	; 0x50fe <__vector_37+0x62>
    50d2:	92 81       	ldd	r25, Z+2	; 0x02
    50d4:	85 81       	ldd	r24, Z+5	; 0x05
    50d6:	28 2f       	mov	r18, r24
    50d8:	26 95       	lsr	r18
    50da:	29 23       	and	r18, r25
    50dc:	a0 81       	ld	r26, Z
    50de:	b1 81       	ldd	r27, Z+1	; 0x01
    50e0:	a2 0f       	add	r26, r18
    50e2:	b1 1d       	adc	r27, r1
    50e4:	2c 91       	ld	r18, X
    50e6:	9f 5f       	subi	r25, 0xFF	; 255
    50e8:	89 23       	and	r24, r25
    50ea:	82 83       	std	Z+2, r24	; 0x02
    50ec:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    50f0:	0b c0       	rjmp	.+22     	; 0x5108 <__vector_37+0x6c>
    50f2:	e9 ec       	ldi	r30, 0xC9	; 201
    50f4:	f0 e0       	ldi	r31, 0x00	; 0
    50f6:	80 81       	ld	r24, Z
    50f8:	8f 7d       	andi	r24, 0xDF	; 223
    50fa:	80 83       	st	Z, r24
    50fc:	05 c0       	rjmp	.+10     	; 0x5108 <__vector_37+0x6c>
    50fe:	e9 ec       	ldi	r30, 0xC9	; 201
    5100:	f0 e0       	ldi	r31, 0x00	; 0
    5102:	80 81       	ld	r24, Z
    5104:	8f 7d       	andi	r24, 0xDF	; 223
    5106:	80 83       	st	Z, r24
    5108:	ff 91       	pop	r31
    510a:	ef 91       	pop	r30
    510c:	bf 91       	pop	r27
    510e:	af 91       	pop	r26
    5110:	9f 91       	pop	r25
    5112:	8f 91       	pop	r24
    5114:	2f 91       	pop	r18
    5116:	0f 90       	pop	r0
    5118:	0b be       	out	0x3b, r0	; 59
    511a:	0f 90       	pop	r0
    511c:	0f be       	out	0x3f, r0	; 63
    511e:	0f 90       	pop	r0
    5120:	1f 90       	pop	r1
    5122:	18 95       	reti

00005124 <__vector_51>:
    5124:	1f 92       	push	r1
    5126:	0f 92       	push	r0
    5128:	0f b6       	in	r0, 0x3f	; 63
    512a:	0f 92       	push	r0
    512c:	11 24       	eor	r1, r1
    512e:	0b b6       	in	r0, 0x3b	; 59
    5130:	0f 92       	push	r0
    5132:	2f 93       	push	r18
    5134:	3f 93       	push	r19
    5136:	4f 93       	push	r20
    5138:	5f 93       	push	r21
    513a:	6f 93       	push	r22
    513c:	7f 93       	push	r23
    513e:	8f 93       	push	r24
    5140:	9f 93       	push	r25
    5142:	af 93       	push	r26
    5144:	bf 93       	push	r27
    5146:	cf 93       	push	r28
    5148:	df 93       	push	r29
    514a:	ef 93       	push	r30
    514c:	ff 93       	push	r31
    514e:	a0 91 f5 17 	lds	r26, 0x17F5	; 0x8017f5 <_ser_handle+0x4>
    5152:	b0 91 f6 17 	lds	r27, 0x17F6	; 0x8017f6 <_ser_handle+0x5>
    5156:	10 97       	sbiw	r26, 0x00	; 0
    5158:	11 f1       	breq	.+68     	; 0x519e <__vector_51+0x7a>
    515a:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    515e:	14 96       	adiw	r26, 0x04	; 4
    5160:	ed 91       	ld	r30, X+
    5162:	fc 91       	ld	r31, X
    5164:	15 97       	sbiw	r26, 0x05	; 5
    5166:	93 81       	ldd	r25, Z+3	; 0x03
    5168:	82 81       	ldd	r24, Z+2	; 0x02
    516a:	25 81       	ldd	r18, Z+5	; 0x05
    516c:	98 1b       	sub	r25, r24
    516e:	92 23       	and	r25, r18
    5170:	84 81       	ldd	r24, Z+4	; 0x04
    5172:	98 17       	cp	r25, r24
    5174:	61 f0       	breq	.+24     	; 0x518e <__vector_51+0x6a>
    5176:	83 81       	ldd	r24, Z+3	; 0x03
    5178:	26 95       	lsr	r18
    517a:	28 23       	and	r18, r24
    517c:	c0 81       	ld	r28, Z
    517e:	d1 81       	ldd	r29, Z+1	; 0x01
    5180:	c2 0f       	add	r28, r18
    5182:	d1 1d       	adc	r29, r1
    5184:	68 83       	st	Y, r22
    5186:	8f 5f       	subi	r24, 0xFF	; 255
    5188:	95 81       	ldd	r25, Z+5	; 0x05
    518a:	89 23       	and	r24, r25
    518c:	83 83       	std	Z+3, r24	; 0x03
    518e:	16 96       	adiw	r26, 0x06	; 6
    5190:	ed 91       	ld	r30, X+
    5192:	fc 91       	ld	r31, X
    5194:	17 97       	sbiw	r26, 0x07	; 7
    5196:	30 97       	sbiw	r30, 0x00	; 0
    5198:	11 f0       	breq	.+4      	; 0x519e <__vector_51+0x7a>
    519a:	cd 01       	movw	r24, r26
    519c:	19 95       	eicall
    519e:	ff 91       	pop	r31
    51a0:	ef 91       	pop	r30
    51a2:	df 91       	pop	r29
    51a4:	cf 91       	pop	r28
    51a6:	bf 91       	pop	r27
    51a8:	af 91       	pop	r26
    51aa:	9f 91       	pop	r25
    51ac:	8f 91       	pop	r24
    51ae:	7f 91       	pop	r23
    51b0:	6f 91       	pop	r22
    51b2:	5f 91       	pop	r21
    51b4:	4f 91       	pop	r20
    51b6:	3f 91       	pop	r19
    51b8:	2f 91       	pop	r18
    51ba:	0f 90       	pop	r0
    51bc:	0b be       	out	0x3b, r0	; 59
    51be:	0f 90       	pop	r0
    51c0:	0f be       	out	0x3f, r0	; 63
    51c2:	0f 90       	pop	r0
    51c4:	1f 90       	pop	r1
    51c6:	18 95       	reti

000051c8 <__vector_52>:
    51c8:	1f 92       	push	r1
    51ca:	0f 92       	push	r0
    51cc:	0f b6       	in	r0, 0x3f	; 63
    51ce:	0f 92       	push	r0
    51d0:	11 24       	eor	r1, r1
    51d2:	0b b6       	in	r0, 0x3b	; 59
    51d4:	0f 92       	push	r0
    51d6:	2f 93       	push	r18
    51d8:	8f 93       	push	r24
    51da:	9f 93       	push	r25
    51dc:	af 93       	push	r26
    51de:	bf 93       	push	r27
    51e0:	ef 93       	push	r30
    51e2:	ff 93       	push	r31
    51e4:	e0 91 f5 17 	lds	r30, 0x17F5	; 0x8017f5 <_ser_handle+0x4>
    51e8:	f0 91 f6 17 	lds	r31, 0x17F6	; 0x8017f6 <_ser_handle+0x5>
    51ec:	30 97       	sbiw	r30, 0x00	; 0
    51ee:	b9 f0       	breq	.+46     	; 0x521e <__vector_52+0x56>
    51f0:	02 80       	ldd	r0, Z+2	; 0x02
    51f2:	f3 81       	ldd	r31, Z+3	; 0x03
    51f4:	e0 2d       	mov	r30, r0
    51f6:	93 81       	ldd	r25, Z+3	; 0x03
    51f8:	82 81       	ldd	r24, Z+2	; 0x02
    51fa:	98 17       	cp	r25, r24
    51fc:	b1 f0       	breq	.+44     	; 0x522a <__vector_52+0x62>
    51fe:	92 81       	ldd	r25, Z+2	; 0x02
    5200:	85 81       	ldd	r24, Z+5	; 0x05
    5202:	28 2f       	mov	r18, r24
    5204:	26 95       	lsr	r18
    5206:	29 23       	and	r18, r25
    5208:	a0 81       	ld	r26, Z
    520a:	b1 81       	ldd	r27, Z+1	; 0x01
    520c:	a2 0f       	add	r26, r18
    520e:	b1 1d       	adc	r27, r1
    5210:	2c 91       	ld	r18, X
    5212:	9f 5f       	subi	r25, 0xFF	; 255
    5214:	89 23       	and	r24, r25
    5216:	82 83       	std	Z+2, r24	; 0x02
    5218:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    521c:	0b c0       	rjmp	.+22     	; 0x5234 <__vector_52+0x6c>
    521e:	e1 ed       	ldi	r30, 0xD1	; 209
    5220:	f0 e0       	ldi	r31, 0x00	; 0
    5222:	80 81       	ld	r24, Z
    5224:	8f 7d       	andi	r24, 0xDF	; 223
    5226:	80 83       	st	Z, r24
    5228:	05 c0       	rjmp	.+10     	; 0x5234 <__vector_52+0x6c>
    522a:	e1 ed       	ldi	r30, 0xD1	; 209
    522c:	f0 e0       	ldi	r31, 0x00	; 0
    522e:	80 81       	ld	r24, Z
    5230:	8f 7d       	andi	r24, 0xDF	; 223
    5232:	80 83       	st	Z, r24
    5234:	ff 91       	pop	r31
    5236:	ef 91       	pop	r30
    5238:	bf 91       	pop	r27
    523a:	af 91       	pop	r26
    523c:	9f 91       	pop	r25
    523e:	8f 91       	pop	r24
    5240:	2f 91       	pop	r18
    5242:	0f 90       	pop	r0
    5244:	0b be       	out	0x3b, r0	; 59
    5246:	0f 90       	pop	r0
    5248:	0f be       	out	0x3f, r0	; 63
    524a:	0f 90       	pop	r0
    524c:	1f 90       	pop	r1
    524e:	18 95       	reti

00005250 <__vector_54>:
    5250:	1f 92       	push	r1
    5252:	0f 92       	push	r0
    5254:	0f b6       	in	r0, 0x3f	; 63
    5256:	0f 92       	push	r0
    5258:	11 24       	eor	r1, r1
    525a:	0b b6       	in	r0, 0x3b	; 59
    525c:	0f 92       	push	r0
    525e:	2f 93       	push	r18
    5260:	3f 93       	push	r19
    5262:	4f 93       	push	r20
    5264:	5f 93       	push	r21
    5266:	6f 93       	push	r22
    5268:	7f 93       	push	r23
    526a:	8f 93       	push	r24
    526c:	9f 93       	push	r25
    526e:	af 93       	push	r26
    5270:	bf 93       	push	r27
    5272:	cf 93       	push	r28
    5274:	df 93       	push	r29
    5276:	ef 93       	push	r30
    5278:	ff 93       	push	r31
    527a:	a0 91 f7 17 	lds	r26, 0x17F7	; 0x8017f7 <_ser_handle+0x6>
    527e:	b0 91 f8 17 	lds	r27, 0x17F8	; 0x8017f8 <_ser_handle+0x7>
    5282:	10 97       	sbiw	r26, 0x00	; 0
    5284:	11 f1       	breq	.+68     	; 0x52ca <__vector_54+0x7a>
    5286:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    528a:	14 96       	adiw	r26, 0x04	; 4
    528c:	ed 91       	ld	r30, X+
    528e:	fc 91       	ld	r31, X
    5290:	15 97       	sbiw	r26, 0x05	; 5
    5292:	93 81       	ldd	r25, Z+3	; 0x03
    5294:	82 81       	ldd	r24, Z+2	; 0x02
    5296:	25 81       	ldd	r18, Z+5	; 0x05
    5298:	98 1b       	sub	r25, r24
    529a:	92 23       	and	r25, r18
    529c:	84 81       	ldd	r24, Z+4	; 0x04
    529e:	98 17       	cp	r25, r24
    52a0:	61 f0       	breq	.+24     	; 0x52ba <__vector_54+0x6a>
    52a2:	83 81       	ldd	r24, Z+3	; 0x03
    52a4:	26 95       	lsr	r18
    52a6:	28 23       	and	r18, r24
    52a8:	c0 81       	ld	r28, Z
    52aa:	d1 81       	ldd	r29, Z+1	; 0x01
    52ac:	c2 0f       	add	r28, r18
    52ae:	d1 1d       	adc	r29, r1
    52b0:	68 83       	st	Y, r22
    52b2:	8f 5f       	subi	r24, 0xFF	; 255
    52b4:	95 81       	ldd	r25, Z+5	; 0x05
    52b6:	89 23       	and	r24, r25
    52b8:	83 83       	std	Z+3, r24	; 0x03
    52ba:	16 96       	adiw	r26, 0x06	; 6
    52bc:	ed 91       	ld	r30, X+
    52be:	fc 91       	ld	r31, X
    52c0:	17 97       	sbiw	r26, 0x07	; 7
    52c2:	30 97       	sbiw	r30, 0x00	; 0
    52c4:	11 f0       	breq	.+4      	; 0x52ca <__vector_54+0x7a>
    52c6:	cd 01       	movw	r24, r26
    52c8:	19 95       	eicall
    52ca:	ff 91       	pop	r31
    52cc:	ef 91       	pop	r30
    52ce:	df 91       	pop	r29
    52d0:	cf 91       	pop	r28
    52d2:	bf 91       	pop	r27
    52d4:	af 91       	pop	r26
    52d6:	9f 91       	pop	r25
    52d8:	8f 91       	pop	r24
    52da:	7f 91       	pop	r23
    52dc:	6f 91       	pop	r22
    52de:	5f 91       	pop	r21
    52e0:	4f 91       	pop	r20
    52e2:	3f 91       	pop	r19
    52e4:	2f 91       	pop	r18
    52e6:	0f 90       	pop	r0
    52e8:	0b be       	out	0x3b, r0	; 59
    52ea:	0f 90       	pop	r0
    52ec:	0f be       	out	0x3f, r0	; 63
    52ee:	0f 90       	pop	r0
    52f0:	1f 90       	pop	r1
    52f2:	18 95       	reti

000052f4 <__vector_55>:
    52f4:	1f 92       	push	r1
    52f6:	0f 92       	push	r0
    52f8:	0f b6       	in	r0, 0x3f	; 63
    52fa:	0f 92       	push	r0
    52fc:	11 24       	eor	r1, r1
    52fe:	0b b6       	in	r0, 0x3b	; 59
    5300:	0f 92       	push	r0
    5302:	2f 93       	push	r18
    5304:	8f 93       	push	r24
    5306:	9f 93       	push	r25
    5308:	af 93       	push	r26
    530a:	bf 93       	push	r27
    530c:	ef 93       	push	r30
    530e:	ff 93       	push	r31
    5310:	e0 91 f7 17 	lds	r30, 0x17F7	; 0x8017f7 <_ser_handle+0x6>
    5314:	f0 91 f8 17 	lds	r31, 0x17F8	; 0x8017f8 <_ser_handle+0x7>
    5318:	30 97       	sbiw	r30, 0x00	; 0
    531a:	b9 f0       	breq	.+46     	; 0x534a <__vector_55+0x56>
    531c:	02 80       	ldd	r0, Z+2	; 0x02
    531e:	f3 81       	ldd	r31, Z+3	; 0x03
    5320:	e0 2d       	mov	r30, r0
    5322:	93 81       	ldd	r25, Z+3	; 0x03
    5324:	82 81       	ldd	r24, Z+2	; 0x02
    5326:	98 17       	cp	r25, r24
    5328:	b1 f0       	breq	.+44     	; 0x5356 <__vector_55+0x62>
    532a:	92 81       	ldd	r25, Z+2	; 0x02
    532c:	85 81       	ldd	r24, Z+5	; 0x05
    532e:	28 2f       	mov	r18, r24
    5330:	26 95       	lsr	r18
    5332:	29 23       	and	r18, r25
    5334:	a0 81       	ld	r26, Z
    5336:	b1 81       	ldd	r27, Z+1	; 0x01
    5338:	a2 0f       	add	r26, r18
    533a:	b1 1d       	adc	r27, r1
    533c:	2c 91       	ld	r18, X
    533e:	9f 5f       	subi	r25, 0xFF	; 255
    5340:	89 23       	and	r24, r25
    5342:	82 83       	std	Z+2, r24	; 0x02
    5344:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    5348:	0b c0       	rjmp	.+22     	; 0x5360 <__vector_55+0x6c>
    534a:	e1 e3       	ldi	r30, 0x31	; 49
    534c:	f1 e0       	ldi	r31, 0x01	; 1
    534e:	80 81       	ld	r24, Z
    5350:	8f 7d       	andi	r24, 0xDF	; 223
    5352:	80 83       	st	Z, r24
    5354:	05 c0       	rjmp	.+10     	; 0x5360 <__vector_55+0x6c>
    5356:	e1 e3       	ldi	r30, 0x31	; 49
    5358:	f1 e0       	ldi	r31, 0x01	; 1
    535a:	80 81       	ld	r24, Z
    535c:	8f 7d       	andi	r24, 0xDF	; 223
    535e:	80 83       	st	Z, r24
    5360:	ff 91       	pop	r31
    5362:	ef 91       	pop	r30
    5364:	bf 91       	pop	r27
    5366:	af 91       	pop	r26
    5368:	9f 91       	pop	r25
    536a:	8f 91       	pop	r24
    536c:	2f 91       	pop	r18
    536e:	0f 90       	pop	r0
    5370:	0b be       	out	0x3b, r0	; 59
    5372:	0f 90       	pop	r0
    5374:	0f be       	out	0x3f, r0	; 63
    5376:	0f 90       	pop	r0
    5378:	1f 90       	pop	r1
    537a:	18 95       	reti

0000537c <usart_getchar>:
    537c:	cf 93       	push	r28
    537e:	df 93       	push	r29
    5380:	1f 92       	push	r1
    5382:	cd b7       	in	r28, 0x3d	; 61
    5384:	de b7       	in	r29, 0x3e	; 62
    5386:	be 01       	movw	r22, r28
    5388:	6f 5f       	subi	r22, 0xFF	; 255
    538a:	7f 4f       	sbci	r23, 0xFF	; 255
    538c:	80 91 f9 17 	lds	r24, 0x17F9	; 0x8017f9 <_com_serial_instance>
    5390:	90 91 fa 17 	lds	r25, 0x17FA	; 0x8017fa <_com_serial_instance+0x1>
    5394:	7b dd       	rcall	.-1290   	; 0x4e8c <serial_getByte>
    5396:	81 11       	cpse	r24, r1
    5398:	f6 cf       	rjmp	.-20     	; 0x5386 <usart_getchar+0xa>
    539a:	89 81       	ldd	r24, Y+1	; 0x01
    539c:	90 e0       	ldi	r25, 0x00	; 0
    539e:	0f 90       	pop	r0
    53a0:	df 91       	pop	r29
    53a2:	cf 91       	pop	r28
    53a4:	08 95       	ret

000053a6 <usart_putchar>:
    53a6:	68 2f       	mov	r22, r24
    53a8:	80 91 f9 17 	lds	r24, 0x17F9	; 0x8017f9 <_com_serial_instance>
    53ac:	90 91 fa 17 	lds	r25, 0x17FA	; 0x8017fa <_com_serial_instance+0x1>
    53b0:	ed dc       	rcall	.-1574   	; 0x4d8c <serial_sendByte>
    53b2:	80 e0       	ldi	r24, 0x00	; 0
    53b4:	90 e0       	ldi	r25, 0x00	; 0
    53b6:	08 95       	ret

000053b8 <stdio_initialise>:
    53b8:	8f 92       	push	r8
    53ba:	9f 92       	push	r9
    53bc:	af 92       	push	r10
    53be:	cf 92       	push	r12
    53c0:	ef 92       	push	r14
    53c2:	0f 93       	push	r16
    53c4:	81 2c       	mov	r8, r1
    53c6:	91 2c       	mov	r9, r1
    53c8:	68 94       	set
    53ca:	aa 24       	eor	r10, r10
    53cc:	a7 f8       	bld	r10, 7
    53ce:	68 94       	set
    53d0:	cc 24       	eor	r12, r12
    53d2:	c7 f8       	bld	r12, 7
    53d4:	e1 2c       	mov	r14, r1
    53d6:	00 e0       	ldi	r16, 0x00	; 0
    53d8:	23 e0       	ldi	r18, 0x03	; 3
    53da:	40 e0       	ldi	r20, 0x00	; 0
    53dc:	51 ee       	ldi	r21, 0xE1	; 225
    53de:	60 e0       	ldi	r22, 0x00	; 0
    53e0:	70 e0       	ldi	r23, 0x00	; 0
    53e2:	35 dc       	rcall	.-1942   	; 0x4c4e <serial_create>
    53e4:	90 93 fa 17 	sts	0x17FA, r25	; 0x8017fa <_com_serial_instance+0x1>
    53e8:	80 93 f9 17 	sts	0x17F9, r24	; 0x8017f9 <_com_serial_instance>
    53ec:	e6 e2       	ldi	r30, 0x26	; 38
    53ee:	f8 e1       	ldi	r31, 0x18	; 24
    53f0:	83 e1       	ldi	r24, 0x13	; 19
    53f2:	92 e0       	ldi	r25, 0x02	; 2
    53f4:	91 83       	std	Z+1, r25	; 0x01
    53f6:	80 83       	st	Z, r24
    53f8:	93 83       	std	Z+3, r25	; 0x03
    53fa:	82 83       	std	Z+2, r24	; 0x02
    53fc:	0f 91       	pop	r16
    53fe:	ef 90       	pop	r14
    5400:	cf 90       	pop	r12
    5402:	af 90       	pop	r10
    5404:	9f 90       	pop	r9
    5406:	8f 90       	pop	r8
    5408:	08 95       	ret

0000540a <_turn_on>:
    540a:	90 e0       	ldi	r25, 0x00	; 0
    540c:	fc 01       	movw	r30, r24
    540e:	ee 0f       	add	r30, r30
    5410:	ff 1f       	adc	r31, r31
    5412:	e8 0f       	add	r30, r24
    5414:	f9 1f       	adc	r31, r25
    5416:	ee 0f       	add	r30, r30
    5418:	ff 1f       	adc	r31, r31
    541a:	e5 50       	subi	r30, 0x05	; 5
    541c:	f8 4e       	sbci	r31, 0xE8	; 232
    541e:	23 81       	ldd	r18, Z+3	; 0x03
    5420:	21 11       	cpse	r18, r1
    5422:	20 c0       	rjmp	.+64     	; 0x5464 <_turn_on+0x5a>
    5424:	9c 01       	movw	r18, r24
    5426:	22 0f       	add	r18, r18
    5428:	33 1f       	adc	r19, r19
    542a:	f9 01       	movw	r30, r18
    542c:	e8 0f       	add	r30, r24
    542e:	f9 1f       	adc	r31, r25
    5430:	ee 0f       	add	r30, r30
    5432:	ff 1f       	adc	r31, r31
    5434:	e5 50       	subi	r30, 0x05	; 5
    5436:	f8 4e       	sbci	r31, 0xE8	; 232
    5438:	a0 81       	ld	r26, Z
    543a:	b1 81       	ldd	r27, Z+1	; 0x01
    543c:	4c 91       	ld	r20, X
    543e:	f9 01       	movw	r30, r18
    5440:	e8 0f       	add	r30, r24
    5442:	f9 1f       	adc	r31, r25
    5444:	ee 0f       	add	r30, r30
    5446:	ff 1f       	adc	r31, r31
    5448:	e5 50       	subi	r30, 0x05	; 5
    544a:	f8 4e       	sbci	r31, 0xE8	; 232
    544c:	81 e0       	ldi	r24, 0x01	; 1
    544e:	90 e0       	ldi	r25, 0x00	; 0
    5450:	02 80       	ldd	r0, Z+2	; 0x02
    5452:	02 c0       	rjmp	.+4      	; 0x5458 <_turn_on+0x4e>
    5454:	88 0f       	add	r24, r24
    5456:	99 1f       	adc	r25, r25
    5458:	0a 94       	dec	r0
    545a:	e2 f7       	brpl	.-8      	; 0x5454 <_turn_on+0x4a>
    545c:	80 95       	com	r24
    545e:	84 23       	and	r24, r20
    5460:	8c 93       	st	X, r24
    5462:	08 95       	ret
    5464:	fc 01       	movw	r30, r24
    5466:	ee 0f       	add	r30, r30
    5468:	ff 1f       	adc	r31, r31
    546a:	df 01       	movw	r26, r30
    546c:	a8 0f       	add	r26, r24
    546e:	b9 1f       	adc	r27, r25
    5470:	aa 0f       	add	r26, r26
    5472:	bb 1f       	adc	r27, r27
    5474:	a5 50       	subi	r26, 0x05	; 5
    5476:	b8 4e       	sbci	r27, 0xE8	; 232
    5478:	0d 90       	ld	r0, X+
    547a:	bc 91       	ld	r27, X
    547c:	a0 2d       	mov	r26, r0
    547e:	2c 91       	ld	r18, X
    5480:	e8 0f       	add	r30, r24
    5482:	f9 1f       	adc	r31, r25
    5484:	ee 0f       	add	r30, r30
    5486:	ff 1f       	adc	r31, r31
    5488:	e5 50       	subi	r30, 0x05	; 5
    548a:	f8 4e       	sbci	r31, 0xE8	; 232
    548c:	81 e0       	ldi	r24, 0x01	; 1
    548e:	90 e0       	ldi	r25, 0x00	; 0
    5490:	02 80       	ldd	r0, Z+2	; 0x02
    5492:	02 c0       	rjmp	.+4      	; 0x5498 <_turn_on+0x8e>
    5494:	88 0f       	add	r24, r24
    5496:	99 1f       	adc	r25, r25
    5498:	0a 94       	dec	r0
    549a:	e2 f7       	brpl	.-8      	; 0x5494 <_turn_on+0x8a>
    549c:	82 2b       	or	r24, r18
    549e:	8c 93       	st	X, r24
    54a0:	08 95       	ret

000054a2 <status_leds_slowBlink>:
    54a2:	cf 93       	push	r28
    54a4:	df 93       	push	r29
    54a6:	90 e0       	ldi	r25, 0x00	; 0
    54a8:	fc 01       	movw	r30, r24
    54aa:	ee 0f       	add	r30, r30
    54ac:	ff 1f       	adc	r31, r31
    54ae:	df 01       	movw	r26, r30
    54b0:	a8 0f       	add	r26, r24
    54b2:	b9 1f       	adc	r27, r25
    54b4:	aa 0f       	add	r26, r26
    54b6:	bb 1f       	adc	r27, r27
    54b8:	a5 50       	subi	r26, 0x05	; 5
    54ba:	b8 4e       	sbci	r27, 0xE8	; 232
    54bc:	cd 91       	ld	r28, X+
    54be:	dc 91       	ld	r29, X
    54c0:	11 97       	sbiw	r26, 0x01	; 1
    54c2:	48 81       	ld	r20, Y
    54c4:	21 e0       	ldi	r18, 0x01	; 1
    54c6:	30 e0       	ldi	r19, 0x00	; 0
    54c8:	12 96       	adiw	r26, 0x02	; 2
    54ca:	0c 90       	ld	r0, X
    54cc:	12 97       	sbiw	r26, 0x02	; 2
    54ce:	02 c0       	rjmp	.+4      	; 0x54d4 <status_leds_slowBlink+0x32>
    54d0:	22 0f       	add	r18, r18
    54d2:	33 1f       	adc	r19, r19
    54d4:	0a 94       	dec	r0
    54d6:	e2 f7       	brpl	.-8      	; 0x54d0 <status_leds_slowBlink+0x2e>
    54d8:	24 27       	eor	r18, r20
    54da:	28 83       	st	Y, r18
    54dc:	fd 01       	movw	r30, r26
    54de:	81 e0       	ldi	r24, 0x01	; 1
    54e0:	84 83       	std	Z+4, r24	; 0x04
    54e2:	df 91       	pop	r29
    54e4:	cf 91       	pop	r28
    54e6:	08 95       	ret

000054e8 <status_leds_ledOn>:
    54e8:	28 2f       	mov	r18, r24
    54ea:	30 e0       	ldi	r19, 0x00	; 0
    54ec:	f9 01       	movw	r30, r18
    54ee:	ee 0f       	add	r30, r30
    54f0:	ff 1f       	adc	r31, r31
    54f2:	e2 0f       	add	r30, r18
    54f4:	f3 1f       	adc	r31, r19
    54f6:	ee 0f       	add	r30, r30
    54f8:	ff 1f       	adc	r31, r31
    54fa:	e5 50       	subi	r30, 0x05	; 5
    54fc:	f8 4e       	sbci	r31, 0xE8	; 232
    54fe:	93 e0       	ldi	r25, 0x03	; 3
    5500:	94 83       	std	Z+4, r25	; 0x04
    5502:	83 cf       	rjmp	.-250    	; 0x540a <_turn_on>
    5504:	08 95       	ret

00005506 <status_leds_longPuls>:
    5506:	90 e0       	ldi	r25, 0x00	; 0
    5508:	fc 01       	movw	r30, r24
    550a:	ee 0f       	add	r30, r30
    550c:	ff 1f       	adc	r31, r31
    550e:	df 01       	movw	r26, r30
    5510:	a8 0f       	add	r26, r24
    5512:	b9 1f       	adc	r27, r25
    5514:	aa 0f       	add	r26, r26
    5516:	bb 1f       	adc	r27, r27
    5518:	a5 50       	subi	r26, 0x05	; 5
    551a:	b8 4e       	sbci	r27, 0xE8	; 232
    551c:	26 e0       	ldi	r18, 0x06	; 6
    551e:	15 96       	adiw	r26, 0x05	; 5
    5520:	2c 93       	st	X, r18
    5522:	15 97       	sbiw	r26, 0x05	; 5
    5524:	fd 01       	movw	r30, r26
    5526:	14 82       	std	Z+4, r1	; 0x04
    5528:	08 95       	ret

0000552a <_initTwiInterface>:
    552a:	80 91 21 18 	lds	r24, 0x1821	; 0x801821 <_twiIsInitiated>
    552e:	81 11       	cpse	r24, r1
    5530:	0c c0       	rjmp	.+24     	; 0x554a <_initTwiInterface+0x20>
    5532:	8c e0       	ldi	r24, 0x0C	; 12
    5534:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5538:	8f ef       	ldi	r24, 0xFF	; 255
    553a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    553e:	84 e0       	ldi	r24, 0x04	; 4
    5540:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5544:	81 e0       	ldi	r24, 0x01	; 1
    5546:	80 93 21 18 	sts	0x1821, r24	; 0x801821 <_twiIsInitiated>
    554a:	08 95       	ret

0000554c <twiCreate>:
    554c:	af 92       	push	r10
    554e:	bf 92       	push	r11
    5550:	cf 92       	push	r12
    5552:	df 92       	push	r13
    5554:	ef 92       	push	r14
    5556:	ff 92       	push	r15
    5558:	0f 93       	push	r16
    555a:	1f 93       	push	r17
    555c:	cf 93       	push	r28
    555e:	df 93       	push	r29
    5560:	a8 2e       	mov	r10, r24
    5562:	b6 2e       	mov	r11, r22
    5564:	69 01       	movw	r12, r18
    5566:	7a 01       	movw	r14, r20
    5568:	84 e0       	ldi	r24, 0x04	; 4
    556a:	90 e0       	ldi	r25, 0x00	; 0
    556c:	b1 d3       	rcall	.+1890   	; 0x5cd0 <malloc>
    556e:	ec 01       	movw	r28, r24
    5570:	89 2b       	or	r24, r25
    5572:	61 f1       	breq	.+88     	; 0x55cc <twiCreate+0x80>
    5574:	a8 82       	st	Y, r10
    5576:	81 e0       	ldi	r24, 0x01	; 1
    5578:	b8 12       	cpse	r11, r24
    557a:	12 c0       	rjmp	.+36     	; 0x55a0 <twiCreate+0x54>
    557c:	c7 01       	movw	r24, r14
    557e:	b6 01       	movw	r22, r12
    5580:	20 ea       	ldi	r18, 0xA0	; 160
    5582:	36 e8       	ldi	r19, 0x86	; 134
    5584:	41 e0       	ldi	r20, 0x01	; 1
    5586:	50 e0       	ldi	r21, 0x00	; 0
    5588:	79 d3       	rcall	.+1778   	; 0x5c7c <__udivmodsi4>
    558a:	da 01       	movw	r26, r20
    558c:	c9 01       	movw	r24, r18
    558e:	40 97       	sbiw	r24, 0x10	; 16
    5590:	a1 09       	sbc	r26, r1
    5592:	b1 09       	sbc	r27, r1
    5594:	b6 95       	lsr	r27
    5596:	a7 95       	ror	r26
    5598:	97 95       	ror	r25
    559a:	87 95       	ror	r24
    559c:	89 83       	std	Y+1, r24	; 0x01
    559e:	11 c0       	rjmp	.+34     	; 0x55c2 <twiCreate+0x76>
    55a0:	c7 01       	movw	r24, r14
    55a2:	b6 01       	movw	r22, r12
    55a4:	20 e8       	ldi	r18, 0x80	; 128
    55a6:	3a e1       	ldi	r19, 0x1A	; 26
    55a8:	46 e0       	ldi	r20, 0x06	; 6
    55aa:	50 e0       	ldi	r21, 0x00	; 0
    55ac:	67 d3       	rcall	.+1742   	; 0x5c7c <__udivmodsi4>
    55ae:	da 01       	movw	r26, r20
    55b0:	c9 01       	movw	r24, r18
    55b2:	40 97       	sbiw	r24, 0x10	; 16
    55b4:	a1 09       	sbc	r26, r1
    55b6:	b1 09       	sbc	r27, r1
    55b8:	b6 95       	lsr	r27
    55ba:	a7 95       	ror	r26
    55bc:	97 95       	ror	r25
    55be:	87 95       	ror	r24
    55c0:	89 83       	std	Y+1, r24	; 0x01
    55c2:	1b 83       	std	Y+3, r17	; 0x03
    55c4:	0a 83       	std	Y+2, r16	; 0x02
    55c6:	8c 2f       	mov	r24, r28
    55c8:	9d 2f       	mov	r25, r29
    55ca:	02 c0       	rjmp	.+4      	; 0x55d0 <twiCreate+0x84>
    55cc:	80 e0       	ldi	r24, 0x00	; 0
    55ce:	90 e0       	ldi	r25, 0x00	; 0
    55d0:	df 91       	pop	r29
    55d2:	cf 91       	pop	r28
    55d4:	1f 91       	pop	r17
    55d6:	0f 91       	pop	r16
    55d8:	ff 90       	pop	r15
    55da:	ef 90       	pop	r14
    55dc:	df 90       	pop	r13
    55de:	cf 90       	pop	r12
    55e0:	bf 90       	pop	r11
    55e2:	af 90       	pop	r10
    55e4:	08 95       	ret

000055e6 <twiIsBusy>:
    55e6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    55ea:	81 70       	andi	r24, 0x01	; 1
    55ec:	08 95       	ret

000055ee <twiTransmit>:
    55ee:	ff 92       	push	r15
    55f0:	0f 93       	push	r16
    55f2:	1f 93       	push	r17
    55f4:	cf 93       	push	r28
    55f6:	df 93       	push	r29
    55f8:	00 97       	sbiw	r24, 0x00	; 0
    55fa:	d1 f1       	breq	.+116    	; 0x5670 <twiTransmit+0x82>
    55fc:	4a 30       	cpi	r20, 0x0A	; 10
    55fe:	d0 f5       	brcc	.+116    	; 0x5674 <twiTransmit+0x86>
    5600:	f4 2e       	mov	r15, r20
    5602:	8b 01       	movw	r16, r22
    5604:	ec 01       	movw	r28, r24
    5606:	ef df       	rcall	.-34     	; 0x55e6 <twiIsBusy>
    5608:	81 11       	cpse	r24, r1
    560a:	36 c0       	rjmp	.+108    	; 0x5678 <twiTransmit+0x8a>
    560c:	80 91 14 18 	lds	r24, 0x1814	; 0x801814 <_twiCurrentHandler>
    5610:	90 91 15 18 	lds	r25, 0x1815	; 0x801815 <_twiCurrentHandler+0x1>
    5614:	c8 17       	cp	r28, r24
    5616:	d9 07       	cpc	r29, r25
    5618:	41 f0       	breq	.+16     	; 0x562a <twiTransmit+0x3c>
    561a:	87 df       	rcall	.-242    	; 0x552a <_initTwiInterface>
    561c:	89 81       	ldd	r24, Y+1	; 0x01
    561e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5622:	d0 93 15 18 	sts	0x1815, r29	; 0x801815 <_twiCurrentHandler+0x1>
    5626:	c0 93 14 18 	sts	0x1814, r28	; 0x801814 <_twiCurrentHandler>
    562a:	81 e0       	ldi	r24, 0x01	; 1
    562c:	8f 0d       	add	r24, r15
    562e:	80 93 16 18 	sts	0x1816, r24	; 0x801816 <_twiMessageLen>
    5632:	88 81       	ld	r24, Y
    5634:	88 0f       	add	r24, r24
    5636:	80 93 17 18 	sts	0x1817, r24	; 0x801817 <_twiMessageBuffer>
    563a:	ff 20       	and	r15, r15
    563c:	89 f0       	breq	.+34     	; 0x5660 <twiTransmit+0x72>
    563e:	f8 01       	movw	r30, r16
    5640:	a8 e1       	ldi	r26, 0x18	; 24
    5642:	b8 e1       	ldi	r27, 0x18	; 24
    5644:	4f ef       	ldi	r20, 0xFF	; 255
    5646:	4f 0d       	add	r20, r15
    5648:	64 2f       	mov	r22, r20
    564a:	70 e0       	ldi	r23, 0x00	; 0
    564c:	cb 01       	movw	r24, r22
    564e:	01 96       	adiw	r24, 0x01	; 1
    5650:	b8 01       	movw	r22, r16
    5652:	68 0f       	add	r22, r24
    5654:	79 1f       	adc	r23, r25
    5656:	81 91       	ld	r24, Z+
    5658:	8d 93       	st	X+, r24
    565a:	e6 17       	cp	r30, r22
    565c:	f7 07       	cpc	r31, r23
    565e:	d9 f7       	brne	.-10     	; 0x5656 <twiTransmit+0x68>
    5660:	88 ef       	ldi	r24, 0xF8	; 248
    5662:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5666:	85 ea       	ldi	r24, 0xA5	; 165
    5668:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    566c:	84 e0       	ldi	r24, 0x04	; 4
    566e:	05 c0       	rjmp	.+10     	; 0x567a <twiTransmit+0x8c>
    5670:	86 e0       	ldi	r24, 0x06	; 6
    5672:	03 c0       	rjmp	.+6      	; 0x567a <twiTransmit+0x8c>
    5674:	87 e0       	ldi	r24, 0x07	; 7
    5676:	01 c0       	rjmp	.+2      	; 0x567a <twiTransmit+0x8c>
    5678:	82 e0       	ldi	r24, 0x02	; 2
    567a:	df 91       	pop	r29
    567c:	cf 91       	pop	r28
    567e:	1f 91       	pop	r17
    5680:	0f 91       	pop	r16
    5682:	ff 90       	pop	r15
    5684:	08 95       	ret

00005686 <twiReceive>:
    5686:	1f 93       	push	r17
    5688:	cf 93       	push	r28
    568a:	df 93       	push	r29
    568c:	00 97       	sbiw	r24, 0x00	; 0
    568e:	29 f1       	breq	.+74     	; 0x56da <twiReceive+0x54>
    5690:	6b 30       	cpi	r22, 0x0B	; 11
    5692:	28 f5       	brcc	.+74     	; 0x56de <twiReceive+0x58>
    5694:	16 2f       	mov	r17, r22
    5696:	ec 01       	movw	r28, r24
    5698:	a6 df       	rcall	.-180    	; 0x55e6 <twiIsBusy>
    569a:	81 11       	cpse	r24, r1
    569c:	22 c0       	rjmp	.+68     	; 0x56e2 <twiReceive+0x5c>
    569e:	80 91 14 18 	lds	r24, 0x1814	; 0x801814 <_twiCurrentHandler>
    56a2:	90 91 15 18 	lds	r25, 0x1815	; 0x801815 <_twiCurrentHandler+0x1>
    56a6:	c8 17       	cp	r28, r24
    56a8:	d9 07       	cpc	r29, r25
    56aa:	41 f0       	breq	.+16     	; 0x56bc <twiReceive+0x36>
    56ac:	3e df       	rcall	.-388    	; 0x552a <_initTwiInterface>
    56ae:	89 81       	ldd	r24, Y+1	; 0x01
    56b0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    56b4:	d0 93 15 18 	sts	0x1815, r29	; 0x801815 <_twiCurrentHandler+0x1>
    56b8:	c0 93 14 18 	sts	0x1814, r28	; 0x801814 <_twiCurrentHandler>
    56bc:	10 93 16 18 	sts	0x1816, r17	; 0x801816 <_twiMessageLen>
    56c0:	88 81       	ld	r24, Y
    56c2:	88 0f       	add	r24, r24
    56c4:	81 60       	ori	r24, 0x01	; 1
    56c6:	80 93 17 18 	sts	0x1817, r24	; 0x801817 <_twiMessageBuffer>
    56ca:	88 ef       	ldi	r24, 0xF8	; 248
    56cc:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    56d0:	85 ea       	ldi	r24, 0xA5	; 165
    56d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    56d6:	85 e0       	ldi	r24, 0x05	; 5
    56d8:	05 c0       	rjmp	.+10     	; 0x56e4 <twiReceive+0x5e>
    56da:	86 e0       	ldi	r24, 0x06	; 6
    56dc:	03 c0       	rjmp	.+6      	; 0x56e4 <twiReceive+0x5e>
    56de:	87 e0       	ldi	r24, 0x07	; 7
    56e0:	01 c0       	rjmp	.+2      	; 0x56e4 <twiReceive+0x5e>
    56e2:	82 e0       	ldi	r24, 0x02	; 2
    56e4:	df 91       	pop	r29
    56e6:	cf 91       	pop	r28
    56e8:	1f 91       	pop	r17
    56ea:	08 95       	ret

000056ec <__vector_39>:
    56ec:	1f 92       	push	r1
    56ee:	0f 92       	push	r0
    56f0:	0f b6       	in	r0, 0x3f	; 63
    56f2:	0f 92       	push	r0
    56f4:	11 24       	eor	r1, r1
    56f6:	0b b6       	in	r0, 0x3b	; 59
    56f8:	0f 92       	push	r0
    56fa:	2f 93       	push	r18
    56fc:	3f 93       	push	r19
    56fe:	4f 93       	push	r20
    5700:	5f 93       	push	r21
    5702:	6f 93       	push	r22
    5704:	7f 93       	push	r23
    5706:	8f 93       	push	r24
    5708:	9f 93       	push	r25
    570a:	af 93       	push	r26
    570c:	bf 93       	push	r27
    570e:	ef 93       	push	r30
    5710:	ff 93       	push	r31
    5712:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5716:	8e 2f       	mov	r24, r30
    5718:	90 e0       	ldi	r25, 0x00	; 0
    571a:	fc 01       	movw	r30, r24
    571c:	38 97       	sbiw	r30, 0x08	; 8
    571e:	e1 35       	cpi	r30, 0x51	; 81
    5720:	f1 05       	cpc	r31, r1
    5722:	08 f0       	brcs	.+2      	; 0x5726 <__vector_39+0x3a>
    5724:	75 c0       	rjmp	.+234    	; 0x5810 <__vector_39+0x124>
    5726:	88 27       	eor	r24, r24
    5728:	e4 58       	subi	r30, 0x84	; 132
    572a:	ff 4f       	sbci	r31, 0xFF	; 255
    572c:	8f 4f       	sbci	r24, 0xFF	; 255
    572e:	c8 c2       	rjmp	.+1424   	; 0x5cc0 <__tablejump2__>
    5730:	10 92 13 18 	sts	0x1813, r1	; 0x801813 <_index.1885>
    5734:	e0 91 13 18 	lds	r30, 0x1813	; 0x801813 <_index.1885>
    5738:	80 91 16 18 	lds	r24, 0x1816	; 0x801816 <_twiMessageLen>
    573c:	e8 17       	cp	r30, r24
    573e:	70 f4       	brcc	.+28     	; 0x575c <__vector_39+0x70>
    5740:	81 e0       	ldi	r24, 0x01	; 1
    5742:	8e 0f       	add	r24, r30
    5744:	80 93 13 18 	sts	0x1813, r24	; 0x801813 <_index.1885>
    5748:	f0 e0       	ldi	r31, 0x00	; 0
    574a:	e9 5e       	subi	r30, 0xE9	; 233
    574c:	f7 4e       	sbci	r31, 0xE7	; 231
    574e:	80 81       	ld	r24, Z
    5750:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5754:	85 e8       	ldi	r24, 0x85	; 133
    5756:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    575a:	72 c0       	rjmp	.+228    	; 0x5840 <__vector_39+0x154>
    575c:	84 e9       	ldi	r24, 0x94	; 148
    575e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5762:	80 91 14 18 	lds	r24, 0x1814	; 0x801814 <_twiCurrentHandler>
    5766:	90 91 15 18 	lds	r25, 0x1815	; 0x801815 <_twiCurrentHandler+0x1>
    576a:	dc 01       	movw	r26, r24
    576c:	12 96       	adiw	r26, 0x02	; 2
    576e:	ed 91       	ld	r30, X+
    5770:	fc 91       	ld	r31, X
    5772:	13 97       	sbiw	r26, 0x03	; 3
    5774:	30 97       	sbiw	r30, 0x00	; 0
    5776:	09 f4       	brne	.+2      	; 0x577a <__vector_39+0x8e>
    5778:	63 c0       	rjmp	.+198    	; 0x5840 <__vector_39+0x154>
    577a:	20 e0       	ldi	r18, 0x00	; 0
    577c:	40 e0       	ldi	r20, 0x00	; 0
    577e:	50 e0       	ldi	r21, 0x00	; 0
    5780:	64 e0       	ldi	r22, 0x04	; 4
    5782:	19 95       	eicall
    5784:	5d c0       	rjmp	.+186    	; 0x5840 <__vector_39+0x154>
    5786:	e0 91 13 18 	lds	r30, 0x1813	; 0x801813 <_index.1885>
    578a:	81 e0       	ldi	r24, 0x01	; 1
    578c:	8e 0f       	add	r24, r30
    578e:	80 93 13 18 	sts	0x1813, r24	; 0x801813 <_index.1885>
    5792:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5796:	f0 e0       	ldi	r31, 0x00	; 0
    5798:	e9 5e       	subi	r30, 0xE9	; 233
    579a:	f7 4e       	sbci	r31, 0xE7	; 231
    579c:	80 83       	st	Z, r24
    579e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    57a2:	80 34       	cpi	r24, 0x40	; 64
    57a4:	11 f4       	brne	.+4      	; 0x57aa <__vector_39+0xbe>
    57a6:	10 92 13 18 	sts	0x1813, r1	; 0x801813 <_index.1885>
    57aa:	20 91 13 18 	lds	r18, 0x1813	; 0x801813 <_index.1885>
    57ae:	30 e0       	ldi	r19, 0x00	; 0
    57b0:	80 91 16 18 	lds	r24, 0x1816	; 0x801816 <_twiMessageLen>
    57b4:	90 e0       	ldi	r25, 0x00	; 0
    57b6:	01 97       	sbiw	r24, 0x01	; 1
    57b8:	28 17       	cp	r18, r24
    57ba:	39 07       	cpc	r19, r25
    57bc:	24 f4       	brge	.+8      	; 0x57c6 <__vector_39+0xda>
    57be:	85 ec       	ldi	r24, 0xC5	; 197
    57c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    57c4:	3d c0       	rjmp	.+122    	; 0x5840 <__vector_39+0x154>
    57c6:	85 e8       	ldi	r24, 0x85	; 133
    57c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    57cc:	39 c0       	rjmp	.+114    	; 0x5840 <__vector_39+0x154>
    57ce:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    57d2:	e0 91 13 18 	lds	r30, 0x1813	; 0x801813 <_index.1885>
    57d6:	f0 e0       	ldi	r31, 0x00	; 0
    57d8:	e9 5e       	subi	r30, 0xE9	; 233
    57da:	f7 4e       	sbci	r31, 0xE7	; 231
    57dc:	80 83       	st	Z, r24
    57de:	84 e9       	ldi	r24, 0x94	; 148
    57e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    57e4:	80 91 14 18 	lds	r24, 0x1814	; 0x801814 <_twiCurrentHandler>
    57e8:	90 91 15 18 	lds	r25, 0x1815	; 0x801815 <_twiCurrentHandler+0x1>
    57ec:	dc 01       	movw	r26, r24
    57ee:	12 96       	adiw	r26, 0x02	; 2
    57f0:	ed 91       	ld	r30, X+
    57f2:	fc 91       	ld	r31, X
    57f4:	13 97       	sbiw	r26, 0x03	; 3
    57f6:	30 97       	sbiw	r30, 0x00	; 0
    57f8:	19 f1       	breq	.+70     	; 0x5840 <__vector_39+0x154>
    57fa:	20 91 16 18 	lds	r18, 0x1816	; 0x801816 <_twiMessageLen>
    57fe:	47 e1       	ldi	r20, 0x17	; 23
    5800:	58 e1       	ldi	r21, 0x18	; 24
    5802:	65 e0       	ldi	r22, 0x05	; 5
    5804:	19 95       	eicall
    5806:	1c c0       	rjmp	.+56     	; 0x5840 <__vector_39+0x154>
    5808:	85 ea       	ldi	r24, 0xA5	; 165
    580a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    580e:	18 c0       	rjmp	.+48     	; 0x5840 <__vector_39+0x154>
    5810:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5814:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5818:	84 e0       	ldi	r24, 0x04	; 4
    581a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    581e:	80 91 14 18 	lds	r24, 0x1814	; 0x801814 <_twiCurrentHandler>
    5822:	90 91 15 18 	lds	r25, 0x1815	; 0x801815 <_twiCurrentHandler+0x1>
    5826:	dc 01       	movw	r26, r24
    5828:	12 96       	adiw	r26, 0x02	; 2
    582a:	ed 91       	ld	r30, X+
    582c:	fc 91       	ld	r31, X
    582e:	13 97       	sbiw	r26, 0x03	; 3
    5830:	30 97       	sbiw	r30, 0x00	; 0
    5832:	31 f0       	breq	.+12     	; 0x5840 <__vector_39+0x154>
    5834:	20 e0       	ldi	r18, 0x00	; 0
    5836:	40 e0       	ldi	r20, 0x00	; 0
    5838:	50 e0       	ldi	r21, 0x00	; 0
    583a:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    583e:	19 95       	eicall
    5840:	ff 91       	pop	r31
    5842:	ef 91       	pop	r30
    5844:	bf 91       	pop	r27
    5846:	af 91       	pop	r26
    5848:	9f 91       	pop	r25
    584a:	8f 91       	pop	r24
    584c:	7f 91       	pop	r23
    584e:	6f 91       	pop	r22
    5850:	5f 91       	pop	r21
    5852:	4f 91       	pop	r20
    5854:	3f 91       	pop	r19
    5856:	2f 91       	pop	r18
    5858:	0f 90       	pop	r0
    585a:	0b be       	out	0x3b, r0	; 59
    585c:	0f 90       	pop	r0
    585e:	0f be       	out	0x3f, r0	; 63
    5860:	0f 90       	pop	r0
    5862:	1f 90       	pop	r1
    5864:	18 95       	reti

00005866 <fifo_init>:
    5866:	fc 01       	movw	r30, r24
    5868:	41 11       	cpse	r20, r1
    586a:	01 c0       	rjmp	.+2      	; 0x586e <fifo_init+0x8>
    586c:	52 d3       	rcall	.+1700   	; 0x5f12 <abort>
    586e:	84 2f       	mov	r24, r20
    5870:	90 e0       	ldi	r25, 0x00	; 0
    5872:	9c 01       	movw	r18, r24
    5874:	21 50       	subi	r18, 0x01	; 1
    5876:	31 09       	sbc	r19, r1
    5878:	82 23       	and	r24, r18
    587a:	93 23       	and	r25, r19
    587c:	89 2b       	or	r24, r25
    587e:	09 f0       	breq	.+2      	; 0x5882 <fifo_init+0x1c>
    5880:	48 d3       	rcall	.+1680   	; 0x5f12 <abort>
    5882:	41 38       	cpi	r20, 0x81	; 129
    5884:	08 f0       	brcs	.+2      	; 0x5888 <fifo_init+0x22>
    5886:	45 d3       	rcall	.+1674   	; 0x5f12 <abort>
    5888:	12 82       	std	Z+2, r1	; 0x02
    588a:	13 82       	std	Z+3, r1	; 0x03
    588c:	44 83       	std	Z+4, r20	; 0x04
    588e:	44 0f       	add	r20, r20
    5890:	41 50       	subi	r20, 0x01	; 1
    5892:	45 83       	std	Z+5, r20	; 0x05
    5894:	71 83       	std	Z+1, r23	; 0x01
    5896:	60 83       	st	Z, r22
    5898:	80 e0       	ldi	r24, 0x00	; 0
    589a:	90 e0       	ldi	r25, 0x00	; 0
    589c:	08 95       	ret

0000589e <__subsf3>:
    589e:	50 58       	subi	r21, 0x80	; 128

000058a0 <__addsf3>:
    58a0:	bb 27       	eor	r27, r27
    58a2:	aa 27       	eor	r26, r26
    58a4:	0e d0       	rcall	.+28     	; 0x58c2 <__addsf3x>
    58a6:	4d c1       	rjmp	.+666    	; 0x5b42 <__fp_round>
    58a8:	3e d1       	rcall	.+636    	; 0x5b26 <__fp_pscA>
    58aa:	30 f0       	brcs	.+12     	; 0x58b8 <__addsf3+0x18>
    58ac:	43 d1       	rcall	.+646    	; 0x5b34 <__fp_pscB>
    58ae:	20 f0       	brcs	.+8      	; 0x58b8 <__addsf3+0x18>
    58b0:	31 f4       	brne	.+12     	; 0x58be <__addsf3+0x1e>
    58b2:	9f 3f       	cpi	r25, 0xFF	; 255
    58b4:	11 f4       	brne	.+4      	; 0x58ba <__addsf3+0x1a>
    58b6:	1e f4       	brtc	.+6      	; 0x58be <__addsf3+0x1e>
    58b8:	33 c1       	rjmp	.+614    	; 0x5b20 <__fp_nan>
    58ba:	0e f4       	brtc	.+2      	; 0x58be <__addsf3+0x1e>
    58bc:	e0 95       	com	r30
    58be:	e7 fb       	bst	r30, 7
    58c0:	29 c1       	rjmp	.+594    	; 0x5b14 <__fp_inf>

000058c2 <__addsf3x>:
    58c2:	e9 2f       	mov	r30, r25
    58c4:	4f d1       	rcall	.+670    	; 0x5b64 <__fp_split3>
    58c6:	80 f3       	brcs	.-32     	; 0x58a8 <__addsf3+0x8>
    58c8:	ba 17       	cp	r27, r26
    58ca:	62 07       	cpc	r22, r18
    58cc:	73 07       	cpc	r23, r19
    58ce:	84 07       	cpc	r24, r20
    58d0:	95 07       	cpc	r25, r21
    58d2:	18 f0       	brcs	.+6      	; 0x58da <__addsf3x+0x18>
    58d4:	71 f4       	brne	.+28     	; 0x58f2 <__addsf3x+0x30>
    58d6:	9e f5       	brtc	.+102    	; 0x593e <__addsf3x+0x7c>
    58d8:	67 c1       	rjmp	.+718    	; 0x5ba8 <__fp_zero>
    58da:	0e f4       	brtc	.+2      	; 0x58de <__addsf3x+0x1c>
    58dc:	e0 95       	com	r30
    58de:	0b 2e       	mov	r0, r27
    58e0:	ba 2f       	mov	r27, r26
    58e2:	a0 2d       	mov	r26, r0
    58e4:	0b 01       	movw	r0, r22
    58e6:	b9 01       	movw	r22, r18
    58e8:	90 01       	movw	r18, r0
    58ea:	0c 01       	movw	r0, r24
    58ec:	ca 01       	movw	r24, r20
    58ee:	a0 01       	movw	r20, r0
    58f0:	11 24       	eor	r1, r1
    58f2:	ff 27       	eor	r31, r31
    58f4:	59 1b       	sub	r21, r25
    58f6:	99 f0       	breq	.+38     	; 0x591e <__addsf3x+0x5c>
    58f8:	59 3f       	cpi	r21, 0xF9	; 249
    58fa:	50 f4       	brcc	.+20     	; 0x5910 <__addsf3x+0x4e>
    58fc:	50 3e       	cpi	r21, 0xE0	; 224
    58fe:	68 f1       	brcs	.+90     	; 0x595a <__addsf3x+0x98>
    5900:	1a 16       	cp	r1, r26
    5902:	f0 40       	sbci	r31, 0x00	; 0
    5904:	a2 2f       	mov	r26, r18
    5906:	23 2f       	mov	r18, r19
    5908:	34 2f       	mov	r19, r20
    590a:	44 27       	eor	r20, r20
    590c:	58 5f       	subi	r21, 0xF8	; 248
    590e:	f3 cf       	rjmp	.-26     	; 0x58f6 <__addsf3x+0x34>
    5910:	46 95       	lsr	r20
    5912:	37 95       	ror	r19
    5914:	27 95       	ror	r18
    5916:	a7 95       	ror	r26
    5918:	f0 40       	sbci	r31, 0x00	; 0
    591a:	53 95       	inc	r21
    591c:	c9 f7       	brne	.-14     	; 0x5910 <__addsf3x+0x4e>
    591e:	7e f4       	brtc	.+30     	; 0x593e <__addsf3x+0x7c>
    5920:	1f 16       	cp	r1, r31
    5922:	ba 0b       	sbc	r27, r26
    5924:	62 0b       	sbc	r22, r18
    5926:	73 0b       	sbc	r23, r19
    5928:	84 0b       	sbc	r24, r20
    592a:	ba f0       	brmi	.+46     	; 0x595a <__addsf3x+0x98>
    592c:	91 50       	subi	r25, 0x01	; 1
    592e:	a1 f0       	breq	.+40     	; 0x5958 <__addsf3x+0x96>
    5930:	ff 0f       	add	r31, r31
    5932:	bb 1f       	adc	r27, r27
    5934:	66 1f       	adc	r22, r22
    5936:	77 1f       	adc	r23, r23
    5938:	88 1f       	adc	r24, r24
    593a:	c2 f7       	brpl	.-16     	; 0x592c <__addsf3x+0x6a>
    593c:	0e c0       	rjmp	.+28     	; 0x595a <__addsf3x+0x98>
    593e:	ba 0f       	add	r27, r26
    5940:	62 1f       	adc	r22, r18
    5942:	73 1f       	adc	r23, r19
    5944:	84 1f       	adc	r24, r20
    5946:	48 f4       	brcc	.+18     	; 0x595a <__addsf3x+0x98>
    5948:	87 95       	ror	r24
    594a:	77 95       	ror	r23
    594c:	67 95       	ror	r22
    594e:	b7 95       	ror	r27
    5950:	f7 95       	ror	r31
    5952:	9e 3f       	cpi	r25, 0xFE	; 254
    5954:	08 f0       	brcs	.+2      	; 0x5958 <__addsf3x+0x96>
    5956:	b3 cf       	rjmp	.-154    	; 0x58be <__addsf3+0x1e>
    5958:	93 95       	inc	r25
    595a:	88 0f       	add	r24, r24
    595c:	08 f0       	brcs	.+2      	; 0x5960 <__addsf3x+0x9e>
    595e:	99 27       	eor	r25, r25
    5960:	ee 0f       	add	r30, r30
    5962:	97 95       	ror	r25
    5964:	87 95       	ror	r24
    5966:	08 95       	ret

00005968 <__divsf3>:
    5968:	0c d0       	rcall	.+24     	; 0x5982 <__divsf3x>
    596a:	eb c0       	rjmp	.+470    	; 0x5b42 <__fp_round>
    596c:	e3 d0       	rcall	.+454    	; 0x5b34 <__fp_pscB>
    596e:	40 f0       	brcs	.+16     	; 0x5980 <__divsf3+0x18>
    5970:	da d0       	rcall	.+436    	; 0x5b26 <__fp_pscA>
    5972:	30 f0       	brcs	.+12     	; 0x5980 <__divsf3+0x18>
    5974:	21 f4       	brne	.+8      	; 0x597e <__divsf3+0x16>
    5976:	5f 3f       	cpi	r21, 0xFF	; 255
    5978:	19 f0       	breq	.+6      	; 0x5980 <__divsf3+0x18>
    597a:	cc c0       	rjmp	.+408    	; 0x5b14 <__fp_inf>
    597c:	51 11       	cpse	r21, r1
    597e:	15 c1       	rjmp	.+554    	; 0x5baa <__fp_szero>
    5980:	cf c0       	rjmp	.+414    	; 0x5b20 <__fp_nan>

00005982 <__divsf3x>:
    5982:	f0 d0       	rcall	.+480    	; 0x5b64 <__fp_split3>
    5984:	98 f3       	brcs	.-26     	; 0x596c <__divsf3+0x4>

00005986 <__divsf3_pse>:
    5986:	99 23       	and	r25, r25
    5988:	c9 f3       	breq	.-14     	; 0x597c <__divsf3+0x14>
    598a:	55 23       	and	r21, r21
    598c:	b1 f3       	breq	.-20     	; 0x597a <__divsf3+0x12>
    598e:	95 1b       	sub	r25, r21
    5990:	55 0b       	sbc	r21, r21
    5992:	bb 27       	eor	r27, r27
    5994:	aa 27       	eor	r26, r26
    5996:	62 17       	cp	r22, r18
    5998:	73 07       	cpc	r23, r19
    599a:	84 07       	cpc	r24, r20
    599c:	38 f0       	brcs	.+14     	; 0x59ac <__divsf3_pse+0x26>
    599e:	9f 5f       	subi	r25, 0xFF	; 255
    59a0:	5f 4f       	sbci	r21, 0xFF	; 255
    59a2:	22 0f       	add	r18, r18
    59a4:	33 1f       	adc	r19, r19
    59a6:	44 1f       	adc	r20, r20
    59a8:	aa 1f       	adc	r26, r26
    59aa:	a9 f3       	breq	.-22     	; 0x5996 <__divsf3_pse+0x10>
    59ac:	33 d0       	rcall	.+102    	; 0x5a14 <__divsf3_pse+0x8e>
    59ae:	0e 2e       	mov	r0, r30
    59b0:	3a f0       	brmi	.+14     	; 0x59c0 <__divsf3_pse+0x3a>
    59b2:	e0 e8       	ldi	r30, 0x80	; 128
    59b4:	30 d0       	rcall	.+96     	; 0x5a16 <__divsf3_pse+0x90>
    59b6:	91 50       	subi	r25, 0x01	; 1
    59b8:	50 40       	sbci	r21, 0x00	; 0
    59ba:	e6 95       	lsr	r30
    59bc:	00 1c       	adc	r0, r0
    59be:	ca f7       	brpl	.-14     	; 0x59b2 <__divsf3_pse+0x2c>
    59c0:	29 d0       	rcall	.+82     	; 0x5a14 <__divsf3_pse+0x8e>
    59c2:	fe 2f       	mov	r31, r30
    59c4:	27 d0       	rcall	.+78     	; 0x5a14 <__divsf3_pse+0x8e>
    59c6:	66 0f       	add	r22, r22
    59c8:	77 1f       	adc	r23, r23
    59ca:	88 1f       	adc	r24, r24
    59cc:	bb 1f       	adc	r27, r27
    59ce:	26 17       	cp	r18, r22
    59d0:	37 07       	cpc	r19, r23
    59d2:	48 07       	cpc	r20, r24
    59d4:	ab 07       	cpc	r26, r27
    59d6:	b0 e8       	ldi	r27, 0x80	; 128
    59d8:	09 f0       	breq	.+2      	; 0x59dc <__divsf3_pse+0x56>
    59da:	bb 0b       	sbc	r27, r27
    59dc:	80 2d       	mov	r24, r0
    59de:	bf 01       	movw	r22, r30
    59e0:	ff 27       	eor	r31, r31
    59e2:	93 58       	subi	r25, 0x83	; 131
    59e4:	5f 4f       	sbci	r21, 0xFF	; 255
    59e6:	2a f0       	brmi	.+10     	; 0x59f2 <__divsf3_pse+0x6c>
    59e8:	9e 3f       	cpi	r25, 0xFE	; 254
    59ea:	51 05       	cpc	r21, r1
    59ec:	68 f0       	brcs	.+26     	; 0x5a08 <__divsf3_pse+0x82>
    59ee:	92 c0       	rjmp	.+292    	; 0x5b14 <__fp_inf>
    59f0:	dc c0       	rjmp	.+440    	; 0x5baa <__fp_szero>
    59f2:	5f 3f       	cpi	r21, 0xFF	; 255
    59f4:	ec f3       	brlt	.-6      	; 0x59f0 <__divsf3_pse+0x6a>
    59f6:	98 3e       	cpi	r25, 0xE8	; 232
    59f8:	dc f3       	brlt	.-10     	; 0x59f0 <__divsf3_pse+0x6a>
    59fa:	86 95       	lsr	r24
    59fc:	77 95       	ror	r23
    59fe:	67 95       	ror	r22
    5a00:	b7 95       	ror	r27
    5a02:	f7 95       	ror	r31
    5a04:	9f 5f       	subi	r25, 0xFF	; 255
    5a06:	c9 f7       	brne	.-14     	; 0x59fa <__divsf3_pse+0x74>
    5a08:	88 0f       	add	r24, r24
    5a0a:	91 1d       	adc	r25, r1
    5a0c:	96 95       	lsr	r25
    5a0e:	87 95       	ror	r24
    5a10:	97 f9       	bld	r25, 7
    5a12:	08 95       	ret
    5a14:	e1 e0       	ldi	r30, 0x01	; 1
    5a16:	66 0f       	add	r22, r22
    5a18:	77 1f       	adc	r23, r23
    5a1a:	88 1f       	adc	r24, r24
    5a1c:	bb 1f       	adc	r27, r27
    5a1e:	62 17       	cp	r22, r18
    5a20:	73 07       	cpc	r23, r19
    5a22:	84 07       	cpc	r24, r20
    5a24:	ba 07       	cpc	r27, r26
    5a26:	20 f0       	brcs	.+8      	; 0x5a30 <__divsf3_pse+0xaa>
    5a28:	62 1b       	sub	r22, r18
    5a2a:	73 0b       	sbc	r23, r19
    5a2c:	84 0b       	sbc	r24, r20
    5a2e:	ba 0b       	sbc	r27, r26
    5a30:	ee 1f       	adc	r30, r30
    5a32:	88 f7       	brcc	.-30     	; 0x5a16 <__divsf3_pse+0x90>
    5a34:	e0 95       	com	r30
    5a36:	08 95       	ret

00005a38 <__fixsfsi>:
    5a38:	04 d0       	rcall	.+8      	; 0x5a42 <__fixunssfsi>
    5a3a:	68 94       	set
    5a3c:	b1 11       	cpse	r27, r1
    5a3e:	b5 c0       	rjmp	.+362    	; 0x5baa <__fp_szero>
    5a40:	08 95       	ret

00005a42 <__fixunssfsi>:
    5a42:	98 d0       	rcall	.+304    	; 0x5b74 <__fp_splitA>
    5a44:	88 f0       	brcs	.+34     	; 0x5a68 <__fixunssfsi+0x26>
    5a46:	9f 57       	subi	r25, 0x7F	; 127
    5a48:	90 f0       	brcs	.+36     	; 0x5a6e <__fixunssfsi+0x2c>
    5a4a:	b9 2f       	mov	r27, r25
    5a4c:	99 27       	eor	r25, r25
    5a4e:	b7 51       	subi	r27, 0x17	; 23
    5a50:	a0 f0       	brcs	.+40     	; 0x5a7a <__fixunssfsi+0x38>
    5a52:	d1 f0       	breq	.+52     	; 0x5a88 <__fixunssfsi+0x46>
    5a54:	66 0f       	add	r22, r22
    5a56:	77 1f       	adc	r23, r23
    5a58:	88 1f       	adc	r24, r24
    5a5a:	99 1f       	adc	r25, r25
    5a5c:	1a f0       	brmi	.+6      	; 0x5a64 <__fixunssfsi+0x22>
    5a5e:	ba 95       	dec	r27
    5a60:	c9 f7       	brne	.-14     	; 0x5a54 <__fixunssfsi+0x12>
    5a62:	12 c0       	rjmp	.+36     	; 0x5a88 <__fixunssfsi+0x46>
    5a64:	b1 30       	cpi	r27, 0x01	; 1
    5a66:	81 f0       	breq	.+32     	; 0x5a88 <__fixunssfsi+0x46>
    5a68:	9f d0       	rcall	.+318    	; 0x5ba8 <__fp_zero>
    5a6a:	b1 e0       	ldi	r27, 0x01	; 1
    5a6c:	08 95       	ret
    5a6e:	9c c0       	rjmp	.+312    	; 0x5ba8 <__fp_zero>
    5a70:	67 2f       	mov	r22, r23
    5a72:	78 2f       	mov	r23, r24
    5a74:	88 27       	eor	r24, r24
    5a76:	b8 5f       	subi	r27, 0xF8	; 248
    5a78:	39 f0       	breq	.+14     	; 0x5a88 <__fixunssfsi+0x46>
    5a7a:	b9 3f       	cpi	r27, 0xF9	; 249
    5a7c:	cc f3       	brlt	.-14     	; 0x5a70 <__fixunssfsi+0x2e>
    5a7e:	86 95       	lsr	r24
    5a80:	77 95       	ror	r23
    5a82:	67 95       	ror	r22
    5a84:	b3 95       	inc	r27
    5a86:	d9 f7       	brne	.-10     	; 0x5a7e <__fixunssfsi+0x3c>
    5a88:	3e f4       	brtc	.+14     	; 0x5a98 <__fixunssfsi+0x56>
    5a8a:	90 95       	com	r25
    5a8c:	80 95       	com	r24
    5a8e:	70 95       	com	r23
    5a90:	61 95       	neg	r22
    5a92:	7f 4f       	sbci	r23, 0xFF	; 255
    5a94:	8f 4f       	sbci	r24, 0xFF	; 255
    5a96:	9f 4f       	sbci	r25, 0xFF	; 255
    5a98:	08 95       	ret

00005a9a <__floatunsisf>:
    5a9a:	e8 94       	clt
    5a9c:	09 c0       	rjmp	.+18     	; 0x5ab0 <__floatsisf+0x12>

00005a9e <__floatsisf>:
    5a9e:	97 fb       	bst	r25, 7
    5aa0:	3e f4       	brtc	.+14     	; 0x5ab0 <__floatsisf+0x12>
    5aa2:	90 95       	com	r25
    5aa4:	80 95       	com	r24
    5aa6:	70 95       	com	r23
    5aa8:	61 95       	neg	r22
    5aaa:	7f 4f       	sbci	r23, 0xFF	; 255
    5aac:	8f 4f       	sbci	r24, 0xFF	; 255
    5aae:	9f 4f       	sbci	r25, 0xFF	; 255
    5ab0:	99 23       	and	r25, r25
    5ab2:	a9 f0       	breq	.+42     	; 0x5ade <__floatsisf+0x40>
    5ab4:	f9 2f       	mov	r31, r25
    5ab6:	96 e9       	ldi	r25, 0x96	; 150
    5ab8:	bb 27       	eor	r27, r27
    5aba:	93 95       	inc	r25
    5abc:	f6 95       	lsr	r31
    5abe:	87 95       	ror	r24
    5ac0:	77 95       	ror	r23
    5ac2:	67 95       	ror	r22
    5ac4:	b7 95       	ror	r27
    5ac6:	f1 11       	cpse	r31, r1
    5ac8:	f8 cf       	rjmp	.-16     	; 0x5aba <__floatsisf+0x1c>
    5aca:	fa f4       	brpl	.+62     	; 0x5b0a <__floatsisf+0x6c>
    5acc:	bb 0f       	add	r27, r27
    5ace:	11 f4       	brne	.+4      	; 0x5ad4 <__floatsisf+0x36>
    5ad0:	60 ff       	sbrs	r22, 0
    5ad2:	1b c0       	rjmp	.+54     	; 0x5b0a <__floatsisf+0x6c>
    5ad4:	6f 5f       	subi	r22, 0xFF	; 255
    5ad6:	7f 4f       	sbci	r23, 0xFF	; 255
    5ad8:	8f 4f       	sbci	r24, 0xFF	; 255
    5ada:	9f 4f       	sbci	r25, 0xFF	; 255
    5adc:	16 c0       	rjmp	.+44     	; 0x5b0a <__floatsisf+0x6c>
    5ade:	88 23       	and	r24, r24
    5ae0:	11 f0       	breq	.+4      	; 0x5ae6 <__floatsisf+0x48>
    5ae2:	96 e9       	ldi	r25, 0x96	; 150
    5ae4:	11 c0       	rjmp	.+34     	; 0x5b08 <__floatsisf+0x6a>
    5ae6:	77 23       	and	r23, r23
    5ae8:	21 f0       	breq	.+8      	; 0x5af2 <__floatsisf+0x54>
    5aea:	9e e8       	ldi	r25, 0x8E	; 142
    5aec:	87 2f       	mov	r24, r23
    5aee:	76 2f       	mov	r23, r22
    5af0:	05 c0       	rjmp	.+10     	; 0x5afc <__floatsisf+0x5e>
    5af2:	66 23       	and	r22, r22
    5af4:	71 f0       	breq	.+28     	; 0x5b12 <__floatsisf+0x74>
    5af6:	96 e8       	ldi	r25, 0x86	; 134
    5af8:	86 2f       	mov	r24, r22
    5afa:	70 e0       	ldi	r23, 0x00	; 0
    5afc:	60 e0       	ldi	r22, 0x00	; 0
    5afe:	2a f0       	brmi	.+10     	; 0x5b0a <__floatsisf+0x6c>
    5b00:	9a 95       	dec	r25
    5b02:	66 0f       	add	r22, r22
    5b04:	77 1f       	adc	r23, r23
    5b06:	88 1f       	adc	r24, r24
    5b08:	da f7       	brpl	.-10     	; 0x5b00 <__floatsisf+0x62>
    5b0a:	88 0f       	add	r24, r24
    5b0c:	96 95       	lsr	r25
    5b0e:	87 95       	ror	r24
    5b10:	97 f9       	bld	r25, 7
    5b12:	08 95       	ret

00005b14 <__fp_inf>:
    5b14:	97 f9       	bld	r25, 7
    5b16:	9f 67       	ori	r25, 0x7F	; 127
    5b18:	80 e8       	ldi	r24, 0x80	; 128
    5b1a:	70 e0       	ldi	r23, 0x00	; 0
    5b1c:	60 e0       	ldi	r22, 0x00	; 0
    5b1e:	08 95       	ret

00005b20 <__fp_nan>:
    5b20:	9f ef       	ldi	r25, 0xFF	; 255
    5b22:	80 ec       	ldi	r24, 0xC0	; 192
    5b24:	08 95       	ret

00005b26 <__fp_pscA>:
    5b26:	00 24       	eor	r0, r0
    5b28:	0a 94       	dec	r0
    5b2a:	16 16       	cp	r1, r22
    5b2c:	17 06       	cpc	r1, r23
    5b2e:	18 06       	cpc	r1, r24
    5b30:	09 06       	cpc	r0, r25
    5b32:	08 95       	ret

00005b34 <__fp_pscB>:
    5b34:	00 24       	eor	r0, r0
    5b36:	0a 94       	dec	r0
    5b38:	12 16       	cp	r1, r18
    5b3a:	13 06       	cpc	r1, r19
    5b3c:	14 06       	cpc	r1, r20
    5b3e:	05 06       	cpc	r0, r21
    5b40:	08 95       	ret

00005b42 <__fp_round>:
    5b42:	09 2e       	mov	r0, r25
    5b44:	03 94       	inc	r0
    5b46:	00 0c       	add	r0, r0
    5b48:	11 f4       	brne	.+4      	; 0x5b4e <__fp_round+0xc>
    5b4a:	88 23       	and	r24, r24
    5b4c:	52 f0       	brmi	.+20     	; 0x5b62 <__fp_round+0x20>
    5b4e:	bb 0f       	add	r27, r27
    5b50:	40 f4       	brcc	.+16     	; 0x5b62 <__fp_round+0x20>
    5b52:	bf 2b       	or	r27, r31
    5b54:	11 f4       	brne	.+4      	; 0x5b5a <__fp_round+0x18>
    5b56:	60 ff       	sbrs	r22, 0
    5b58:	04 c0       	rjmp	.+8      	; 0x5b62 <__fp_round+0x20>
    5b5a:	6f 5f       	subi	r22, 0xFF	; 255
    5b5c:	7f 4f       	sbci	r23, 0xFF	; 255
    5b5e:	8f 4f       	sbci	r24, 0xFF	; 255
    5b60:	9f 4f       	sbci	r25, 0xFF	; 255
    5b62:	08 95       	ret

00005b64 <__fp_split3>:
    5b64:	57 fd       	sbrc	r21, 7
    5b66:	90 58       	subi	r25, 0x80	; 128
    5b68:	44 0f       	add	r20, r20
    5b6a:	55 1f       	adc	r21, r21
    5b6c:	59 f0       	breq	.+22     	; 0x5b84 <__fp_splitA+0x10>
    5b6e:	5f 3f       	cpi	r21, 0xFF	; 255
    5b70:	71 f0       	breq	.+28     	; 0x5b8e <__fp_splitA+0x1a>
    5b72:	47 95       	ror	r20

00005b74 <__fp_splitA>:
    5b74:	88 0f       	add	r24, r24
    5b76:	97 fb       	bst	r25, 7
    5b78:	99 1f       	adc	r25, r25
    5b7a:	61 f0       	breq	.+24     	; 0x5b94 <__fp_splitA+0x20>
    5b7c:	9f 3f       	cpi	r25, 0xFF	; 255
    5b7e:	79 f0       	breq	.+30     	; 0x5b9e <__fp_splitA+0x2a>
    5b80:	87 95       	ror	r24
    5b82:	08 95       	ret
    5b84:	12 16       	cp	r1, r18
    5b86:	13 06       	cpc	r1, r19
    5b88:	14 06       	cpc	r1, r20
    5b8a:	55 1f       	adc	r21, r21
    5b8c:	f2 cf       	rjmp	.-28     	; 0x5b72 <__fp_split3+0xe>
    5b8e:	46 95       	lsr	r20
    5b90:	f1 df       	rcall	.-30     	; 0x5b74 <__fp_splitA>
    5b92:	08 c0       	rjmp	.+16     	; 0x5ba4 <__fp_splitA+0x30>
    5b94:	16 16       	cp	r1, r22
    5b96:	17 06       	cpc	r1, r23
    5b98:	18 06       	cpc	r1, r24
    5b9a:	99 1f       	adc	r25, r25
    5b9c:	f1 cf       	rjmp	.-30     	; 0x5b80 <__fp_splitA+0xc>
    5b9e:	86 95       	lsr	r24
    5ba0:	71 05       	cpc	r23, r1
    5ba2:	61 05       	cpc	r22, r1
    5ba4:	08 94       	sec
    5ba6:	08 95       	ret

00005ba8 <__fp_zero>:
    5ba8:	e8 94       	clt

00005baa <__fp_szero>:
    5baa:	bb 27       	eor	r27, r27
    5bac:	66 27       	eor	r22, r22
    5bae:	77 27       	eor	r23, r23
    5bb0:	cb 01       	movw	r24, r22
    5bb2:	97 f9       	bld	r25, 7
    5bb4:	08 95       	ret

00005bb6 <__mulsf3>:
    5bb6:	0b d0       	rcall	.+22     	; 0x5bce <__mulsf3x>
    5bb8:	c4 cf       	rjmp	.-120    	; 0x5b42 <__fp_round>
    5bba:	b5 df       	rcall	.-150    	; 0x5b26 <__fp_pscA>
    5bbc:	28 f0       	brcs	.+10     	; 0x5bc8 <__mulsf3+0x12>
    5bbe:	ba df       	rcall	.-140    	; 0x5b34 <__fp_pscB>
    5bc0:	18 f0       	brcs	.+6      	; 0x5bc8 <__mulsf3+0x12>
    5bc2:	95 23       	and	r25, r21
    5bc4:	09 f0       	breq	.+2      	; 0x5bc8 <__mulsf3+0x12>
    5bc6:	a6 cf       	rjmp	.-180    	; 0x5b14 <__fp_inf>
    5bc8:	ab cf       	rjmp	.-170    	; 0x5b20 <__fp_nan>
    5bca:	11 24       	eor	r1, r1
    5bcc:	ee cf       	rjmp	.-36     	; 0x5baa <__fp_szero>

00005bce <__mulsf3x>:
    5bce:	ca df       	rcall	.-108    	; 0x5b64 <__fp_split3>
    5bd0:	a0 f3       	brcs	.-24     	; 0x5bba <__mulsf3+0x4>

00005bd2 <__mulsf3_pse>:
    5bd2:	95 9f       	mul	r25, r21
    5bd4:	d1 f3       	breq	.-12     	; 0x5bca <__mulsf3+0x14>
    5bd6:	95 0f       	add	r25, r21
    5bd8:	50 e0       	ldi	r21, 0x00	; 0
    5bda:	55 1f       	adc	r21, r21
    5bdc:	62 9f       	mul	r22, r18
    5bde:	f0 01       	movw	r30, r0
    5be0:	72 9f       	mul	r23, r18
    5be2:	bb 27       	eor	r27, r27
    5be4:	f0 0d       	add	r31, r0
    5be6:	b1 1d       	adc	r27, r1
    5be8:	63 9f       	mul	r22, r19
    5bea:	aa 27       	eor	r26, r26
    5bec:	f0 0d       	add	r31, r0
    5bee:	b1 1d       	adc	r27, r1
    5bf0:	aa 1f       	adc	r26, r26
    5bf2:	64 9f       	mul	r22, r20
    5bf4:	66 27       	eor	r22, r22
    5bf6:	b0 0d       	add	r27, r0
    5bf8:	a1 1d       	adc	r26, r1
    5bfa:	66 1f       	adc	r22, r22
    5bfc:	82 9f       	mul	r24, r18
    5bfe:	22 27       	eor	r18, r18
    5c00:	b0 0d       	add	r27, r0
    5c02:	a1 1d       	adc	r26, r1
    5c04:	62 1f       	adc	r22, r18
    5c06:	73 9f       	mul	r23, r19
    5c08:	b0 0d       	add	r27, r0
    5c0a:	a1 1d       	adc	r26, r1
    5c0c:	62 1f       	adc	r22, r18
    5c0e:	83 9f       	mul	r24, r19
    5c10:	a0 0d       	add	r26, r0
    5c12:	61 1d       	adc	r22, r1
    5c14:	22 1f       	adc	r18, r18
    5c16:	74 9f       	mul	r23, r20
    5c18:	33 27       	eor	r19, r19
    5c1a:	a0 0d       	add	r26, r0
    5c1c:	61 1d       	adc	r22, r1
    5c1e:	23 1f       	adc	r18, r19
    5c20:	84 9f       	mul	r24, r20
    5c22:	60 0d       	add	r22, r0
    5c24:	21 1d       	adc	r18, r1
    5c26:	82 2f       	mov	r24, r18
    5c28:	76 2f       	mov	r23, r22
    5c2a:	6a 2f       	mov	r22, r26
    5c2c:	11 24       	eor	r1, r1
    5c2e:	9f 57       	subi	r25, 0x7F	; 127
    5c30:	50 40       	sbci	r21, 0x00	; 0
    5c32:	8a f0       	brmi	.+34     	; 0x5c56 <__mulsf3_pse+0x84>
    5c34:	e1 f0       	breq	.+56     	; 0x5c6e <__mulsf3_pse+0x9c>
    5c36:	88 23       	and	r24, r24
    5c38:	4a f0       	brmi	.+18     	; 0x5c4c <__mulsf3_pse+0x7a>
    5c3a:	ee 0f       	add	r30, r30
    5c3c:	ff 1f       	adc	r31, r31
    5c3e:	bb 1f       	adc	r27, r27
    5c40:	66 1f       	adc	r22, r22
    5c42:	77 1f       	adc	r23, r23
    5c44:	88 1f       	adc	r24, r24
    5c46:	91 50       	subi	r25, 0x01	; 1
    5c48:	50 40       	sbci	r21, 0x00	; 0
    5c4a:	a9 f7       	brne	.-22     	; 0x5c36 <__mulsf3_pse+0x64>
    5c4c:	9e 3f       	cpi	r25, 0xFE	; 254
    5c4e:	51 05       	cpc	r21, r1
    5c50:	70 f0       	brcs	.+28     	; 0x5c6e <__mulsf3_pse+0x9c>
    5c52:	60 cf       	rjmp	.-320    	; 0x5b14 <__fp_inf>
    5c54:	aa cf       	rjmp	.-172    	; 0x5baa <__fp_szero>
    5c56:	5f 3f       	cpi	r21, 0xFF	; 255
    5c58:	ec f3       	brlt	.-6      	; 0x5c54 <__mulsf3_pse+0x82>
    5c5a:	98 3e       	cpi	r25, 0xE8	; 232
    5c5c:	dc f3       	brlt	.-10     	; 0x5c54 <__mulsf3_pse+0x82>
    5c5e:	86 95       	lsr	r24
    5c60:	77 95       	ror	r23
    5c62:	67 95       	ror	r22
    5c64:	b7 95       	ror	r27
    5c66:	f7 95       	ror	r31
    5c68:	e7 95       	ror	r30
    5c6a:	9f 5f       	subi	r25, 0xFF	; 255
    5c6c:	c1 f7       	brne	.-16     	; 0x5c5e <__mulsf3_pse+0x8c>
    5c6e:	fe 2b       	or	r31, r30
    5c70:	88 0f       	add	r24, r24
    5c72:	91 1d       	adc	r25, r1
    5c74:	96 95       	lsr	r25
    5c76:	87 95       	ror	r24
    5c78:	97 f9       	bld	r25, 7
    5c7a:	08 95       	ret

00005c7c <__udivmodsi4>:
    5c7c:	a1 e2       	ldi	r26, 0x21	; 33
    5c7e:	1a 2e       	mov	r1, r26
    5c80:	aa 1b       	sub	r26, r26
    5c82:	bb 1b       	sub	r27, r27
    5c84:	fd 01       	movw	r30, r26
    5c86:	0d c0       	rjmp	.+26     	; 0x5ca2 <__udivmodsi4_ep>

00005c88 <__udivmodsi4_loop>:
    5c88:	aa 1f       	adc	r26, r26
    5c8a:	bb 1f       	adc	r27, r27
    5c8c:	ee 1f       	adc	r30, r30
    5c8e:	ff 1f       	adc	r31, r31
    5c90:	a2 17       	cp	r26, r18
    5c92:	b3 07       	cpc	r27, r19
    5c94:	e4 07       	cpc	r30, r20
    5c96:	f5 07       	cpc	r31, r21
    5c98:	20 f0       	brcs	.+8      	; 0x5ca2 <__udivmodsi4_ep>
    5c9a:	a2 1b       	sub	r26, r18
    5c9c:	b3 0b       	sbc	r27, r19
    5c9e:	e4 0b       	sbc	r30, r20
    5ca0:	f5 0b       	sbc	r31, r21

00005ca2 <__udivmodsi4_ep>:
    5ca2:	66 1f       	adc	r22, r22
    5ca4:	77 1f       	adc	r23, r23
    5ca6:	88 1f       	adc	r24, r24
    5ca8:	99 1f       	adc	r25, r25
    5caa:	1a 94       	dec	r1
    5cac:	69 f7       	brne	.-38     	; 0x5c88 <__udivmodsi4_loop>
    5cae:	60 95       	com	r22
    5cb0:	70 95       	com	r23
    5cb2:	80 95       	com	r24
    5cb4:	90 95       	com	r25
    5cb6:	9b 01       	movw	r18, r22
    5cb8:	ac 01       	movw	r20, r24
    5cba:	bd 01       	movw	r22, r26
    5cbc:	cf 01       	movw	r24, r30
    5cbe:	08 95       	ret

00005cc0 <__tablejump2__>:
    5cc0:	ee 0f       	add	r30, r30
    5cc2:	ff 1f       	adc	r31, r31
    5cc4:	88 1f       	adc	r24, r24
    5cc6:	8b bf       	out	0x3b, r24	; 59
    5cc8:	07 90       	elpm	r0, Z+
    5cca:	f6 91       	elpm	r31, Z
    5ccc:	e0 2d       	mov	r30, r0
    5cce:	19 94       	eijmp

00005cd0 <malloc>:
    5cd0:	0f 93       	push	r16
    5cd2:	1f 93       	push	r17
    5cd4:	cf 93       	push	r28
    5cd6:	df 93       	push	r29
    5cd8:	82 30       	cpi	r24, 0x02	; 2
    5cda:	91 05       	cpc	r25, r1
    5cdc:	10 f4       	brcc	.+4      	; 0x5ce2 <malloc+0x12>
    5cde:	82 e0       	ldi	r24, 0x02	; 2
    5ce0:	90 e0       	ldi	r25, 0x00	; 0
    5ce2:	e0 91 24 18 	lds	r30, 0x1824	; 0x801824 <__flp>
    5ce6:	f0 91 25 18 	lds	r31, 0x1825	; 0x801825 <__flp+0x1>
    5cea:	20 e0       	ldi	r18, 0x00	; 0
    5cec:	30 e0       	ldi	r19, 0x00	; 0
    5cee:	a0 e0       	ldi	r26, 0x00	; 0
    5cf0:	b0 e0       	ldi	r27, 0x00	; 0
    5cf2:	30 97       	sbiw	r30, 0x00	; 0
    5cf4:	19 f1       	breq	.+70     	; 0x5d3c <malloc+0x6c>
    5cf6:	40 81       	ld	r20, Z
    5cf8:	51 81       	ldd	r21, Z+1	; 0x01
    5cfa:	02 81       	ldd	r16, Z+2	; 0x02
    5cfc:	13 81       	ldd	r17, Z+3	; 0x03
    5cfe:	48 17       	cp	r20, r24
    5d00:	59 07       	cpc	r21, r25
    5d02:	c8 f0       	brcs	.+50     	; 0x5d36 <malloc+0x66>
    5d04:	84 17       	cp	r24, r20
    5d06:	95 07       	cpc	r25, r21
    5d08:	69 f4       	brne	.+26     	; 0x5d24 <malloc+0x54>
    5d0a:	10 97       	sbiw	r26, 0x00	; 0
    5d0c:	31 f0       	breq	.+12     	; 0x5d1a <malloc+0x4a>
    5d0e:	12 96       	adiw	r26, 0x02	; 2
    5d10:	0c 93       	st	X, r16
    5d12:	12 97       	sbiw	r26, 0x02	; 2
    5d14:	13 96       	adiw	r26, 0x03	; 3
    5d16:	1c 93       	st	X, r17
    5d18:	27 c0       	rjmp	.+78     	; 0x5d68 <malloc+0x98>
    5d1a:	00 93 24 18 	sts	0x1824, r16	; 0x801824 <__flp>
    5d1e:	10 93 25 18 	sts	0x1825, r17	; 0x801825 <__flp+0x1>
    5d22:	22 c0       	rjmp	.+68     	; 0x5d68 <malloc+0x98>
    5d24:	21 15       	cp	r18, r1
    5d26:	31 05       	cpc	r19, r1
    5d28:	19 f0       	breq	.+6      	; 0x5d30 <malloc+0x60>
    5d2a:	42 17       	cp	r20, r18
    5d2c:	53 07       	cpc	r21, r19
    5d2e:	18 f4       	brcc	.+6      	; 0x5d36 <malloc+0x66>
    5d30:	9a 01       	movw	r18, r20
    5d32:	bd 01       	movw	r22, r26
    5d34:	ef 01       	movw	r28, r30
    5d36:	df 01       	movw	r26, r30
    5d38:	f8 01       	movw	r30, r16
    5d3a:	db cf       	rjmp	.-74     	; 0x5cf2 <malloc+0x22>
    5d3c:	21 15       	cp	r18, r1
    5d3e:	31 05       	cpc	r19, r1
    5d40:	f9 f0       	breq	.+62     	; 0x5d80 <malloc+0xb0>
    5d42:	28 1b       	sub	r18, r24
    5d44:	39 0b       	sbc	r19, r25
    5d46:	24 30       	cpi	r18, 0x04	; 4
    5d48:	31 05       	cpc	r19, r1
    5d4a:	80 f4       	brcc	.+32     	; 0x5d6c <malloc+0x9c>
    5d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    5d4e:	9b 81       	ldd	r25, Y+3	; 0x03
    5d50:	61 15       	cp	r22, r1
    5d52:	71 05       	cpc	r23, r1
    5d54:	21 f0       	breq	.+8      	; 0x5d5e <malloc+0x8e>
    5d56:	fb 01       	movw	r30, r22
    5d58:	93 83       	std	Z+3, r25	; 0x03
    5d5a:	82 83       	std	Z+2, r24	; 0x02
    5d5c:	04 c0       	rjmp	.+8      	; 0x5d66 <malloc+0x96>
    5d5e:	90 93 25 18 	sts	0x1825, r25	; 0x801825 <__flp+0x1>
    5d62:	80 93 24 18 	sts	0x1824, r24	; 0x801824 <__flp>
    5d66:	fe 01       	movw	r30, r28
    5d68:	32 96       	adiw	r30, 0x02	; 2
    5d6a:	44 c0       	rjmp	.+136    	; 0x5df4 <malloc+0x124>
    5d6c:	fe 01       	movw	r30, r28
    5d6e:	e2 0f       	add	r30, r18
    5d70:	f3 1f       	adc	r31, r19
    5d72:	81 93       	st	Z+, r24
    5d74:	91 93       	st	Z+, r25
    5d76:	22 50       	subi	r18, 0x02	; 2
    5d78:	31 09       	sbc	r19, r1
    5d7a:	39 83       	std	Y+1, r19	; 0x01
    5d7c:	28 83       	st	Y, r18
    5d7e:	3a c0       	rjmp	.+116    	; 0x5df4 <malloc+0x124>
    5d80:	20 91 22 18 	lds	r18, 0x1822	; 0x801822 <__brkval>
    5d84:	30 91 23 18 	lds	r19, 0x1823	; 0x801823 <__brkval+0x1>
    5d88:	23 2b       	or	r18, r19
    5d8a:	41 f4       	brne	.+16     	; 0x5d9c <malloc+0xcc>
    5d8c:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5d90:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5d94:	30 93 23 18 	sts	0x1823, r19	; 0x801823 <__brkval+0x1>
    5d98:	20 93 22 18 	sts	0x1822, r18	; 0x801822 <__brkval>
    5d9c:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    5da0:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    5da4:	21 15       	cp	r18, r1
    5da6:	31 05       	cpc	r19, r1
    5da8:	41 f4       	brne	.+16     	; 0x5dba <malloc+0xea>
    5daa:	2d b7       	in	r18, 0x3d	; 61
    5dac:	3e b7       	in	r19, 0x3e	; 62
    5dae:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5db2:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5db6:	24 1b       	sub	r18, r20
    5db8:	35 0b       	sbc	r19, r21
    5dba:	e0 91 22 18 	lds	r30, 0x1822	; 0x801822 <__brkval>
    5dbe:	f0 91 23 18 	lds	r31, 0x1823	; 0x801823 <__brkval+0x1>
    5dc2:	e2 17       	cp	r30, r18
    5dc4:	f3 07       	cpc	r31, r19
    5dc6:	a0 f4       	brcc	.+40     	; 0x5df0 <malloc+0x120>
    5dc8:	2e 1b       	sub	r18, r30
    5dca:	3f 0b       	sbc	r19, r31
    5dcc:	28 17       	cp	r18, r24
    5dce:	39 07       	cpc	r19, r25
    5dd0:	78 f0       	brcs	.+30     	; 0x5df0 <malloc+0x120>
    5dd2:	ac 01       	movw	r20, r24
    5dd4:	4e 5f       	subi	r20, 0xFE	; 254
    5dd6:	5f 4f       	sbci	r21, 0xFF	; 255
    5dd8:	24 17       	cp	r18, r20
    5dda:	35 07       	cpc	r19, r21
    5ddc:	48 f0       	brcs	.+18     	; 0x5df0 <malloc+0x120>
    5dde:	4e 0f       	add	r20, r30
    5de0:	5f 1f       	adc	r21, r31
    5de2:	50 93 23 18 	sts	0x1823, r21	; 0x801823 <__brkval+0x1>
    5de6:	40 93 22 18 	sts	0x1822, r20	; 0x801822 <__brkval>
    5dea:	81 93       	st	Z+, r24
    5dec:	91 93       	st	Z+, r25
    5dee:	02 c0       	rjmp	.+4      	; 0x5df4 <malloc+0x124>
    5df0:	e0 e0       	ldi	r30, 0x00	; 0
    5df2:	f0 e0       	ldi	r31, 0x00	; 0
    5df4:	cf 01       	movw	r24, r30
    5df6:	df 91       	pop	r29
    5df8:	cf 91       	pop	r28
    5dfa:	1f 91       	pop	r17
    5dfc:	0f 91       	pop	r16
    5dfe:	08 95       	ret

00005e00 <free>:
    5e00:	cf 93       	push	r28
    5e02:	df 93       	push	r29
    5e04:	00 97       	sbiw	r24, 0x00	; 0
    5e06:	09 f4       	brne	.+2      	; 0x5e0a <free+0xa>
    5e08:	81 c0       	rjmp	.+258    	; 0x5f0c <free+0x10c>
    5e0a:	fc 01       	movw	r30, r24
    5e0c:	32 97       	sbiw	r30, 0x02	; 2
    5e0e:	13 82       	std	Z+3, r1	; 0x03
    5e10:	12 82       	std	Z+2, r1	; 0x02
    5e12:	a0 91 24 18 	lds	r26, 0x1824	; 0x801824 <__flp>
    5e16:	b0 91 25 18 	lds	r27, 0x1825	; 0x801825 <__flp+0x1>
    5e1a:	10 97       	sbiw	r26, 0x00	; 0
    5e1c:	81 f4       	brne	.+32     	; 0x5e3e <free+0x3e>
    5e1e:	20 81       	ld	r18, Z
    5e20:	31 81       	ldd	r19, Z+1	; 0x01
    5e22:	82 0f       	add	r24, r18
    5e24:	93 1f       	adc	r25, r19
    5e26:	20 91 22 18 	lds	r18, 0x1822	; 0x801822 <__brkval>
    5e2a:	30 91 23 18 	lds	r19, 0x1823	; 0x801823 <__brkval+0x1>
    5e2e:	28 17       	cp	r18, r24
    5e30:	39 07       	cpc	r19, r25
    5e32:	51 f5       	brne	.+84     	; 0x5e88 <free+0x88>
    5e34:	f0 93 23 18 	sts	0x1823, r31	; 0x801823 <__brkval+0x1>
    5e38:	e0 93 22 18 	sts	0x1822, r30	; 0x801822 <__brkval>
    5e3c:	67 c0       	rjmp	.+206    	; 0x5f0c <free+0x10c>
    5e3e:	ed 01       	movw	r28, r26
    5e40:	20 e0       	ldi	r18, 0x00	; 0
    5e42:	30 e0       	ldi	r19, 0x00	; 0
    5e44:	ce 17       	cp	r28, r30
    5e46:	df 07       	cpc	r29, r31
    5e48:	40 f4       	brcc	.+16     	; 0x5e5a <free+0x5a>
    5e4a:	4a 81       	ldd	r20, Y+2	; 0x02
    5e4c:	5b 81       	ldd	r21, Y+3	; 0x03
    5e4e:	9e 01       	movw	r18, r28
    5e50:	41 15       	cp	r20, r1
    5e52:	51 05       	cpc	r21, r1
    5e54:	f1 f0       	breq	.+60     	; 0x5e92 <free+0x92>
    5e56:	ea 01       	movw	r28, r20
    5e58:	f5 cf       	rjmp	.-22     	; 0x5e44 <free+0x44>
    5e5a:	d3 83       	std	Z+3, r29	; 0x03
    5e5c:	c2 83       	std	Z+2, r28	; 0x02
    5e5e:	40 81       	ld	r20, Z
    5e60:	51 81       	ldd	r21, Z+1	; 0x01
    5e62:	84 0f       	add	r24, r20
    5e64:	95 1f       	adc	r25, r21
    5e66:	c8 17       	cp	r28, r24
    5e68:	d9 07       	cpc	r29, r25
    5e6a:	59 f4       	brne	.+22     	; 0x5e82 <free+0x82>
    5e6c:	88 81       	ld	r24, Y
    5e6e:	99 81       	ldd	r25, Y+1	; 0x01
    5e70:	84 0f       	add	r24, r20
    5e72:	95 1f       	adc	r25, r21
    5e74:	02 96       	adiw	r24, 0x02	; 2
    5e76:	91 83       	std	Z+1, r25	; 0x01
    5e78:	80 83       	st	Z, r24
    5e7a:	8a 81       	ldd	r24, Y+2	; 0x02
    5e7c:	9b 81       	ldd	r25, Y+3	; 0x03
    5e7e:	93 83       	std	Z+3, r25	; 0x03
    5e80:	82 83       	std	Z+2, r24	; 0x02
    5e82:	21 15       	cp	r18, r1
    5e84:	31 05       	cpc	r19, r1
    5e86:	29 f4       	brne	.+10     	; 0x5e92 <free+0x92>
    5e88:	f0 93 25 18 	sts	0x1825, r31	; 0x801825 <__flp+0x1>
    5e8c:	e0 93 24 18 	sts	0x1824, r30	; 0x801824 <__flp>
    5e90:	3d c0       	rjmp	.+122    	; 0x5f0c <free+0x10c>
    5e92:	e9 01       	movw	r28, r18
    5e94:	fb 83       	std	Y+3, r31	; 0x03
    5e96:	ea 83       	std	Y+2, r30	; 0x02
    5e98:	49 91       	ld	r20, Y+
    5e9a:	59 91       	ld	r21, Y+
    5e9c:	c4 0f       	add	r28, r20
    5e9e:	d5 1f       	adc	r29, r21
    5ea0:	ec 17       	cp	r30, r28
    5ea2:	fd 07       	cpc	r31, r29
    5ea4:	61 f4       	brne	.+24     	; 0x5ebe <free+0xbe>
    5ea6:	80 81       	ld	r24, Z
    5ea8:	91 81       	ldd	r25, Z+1	; 0x01
    5eaa:	84 0f       	add	r24, r20
    5eac:	95 1f       	adc	r25, r21
    5eae:	02 96       	adiw	r24, 0x02	; 2
    5eb0:	e9 01       	movw	r28, r18
    5eb2:	99 83       	std	Y+1, r25	; 0x01
    5eb4:	88 83       	st	Y, r24
    5eb6:	82 81       	ldd	r24, Z+2	; 0x02
    5eb8:	93 81       	ldd	r25, Z+3	; 0x03
    5eba:	9b 83       	std	Y+3, r25	; 0x03
    5ebc:	8a 83       	std	Y+2, r24	; 0x02
    5ebe:	e0 e0       	ldi	r30, 0x00	; 0
    5ec0:	f0 e0       	ldi	r31, 0x00	; 0
    5ec2:	12 96       	adiw	r26, 0x02	; 2
    5ec4:	8d 91       	ld	r24, X+
    5ec6:	9c 91       	ld	r25, X
    5ec8:	13 97       	sbiw	r26, 0x03	; 3
    5eca:	00 97       	sbiw	r24, 0x00	; 0
    5ecc:	19 f0       	breq	.+6      	; 0x5ed4 <free+0xd4>
    5ece:	fd 01       	movw	r30, r26
    5ed0:	dc 01       	movw	r26, r24
    5ed2:	f7 cf       	rjmp	.-18     	; 0x5ec2 <free+0xc2>
    5ed4:	8d 91       	ld	r24, X+
    5ed6:	9c 91       	ld	r25, X
    5ed8:	11 97       	sbiw	r26, 0x01	; 1
    5eda:	9d 01       	movw	r18, r26
    5edc:	2e 5f       	subi	r18, 0xFE	; 254
    5ede:	3f 4f       	sbci	r19, 0xFF	; 255
    5ee0:	82 0f       	add	r24, r18
    5ee2:	93 1f       	adc	r25, r19
    5ee4:	20 91 22 18 	lds	r18, 0x1822	; 0x801822 <__brkval>
    5ee8:	30 91 23 18 	lds	r19, 0x1823	; 0x801823 <__brkval+0x1>
    5eec:	28 17       	cp	r18, r24
    5eee:	39 07       	cpc	r19, r25
    5ef0:	69 f4       	brne	.+26     	; 0x5f0c <free+0x10c>
    5ef2:	30 97       	sbiw	r30, 0x00	; 0
    5ef4:	29 f4       	brne	.+10     	; 0x5f00 <free+0x100>
    5ef6:	10 92 25 18 	sts	0x1825, r1	; 0x801825 <__flp+0x1>
    5efa:	10 92 24 18 	sts	0x1824, r1	; 0x801824 <__flp>
    5efe:	02 c0       	rjmp	.+4      	; 0x5f04 <free+0x104>
    5f00:	13 82       	std	Z+3, r1	; 0x03
    5f02:	12 82       	std	Z+2, r1	; 0x02
    5f04:	b0 93 23 18 	sts	0x1823, r27	; 0x801823 <__brkval+0x1>
    5f08:	a0 93 22 18 	sts	0x1822, r26	; 0x801822 <__brkval>
    5f0c:	df 91       	pop	r29
    5f0e:	cf 91       	pop	r28
    5f10:	08 95       	ret

00005f12 <abort>:
    5f12:	81 e0       	ldi	r24, 0x01	; 1
    5f14:	90 e0       	ldi	r25, 0x00	; 0
    5f16:	f8 94       	cli
    5f18:	7d c3       	rjmp	.+1786   	; 0x6614 <_exit>

00005f1a <memcpy>:
    5f1a:	fb 01       	movw	r30, r22
    5f1c:	dc 01       	movw	r26, r24
    5f1e:	02 c0       	rjmp	.+4      	; 0x5f24 <memcpy+0xa>
    5f20:	01 90       	ld	r0, Z+
    5f22:	0d 92       	st	X+, r0
    5f24:	41 50       	subi	r20, 0x01	; 1
    5f26:	50 40       	sbci	r21, 0x00	; 0
    5f28:	d8 f7       	brcc	.-10     	; 0x5f20 <memcpy+0x6>
    5f2a:	08 95       	ret

00005f2c <memset>:
    5f2c:	dc 01       	movw	r26, r24
    5f2e:	01 c0       	rjmp	.+2      	; 0x5f32 <memset+0x6>
    5f30:	6d 93       	st	X+, r22
    5f32:	41 50       	subi	r20, 0x01	; 1
    5f34:	50 40       	sbci	r21, 0x00	; 0
    5f36:	e0 f7       	brcc	.-8      	; 0x5f30 <memset+0x4>
    5f38:	08 95       	ret

00005f3a <strcasestr>:
    5f3a:	fb 01       	movw	r30, r22
    5f3c:	51 91       	ld	r21, Z+
    5f3e:	55 23       	and	r21, r21
    5f40:	b1 f0       	breq	.+44     	; 0x5f6e <strcasestr+0x34>
    5f42:	bf 01       	movw	r22, r30
    5f44:	dc 01       	movw	r26, r24
    5f46:	05 2e       	mov	r0, r21
    5f48:	4d 91       	ld	r20, X+
    5f4a:	44 23       	and	r20, r20
    5f4c:	69 f0       	breq	.+26     	; 0x5f68 <strcasestr+0x2e>
    5f4e:	10 d0       	rcall	.+32     	; 0x5f70 <strcasestr+0x36>
    5f50:	d9 f7       	brne	.-10     	; 0x5f48 <strcasestr+0xe>
    5f52:	cd 01       	movw	r24, r26
    5f54:	01 90       	ld	r0, Z+
    5f56:	00 20       	and	r0, r0
    5f58:	49 f0       	breq	.+18     	; 0x5f6c <strcasestr+0x32>
    5f5a:	4d 91       	ld	r20, X+
    5f5c:	41 11       	cpse	r20, r1
    5f5e:	08 d0       	rcall	.+16     	; 0x5f70 <strcasestr+0x36>
    5f60:	c9 f3       	breq	.-14     	; 0x5f54 <strcasestr+0x1a>
    5f62:	fb 01       	movw	r30, r22
    5f64:	41 11       	cpse	r20, r1
    5f66:	ee cf       	rjmp	.-36     	; 0x5f44 <strcasestr+0xa>
    5f68:	81 e0       	ldi	r24, 0x01	; 1
    5f6a:	90 e0       	ldi	r25, 0x00	; 0
    5f6c:	01 97       	sbiw	r24, 0x01	; 1
    5f6e:	08 95       	ret
    5f70:	40 25       	eor	r20, r0
    5f72:	39 f0       	breq	.+14     	; 0x5f82 <strcasestr+0x48>
    5f74:	40 32       	cpi	r20, 0x20	; 32
    5f76:	29 f4       	brne	.+10     	; 0x5f82 <strcasestr+0x48>
    5f78:	40 29       	or	r20, r0
    5f7a:	4b 57       	subi	r20, 0x7B	; 123
    5f7c:	46 5e       	subi	r20, 0xE6	; 230
    5f7e:	08 f0       	brcs	.+2      	; 0x5f82 <strcasestr+0x48>
    5f80:	18 94       	sez
    5f82:	08 95       	ret

00005f84 <strcat>:
    5f84:	fb 01       	movw	r30, r22
    5f86:	dc 01       	movw	r26, r24
    5f88:	0d 90       	ld	r0, X+
    5f8a:	00 20       	and	r0, r0
    5f8c:	e9 f7       	brne	.-6      	; 0x5f88 <strcat+0x4>
    5f8e:	11 97       	sbiw	r26, 0x01	; 1
    5f90:	01 90       	ld	r0, Z+
    5f92:	0d 92       	st	X+, r0
    5f94:	00 20       	and	r0, r0
    5f96:	e1 f7       	brne	.-8      	; 0x5f90 <strcat+0xc>
    5f98:	08 95       	ret

00005f9a <strcpy>:
    5f9a:	fb 01       	movw	r30, r22
    5f9c:	dc 01       	movw	r26, r24
    5f9e:	01 90       	ld	r0, Z+
    5fa0:	0d 92       	st	X+, r0
    5fa2:	00 20       	and	r0, r0
    5fa4:	e1 f7       	brne	.-8      	; 0x5f9e <strcpy+0x4>
    5fa6:	08 95       	ret

00005fa8 <strncasecmp>:
    5fa8:	fb 01       	movw	r30, r22
    5faa:	dc 01       	movw	r26, r24
    5fac:	41 50       	subi	r20, 0x01	; 1
    5fae:	50 40       	sbci	r21, 0x00	; 0
    5fb0:	88 f0       	brcs	.+34     	; 0x5fd4 <strncasecmp+0x2c>
    5fb2:	8d 91       	ld	r24, X+
    5fb4:	81 34       	cpi	r24, 0x41	; 65
    5fb6:	1c f0       	brlt	.+6      	; 0x5fbe <strncasecmp+0x16>
    5fb8:	8b 35       	cpi	r24, 0x5B	; 91
    5fba:	0c f4       	brge	.+2      	; 0x5fbe <strncasecmp+0x16>
    5fbc:	80 5e       	subi	r24, 0xE0	; 224
    5fbe:	61 91       	ld	r22, Z+
    5fc0:	61 34       	cpi	r22, 0x41	; 65
    5fc2:	1c f0       	brlt	.+6      	; 0x5fca <strncasecmp+0x22>
    5fc4:	6b 35       	cpi	r22, 0x5B	; 91
    5fc6:	0c f4       	brge	.+2      	; 0x5fca <strncasecmp+0x22>
    5fc8:	60 5e       	subi	r22, 0xE0	; 224
    5fca:	86 1b       	sub	r24, r22
    5fcc:	61 11       	cpse	r22, r1
    5fce:	71 f3       	breq	.-36     	; 0x5fac <strncasecmp+0x4>
    5fd0:	99 0b       	sbc	r25, r25
    5fd2:	08 95       	ret
    5fd4:	88 1b       	sub	r24, r24
    5fd6:	fc cf       	rjmp	.-8      	; 0x5fd0 <strncasecmp+0x28>

00005fd8 <printf>:
    5fd8:	cf 93       	push	r28
    5fda:	df 93       	push	r29
    5fdc:	cd b7       	in	r28, 0x3d	; 61
    5fde:	de b7       	in	r29, 0x3e	; 62
    5fe0:	ae 01       	movw	r20, r28
    5fe2:	4a 5f       	subi	r20, 0xFA	; 250
    5fe4:	5f 4f       	sbci	r21, 0xFF	; 255
    5fe6:	fa 01       	movw	r30, r20
    5fe8:	61 91       	ld	r22, Z+
    5fea:	71 91       	ld	r23, Z+
    5fec:	af 01       	movw	r20, r30
    5fee:	80 91 28 18 	lds	r24, 0x1828	; 0x801828 <__iob+0x2>
    5ff2:	90 91 29 18 	lds	r25, 0x1829	; 0x801829 <__iob+0x3>
    5ff6:	61 d0       	rcall	.+194    	; 0x60ba <vfprintf>
    5ff8:	df 91       	pop	r29
    5ffa:	cf 91       	pop	r28
    5ffc:	08 95       	ret

00005ffe <puts>:
    5ffe:	0f 93       	push	r16
    6000:	1f 93       	push	r17
    6002:	cf 93       	push	r28
    6004:	df 93       	push	r29
    6006:	e0 91 28 18 	lds	r30, 0x1828	; 0x801828 <__iob+0x2>
    600a:	f0 91 29 18 	lds	r31, 0x1829	; 0x801829 <__iob+0x3>
    600e:	23 81       	ldd	r18, Z+3	; 0x03
    6010:	21 ff       	sbrs	r18, 1
    6012:	1b c0       	rjmp	.+54     	; 0x604a <puts+0x4c>
    6014:	8c 01       	movw	r16, r24
    6016:	d0 e0       	ldi	r29, 0x00	; 0
    6018:	c0 e0       	ldi	r28, 0x00	; 0
    601a:	f8 01       	movw	r30, r16
    601c:	81 91       	ld	r24, Z+
    601e:	8f 01       	movw	r16, r30
    6020:	60 91 28 18 	lds	r22, 0x1828	; 0x801828 <__iob+0x2>
    6024:	70 91 29 18 	lds	r23, 0x1829	; 0x801829 <__iob+0x3>
    6028:	db 01       	movw	r26, r22
    602a:	18 96       	adiw	r26, 0x08	; 8
    602c:	ed 91       	ld	r30, X+
    602e:	fc 91       	ld	r31, X
    6030:	19 97       	sbiw	r26, 0x09	; 9
    6032:	88 23       	and	r24, r24
    6034:	31 f0       	breq	.+12     	; 0x6042 <puts+0x44>
    6036:	19 95       	eicall
    6038:	89 2b       	or	r24, r25
    603a:	79 f3       	breq	.-34     	; 0x601a <puts+0x1c>
    603c:	df ef       	ldi	r29, 0xFF	; 255
    603e:	cf ef       	ldi	r28, 0xFF	; 255
    6040:	ec cf       	rjmp	.-40     	; 0x601a <puts+0x1c>
    6042:	8a e0       	ldi	r24, 0x0A	; 10
    6044:	19 95       	eicall
    6046:	89 2b       	or	r24, r25
    6048:	19 f0       	breq	.+6      	; 0x6050 <puts+0x52>
    604a:	8f ef       	ldi	r24, 0xFF	; 255
    604c:	9f ef       	ldi	r25, 0xFF	; 255
    604e:	02 c0       	rjmp	.+4      	; 0x6054 <puts+0x56>
    6050:	8d 2f       	mov	r24, r29
    6052:	9c 2f       	mov	r25, r28
    6054:	df 91       	pop	r29
    6056:	cf 91       	pop	r28
    6058:	1f 91       	pop	r17
    605a:	0f 91       	pop	r16
    605c:	08 95       	ret

0000605e <sprintf>:
    605e:	0f 93       	push	r16
    6060:	1f 93       	push	r17
    6062:	cf 93       	push	r28
    6064:	df 93       	push	r29
    6066:	cd b7       	in	r28, 0x3d	; 61
    6068:	de b7       	in	r29, 0x3e	; 62
    606a:	2e 97       	sbiw	r28, 0x0e	; 14
    606c:	0f b6       	in	r0, 0x3f	; 63
    606e:	f8 94       	cli
    6070:	de bf       	out	0x3e, r29	; 62
    6072:	0f be       	out	0x3f, r0	; 63
    6074:	cd bf       	out	0x3d, r28	; 61
    6076:	0e 89       	ldd	r16, Y+22	; 0x16
    6078:	1f 89       	ldd	r17, Y+23	; 0x17
    607a:	86 e0       	ldi	r24, 0x06	; 6
    607c:	8c 83       	std	Y+4, r24	; 0x04
    607e:	1a 83       	std	Y+2, r17	; 0x02
    6080:	09 83       	std	Y+1, r16	; 0x01
    6082:	8f ef       	ldi	r24, 0xFF	; 255
    6084:	9f e7       	ldi	r25, 0x7F	; 127
    6086:	9e 83       	std	Y+6, r25	; 0x06
    6088:	8d 83       	std	Y+5, r24	; 0x05
    608a:	ae 01       	movw	r20, r28
    608c:	46 5e       	subi	r20, 0xE6	; 230
    608e:	5f 4f       	sbci	r21, 0xFF	; 255
    6090:	68 8d       	ldd	r22, Y+24	; 0x18
    6092:	79 8d       	ldd	r23, Y+25	; 0x19
    6094:	ce 01       	movw	r24, r28
    6096:	01 96       	adiw	r24, 0x01	; 1
    6098:	10 d0       	rcall	.+32     	; 0x60ba <vfprintf>
    609a:	ef 81       	ldd	r30, Y+7	; 0x07
    609c:	f8 85       	ldd	r31, Y+8	; 0x08
    609e:	e0 0f       	add	r30, r16
    60a0:	f1 1f       	adc	r31, r17
    60a2:	10 82       	st	Z, r1
    60a4:	2e 96       	adiw	r28, 0x0e	; 14
    60a6:	0f b6       	in	r0, 0x3f	; 63
    60a8:	f8 94       	cli
    60aa:	de bf       	out	0x3e, r29	; 62
    60ac:	0f be       	out	0x3f, r0	; 63
    60ae:	cd bf       	out	0x3d, r28	; 61
    60b0:	df 91       	pop	r29
    60b2:	cf 91       	pop	r28
    60b4:	1f 91       	pop	r17
    60b6:	0f 91       	pop	r16
    60b8:	08 95       	ret

000060ba <vfprintf>:
    60ba:	2f 92       	push	r2
    60bc:	3f 92       	push	r3
    60be:	4f 92       	push	r4
    60c0:	5f 92       	push	r5
    60c2:	6f 92       	push	r6
    60c4:	7f 92       	push	r7
    60c6:	8f 92       	push	r8
    60c8:	9f 92       	push	r9
    60ca:	af 92       	push	r10
    60cc:	bf 92       	push	r11
    60ce:	cf 92       	push	r12
    60d0:	df 92       	push	r13
    60d2:	ef 92       	push	r14
    60d4:	ff 92       	push	r15
    60d6:	0f 93       	push	r16
    60d8:	1f 93       	push	r17
    60da:	cf 93       	push	r28
    60dc:	df 93       	push	r29
    60de:	cd b7       	in	r28, 0x3d	; 61
    60e0:	de b7       	in	r29, 0x3e	; 62
    60e2:	2b 97       	sbiw	r28, 0x0b	; 11
    60e4:	0f b6       	in	r0, 0x3f	; 63
    60e6:	f8 94       	cli
    60e8:	de bf       	out	0x3e, r29	; 62
    60ea:	0f be       	out	0x3f, r0	; 63
    60ec:	cd bf       	out	0x3d, r28	; 61
    60ee:	6c 01       	movw	r12, r24
    60f0:	7b 01       	movw	r14, r22
    60f2:	8a 01       	movw	r16, r20
    60f4:	fc 01       	movw	r30, r24
    60f6:	17 82       	std	Z+7, r1	; 0x07
    60f8:	16 82       	std	Z+6, r1	; 0x06
    60fa:	83 81       	ldd	r24, Z+3	; 0x03
    60fc:	81 ff       	sbrs	r24, 1
    60fe:	bf c1       	rjmp	.+894    	; 0x647e <vfprintf+0x3c4>
    6100:	ce 01       	movw	r24, r28
    6102:	01 96       	adiw	r24, 0x01	; 1
    6104:	3c 01       	movw	r6, r24
    6106:	f6 01       	movw	r30, r12
    6108:	93 81       	ldd	r25, Z+3	; 0x03
    610a:	f7 01       	movw	r30, r14
    610c:	93 fd       	sbrc	r25, 3
    610e:	85 91       	lpm	r24, Z+
    6110:	93 ff       	sbrs	r25, 3
    6112:	81 91       	ld	r24, Z+
    6114:	7f 01       	movw	r14, r30
    6116:	88 23       	and	r24, r24
    6118:	09 f4       	brne	.+2      	; 0x611c <vfprintf+0x62>
    611a:	ad c1       	rjmp	.+858    	; 0x6476 <vfprintf+0x3bc>
    611c:	85 32       	cpi	r24, 0x25	; 37
    611e:	39 f4       	brne	.+14     	; 0x612e <vfprintf+0x74>
    6120:	93 fd       	sbrc	r25, 3
    6122:	85 91       	lpm	r24, Z+
    6124:	93 ff       	sbrs	r25, 3
    6126:	81 91       	ld	r24, Z+
    6128:	7f 01       	movw	r14, r30
    612a:	85 32       	cpi	r24, 0x25	; 37
    612c:	21 f4       	brne	.+8      	; 0x6136 <vfprintf+0x7c>
    612e:	b6 01       	movw	r22, r12
    6130:	90 e0       	ldi	r25, 0x00	; 0
    6132:	d6 d1       	rcall	.+940    	; 0x64e0 <fputc>
    6134:	e8 cf       	rjmp	.-48     	; 0x6106 <vfprintf+0x4c>
    6136:	91 2c       	mov	r9, r1
    6138:	21 2c       	mov	r2, r1
    613a:	31 2c       	mov	r3, r1
    613c:	ff e1       	ldi	r31, 0x1F	; 31
    613e:	f3 15       	cp	r31, r3
    6140:	d8 f0       	brcs	.+54     	; 0x6178 <vfprintf+0xbe>
    6142:	8b 32       	cpi	r24, 0x2B	; 43
    6144:	79 f0       	breq	.+30     	; 0x6164 <vfprintf+0xaa>
    6146:	38 f4       	brcc	.+14     	; 0x6156 <vfprintf+0x9c>
    6148:	80 32       	cpi	r24, 0x20	; 32
    614a:	79 f0       	breq	.+30     	; 0x616a <vfprintf+0xb0>
    614c:	83 32       	cpi	r24, 0x23	; 35
    614e:	a1 f4       	brne	.+40     	; 0x6178 <vfprintf+0xbe>
    6150:	23 2d       	mov	r18, r3
    6152:	20 61       	ori	r18, 0x10	; 16
    6154:	1d c0       	rjmp	.+58     	; 0x6190 <vfprintf+0xd6>
    6156:	8d 32       	cpi	r24, 0x2D	; 45
    6158:	61 f0       	breq	.+24     	; 0x6172 <vfprintf+0xb8>
    615a:	80 33       	cpi	r24, 0x30	; 48
    615c:	69 f4       	brne	.+26     	; 0x6178 <vfprintf+0xbe>
    615e:	23 2d       	mov	r18, r3
    6160:	21 60       	ori	r18, 0x01	; 1
    6162:	16 c0       	rjmp	.+44     	; 0x6190 <vfprintf+0xd6>
    6164:	83 2d       	mov	r24, r3
    6166:	82 60       	ori	r24, 0x02	; 2
    6168:	38 2e       	mov	r3, r24
    616a:	e3 2d       	mov	r30, r3
    616c:	e4 60       	ori	r30, 0x04	; 4
    616e:	3e 2e       	mov	r3, r30
    6170:	2a c0       	rjmp	.+84     	; 0x61c6 <vfprintf+0x10c>
    6172:	f3 2d       	mov	r31, r3
    6174:	f8 60       	ori	r31, 0x08	; 8
    6176:	1d c0       	rjmp	.+58     	; 0x61b2 <vfprintf+0xf8>
    6178:	37 fc       	sbrc	r3, 7
    617a:	2d c0       	rjmp	.+90     	; 0x61d6 <vfprintf+0x11c>
    617c:	20 ed       	ldi	r18, 0xD0	; 208
    617e:	28 0f       	add	r18, r24
    6180:	2a 30       	cpi	r18, 0x0A	; 10
    6182:	40 f0       	brcs	.+16     	; 0x6194 <vfprintf+0xda>
    6184:	8e 32       	cpi	r24, 0x2E	; 46
    6186:	b9 f4       	brne	.+46     	; 0x61b6 <vfprintf+0xfc>
    6188:	36 fc       	sbrc	r3, 6
    618a:	75 c1       	rjmp	.+746    	; 0x6476 <vfprintf+0x3bc>
    618c:	23 2d       	mov	r18, r3
    618e:	20 64       	ori	r18, 0x40	; 64
    6190:	32 2e       	mov	r3, r18
    6192:	19 c0       	rjmp	.+50     	; 0x61c6 <vfprintf+0x10c>
    6194:	36 fe       	sbrs	r3, 6
    6196:	06 c0       	rjmp	.+12     	; 0x61a4 <vfprintf+0xea>
    6198:	8a e0       	ldi	r24, 0x0A	; 10
    619a:	98 9e       	mul	r9, r24
    619c:	20 0d       	add	r18, r0
    619e:	11 24       	eor	r1, r1
    61a0:	92 2e       	mov	r9, r18
    61a2:	11 c0       	rjmp	.+34     	; 0x61c6 <vfprintf+0x10c>
    61a4:	ea e0       	ldi	r30, 0x0A	; 10
    61a6:	2e 9e       	mul	r2, r30
    61a8:	20 0d       	add	r18, r0
    61aa:	11 24       	eor	r1, r1
    61ac:	22 2e       	mov	r2, r18
    61ae:	f3 2d       	mov	r31, r3
    61b0:	f0 62       	ori	r31, 0x20	; 32
    61b2:	3f 2e       	mov	r3, r31
    61b4:	08 c0       	rjmp	.+16     	; 0x61c6 <vfprintf+0x10c>
    61b6:	8c 36       	cpi	r24, 0x6C	; 108
    61b8:	21 f4       	brne	.+8      	; 0x61c2 <vfprintf+0x108>
    61ba:	83 2d       	mov	r24, r3
    61bc:	80 68       	ori	r24, 0x80	; 128
    61be:	38 2e       	mov	r3, r24
    61c0:	02 c0       	rjmp	.+4      	; 0x61c6 <vfprintf+0x10c>
    61c2:	88 36       	cpi	r24, 0x68	; 104
    61c4:	41 f4       	brne	.+16     	; 0x61d6 <vfprintf+0x11c>
    61c6:	f7 01       	movw	r30, r14
    61c8:	93 fd       	sbrc	r25, 3
    61ca:	85 91       	lpm	r24, Z+
    61cc:	93 ff       	sbrs	r25, 3
    61ce:	81 91       	ld	r24, Z+
    61d0:	7f 01       	movw	r14, r30
    61d2:	81 11       	cpse	r24, r1
    61d4:	b3 cf       	rjmp	.-154    	; 0x613c <vfprintf+0x82>
    61d6:	98 2f       	mov	r25, r24
    61d8:	9f 7d       	andi	r25, 0xDF	; 223
    61da:	95 54       	subi	r25, 0x45	; 69
    61dc:	93 30       	cpi	r25, 0x03	; 3
    61de:	28 f4       	brcc	.+10     	; 0x61ea <vfprintf+0x130>
    61e0:	0c 5f       	subi	r16, 0xFC	; 252
    61e2:	1f 4f       	sbci	r17, 0xFF	; 255
    61e4:	9f e3       	ldi	r25, 0x3F	; 63
    61e6:	99 83       	std	Y+1, r25	; 0x01
    61e8:	0d c0       	rjmp	.+26     	; 0x6204 <vfprintf+0x14a>
    61ea:	83 36       	cpi	r24, 0x63	; 99
    61ec:	31 f0       	breq	.+12     	; 0x61fa <vfprintf+0x140>
    61ee:	83 37       	cpi	r24, 0x73	; 115
    61f0:	71 f0       	breq	.+28     	; 0x620e <vfprintf+0x154>
    61f2:	83 35       	cpi	r24, 0x53	; 83
    61f4:	09 f0       	breq	.+2      	; 0x61f8 <vfprintf+0x13e>
    61f6:	55 c0       	rjmp	.+170    	; 0x62a2 <vfprintf+0x1e8>
    61f8:	20 c0       	rjmp	.+64     	; 0x623a <vfprintf+0x180>
    61fa:	f8 01       	movw	r30, r16
    61fc:	80 81       	ld	r24, Z
    61fe:	89 83       	std	Y+1, r24	; 0x01
    6200:	0e 5f       	subi	r16, 0xFE	; 254
    6202:	1f 4f       	sbci	r17, 0xFF	; 255
    6204:	88 24       	eor	r8, r8
    6206:	83 94       	inc	r8
    6208:	91 2c       	mov	r9, r1
    620a:	53 01       	movw	r10, r6
    620c:	12 c0       	rjmp	.+36     	; 0x6232 <vfprintf+0x178>
    620e:	28 01       	movw	r4, r16
    6210:	f2 e0       	ldi	r31, 0x02	; 2
    6212:	4f 0e       	add	r4, r31
    6214:	51 1c       	adc	r5, r1
    6216:	f8 01       	movw	r30, r16
    6218:	a0 80       	ld	r10, Z
    621a:	b1 80       	ldd	r11, Z+1	; 0x01
    621c:	36 fe       	sbrs	r3, 6
    621e:	03 c0       	rjmp	.+6      	; 0x6226 <vfprintf+0x16c>
    6220:	69 2d       	mov	r22, r9
    6222:	70 e0       	ldi	r23, 0x00	; 0
    6224:	02 c0       	rjmp	.+4      	; 0x622a <vfprintf+0x170>
    6226:	6f ef       	ldi	r22, 0xFF	; 255
    6228:	7f ef       	ldi	r23, 0xFF	; 255
    622a:	c5 01       	movw	r24, r10
    622c:	4e d1       	rcall	.+668    	; 0x64ca <strnlen>
    622e:	4c 01       	movw	r8, r24
    6230:	82 01       	movw	r16, r4
    6232:	f3 2d       	mov	r31, r3
    6234:	ff 77       	andi	r31, 0x7F	; 127
    6236:	3f 2e       	mov	r3, r31
    6238:	15 c0       	rjmp	.+42     	; 0x6264 <vfprintf+0x1aa>
    623a:	28 01       	movw	r4, r16
    623c:	22 e0       	ldi	r18, 0x02	; 2
    623e:	42 0e       	add	r4, r18
    6240:	51 1c       	adc	r5, r1
    6242:	f8 01       	movw	r30, r16
    6244:	a0 80       	ld	r10, Z
    6246:	b1 80       	ldd	r11, Z+1	; 0x01
    6248:	36 fe       	sbrs	r3, 6
    624a:	03 c0       	rjmp	.+6      	; 0x6252 <vfprintf+0x198>
    624c:	69 2d       	mov	r22, r9
    624e:	70 e0       	ldi	r23, 0x00	; 0
    6250:	02 c0       	rjmp	.+4      	; 0x6256 <vfprintf+0x19c>
    6252:	6f ef       	ldi	r22, 0xFF	; 255
    6254:	7f ef       	ldi	r23, 0xFF	; 255
    6256:	c5 01       	movw	r24, r10
    6258:	2d d1       	rcall	.+602    	; 0x64b4 <strnlen_P>
    625a:	4c 01       	movw	r8, r24
    625c:	f3 2d       	mov	r31, r3
    625e:	f0 68       	ori	r31, 0x80	; 128
    6260:	3f 2e       	mov	r3, r31
    6262:	82 01       	movw	r16, r4
    6264:	33 fc       	sbrc	r3, 3
    6266:	19 c0       	rjmp	.+50     	; 0x629a <vfprintf+0x1e0>
    6268:	82 2d       	mov	r24, r2
    626a:	90 e0       	ldi	r25, 0x00	; 0
    626c:	88 16       	cp	r8, r24
    626e:	99 06       	cpc	r9, r25
    6270:	a0 f4       	brcc	.+40     	; 0x629a <vfprintf+0x1e0>
    6272:	b6 01       	movw	r22, r12
    6274:	80 e2       	ldi	r24, 0x20	; 32
    6276:	90 e0       	ldi	r25, 0x00	; 0
    6278:	33 d1       	rcall	.+614    	; 0x64e0 <fputc>
    627a:	2a 94       	dec	r2
    627c:	f5 cf       	rjmp	.-22     	; 0x6268 <vfprintf+0x1ae>
    627e:	f5 01       	movw	r30, r10
    6280:	37 fc       	sbrc	r3, 7
    6282:	85 91       	lpm	r24, Z+
    6284:	37 fe       	sbrs	r3, 7
    6286:	81 91       	ld	r24, Z+
    6288:	5f 01       	movw	r10, r30
    628a:	b6 01       	movw	r22, r12
    628c:	90 e0       	ldi	r25, 0x00	; 0
    628e:	28 d1       	rcall	.+592    	; 0x64e0 <fputc>
    6290:	21 10       	cpse	r2, r1
    6292:	2a 94       	dec	r2
    6294:	21 e0       	ldi	r18, 0x01	; 1
    6296:	82 1a       	sub	r8, r18
    6298:	91 08       	sbc	r9, r1
    629a:	81 14       	cp	r8, r1
    629c:	91 04       	cpc	r9, r1
    629e:	79 f7       	brne	.-34     	; 0x627e <vfprintf+0x1c4>
    62a0:	e1 c0       	rjmp	.+450    	; 0x6464 <vfprintf+0x3aa>
    62a2:	84 36       	cpi	r24, 0x64	; 100
    62a4:	11 f0       	breq	.+4      	; 0x62aa <vfprintf+0x1f0>
    62a6:	89 36       	cpi	r24, 0x69	; 105
    62a8:	39 f5       	brne	.+78     	; 0x62f8 <vfprintf+0x23e>
    62aa:	f8 01       	movw	r30, r16
    62ac:	37 fe       	sbrs	r3, 7
    62ae:	07 c0       	rjmp	.+14     	; 0x62be <vfprintf+0x204>
    62b0:	60 81       	ld	r22, Z
    62b2:	71 81       	ldd	r23, Z+1	; 0x01
    62b4:	82 81       	ldd	r24, Z+2	; 0x02
    62b6:	93 81       	ldd	r25, Z+3	; 0x03
    62b8:	0c 5f       	subi	r16, 0xFC	; 252
    62ba:	1f 4f       	sbci	r17, 0xFF	; 255
    62bc:	08 c0       	rjmp	.+16     	; 0x62ce <vfprintf+0x214>
    62be:	60 81       	ld	r22, Z
    62c0:	71 81       	ldd	r23, Z+1	; 0x01
    62c2:	07 2e       	mov	r0, r23
    62c4:	00 0c       	add	r0, r0
    62c6:	88 0b       	sbc	r24, r24
    62c8:	99 0b       	sbc	r25, r25
    62ca:	0e 5f       	subi	r16, 0xFE	; 254
    62cc:	1f 4f       	sbci	r17, 0xFF	; 255
    62ce:	f3 2d       	mov	r31, r3
    62d0:	ff 76       	andi	r31, 0x6F	; 111
    62d2:	3f 2e       	mov	r3, r31
    62d4:	97 ff       	sbrs	r25, 7
    62d6:	09 c0       	rjmp	.+18     	; 0x62ea <vfprintf+0x230>
    62d8:	90 95       	com	r25
    62da:	80 95       	com	r24
    62dc:	70 95       	com	r23
    62de:	61 95       	neg	r22
    62e0:	7f 4f       	sbci	r23, 0xFF	; 255
    62e2:	8f 4f       	sbci	r24, 0xFF	; 255
    62e4:	9f 4f       	sbci	r25, 0xFF	; 255
    62e6:	f0 68       	ori	r31, 0x80	; 128
    62e8:	3f 2e       	mov	r3, r31
    62ea:	2a e0       	ldi	r18, 0x0A	; 10
    62ec:	30 e0       	ldi	r19, 0x00	; 0
    62ee:	a3 01       	movw	r20, r6
    62f0:	33 d1       	rcall	.+614    	; 0x6558 <__ultoa_invert>
    62f2:	88 2e       	mov	r8, r24
    62f4:	86 18       	sub	r8, r6
    62f6:	44 c0       	rjmp	.+136    	; 0x6380 <vfprintf+0x2c6>
    62f8:	85 37       	cpi	r24, 0x75	; 117
    62fa:	31 f4       	brne	.+12     	; 0x6308 <vfprintf+0x24e>
    62fc:	23 2d       	mov	r18, r3
    62fe:	2f 7e       	andi	r18, 0xEF	; 239
    6300:	b2 2e       	mov	r11, r18
    6302:	2a e0       	ldi	r18, 0x0A	; 10
    6304:	30 e0       	ldi	r19, 0x00	; 0
    6306:	25 c0       	rjmp	.+74     	; 0x6352 <vfprintf+0x298>
    6308:	93 2d       	mov	r25, r3
    630a:	99 7f       	andi	r25, 0xF9	; 249
    630c:	b9 2e       	mov	r11, r25
    630e:	8f 36       	cpi	r24, 0x6F	; 111
    6310:	c1 f0       	breq	.+48     	; 0x6342 <vfprintf+0x288>
    6312:	18 f4       	brcc	.+6      	; 0x631a <vfprintf+0x260>
    6314:	88 35       	cpi	r24, 0x58	; 88
    6316:	79 f0       	breq	.+30     	; 0x6336 <vfprintf+0x27c>
    6318:	ae c0       	rjmp	.+348    	; 0x6476 <vfprintf+0x3bc>
    631a:	80 37       	cpi	r24, 0x70	; 112
    631c:	19 f0       	breq	.+6      	; 0x6324 <vfprintf+0x26a>
    631e:	88 37       	cpi	r24, 0x78	; 120
    6320:	21 f0       	breq	.+8      	; 0x632a <vfprintf+0x270>
    6322:	a9 c0       	rjmp	.+338    	; 0x6476 <vfprintf+0x3bc>
    6324:	e9 2f       	mov	r30, r25
    6326:	e0 61       	ori	r30, 0x10	; 16
    6328:	be 2e       	mov	r11, r30
    632a:	b4 fe       	sbrs	r11, 4
    632c:	0d c0       	rjmp	.+26     	; 0x6348 <vfprintf+0x28e>
    632e:	fb 2d       	mov	r31, r11
    6330:	f4 60       	ori	r31, 0x04	; 4
    6332:	bf 2e       	mov	r11, r31
    6334:	09 c0       	rjmp	.+18     	; 0x6348 <vfprintf+0x28e>
    6336:	34 fe       	sbrs	r3, 4
    6338:	0a c0       	rjmp	.+20     	; 0x634e <vfprintf+0x294>
    633a:	29 2f       	mov	r18, r25
    633c:	26 60       	ori	r18, 0x06	; 6
    633e:	b2 2e       	mov	r11, r18
    6340:	06 c0       	rjmp	.+12     	; 0x634e <vfprintf+0x294>
    6342:	28 e0       	ldi	r18, 0x08	; 8
    6344:	30 e0       	ldi	r19, 0x00	; 0
    6346:	05 c0       	rjmp	.+10     	; 0x6352 <vfprintf+0x298>
    6348:	20 e1       	ldi	r18, 0x10	; 16
    634a:	30 e0       	ldi	r19, 0x00	; 0
    634c:	02 c0       	rjmp	.+4      	; 0x6352 <vfprintf+0x298>
    634e:	20 e1       	ldi	r18, 0x10	; 16
    6350:	32 e0       	ldi	r19, 0x02	; 2
    6352:	f8 01       	movw	r30, r16
    6354:	b7 fe       	sbrs	r11, 7
    6356:	07 c0       	rjmp	.+14     	; 0x6366 <vfprintf+0x2ac>
    6358:	60 81       	ld	r22, Z
    635a:	71 81       	ldd	r23, Z+1	; 0x01
    635c:	82 81       	ldd	r24, Z+2	; 0x02
    635e:	93 81       	ldd	r25, Z+3	; 0x03
    6360:	0c 5f       	subi	r16, 0xFC	; 252
    6362:	1f 4f       	sbci	r17, 0xFF	; 255
    6364:	06 c0       	rjmp	.+12     	; 0x6372 <vfprintf+0x2b8>
    6366:	60 81       	ld	r22, Z
    6368:	71 81       	ldd	r23, Z+1	; 0x01
    636a:	80 e0       	ldi	r24, 0x00	; 0
    636c:	90 e0       	ldi	r25, 0x00	; 0
    636e:	0e 5f       	subi	r16, 0xFE	; 254
    6370:	1f 4f       	sbci	r17, 0xFF	; 255
    6372:	a3 01       	movw	r20, r6
    6374:	f1 d0       	rcall	.+482    	; 0x6558 <__ultoa_invert>
    6376:	88 2e       	mov	r8, r24
    6378:	86 18       	sub	r8, r6
    637a:	fb 2d       	mov	r31, r11
    637c:	ff 77       	andi	r31, 0x7F	; 127
    637e:	3f 2e       	mov	r3, r31
    6380:	36 fe       	sbrs	r3, 6
    6382:	0d c0       	rjmp	.+26     	; 0x639e <vfprintf+0x2e4>
    6384:	23 2d       	mov	r18, r3
    6386:	2e 7f       	andi	r18, 0xFE	; 254
    6388:	a2 2e       	mov	r10, r18
    638a:	89 14       	cp	r8, r9
    638c:	58 f4       	brcc	.+22     	; 0x63a4 <vfprintf+0x2ea>
    638e:	34 fe       	sbrs	r3, 4
    6390:	0b c0       	rjmp	.+22     	; 0x63a8 <vfprintf+0x2ee>
    6392:	32 fc       	sbrc	r3, 2
    6394:	09 c0       	rjmp	.+18     	; 0x63a8 <vfprintf+0x2ee>
    6396:	83 2d       	mov	r24, r3
    6398:	8e 7e       	andi	r24, 0xEE	; 238
    639a:	a8 2e       	mov	r10, r24
    639c:	05 c0       	rjmp	.+10     	; 0x63a8 <vfprintf+0x2ee>
    639e:	b8 2c       	mov	r11, r8
    63a0:	a3 2c       	mov	r10, r3
    63a2:	03 c0       	rjmp	.+6      	; 0x63aa <vfprintf+0x2f0>
    63a4:	b8 2c       	mov	r11, r8
    63a6:	01 c0       	rjmp	.+2      	; 0x63aa <vfprintf+0x2f0>
    63a8:	b9 2c       	mov	r11, r9
    63aa:	a4 fe       	sbrs	r10, 4
    63ac:	0f c0       	rjmp	.+30     	; 0x63cc <vfprintf+0x312>
    63ae:	fe 01       	movw	r30, r28
    63b0:	e8 0d       	add	r30, r8
    63b2:	f1 1d       	adc	r31, r1
    63b4:	80 81       	ld	r24, Z
    63b6:	80 33       	cpi	r24, 0x30	; 48
    63b8:	21 f4       	brne	.+8      	; 0x63c2 <vfprintf+0x308>
    63ba:	9a 2d       	mov	r25, r10
    63bc:	99 7e       	andi	r25, 0xE9	; 233
    63be:	a9 2e       	mov	r10, r25
    63c0:	09 c0       	rjmp	.+18     	; 0x63d4 <vfprintf+0x31a>
    63c2:	a2 fe       	sbrs	r10, 2
    63c4:	06 c0       	rjmp	.+12     	; 0x63d2 <vfprintf+0x318>
    63c6:	b3 94       	inc	r11
    63c8:	b3 94       	inc	r11
    63ca:	04 c0       	rjmp	.+8      	; 0x63d4 <vfprintf+0x31a>
    63cc:	8a 2d       	mov	r24, r10
    63ce:	86 78       	andi	r24, 0x86	; 134
    63d0:	09 f0       	breq	.+2      	; 0x63d4 <vfprintf+0x31a>
    63d2:	b3 94       	inc	r11
    63d4:	a3 fc       	sbrc	r10, 3
    63d6:	10 c0       	rjmp	.+32     	; 0x63f8 <vfprintf+0x33e>
    63d8:	a0 fe       	sbrs	r10, 0
    63da:	06 c0       	rjmp	.+12     	; 0x63e8 <vfprintf+0x32e>
    63dc:	b2 14       	cp	r11, r2
    63de:	80 f4       	brcc	.+32     	; 0x6400 <vfprintf+0x346>
    63e0:	28 0c       	add	r2, r8
    63e2:	92 2c       	mov	r9, r2
    63e4:	9b 18       	sub	r9, r11
    63e6:	0d c0       	rjmp	.+26     	; 0x6402 <vfprintf+0x348>
    63e8:	b2 14       	cp	r11, r2
    63ea:	58 f4       	brcc	.+22     	; 0x6402 <vfprintf+0x348>
    63ec:	b6 01       	movw	r22, r12
    63ee:	80 e2       	ldi	r24, 0x20	; 32
    63f0:	90 e0       	ldi	r25, 0x00	; 0
    63f2:	76 d0       	rcall	.+236    	; 0x64e0 <fputc>
    63f4:	b3 94       	inc	r11
    63f6:	f8 cf       	rjmp	.-16     	; 0x63e8 <vfprintf+0x32e>
    63f8:	b2 14       	cp	r11, r2
    63fa:	18 f4       	brcc	.+6      	; 0x6402 <vfprintf+0x348>
    63fc:	2b 18       	sub	r2, r11
    63fe:	02 c0       	rjmp	.+4      	; 0x6404 <vfprintf+0x34a>
    6400:	98 2c       	mov	r9, r8
    6402:	21 2c       	mov	r2, r1
    6404:	a4 fe       	sbrs	r10, 4
    6406:	0f c0       	rjmp	.+30     	; 0x6426 <vfprintf+0x36c>
    6408:	b6 01       	movw	r22, r12
    640a:	80 e3       	ldi	r24, 0x30	; 48
    640c:	90 e0       	ldi	r25, 0x00	; 0
    640e:	68 d0       	rcall	.+208    	; 0x64e0 <fputc>
    6410:	a2 fe       	sbrs	r10, 2
    6412:	16 c0       	rjmp	.+44     	; 0x6440 <vfprintf+0x386>
    6414:	a1 fc       	sbrc	r10, 1
    6416:	03 c0       	rjmp	.+6      	; 0x641e <vfprintf+0x364>
    6418:	88 e7       	ldi	r24, 0x78	; 120
    641a:	90 e0       	ldi	r25, 0x00	; 0
    641c:	02 c0       	rjmp	.+4      	; 0x6422 <vfprintf+0x368>
    641e:	88 e5       	ldi	r24, 0x58	; 88
    6420:	90 e0       	ldi	r25, 0x00	; 0
    6422:	b6 01       	movw	r22, r12
    6424:	0c c0       	rjmp	.+24     	; 0x643e <vfprintf+0x384>
    6426:	8a 2d       	mov	r24, r10
    6428:	86 78       	andi	r24, 0x86	; 134
    642a:	51 f0       	breq	.+20     	; 0x6440 <vfprintf+0x386>
    642c:	a1 fe       	sbrs	r10, 1
    642e:	02 c0       	rjmp	.+4      	; 0x6434 <vfprintf+0x37a>
    6430:	8b e2       	ldi	r24, 0x2B	; 43
    6432:	01 c0       	rjmp	.+2      	; 0x6436 <vfprintf+0x37c>
    6434:	80 e2       	ldi	r24, 0x20	; 32
    6436:	a7 fc       	sbrc	r10, 7
    6438:	8d e2       	ldi	r24, 0x2D	; 45
    643a:	b6 01       	movw	r22, r12
    643c:	90 e0       	ldi	r25, 0x00	; 0
    643e:	50 d0       	rcall	.+160    	; 0x64e0 <fputc>
    6440:	89 14       	cp	r8, r9
    6442:	30 f4       	brcc	.+12     	; 0x6450 <vfprintf+0x396>
    6444:	b6 01       	movw	r22, r12
    6446:	80 e3       	ldi	r24, 0x30	; 48
    6448:	90 e0       	ldi	r25, 0x00	; 0
    644a:	4a d0       	rcall	.+148    	; 0x64e0 <fputc>
    644c:	9a 94       	dec	r9
    644e:	f8 cf       	rjmp	.-16     	; 0x6440 <vfprintf+0x386>
    6450:	8a 94       	dec	r8
    6452:	f3 01       	movw	r30, r6
    6454:	e8 0d       	add	r30, r8
    6456:	f1 1d       	adc	r31, r1
    6458:	80 81       	ld	r24, Z
    645a:	b6 01       	movw	r22, r12
    645c:	90 e0       	ldi	r25, 0x00	; 0
    645e:	40 d0       	rcall	.+128    	; 0x64e0 <fputc>
    6460:	81 10       	cpse	r8, r1
    6462:	f6 cf       	rjmp	.-20     	; 0x6450 <vfprintf+0x396>
    6464:	22 20       	and	r2, r2
    6466:	09 f4       	brne	.+2      	; 0x646a <vfprintf+0x3b0>
    6468:	4e ce       	rjmp	.-868    	; 0x6106 <vfprintf+0x4c>
    646a:	b6 01       	movw	r22, r12
    646c:	80 e2       	ldi	r24, 0x20	; 32
    646e:	90 e0       	ldi	r25, 0x00	; 0
    6470:	37 d0       	rcall	.+110    	; 0x64e0 <fputc>
    6472:	2a 94       	dec	r2
    6474:	f7 cf       	rjmp	.-18     	; 0x6464 <vfprintf+0x3aa>
    6476:	f6 01       	movw	r30, r12
    6478:	86 81       	ldd	r24, Z+6	; 0x06
    647a:	97 81       	ldd	r25, Z+7	; 0x07
    647c:	02 c0       	rjmp	.+4      	; 0x6482 <vfprintf+0x3c8>
    647e:	8f ef       	ldi	r24, 0xFF	; 255
    6480:	9f ef       	ldi	r25, 0xFF	; 255
    6482:	2b 96       	adiw	r28, 0x0b	; 11
    6484:	0f b6       	in	r0, 0x3f	; 63
    6486:	f8 94       	cli
    6488:	de bf       	out	0x3e, r29	; 62
    648a:	0f be       	out	0x3f, r0	; 63
    648c:	cd bf       	out	0x3d, r28	; 61
    648e:	df 91       	pop	r29
    6490:	cf 91       	pop	r28
    6492:	1f 91       	pop	r17
    6494:	0f 91       	pop	r16
    6496:	ff 90       	pop	r15
    6498:	ef 90       	pop	r14
    649a:	df 90       	pop	r13
    649c:	cf 90       	pop	r12
    649e:	bf 90       	pop	r11
    64a0:	af 90       	pop	r10
    64a2:	9f 90       	pop	r9
    64a4:	8f 90       	pop	r8
    64a6:	7f 90       	pop	r7
    64a8:	6f 90       	pop	r6
    64aa:	5f 90       	pop	r5
    64ac:	4f 90       	pop	r4
    64ae:	3f 90       	pop	r3
    64b0:	2f 90       	pop	r2
    64b2:	08 95       	ret

000064b4 <strnlen_P>:
    64b4:	fc 01       	movw	r30, r24
    64b6:	05 90       	lpm	r0, Z+
    64b8:	61 50       	subi	r22, 0x01	; 1
    64ba:	70 40       	sbci	r23, 0x00	; 0
    64bc:	01 10       	cpse	r0, r1
    64be:	d8 f7       	brcc	.-10     	; 0x64b6 <strnlen_P+0x2>
    64c0:	80 95       	com	r24
    64c2:	90 95       	com	r25
    64c4:	8e 0f       	add	r24, r30
    64c6:	9f 1f       	adc	r25, r31
    64c8:	08 95       	ret

000064ca <strnlen>:
    64ca:	fc 01       	movw	r30, r24
    64cc:	61 50       	subi	r22, 0x01	; 1
    64ce:	70 40       	sbci	r23, 0x00	; 0
    64d0:	01 90       	ld	r0, Z+
    64d2:	01 10       	cpse	r0, r1
    64d4:	d8 f7       	brcc	.-10     	; 0x64cc <strnlen+0x2>
    64d6:	80 95       	com	r24
    64d8:	90 95       	com	r25
    64da:	8e 0f       	add	r24, r30
    64dc:	9f 1f       	adc	r25, r31
    64de:	08 95       	ret

000064e0 <fputc>:
    64e0:	0f 93       	push	r16
    64e2:	1f 93       	push	r17
    64e4:	cf 93       	push	r28
    64e6:	df 93       	push	r29
    64e8:	fb 01       	movw	r30, r22
    64ea:	23 81       	ldd	r18, Z+3	; 0x03
    64ec:	21 fd       	sbrc	r18, 1
    64ee:	03 c0       	rjmp	.+6      	; 0x64f6 <fputc+0x16>
    64f0:	8f ef       	ldi	r24, 0xFF	; 255
    64f2:	9f ef       	ldi	r25, 0xFF	; 255
    64f4:	2c c0       	rjmp	.+88     	; 0x654e <fputc+0x6e>
    64f6:	22 ff       	sbrs	r18, 2
    64f8:	16 c0       	rjmp	.+44     	; 0x6526 <fputc+0x46>
    64fa:	46 81       	ldd	r20, Z+6	; 0x06
    64fc:	57 81       	ldd	r21, Z+7	; 0x07
    64fe:	24 81       	ldd	r18, Z+4	; 0x04
    6500:	35 81       	ldd	r19, Z+5	; 0x05
    6502:	42 17       	cp	r20, r18
    6504:	53 07       	cpc	r21, r19
    6506:	44 f4       	brge	.+16     	; 0x6518 <fputc+0x38>
    6508:	a0 81       	ld	r26, Z
    650a:	b1 81       	ldd	r27, Z+1	; 0x01
    650c:	9d 01       	movw	r18, r26
    650e:	2f 5f       	subi	r18, 0xFF	; 255
    6510:	3f 4f       	sbci	r19, 0xFF	; 255
    6512:	31 83       	std	Z+1, r19	; 0x01
    6514:	20 83       	st	Z, r18
    6516:	8c 93       	st	X, r24
    6518:	26 81       	ldd	r18, Z+6	; 0x06
    651a:	37 81       	ldd	r19, Z+7	; 0x07
    651c:	2f 5f       	subi	r18, 0xFF	; 255
    651e:	3f 4f       	sbci	r19, 0xFF	; 255
    6520:	37 83       	std	Z+7, r19	; 0x07
    6522:	26 83       	std	Z+6, r18	; 0x06
    6524:	14 c0       	rjmp	.+40     	; 0x654e <fputc+0x6e>
    6526:	8b 01       	movw	r16, r22
    6528:	ec 01       	movw	r28, r24
    652a:	fb 01       	movw	r30, r22
    652c:	00 84       	ldd	r0, Z+8	; 0x08
    652e:	f1 85       	ldd	r31, Z+9	; 0x09
    6530:	e0 2d       	mov	r30, r0
    6532:	19 95       	eicall
    6534:	89 2b       	or	r24, r25
    6536:	e1 f6       	brne	.-72     	; 0x64f0 <fputc+0x10>
    6538:	d8 01       	movw	r26, r16
    653a:	16 96       	adiw	r26, 0x06	; 6
    653c:	8d 91       	ld	r24, X+
    653e:	9c 91       	ld	r25, X
    6540:	17 97       	sbiw	r26, 0x07	; 7
    6542:	01 96       	adiw	r24, 0x01	; 1
    6544:	17 96       	adiw	r26, 0x07	; 7
    6546:	9c 93       	st	X, r25
    6548:	8e 93       	st	-X, r24
    654a:	16 97       	sbiw	r26, 0x06	; 6
    654c:	ce 01       	movw	r24, r28
    654e:	df 91       	pop	r29
    6550:	cf 91       	pop	r28
    6552:	1f 91       	pop	r17
    6554:	0f 91       	pop	r16
    6556:	08 95       	ret

00006558 <__ultoa_invert>:
    6558:	fa 01       	movw	r30, r20
    655a:	aa 27       	eor	r26, r26
    655c:	28 30       	cpi	r18, 0x08	; 8
    655e:	51 f1       	breq	.+84     	; 0x65b4 <__ultoa_invert+0x5c>
    6560:	20 31       	cpi	r18, 0x10	; 16
    6562:	81 f1       	breq	.+96     	; 0x65c4 <__ultoa_invert+0x6c>
    6564:	e8 94       	clt
    6566:	6f 93       	push	r22
    6568:	6e 7f       	andi	r22, 0xFE	; 254
    656a:	6e 5f       	subi	r22, 0xFE	; 254
    656c:	7f 4f       	sbci	r23, 0xFF	; 255
    656e:	8f 4f       	sbci	r24, 0xFF	; 255
    6570:	9f 4f       	sbci	r25, 0xFF	; 255
    6572:	af 4f       	sbci	r26, 0xFF	; 255
    6574:	b1 e0       	ldi	r27, 0x01	; 1
    6576:	3e d0       	rcall	.+124    	; 0x65f4 <__ultoa_invert+0x9c>
    6578:	b4 e0       	ldi	r27, 0x04	; 4
    657a:	3c d0       	rcall	.+120    	; 0x65f4 <__ultoa_invert+0x9c>
    657c:	67 0f       	add	r22, r23
    657e:	78 1f       	adc	r23, r24
    6580:	89 1f       	adc	r24, r25
    6582:	9a 1f       	adc	r25, r26
    6584:	a1 1d       	adc	r26, r1
    6586:	68 0f       	add	r22, r24
    6588:	79 1f       	adc	r23, r25
    658a:	8a 1f       	adc	r24, r26
    658c:	91 1d       	adc	r25, r1
    658e:	a1 1d       	adc	r26, r1
    6590:	6a 0f       	add	r22, r26
    6592:	71 1d       	adc	r23, r1
    6594:	81 1d       	adc	r24, r1
    6596:	91 1d       	adc	r25, r1
    6598:	a1 1d       	adc	r26, r1
    659a:	20 d0       	rcall	.+64     	; 0x65dc <__ultoa_invert+0x84>
    659c:	09 f4       	brne	.+2      	; 0x65a0 <__ultoa_invert+0x48>
    659e:	68 94       	set
    65a0:	3f 91       	pop	r19
    65a2:	2a e0       	ldi	r18, 0x0A	; 10
    65a4:	26 9f       	mul	r18, r22
    65a6:	11 24       	eor	r1, r1
    65a8:	30 19       	sub	r19, r0
    65aa:	30 5d       	subi	r19, 0xD0	; 208
    65ac:	31 93       	st	Z+, r19
    65ae:	de f6       	brtc	.-74     	; 0x6566 <__ultoa_invert+0xe>
    65b0:	cf 01       	movw	r24, r30
    65b2:	08 95       	ret
    65b4:	46 2f       	mov	r20, r22
    65b6:	47 70       	andi	r20, 0x07	; 7
    65b8:	40 5d       	subi	r20, 0xD0	; 208
    65ba:	41 93       	st	Z+, r20
    65bc:	b3 e0       	ldi	r27, 0x03	; 3
    65be:	0f d0       	rcall	.+30     	; 0x65de <__ultoa_invert+0x86>
    65c0:	c9 f7       	brne	.-14     	; 0x65b4 <__ultoa_invert+0x5c>
    65c2:	f6 cf       	rjmp	.-20     	; 0x65b0 <__ultoa_invert+0x58>
    65c4:	46 2f       	mov	r20, r22
    65c6:	4f 70       	andi	r20, 0x0F	; 15
    65c8:	40 5d       	subi	r20, 0xD0	; 208
    65ca:	4a 33       	cpi	r20, 0x3A	; 58
    65cc:	18 f0       	brcs	.+6      	; 0x65d4 <__ultoa_invert+0x7c>
    65ce:	49 5d       	subi	r20, 0xD9	; 217
    65d0:	31 fd       	sbrc	r19, 1
    65d2:	40 52       	subi	r20, 0x20	; 32
    65d4:	41 93       	st	Z+, r20
    65d6:	02 d0       	rcall	.+4      	; 0x65dc <__ultoa_invert+0x84>
    65d8:	a9 f7       	brne	.-22     	; 0x65c4 <__ultoa_invert+0x6c>
    65da:	ea cf       	rjmp	.-44     	; 0x65b0 <__ultoa_invert+0x58>
    65dc:	b4 e0       	ldi	r27, 0x04	; 4
    65de:	a6 95       	lsr	r26
    65e0:	97 95       	ror	r25
    65e2:	87 95       	ror	r24
    65e4:	77 95       	ror	r23
    65e6:	67 95       	ror	r22
    65e8:	ba 95       	dec	r27
    65ea:	c9 f7       	brne	.-14     	; 0x65de <__ultoa_invert+0x86>
    65ec:	00 97       	sbiw	r24, 0x00	; 0
    65ee:	61 05       	cpc	r22, r1
    65f0:	71 05       	cpc	r23, r1
    65f2:	08 95       	ret
    65f4:	9b 01       	movw	r18, r22
    65f6:	ac 01       	movw	r20, r24
    65f8:	0a 2e       	mov	r0, r26
    65fa:	06 94       	lsr	r0
    65fc:	57 95       	ror	r21
    65fe:	47 95       	ror	r20
    6600:	37 95       	ror	r19
    6602:	27 95       	ror	r18
    6604:	ba 95       	dec	r27
    6606:	c9 f7       	brne	.-14     	; 0x65fa <__ultoa_invert+0xa2>
    6608:	62 0f       	add	r22, r18
    660a:	73 1f       	adc	r23, r19
    660c:	84 1f       	adc	r24, r20
    660e:	95 1f       	adc	r25, r21
    6610:	a0 1d       	adc	r26, r0
    6612:	08 95       	ret

00006614 <_exit>:
    6614:	f8 94       	cli

00006616 <__stop_program>:
    6616:	ff cf       	rjmp	.-2      	; 0x6616 <__stop_program>


IoT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000634  00800200  00006c52  00006ce6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006c52  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001032  00800834  00800834  0000731a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000731a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007378  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000c98  00000000  00000000  000073b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ef33  00000000  00000000  00008050  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003c67  00000000  00000000  00016f83  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007776  00000000  00000000  0001abea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002b30  00000000  00000000  00022360  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000467c  00000000  00000000  00024e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000ccfc  00000000  00000000  0002950c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b88  00000000  00000000  00036208  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c0       	rjmp	.+458    	; 0x1cc <__ctors_end>
       2:	00 00       	nop
       4:	04 c1       	rjmp	.+520    	; 0x20e <__bad_interrupt>
       6:	00 00       	nop
       8:	02 c1       	rjmp	.+516    	; 0x20e <__bad_interrupt>
       a:	00 00       	nop
       c:	00 c1       	rjmp	.+512    	; 0x20e <__bad_interrupt>
       e:	00 00       	nop
      10:	fe c0       	rjmp	.+508    	; 0x20e <__bad_interrupt>
      12:	00 00       	nop
      14:	fc c0       	rjmp	.+504    	; 0x20e <__bad_interrupt>
      16:	00 00       	nop
      18:	fa c0       	rjmp	.+500    	; 0x20e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f8 c0       	rjmp	.+496    	; 0x20e <__bad_interrupt>
      1e:	00 00       	nop
      20:	f6 c0       	rjmp	.+492    	; 0x20e <__bad_interrupt>
      22:	00 00       	nop
      24:	f4 c0       	rjmp	.+488    	; 0x20e <__bad_interrupt>
      26:	00 00       	nop
      28:	f2 c0       	rjmp	.+484    	; 0x20e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f0 c0       	rjmp	.+480    	; 0x20e <__bad_interrupt>
      2e:	00 00       	nop
      30:	3e c5       	rjmp	.+2684   	; 0xaae <__vector_12>
      32:	00 00       	nop
      34:	ec c0       	rjmp	.+472    	; 0x20e <__bad_interrupt>
      36:	00 00       	nop
      38:	ea c0       	rjmp	.+468    	; 0x20e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e8 c0       	rjmp	.+464    	; 0x20e <__bad_interrupt>
      3e:	00 00       	nop
      40:	e6 c0       	rjmp	.+460    	; 0x20e <__bad_interrupt>
      42:	00 00       	nop
      44:	e4 c0       	rjmp	.+456    	; 0x20e <__bad_interrupt>
      46:	00 00       	nop
      48:	e2 c0       	rjmp	.+452    	; 0x20e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e0 c0       	rjmp	.+448    	; 0x20e <__bad_interrupt>
      4e:	00 00       	nop
      50:	de c0       	rjmp	.+444    	; 0x20e <__bad_interrupt>
      52:	00 00       	nop
      54:	dc c0       	rjmp	.+440    	; 0x20e <__bad_interrupt>
      56:	00 00       	nop
      58:	da c0       	rjmp	.+436    	; 0x20e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d8 c0       	rjmp	.+432    	; 0x20e <__bad_interrupt>
      5e:	00 00       	nop
      60:	d6 c0       	rjmp	.+428    	; 0x20e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 83 2a 	jmp	0x5506	; 0x5506 <__vector_25>
      68:	0c 94 d5 2a 	jmp	0x55aa	; 0x55aa <__vector_26>
      6c:	d0 c0       	rjmp	.+416    	; 0x20e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ce c0       	rjmp	.+412    	; 0x20e <__bad_interrupt>
      72:	00 00       	nop
      74:	0c 94 15 29 	jmp	0x522a	; 0x522a <__vector_29>
      78:	ca c0       	rjmp	.+404    	; 0x20e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c8 c0       	rjmp	.+400    	; 0x20e <__bad_interrupt>
      7e:	00 00       	nop
      80:	c6 c0       	rjmp	.+396    	; 0x20e <__bad_interrupt>
      82:	00 00       	nop
      84:	c4 c0       	rjmp	.+392    	; 0x20e <__bad_interrupt>
      86:	00 00       	nop
      88:	c2 c0       	rjmp	.+388    	; 0x20e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c0 c0       	rjmp	.+384    	; 0x20e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 19 2b 	jmp	0x5632	; 0x5632 <__vector_36>
      94:	0c 94 6b 2b 	jmp	0x56d6	; 0x56d6 <__vector_37>
      98:	ba c0       	rjmp	.+372    	; 0x20e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 93 2e 	jmp	0x5d26	; 0x5d26 <__vector_39>
      a0:	b6 c0       	rjmp	.+364    	; 0x20e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b4 c0       	rjmp	.+360    	; 0x20e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b2 c0       	rjmp	.+356    	; 0x20e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b0 c0       	rjmp	.+352    	; 0x20e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ae c0       	rjmp	.+348    	; 0x20e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ac c0       	rjmp	.+344    	; 0x20e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	aa c0       	rjmp	.+340    	; 0x20e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a8 c0       	rjmp	.+336    	; 0x20e <__bad_interrupt>
      be:	00 00       	nop
      c0:	a6 c0       	rjmp	.+332    	; 0x20e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a4 c0       	rjmp	.+328    	; 0x20e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a2 c0       	rjmp	.+324    	; 0x20e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 af 2b 	jmp	0x575e	; 0x575e <__vector_51>
      d0:	0c 94 01 2c 	jmp	0x5802	; 0x5802 <__vector_52>
      d4:	9c c0       	rjmp	.+312    	; 0x20e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 45 2c 	jmp	0x588a	; 0x588a <__vector_54>
      dc:	0c 94 97 2c 	jmp	0x592e	; 0x592e <__vector_55>
      e0:	96 c0       	rjmp	.+300    	; 0x20e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	31 1b       	sub	r19, r17
      e6:	31 1b       	sub	r19, r17
      e8:	31 1b       	sub	r19, r17
      ea:	68 1b       	sub	r22, r24
      ec:	70 1b       	sub	r23, r16
      ee:	85 1b       	sub	r24, r21
      f0:	31 1b       	sub	r19, r17
      f2:	31 1b       	sub	r19, r17
      f4:	68 1b       	sub	r22, r24
      f6:	70 1b       	sub	r23, r16
      f8:	b5 2e       	mov	r11, r21
      fa:	25 2f       	mov	r18, r21
      fc:	25 2f       	mov	r18, r21
      fe:	25 2f       	mov	r18, r21
     100:	25 2f       	mov	r18, r21
     102:	25 2f       	mov	r18, r21
     104:	25 2f       	mov	r18, r21
     106:	25 2f       	mov	r18, r21
     108:	b5 2e       	mov	r11, r21
     10a:	25 2f       	mov	r18, r21
     10c:	25 2f       	mov	r18, r21
     10e:	25 2f       	mov	r18, r21
     110:	25 2f       	mov	r18, r21
     112:	25 2f       	mov	r18, r21
     114:	25 2f       	mov	r18, r21
     116:	25 2f       	mov	r18, r21
     118:	b7 2e       	mov	r11, r23
     11a:	25 2f       	mov	r18, r21
     11c:	25 2f       	mov	r18, r21
     11e:	25 2f       	mov	r18, r21
     120:	25 2f       	mov	r18, r21
     122:	25 2f       	mov	r18, r21
     124:	25 2f       	mov	r18, r21
     126:	25 2f       	mov	r18, r21
     128:	25 2f       	mov	r18, r21
     12a:	25 2f       	mov	r18, r21
     12c:	25 2f       	mov	r18, r21
     12e:	25 2f       	mov	r18, r21
     130:	25 2f       	mov	r18, r21
     132:	25 2f       	mov	r18, r21
     134:	25 2f       	mov	r18, r21
     136:	25 2f       	mov	r18, r21
     138:	b7 2e       	mov	r11, r23
     13a:	25 2f       	mov	r18, r21
     13c:	25 2f       	mov	r18, r21
     13e:	25 2f       	mov	r18, r21
     140:	25 2f       	mov	r18, r21
     142:	25 2f       	mov	r18, r21
     144:	25 2f       	mov	r18, r21
     146:	25 2f       	mov	r18, r21
     148:	25 2f       	mov	r18, r21
     14a:	25 2f       	mov	r18, r21
     14c:	25 2f       	mov	r18, r21
     14e:	25 2f       	mov	r18, r21
     150:	25 2f       	mov	r18, r21
     152:	25 2f       	mov	r18, r21
     154:	25 2f       	mov	r18, r21
     156:	25 2f       	mov	r18, r21
     158:	21 2f       	mov	r18, r17
     15a:	25 2f       	mov	r18, r21
     15c:	25 2f       	mov	r18, r21
     15e:	25 2f       	mov	r18, r21
     160:	25 2f       	mov	r18, r21
     162:	25 2f       	mov	r18, r21
     164:	25 2f       	mov	r18, r21
     166:	25 2f       	mov	r18, r21
     168:	ec 2e       	mov	r14, r28
     16a:	25 2f       	mov	r18, r21
     16c:	25 2f       	mov	r18, r21
     16e:	25 2f       	mov	r18, r21
     170:	25 2f       	mov	r18, r21
     172:	25 2f       	mov	r18, r21
     174:	25 2f       	mov	r18, r21
     176:	25 2f       	mov	r18, r21
     178:	25 2f       	mov	r18, r21
     17a:	25 2f       	mov	r18, r21
     17c:	25 2f       	mov	r18, r21
     17e:	25 2f       	mov	r18, r21
     180:	25 2f       	mov	r18, r21
     182:	25 2f       	mov	r18, r21
     184:	25 2f       	mov	r18, r21
     186:	25 2f       	mov	r18, r21
     188:	e0 2e       	mov	r14, r16
     18a:	25 2f       	mov	r18, r21
     18c:	25 2f       	mov	r18, r21
     18e:	25 2f       	mov	r18, r21
     190:	25 2f       	mov	r18, r21
     192:	25 2f       	mov	r18, r21
     194:	25 2f       	mov	r18, r21
     196:	25 2f       	mov	r18, r21
     198:	04 2f       	mov	r16, r20

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <prvCheckTasksWaitingTermination>
     19e:	80 91 41 16 	lds	r24, 0x1641	; 0x801641 <pxReadyTasksLists>
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	08 f0       	brcs	.+2      	; 0x1a8 <prvIdleTask+0xe>
     1a6:	bd d3       	rcall	.+1914   	; 0x922 <vPortYield>
     1a8:	0e 94 ae 1b 	call	0x375c	; 0x375c <vApplicationIdleHook>
     1ac:	f6 cf       	rjmp	.-20     	; 0x19a <prvIdleTask>

000001ae <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	1f 92       	push	r1
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	ce 01       	movw	r24, r28
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	0e 94 ae 18 	call	0x315c	; 0x315c <prvGetNextExpireTime>
     1c0:	49 81       	ldd	r20, Y+1	; 0x01
     1c2:	0e 94 a3 1a 	call	0x3546	; 0x3546 <prvProcessTimerOrBlockTask>
     1c6:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <prvProcessReceivedCommands>
     1ca:	f6 cf       	rjmp	.-20     	; 0x1b8 <prvTimerTask+0xa>

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d1 e2       	ldi	r29, 0x21	; 33
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	00 e0       	ldi	r16, 0x00	; 0
     1da:	0c bf       	out	0x3c, r16	; 60

000001dc <__do_copy_data>:
     1dc:	18 e0       	ldi	r17, 0x08	; 8
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b2 e0       	ldi	r27, 0x02	; 2
     1e2:	e2 e5       	ldi	r30, 0x52	; 82
     1e4:	fc e6       	ldi	r31, 0x6C	; 108
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	0b bf       	out	0x3b, r16	; 59
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x14>
     1ec:	07 90       	elpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	a4 33       	cpi	r26, 0x34	; 52
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0x10>

000001f6 <__do_clear_bss>:
     1f6:	28 e1       	ldi	r18, 0x18	; 24
     1f8:	a4 e3       	ldi	r26, 0x34	; 52
     1fa:	b8 e0       	ldi	r27, 0x08	; 8
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	a6 36       	cpi	r26, 0x66	; 102
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 a9 1c 	call	0x3952	; 0x3952 <main>
     20a:	0c 94 27 36 	jmp	0x6c4e	; 0x6c4e <_exit>

0000020e <__bad_interrupt>:
     20e:	f8 ce       	rjmp	.-528    	; 0x0 <__vectors>

00000210 <prvTestWaitCondition>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     210:	0f 93       	push	r16
     212:	01 11       	cpse	r16, r1
     214:	0c c0       	rjmp	.+24     	; 0x22e <prvTestWaitCondition+0x1e>
     216:	dc 01       	movw	r26, r24
     218:	cb 01       	movw	r24, r22
     21a:	82 23       	and	r24, r18
     21c:	93 23       	and	r25, r19
     21e:	a4 23       	and	r26, r20
     220:	b5 23       	and	r27, r21
     222:	89 2b       	or	r24, r25
     224:	8a 2b       	or	r24, r26
     226:	8b 2b       	or	r24, r27
     228:	79 f4       	brne	.+30     	; 0x248 <prvTestWaitCondition+0x38>
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	10 c0       	rjmp	.+32     	; 0x24e <prvTestWaitCondition+0x3e>
     22e:	dc 01       	movw	r26, r24
     230:	cb 01       	movw	r24, r22
     232:	82 23       	and	r24, r18
     234:	93 23       	and	r25, r19
     236:	a4 23       	and	r26, r20
     238:	b5 23       	and	r27, r21
     23a:	28 17       	cp	r18, r24
     23c:	39 07       	cpc	r19, r25
     23e:	4a 07       	cpc	r20, r26
     240:	5b 07       	cpc	r21, r27
     242:	21 f0       	breq	.+8      	; 0x24c <prvTestWaitCondition+0x3c>
     244:	80 e0       	ldi	r24, 0x00	; 0
     246:	03 c0       	rjmp	.+6      	; 0x24e <prvTestWaitCondition+0x3e>
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	01 c0       	rjmp	.+2      	; 0x24e <prvTestWaitCondition+0x3e>
     24c:	81 e0       	ldi	r24, 0x01	; 1
     24e:	0f 91       	pop	r16
     250:	08 95       	ret

00000252 <xEventGroupCreate>:
     252:	cf 93       	push	r28
     254:	df 93       	push	r29
     256:	8f e0       	ldi	r24, 0x0F	; 15
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	af d1       	rcall	.+862    	; 0x5ba <pvPortMalloc>
     25c:	ec 01       	movw	r28, r24
     25e:	00 97       	sbiw	r24, 0x00	; 0
     260:	39 f0       	breq	.+14     	; 0x270 <xEventGroupCreate+0x1e>
     262:	fc 01       	movw	r30, r24
     264:	11 92       	st	Z+, r1
     266:	11 92       	st	Z+, r1
     268:	11 92       	st	Z+, r1
     26a:	11 92       	st	Z+, r1
     26c:	cf 01       	movw	r24, r30
     26e:	8b d2       	rcall	.+1302   	; 0x786 <vListInitialise>
     270:	ce 01       	movw	r24, r28
     272:	df 91       	pop	r29
     274:	cf 91       	pop	r28
     276:	08 95       	ret

00000278 <xEventGroupWaitBits>:
     278:	2f 92       	push	r2
     27a:	3f 92       	push	r3
     27c:	4f 92       	push	r4
     27e:	5f 92       	push	r5
     280:	6f 92       	push	r6
     282:	7f 92       	push	r7
     284:	8f 92       	push	r8
     286:	9f 92       	push	r9
     288:	af 92       	push	r10
     28a:	bf 92       	push	r11
     28c:	cf 92       	push	r12
     28e:	df 92       	push	r13
     290:	ef 92       	push	r14
     292:	ff 92       	push	r15
     294:	0f 93       	push	r16
     296:	1f 93       	push	r17
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
     29c:	ec 01       	movw	r28, r24
     29e:	4a 01       	movw	r8, r20
     2a0:	5b 01       	movw	r10, r22
     2a2:	62 2e       	mov	r6, r18
     2a4:	70 2e       	mov	r7, r16
     2a6:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <vTaskSuspendAll>
     2aa:	28 80       	ld	r2, Y
     2ac:	39 80       	ldd	r3, Y+1	; 0x01
     2ae:	4a 80       	ldd	r4, Y+2	; 0x02
     2b0:	5b 80       	ldd	r5, Y+3	; 0x03
     2b2:	a5 01       	movw	r20, r10
     2b4:	94 01       	movw	r18, r8
     2b6:	c2 01       	movw	r24, r4
     2b8:	b1 01       	movw	r22, r2
     2ba:	aa df       	rcall	.-172    	; 0x210 <prvTestWaitCondition>
     2bc:	88 23       	and	r24, r24
     2be:	a1 f0       	breq	.+40     	; 0x2e8 <xEventGroupWaitBits+0x70>
     2c0:	66 20       	and	r6, r6
     2c2:	89 f1       	breq	.+98     	; 0x326 <xEventGroupWaitBits+0xae>
     2c4:	d5 01       	movw	r26, r10
     2c6:	c4 01       	movw	r24, r8
     2c8:	80 95       	com	r24
     2ca:	90 95       	com	r25
     2cc:	a0 95       	com	r26
     2ce:	b0 95       	com	r27
     2d0:	82 21       	and	r24, r2
     2d2:	93 21       	and	r25, r3
     2d4:	a4 21       	and	r26, r4
     2d6:	b5 21       	and	r27, r5
     2d8:	88 83       	st	Y, r24
     2da:	99 83       	std	Y+1, r25	; 0x01
     2dc:	aa 83       	std	Y+2, r26	; 0x02
     2de:	bb 83       	std	Y+3, r27	; 0x03
     2e0:	c1 2c       	mov	r12, r1
     2e2:	d1 2c       	mov	r13, r1
     2e4:	76 01       	movw	r14, r12
     2e6:	22 c0       	rjmp	.+68     	; 0x32c <xEventGroupWaitBits+0xb4>
     2e8:	c1 14       	cp	r12, r1
     2ea:	d1 04       	cpc	r13, r1
     2ec:	e1 04       	cpc	r14, r1
     2ee:	f1 04       	cpc	r15, r1
     2f0:	e9 f0       	breq	.+58     	; 0x32c <xEventGroupWaitBits+0xb4>
     2f2:	61 10       	cpse	r6, r1
     2f4:	04 c0       	rjmp	.+8      	; 0x2fe <xEventGroupWaitBits+0x86>
     2f6:	40 e0       	ldi	r20, 0x00	; 0
     2f8:	50 e0       	ldi	r21, 0x00	; 0
     2fa:	ba 01       	movw	r22, r20
     2fc:	04 c0       	rjmp	.+8      	; 0x306 <xEventGroupWaitBits+0x8e>
     2fe:	40 e0       	ldi	r20, 0x00	; 0
     300:	50 e0       	ldi	r21, 0x00	; 0
     302:	60 e0       	ldi	r22, 0x00	; 0
     304:	71 e0       	ldi	r23, 0x01	; 1
     306:	71 10       	cpse	r7, r1
     308:	74 60       	ori	r23, 0x04	; 4
     30a:	48 29       	or	r20, r8
     30c:	59 29       	or	r21, r9
     30e:	6a 29       	or	r22, r10
     310:	7b 29       	or	r23, r11
     312:	97 01       	movw	r18, r14
     314:	86 01       	movw	r16, r12
     316:	ce 01       	movw	r24, r28
     318:	04 96       	adiw	r24, 0x04	; 4
     31a:	0e 94 d5 11 	call	0x23aa	; 0x23aa <vTaskPlaceOnUnorderedEventList>
     31e:	21 2c       	mov	r2, r1
     320:	31 2c       	mov	r3, r1
     322:	21 01       	movw	r4, r2
     324:	03 c0       	rjmp	.+6      	; 0x32c <xEventGroupWaitBits+0xb4>
     326:	c1 2c       	mov	r12, r1
     328:	d1 2c       	mov	r13, r1
     32a:	76 01       	movw	r14, r12
     32c:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <xTaskResumeAll>
     330:	cd 28       	or	r12, r13
     332:	ce 28       	or	r12, r14
     334:	cf 28       	or	r12, r15
     336:	59 f1       	breq	.+86     	; 0x38e <xEventGroupWaitBits+0x116>
     338:	81 11       	cpse	r24, r1
     33a:	01 c0       	rjmp	.+2      	; 0x33e <xEventGroupWaitBits+0xc6>
     33c:	f2 d2       	rcall	.+1508   	; 0x922 <vPortYield>
     33e:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <uxTaskResetEventItemValue>
     342:	6b 01       	movw	r12, r22
     344:	7c 01       	movw	r14, r24
     346:	91 fd       	sbrc	r25, 1
     348:	1f c0       	rjmp	.+62     	; 0x388 <xEventGroupWaitBits+0x110>
     34a:	0f b6       	in	r0, 0x3f	; 63
     34c:	f8 94       	cli
     34e:	0f 92       	push	r0
     350:	c8 80       	ld	r12, Y
     352:	d9 80       	ldd	r13, Y+1	; 0x01
     354:	ea 80       	ldd	r14, Y+2	; 0x02
     356:	fb 80       	ldd	r15, Y+3	; 0x03
     358:	07 2d       	mov	r16, r7
     35a:	a5 01       	movw	r20, r10
     35c:	94 01       	movw	r18, r8
     35e:	c7 01       	movw	r24, r14
     360:	b6 01       	movw	r22, r12
     362:	56 df       	rcall	.-340    	; 0x210 <prvTestWaitCondition>
     364:	88 23       	and	r24, r24
     366:	71 f0       	breq	.+28     	; 0x384 <xEventGroupWaitBits+0x10c>
     368:	66 20       	and	r6, r6
     36a:	61 f0       	breq	.+24     	; 0x384 <xEventGroupWaitBits+0x10c>
     36c:	80 94       	com	r8
     36e:	90 94       	com	r9
     370:	a0 94       	com	r10
     372:	b0 94       	com	r11
     374:	8c 20       	and	r8, r12
     376:	9d 20       	and	r9, r13
     378:	ae 20       	and	r10, r14
     37a:	bf 20       	and	r11, r15
     37c:	88 82       	st	Y, r8
     37e:	99 82       	std	Y+1, r9	; 0x01
     380:	aa 82       	std	Y+2, r10	; 0x02
     382:	bb 82       	std	Y+3, r11	; 0x03
     384:	0f 90       	pop	r0
     386:	0f be       	out	0x3f, r0	; 63
     388:	16 01       	movw	r2, r12
     38a:	27 01       	movw	r4, r14
     38c:	55 24       	eor	r5, r5
     38e:	c2 01       	movw	r24, r4
     390:	b1 01       	movw	r22, r2
     392:	df 91       	pop	r29
     394:	cf 91       	pop	r28
     396:	1f 91       	pop	r17
     398:	0f 91       	pop	r16
     39a:	ff 90       	pop	r15
     39c:	ef 90       	pop	r14
     39e:	df 90       	pop	r13
     3a0:	cf 90       	pop	r12
     3a2:	bf 90       	pop	r11
     3a4:	af 90       	pop	r10
     3a6:	9f 90       	pop	r9
     3a8:	8f 90       	pop	r8
     3aa:	7f 90       	pop	r7
     3ac:	6f 90       	pop	r6
     3ae:	5f 90       	pop	r5
     3b0:	4f 90       	pop	r4
     3b2:	3f 90       	pop	r3
     3b4:	2f 90       	pop	r2
     3b6:	08 95       	ret

000003b8 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     3b8:	4f 92       	push	r4
     3ba:	5f 92       	push	r5
     3bc:	6f 92       	push	r6
     3be:	7f 92       	push	r7
     3c0:	af 92       	push	r10
     3c2:	bf 92       	push	r11
     3c4:	cf 92       	push	r12
     3c6:	df 92       	push	r13
     3c8:	ef 92       	push	r14
     3ca:	ff 92       	push	r15
     3cc:	0f 93       	push	r16
     3ce:	1f 93       	push	r17
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	ec 01       	movw	r28, r24
     3d6:	6a 01       	movw	r12, r20
     3d8:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     3da:	8c 01       	movw	r16, r24
     3dc:	09 5f       	subi	r16, 0xF9	; 249
     3de:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     3e0:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     3e4:	eb 85       	ldd	r30, Y+11	; 0x0b
     3e6:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     3e8:	88 81       	ld	r24, Y
     3ea:	99 81       	ldd	r25, Y+1	; 0x01
     3ec:	aa 81       	ldd	r26, Y+2	; 0x02
     3ee:	bb 81       	ldd	r27, Y+3	; 0x03
     3f0:	c8 2a       	or	r12, r24
     3f2:	d9 2a       	or	r13, r25
     3f4:	ea 2a       	or	r14, r26
     3f6:	fb 2a       	or	r15, r27
     3f8:	c8 82       	st	Y, r12
     3fa:	d9 82       	std	Y+1, r13	; 0x01
     3fc:	ea 82       	std	Y+2, r14	; 0x02
     3fe:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     400:	c1 2c       	mov	r12, r1
     402:	d1 2c       	mov	r13, r1
     404:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     406:	3d c0       	rjmp	.+122    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
        {
            pxNext = listGET_NEXT( pxListItem );
     408:	a4 80       	ldd	r10, Z+4	; 0x04
     40a:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     40c:	80 81       	ld	r24, Z
     40e:	91 81       	ldd	r25, Z+1	; 0x01
     410:	a2 81       	ldd	r26, Z+2	; 0x02
     412:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     414:	ac 01       	movw	r20, r24
     416:	bd 01       	movw	r22, r26
     418:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     41a:	b2 fd       	sbrc	r27, 2
     41c:	0e c0       	rjmp	.+28     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     41e:	48 80       	ld	r4, Y
     420:	59 80       	ldd	r5, Y+1	; 0x01
     422:	6a 80       	ldd	r6, Y+2	; 0x02
     424:	7b 80       	ldd	r7, Y+3	; 0x03
     426:	44 22       	and	r4, r20
     428:	55 22       	and	r5, r21
     42a:	66 22       	and	r6, r22
     42c:	77 22       	and	r7, r23
     42e:	45 28       	or	r4, r5
     430:	46 28       	or	r4, r6
     432:	47 28       	or	r4, r7
     434:	89 f4       	brne	.+34     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     436:	20 e0       	ldi	r18, 0x00	; 0
     438:	12 c0       	rjmp	.+36     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     43a:	48 80       	ld	r4, Y
     43c:	59 80       	ldd	r5, Y+1	; 0x01
     43e:	6a 80       	ldd	r6, Y+2	; 0x02
     440:	7b 80       	ldd	r7, Y+3	; 0x03
     442:	44 22       	and	r4, r20
     444:	55 22       	and	r5, r21
     446:	66 22       	and	r6, r22
     448:	77 22       	and	r7, r23
     44a:	44 15       	cp	r20, r4
     44c:	55 05       	cpc	r21, r5
     44e:	66 05       	cpc	r22, r6
     450:	77 05       	cpc	r23, r7
     452:	21 f0       	breq	.+8      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     454:	20 e0       	ldi	r18, 0x00	; 0
     456:	03 c0       	rjmp	.+6      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     458:	21 e0       	ldi	r18, 0x01	; 1
     45a:	01 c0       	rjmp	.+2      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     45c:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     45e:	22 23       	and	r18, r18
     460:	71 f0       	breq	.+28     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     462:	b0 ff       	sbrs	r27, 0
     464:	04 c0       	rjmp	.+8      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     466:	c4 2a       	or	r12, r20
     468:	d5 2a       	or	r13, r21
     46a:	e6 2a       	or	r14, r22
     46c:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     46e:	48 81       	ld	r20, Y
     470:	59 81       	ldd	r21, Y+1	; 0x01
     472:	6a 81       	ldd	r22, Y+2	; 0x02
     474:	7b 81       	ldd	r23, Y+3	; 0x03
     476:	72 60       	ori	r23, 0x02	; 2
     478:	cf 01       	movw	r24, r30
     47a:	0e 94 10 13 	call	0x2620	; 0x2620 <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     47e:	ea 2d       	mov	r30, r10
     480:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     482:	e0 17       	cp	r30, r16
     484:	f1 07       	cpc	r31, r17
     486:	09 f0       	breq	.+2      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     488:	bf cf       	rjmp	.-130    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     48a:	c0 94       	com	r12
     48c:	d0 94       	com	r13
     48e:	e0 94       	com	r14
     490:	f0 94       	com	r15
     492:	88 81       	ld	r24, Y
     494:	99 81       	ldd	r25, Y+1	; 0x01
     496:	aa 81       	ldd	r26, Y+2	; 0x02
     498:	bb 81       	ldd	r27, Y+3	; 0x03
     49a:	c8 22       	and	r12, r24
     49c:	d9 22       	and	r13, r25
     49e:	ea 22       	and	r14, r26
     4a0:	fb 22       	and	r15, r27
     4a2:	c8 82       	st	Y, r12
     4a4:	d9 82       	std	Y+1, r13	; 0x01
     4a6:	ea 82       	std	Y+2, r14	; 0x02
     4a8:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     4aa:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     4ae:	68 81       	ld	r22, Y
     4b0:	79 81       	ldd	r23, Y+1	; 0x01
     4b2:	8a 81       	ldd	r24, Y+2	; 0x02
     4b4:	9b 81       	ldd	r25, Y+3	; 0x03
}
     4b6:	df 91       	pop	r29
     4b8:	cf 91       	pop	r28
     4ba:	1f 91       	pop	r17
     4bc:	0f 91       	pop	r16
     4be:	ff 90       	pop	r15
     4c0:	ef 90       	pop	r14
     4c2:	df 90       	pop	r13
     4c4:	cf 90       	pop	r12
     4c6:	bf 90       	pop	r11
     4c8:	af 90       	pop	r10
     4ca:	7f 90       	pop	r7
     4cc:	6f 90       	pop	r6
     4ce:	5f 90       	pop	r5
     4d0:	4f 90       	pop	r4
     4d2:	08 95       	ret

000004d4 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     4d4:	e0 e4       	ldi	r30, 0x40	; 64
     4d6:	f8 e0       	ldi	r31, 0x08	; 8
     4d8:	a4 e4       	ldi	r26, 0x44	; 68
     4da:	b8 e0       	ldi	r27, 0x08	; 8
     4dc:	b1 83       	std	Z+1, r27	; 0x01
     4de:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     4e0:	13 82       	std	Z+3, r1	; 0x03
     4e2:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     4e4:	ec ee       	ldi	r30, 0xEC	; 236
     4e6:	f5 e1       	ldi	r31, 0x15	; 21
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     4e8:	f0 93 3f 08 	sts	0x083F, r31	; 0x80083f <pxEnd+0x1>
     4ec:	e0 93 3e 08 	sts	0x083E, r30	; 0x80083e <pxEnd>
    pxEnd->xBlockSize = 0;
     4f0:	13 82       	std	Z+3, r1	; 0x03
     4f2:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     4f4:	11 82       	std	Z+1, r1	; 0x01
     4f6:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     4f8:	88 ea       	ldi	r24, 0xA8	; 168
     4fa:	9d e0       	ldi	r25, 0x0D	; 13
     4fc:	13 96       	adiw	r26, 0x03	; 3
     4fe:	9c 93       	st	X, r25
     500:	8e 93       	st	-X, r24
     502:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     504:	ed 93       	st	X+, r30
     506:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     508:	90 93 3b 08 	sts	0x083B, r25	; 0x80083b <xMinimumEverFreeBytesRemaining+0x1>
     50c:	80 93 3a 08 	sts	0x083A, r24	; 0x80083a <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     510:	90 93 3d 08 	sts	0x083D, r25	; 0x80083d <xFreeBytesRemaining+0x1>
     514:	80 93 3c 08 	sts	0x083C, r24	; 0x80083c <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	90 e8       	ldi	r25, 0x80	; 128
     51c:	90 93 35 08 	sts	0x0835, r25	; 0x800835 <__data_end+0x1>
     520:	80 93 34 08 	sts	0x0834, r24	; 0x800834 <__data_end>
     524:	08 95       	ret

00000526 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     526:	cf 93       	push	r28
     528:	df 93       	push	r29
     52a:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     52c:	a0 e4       	ldi	r26, 0x40	; 64
     52e:	b8 e0       	ldi	r27, 0x08	; 8
     530:	01 c0       	rjmp	.+2      	; 0x534 <prvInsertBlockIntoFreeList+0xe>
     532:	df 01       	movw	r26, r30
     534:	ed 91       	ld	r30, X+
     536:	fc 91       	ld	r31, X
     538:	11 97       	sbiw	r26, 0x01	; 1
     53a:	ec 17       	cp	r30, r28
     53c:	fd 07       	cpc	r31, r29
     53e:	c8 f3       	brcs	.-14     	; 0x532 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     540:	12 96       	adiw	r26, 0x02	; 2
     542:	8d 91       	ld	r24, X+
     544:	9c 91       	ld	r25, X
     546:	13 97       	sbiw	r26, 0x03	; 3
     548:	9d 01       	movw	r18, r26
     54a:	28 0f       	add	r18, r24
     54c:	39 1f       	adc	r19, r25
     54e:	c2 17       	cp	r28, r18
     550:	d3 07       	cpc	r29, r19
     552:	49 f4       	brne	.+18     	; 0x566 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     554:	2a 81       	ldd	r18, Y+2	; 0x02
     556:	3b 81       	ldd	r19, Y+3	; 0x03
     558:	82 0f       	add	r24, r18
     55a:	93 1f       	adc	r25, r19
     55c:	13 96       	adiw	r26, 0x03	; 3
     55e:	9c 93       	st	X, r25
     560:	8e 93       	st	-X, r24
     562:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     564:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     566:	8a 81       	ldd	r24, Y+2	; 0x02
     568:	9b 81       	ldd	r25, Y+3	; 0x03
     56a:	9e 01       	movw	r18, r28
     56c:	28 0f       	add	r18, r24
     56e:	39 1f       	adc	r19, r25
     570:	e2 17       	cp	r30, r18
     572:	f3 07       	cpc	r31, r19
     574:	c1 f4       	brne	.+48     	; 0x5a6 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     576:	20 91 3e 08 	lds	r18, 0x083E	; 0x80083e <pxEnd>
     57a:	30 91 3f 08 	lds	r19, 0x083F	; 0x80083f <pxEnd+0x1>
     57e:	e2 17       	cp	r30, r18
     580:	f3 07       	cpc	r31, r19
     582:	71 f0       	breq	.+28     	; 0x5a0 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     584:	22 81       	ldd	r18, Z+2	; 0x02
     586:	33 81       	ldd	r19, Z+3	; 0x03
     588:	82 0f       	add	r24, r18
     58a:	93 1f       	adc	r25, r19
     58c:	9b 83       	std	Y+3, r25	; 0x03
     58e:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     590:	ed 91       	ld	r30, X+
     592:	fc 91       	ld	r31, X
     594:	11 97       	sbiw	r26, 0x01	; 1
     596:	80 81       	ld	r24, Z
     598:	91 81       	ldd	r25, Z+1	; 0x01
     59a:	99 83       	std	Y+1, r25	; 0x01
     59c:	88 83       	st	Y, r24
     59e:	05 c0       	rjmp	.+10     	; 0x5aa <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     5a0:	39 83       	std	Y+1, r19	; 0x01
     5a2:	28 83       	st	Y, r18
     5a4:	02 c0       	rjmp	.+4      	; 0x5aa <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     5a6:	f9 83       	std	Y+1, r31	; 0x01
     5a8:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     5aa:	ca 17       	cp	r28, r26
     5ac:	db 07       	cpc	r29, r27
     5ae:	11 f0       	breq	.+4      	; 0x5b4 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     5b0:	cd 93       	st	X+, r28
     5b2:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     5b4:	df 91       	pop	r29
     5b6:	cf 91       	pop	r28
     5b8:	08 95       	ret

000005ba <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     5ba:	ef 92       	push	r14
     5bc:	ff 92       	push	r15
     5be:	0f 93       	push	r16
     5c0:	1f 93       	push	r17
     5c2:	cf 93       	push	r28
     5c4:	df 93       	push	r29
     5c6:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     5c8:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     5cc:	80 91 3e 08 	lds	r24, 0x083E	; 0x80083e <pxEnd>
     5d0:	90 91 3f 08 	lds	r25, 0x083F	; 0x80083f <pxEnd+0x1>
     5d4:	89 2b       	or	r24, r25
     5d6:	09 f4       	brne	.+2      	; 0x5da <pvPortMalloc+0x20>
        {
            prvHeapInit();
     5d8:	7d df       	rcall	.-262    	; 0x4d4 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     5da:	80 91 34 08 	lds	r24, 0x0834	; 0x800834 <__data_end>
     5de:	90 91 35 08 	lds	r25, 0x0835	; 0x800835 <__data_end+0x1>
     5e2:	80 23       	and	r24, r16
     5e4:	91 23       	and	r25, r17
     5e6:	89 2b       	or	r24, r25
     5e8:	09 f0       	breq	.+2      	; 0x5ec <pvPortMalloc+0x32>
     5ea:	76 c0       	rjmp	.+236    	; 0x6d8 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     5ec:	01 15       	cp	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	49 f0       	breq	.+18     	; 0x604 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     5f2:	c8 01       	movw	r24, r16
     5f4:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     5f6:	08 17       	cp	r16, r24
     5f8:	19 07       	cpc	r17, r25
     5fa:	18 f0       	brcs	.+6      	; 0x602 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     5fc:	00 e0       	ldi	r16, 0x00	; 0
     5fe:	10 e0       	ldi	r17, 0x00	; 0
     600:	01 c0       	rjmp	.+2      	; 0x604 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     602:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     604:	01 15       	cp	r16, r1
     606:	11 05       	cpc	r17, r1
     608:	09 f4       	brne	.+2      	; 0x60c <pvPortMalloc+0x52>
     60a:	69 c0       	rjmp	.+210    	; 0x6de <pvPortMalloc+0x124>
     60c:	80 91 3c 08 	lds	r24, 0x083C	; 0x80083c <xFreeBytesRemaining>
     610:	90 91 3d 08 	lds	r25, 0x083D	; 0x80083d <xFreeBytesRemaining+0x1>
     614:	80 17       	cp	r24, r16
     616:	91 07       	cpc	r25, r17
     618:	08 f4       	brcc	.+2      	; 0x61c <pvPortMalloc+0x62>
     61a:	64 c0       	rjmp	.+200    	; 0x6e4 <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     61c:	c0 91 40 08 	lds	r28, 0x0840	; 0x800840 <xStart>
     620:	d0 91 41 08 	lds	r29, 0x0841	; 0x800841 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     624:	e0 e4       	ldi	r30, 0x40	; 64
     626:	f8 e0       	ldi	r31, 0x08	; 8
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     628:	02 c0       	rjmp	.+4      	; 0x62e <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     62a:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     62c:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     62e:	8a 81       	ldd	r24, Y+2	; 0x02
     630:	9b 81       	ldd	r25, Y+3	; 0x03
     632:	80 17       	cp	r24, r16
     634:	91 07       	cpc	r25, r17
     636:	20 f4       	brcc	.+8      	; 0x640 <pvPortMalloc+0x86>
     638:	88 81       	ld	r24, Y
     63a:	99 81       	ldd	r25, Y+1	; 0x01
     63c:	00 97       	sbiw	r24, 0x00	; 0
     63e:	a9 f7       	brne	.-22     	; 0x62a <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     640:	80 91 3e 08 	lds	r24, 0x083E	; 0x80083e <pxEnd>
     644:	90 91 3f 08 	lds	r25, 0x083F	; 0x80083f <pxEnd+0x1>
     648:	c8 17       	cp	r28, r24
     64a:	d9 07       	cpc	r29, r25
     64c:	09 f4       	brne	.+2      	; 0x650 <pvPortMalloc+0x96>
     64e:	4d c0       	rjmp	.+154    	; 0x6ea <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     650:	e0 80       	ld	r14, Z
     652:	f1 80       	ldd	r15, Z+1	; 0x01
     654:	84 e0       	ldi	r24, 0x04	; 4
     656:	e8 0e       	add	r14, r24
     658:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     65a:	88 81       	ld	r24, Y
     65c:	99 81       	ldd	r25, Y+1	; 0x01
     65e:	91 83       	std	Z+1, r25	; 0x01
     660:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     662:	2a 81       	ldd	r18, Y+2	; 0x02
     664:	3b 81       	ldd	r19, Y+3	; 0x03
     666:	20 1b       	sub	r18, r16
     668:	31 0b       	sbc	r19, r17
     66a:	29 30       	cpi	r18, 0x09	; 9
     66c:	31 05       	cpc	r19, r1
     66e:	48 f0       	brcs	.+18     	; 0x682 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     670:	ce 01       	movw	r24, r28
     672:	80 0f       	add	r24, r16
     674:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     676:	fc 01       	movw	r30, r24
     678:	33 83       	std	Z+3, r19	; 0x03
     67a:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     67c:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     67e:	0a 83       	std	Y+2, r16	; 0x02
     680:	52 df       	rcall	.-348    	; 0x526 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     682:	2a 81       	ldd	r18, Y+2	; 0x02
     684:	3b 81       	ldd	r19, Y+3	; 0x03
     686:	80 91 3c 08 	lds	r24, 0x083C	; 0x80083c <xFreeBytesRemaining>
     68a:	90 91 3d 08 	lds	r25, 0x083D	; 0x80083d <xFreeBytesRemaining+0x1>
     68e:	82 1b       	sub	r24, r18
     690:	93 0b       	sbc	r25, r19
     692:	90 93 3d 08 	sts	0x083D, r25	; 0x80083d <xFreeBytesRemaining+0x1>
     696:	80 93 3c 08 	sts	0x083C, r24	; 0x80083c <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     69a:	40 91 3a 08 	lds	r20, 0x083A	; 0x80083a <xMinimumEverFreeBytesRemaining>
     69e:	50 91 3b 08 	lds	r21, 0x083B	; 0x80083b <xMinimumEverFreeBytesRemaining+0x1>
     6a2:	84 17       	cp	r24, r20
     6a4:	95 07       	cpc	r25, r21
     6a6:	20 f4       	brcc	.+8      	; 0x6b0 <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     6a8:	90 93 3b 08 	sts	0x083B, r25	; 0x80083b <xMinimumEverFreeBytesRemaining+0x1>
     6ac:	80 93 3a 08 	sts	0x083A, r24	; 0x80083a <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     6b0:	80 91 34 08 	lds	r24, 0x0834	; 0x800834 <__data_end>
     6b4:	90 91 35 08 	lds	r25, 0x0835	; 0x800835 <__data_end+0x1>
     6b8:	28 2b       	or	r18, r24
     6ba:	39 2b       	or	r19, r25
     6bc:	3b 83       	std	Y+3, r19	; 0x03
     6be:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     6c0:	19 82       	std	Y+1, r1	; 0x01
     6c2:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     6c4:	80 91 38 08 	lds	r24, 0x0838	; 0x800838 <xNumberOfSuccessfulAllocations>
     6c8:	90 91 39 08 	lds	r25, 0x0839	; 0x800839 <xNumberOfSuccessfulAllocations+0x1>
     6cc:	01 96       	adiw	r24, 0x01	; 1
     6ce:	90 93 39 08 	sts	0x0839, r25	; 0x800839 <xNumberOfSuccessfulAllocations+0x1>
     6d2:	80 93 38 08 	sts	0x0838, r24	; 0x800838 <xNumberOfSuccessfulAllocations>
     6d6:	0b c0       	rjmp	.+22     	; 0x6ee <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     6d8:	e1 2c       	mov	r14, r1
     6da:	f1 2c       	mov	r15, r1
     6dc:	08 c0       	rjmp	.+16     	; 0x6ee <pvPortMalloc+0x134>
     6de:	e1 2c       	mov	r14, r1
     6e0:	f1 2c       	mov	r15, r1
     6e2:	05 c0       	rjmp	.+10     	; 0x6ee <pvPortMalloc+0x134>
     6e4:	e1 2c       	mov	r14, r1
     6e6:	f1 2c       	mov	r15, r1
     6e8:	02 c0       	rjmp	.+4      	; 0x6ee <pvPortMalloc+0x134>
     6ea:	e1 2c       	mov	r14, r1
     6ec:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     6ee:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     6f2:	e1 14       	cp	r14, r1
     6f4:	f1 04       	cpc	r15, r1
     6f6:	11 f4       	brne	.+4      	; 0x6fc <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     6f8:	0e 94 ba 1b 	call	0x3774	; 0x3774 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     6fc:	c7 01       	movw	r24, r14
     6fe:	df 91       	pop	r29
     700:	cf 91       	pop	r28
     702:	1f 91       	pop	r17
     704:	0f 91       	pop	r16
     706:	ff 90       	pop	r15
     708:	ef 90       	pop	r14
     70a:	08 95       	ret

0000070c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     70c:	0f 93       	push	r16
     70e:	1f 93       	push	r17
     710:	cf 93       	push	r28
     712:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     714:	00 97       	sbiw	r24, 0x00	; 0
     716:	91 f1       	breq	.+100    	; 0x77c <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     718:	ec 01       	movw	r28, r24
     71a:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     71c:	4a 81       	ldd	r20, Y+2	; 0x02
     71e:	5b 81       	ldd	r21, Y+3	; 0x03
     720:	20 91 34 08 	lds	r18, 0x0834	; 0x800834 <__data_end>
     724:	30 91 35 08 	lds	r19, 0x0835	; 0x800835 <__data_end+0x1>
     728:	ba 01       	movw	r22, r20
     72a:	62 23       	and	r22, r18
     72c:	73 23       	and	r23, r19
     72e:	67 2b       	or	r22, r23
     730:	29 f1       	breq	.+74     	; 0x77c <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     732:	68 81       	ld	r22, Y
     734:	79 81       	ldd	r23, Y+1	; 0x01
     736:	67 2b       	or	r22, r23
     738:	09 f5       	brne	.+66     	; 0x77c <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     73a:	20 95       	com	r18
     73c:	30 95       	com	r19
     73e:	24 23       	and	r18, r20
     740:	35 23       	and	r19, r21
     742:	3b 83       	std	Y+3, r19	; 0x03
     744:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     746:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     74a:	8a 81       	ldd	r24, Y+2	; 0x02
     74c:	9b 81       	ldd	r25, Y+3	; 0x03
     74e:	20 91 3c 08 	lds	r18, 0x083C	; 0x80083c <xFreeBytesRemaining>
     752:	30 91 3d 08 	lds	r19, 0x083D	; 0x80083d <xFreeBytesRemaining+0x1>
     756:	82 0f       	add	r24, r18
     758:	93 1f       	adc	r25, r19
     75a:	90 93 3d 08 	sts	0x083D, r25	; 0x80083d <xFreeBytesRemaining+0x1>
     75e:	80 93 3c 08 	sts	0x083C, r24	; 0x80083c <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     762:	ce 01       	movw	r24, r28
     764:	e0 de       	rcall	.-576    	; 0x526 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     766:	80 91 36 08 	lds	r24, 0x0836	; 0x800836 <xNumberOfSuccessfulFrees>
     76a:	90 91 37 08 	lds	r25, 0x0837	; 0x800837 <xNumberOfSuccessfulFrees+0x1>
     76e:	01 96       	adiw	r24, 0x01	; 1
     770:	90 93 37 08 	sts	0x0837, r25	; 0x800837 <xNumberOfSuccessfulFrees+0x1>
     774:	80 93 36 08 	sts	0x0836, r24	; 0x800836 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     778:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	0f 91       	pop	r16
     784:	08 95       	ret

00000786 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     786:	fc 01       	movw	r30, r24
     788:	03 96       	adiw	r24, 0x03	; 3
     78a:	92 83       	std	Z+2, r25	; 0x02
     78c:	81 83       	std	Z+1, r24	; 0x01
     78e:	4f ef       	ldi	r20, 0xFF	; 255
     790:	5f ef       	ldi	r21, 0xFF	; 255
     792:	ba 01       	movw	r22, r20
     794:	43 83       	std	Z+3, r20	; 0x03
     796:	54 83       	std	Z+4, r21	; 0x04
     798:	65 83       	std	Z+5, r22	; 0x05
     79a:	76 83       	std	Z+6, r23	; 0x06
     79c:	90 87       	std	Z+8, r25	; 0x08
     79e:	87 83       	std	Z+7, r24	; 0x07
     7a0:	92 87       	std	Z+10, r25	; 0x0a
     7a2:	81 87       	std	Z+9, r24	; 0x09
     7a4:	10 82       	st	Z, r1
     7a6:	08 95       	ret

000007a8 <vListInitialiseItem>:
     7a8:	fc 01       	movw	r30, r24
     7aa:	13 86       	std	Z+11, r1	; 0x0b
     7ac:	12 86       	std	Z+10, r1	; 0x0a
     7ae:	08 95       	ret

000007b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     7b0:	0f 93       	push	r16
     7b2:	1f 93       	push	r17
     7b4:	cf 93       	push	r28
     7b6:	df 93       	push	r29
     7b8:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     7ba:	08 81       	ld	r16, Y
     7bc:	19 81       	ldd	r17, Y+1	; 0x01
     7be:	2a 81       	ldd	r18, Y+2	; 0x02
     7c0:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     7c2:	0f 3f       	cpi	r16, 0xFF	; 255
     7c4:	4f ef       	ldi	r20, 0xFF	; 255
     7c6:	14 07       	cpc	r17, r20
     7c8:	24 07       	cpc	r18, r20
     7ca:	34 07       	cpc	r19, r20
     7cc:	21 f4       	brne	.+8      	; 0x7d6 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     7ce:	fc 01       	movw	r30, r24
     7d0:	a1 85       	ldd	r26, Z+9	; 0x09
     7d2:	b2 85       	ldd	r27, Z+10	; 0x0a
     7d4:	11 c0       	rjmp	.+34     	; 0x7f8 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     7d6:	dc 01       	movw	r26, r24
     7d8:	13 96       	adiw	r26, 0x03	; 3
     7da:	01 c0       	rjmp	.+2      	; 0x7de <vListInsert+0x2e>
     7dc:	df 01       	movw	r26, r30
     7de:	14 96       	adiw	r26, 0x04	; 4
     7e0:	ed 91       	ld	r30, X+
     7e2:	fc 91       	ld	r31, X
     7e4:	15 97       	sbiw	r26, 0x05	; 5
     7e6:	40 81       	ld	r20, Z
     7e8:	51 81       	ldd	r21, Z+1	; 0x01
     7ea:	62 81       	ldd	r22, Z+2	; 0x02
     7ec:	73 81       	ldd	r23, Z+3	; 0x03
     7ee:	04 17       	cp	r16, r20
     7f0:	15 07       	cpc	r17, r21
     7f2:	26 07       	cpc	r18, r22
     7f4:	37 07       	cpc	r19, r23
     7f6:	90 f7       	brcc	.-28     	; 0x7dc <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     7f8:	14 96       	adiw	r26, 0x04	; 4
     7fa:	ed 91       	ld	r30, X+
     7fc:	fc 91       	ld	r31, X
     7fe:	15 97       	sbiw	r26, 0x05	; 5
     800:	fd 83       	std	Y+5, r31	; 0x05
     802:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     804:	d7 83       	std	Z+7, r29	; 0x07
     806:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     808:	bf 83       	std	Y+7, r27	; 0x07
     80a:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     80c:	15 96       	adiw	r26, 0x05	; 5
     80e:	dc 93       	st	X, r29
     810:	ce 93       	st	-X, r28
     812:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     814:	9b 87       	std	Y+11, r25	; 0x0b
     816:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     818:	fc 01       	movw	r30, r24
     81a:	20 81       	ld	r18, Z
     81c:	2f 5f       	subi	r18, 0xFF	; 255
     81e:	20 83       	st	Z, r18
}
     820:	df 91       	pop	r29
     822:	cf 91       	pop	r28
     824:	1f 91       	pop	r17
     826:	0f 91       	pop	r16
     828:	08 95       	ret

0000082a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     82a:	cf 93       	push	r28
     82c:	df 93       	push	r29
     82e:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     830:	a2 85       	ldd	r26, Z+10	; 0x0a
     832:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     834:	c4 81       	ldd	r28, Z+4	; 0x04
     836:	d5 81       	ldd	r29, Z+5	; 0x05
     838:	86 81       	ldd	r24, Z+6	; 0x06
     83a:	97 81       	ldd	r25, Z+7	; 0x07
     83c:	9f 83       	std	Y+7, r25	; 0x07
     83e:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     840:	c6 81       	ldd	r28, Z+6	; 0x06
     842:	d7 81       	ldd	r29, Z+7	; 0x07
     844:	84 81       	ldd	r24, Z+4	; 0x04
     846:	95 81       	ldd	r25, Z+5	; 0x05
     848:	9d 83       	std	Y+5, r25	; 0x05
     84a:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     84c:	11 96       	adiw	r26, 0x01	; 1
     84e:	8d 91       	ld	r24, X+
     850:	9c 91       	ld	r25, X
     852:	12 97       	sbiw	r26, 0x02	; 2
     854:	e8 17       	cp	r30, r24
     856:	f9 07       	cpc	r31, r25
     858:	31 f4       	brne	.+12     	; 0x866 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     85a:	86 81       	ldd	r24, Z+6	; 0x06
     85c:	97 81       	ldd	r25, Z+7	; 0x07
     85e:	12 96       	adiw	r26, 0x02	; 2
     860:	9c 93       	st	X, r25
     862:	8e 93       	st	-X, r24
     864:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     866:	13 86       	std	Z+11, r1	; 0x0b
     868:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     86a:	8c 91       	ld	r24, X
     86c:	81 50       	subi	r24, 0x01	; 1
     86e:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     870:	8c 91       	ld	r24, X
}
     872:	df 91       	pop	r29
     874:	cf 91       	pop	r28
     876:	08 95       	ret

00000878 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     878:	a8 95       	wdr
     87a:	90 ec       	ldi	r25, 0xC0	; 192
     87c:	88 e1       	ldi	r24, 0x18	; 24
     87e:	0f b6       	in	r0, 0x3f	; 63
     880:	f8 94       	cli
     882:	a8 95       	wdr
     884:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     888:	0f be       	out	0x3f, r0	; 63
     88a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     88e:	08 95       	ret

00000890 <pxPortInitialiseStack>:
     890:	fc 01       	movw	r30, r24
     892:	60 83       	st	Z, r22
     894:	31 97       	sbiw	r30, 0x01	; 1
     896:	70 83       	st	Z, r23
     898:	31 97       	sbiw	r30, 0x01	; 1
     89a:	10 82       	st	Z, r1
     89c:	31 97       	sbiw	r30, 0x01	; 1
     89e:	10 82       	st	Z, r1
     8a0:	31 97       	sbiw	r30, 0x01	; 1
     8a2:	20 e8       	ldi	r18, 0x80	; 128
     8a4:	20 83       	st	Z, r18
     8a6:	31 97       	sbiw	r30, 0x01	; 1
     8a8:	10 82       	st	Z, r1
     8aa:	31 97       	sbiw	r30, 0x01	; 1
     8ac:	10 82       	st	Z, r1
     8ae:	31 97       	sbiw	r30, 0x01	; 1
     8b0:	10 82       	st	Z, r1
     8b2:	77 97       	sbiw	r30, 0x17	; 23
     8b4:	40 83       	st	Z, r20
     8b6:	31 97       	sbiw	r30, 0x01	; 1
     8b8:	50 83       	st	Z, r21
     8ba:	86 97       	sbiw	r24, 0x26	; 38
     8bc:	08 95       	ret

000008be <xPortStartScheduler>:
     8be:	dc df       	rcall	.-72     	; 0x878 <prvSetupTimerInterrupt>
     8c0:	a0 91 af 16 	lds	r26, 0x16AF	; 0x8016af <pxCurrentTCB>
     8c4:	b0 91 b0 16 	lds	r27, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
     8c8:	cd 91       	ld	r28, X+
     8ca:	cd bf       	out	0x3d, r28	; 61
     8cc:	dd 91       	ld	r29, X+
     8ce:	de bf       	out	0x3e, r29	; 62
     8d0:	ff 91       	pop	r31
     8d2:	ef 91       	pop	r30
     8d4:	df 91       	pop	r29
     8d6:	cf 91       	pop	r28
     8d8:	bf 91       	pop	r27
     8da:	af 91       	pop	r26
     8dc:	9f 91       	pop	r25
     8de:	8f 91       	pop	r24
     8e0:	7f 91       	pop	r23
     8e2:	6f 91       	pop	r22
     8e4:	5f 91       	pop	r21
     8e6:	4f 91       	pop	r20
     8e8:	3f 91       	pop	r19
     8ea:	2f 91       	pop	r18
     8ec:	1f 91       	pop	r17
     8ee:	0f 91       	pop	r16
     8f0:	ff 90       	pop	r15
     8f2:	ef 90       	pop	r14
     8f4:	df 90       	pop	r13
     8f6:	cf 90       	pop	r12
     8f8:	bf 90       	pop	r11
     8fa:	af 90       	pop	r10
     8fc:	9f 90       	pop	r9
     8fe:	8f 90       	pop	r8
     900:	7f 90       	pop	r7
     902:	6f 90       	pop	r6
     904:	5f 90       	pop	r5
     906:	4f 90       	pop	r4
     908:	3f 90       	pop	r3
     90a:	2f 90       	pop	r2
     90c:	1f 90       	pop	r1
     90e:	0f 90       	pop	r0
     910:	0c be       	out	0x3c, r0	; 60
     912:	0f 90       	pop	r0
     914:	0b be       	out	0x3b, r0	; 59
     916:	0f 90       	pop	r0
     918:	0f be       	out	0x3f, r0	; 63
     91a:	0f 90       	pop	r0
     91c:	08 95       	ret
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	08 95       	ret

00000922 <vPortYield>:
     922:	0f 92       	push	r0
     924:	0f b6       	in	r0, 0x3f	; 63
     926:	f8 94       	cli
     928:	0f 92       	push	r0
     92a:	0b b6       	in	r0, 0x3b	; 59
     92c:	0f 92       	push	r0
     92e:	0c b6       	in	r0, 0x3c	; 60
     930:	0f 92       	push	r0
     932:	1f 92       	push	r1
     934:	11 24       	eor	r1, r1
     936:	2f 92       	push	r2
     938:	3f 92       	push	r3
     93a:	4f 92       	push	r4
     93c:	5f 92       	push	r5
     93e:	6f 92       	push	r6
     940:	7f 92       	push	r7
     942:	8f 92       	push	r8
     944:	9f 92       	push	r9
     946:	af 92       	push	r10
     948:	bf 92       	push	r11
     94a:	cf 92       	push	r12
     94c:	df 92       	push	r13
     94e:	ef 92       	push	r14
     950:	ff 92       	push	r15
     952:	0f 93       	push	r16
     954:	1f 93       	push	r17
     956:	2f 93       	push	r18
     958:	3f 93       	push	r19
     95a:	4f 93       	push	r20
     95c:	5f 93       	push	r21
     95e:	6f 93       	push	r22
     960:	7f 93       	push	r23
     962:	8f 93       	push	r24
     964:	9f 93       	push	r25
     966:	af 93       	push	r26
     968:	bf 93       	push	r27
     96a:	cf 93       	push	r28
     96c:	df 93       	push	r29
     96e:	ef 93       	push	r30
     970:	ff 93       	push	r31
     972:	a0 91 af 16 	lds	r26, 0x16AF	; 0x8016af <pxCurrentTCB>
     976:	b0 91 b0 16 	lds	r27, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
     97a:	0d b6       	in	r0, 0x3d	; 61
     97c:	0d 92       	st	X+, r0
     97e:	0e b6       	in	r0, 0x3e	; 62
     980:	0d 92       	st	X+, r0
     982:	0e 94 59 11 	call	0x22b2	; 0x22b2 <vTaskSwitchContext>
     986:	a0 91 af 16 	lds	r26, 0x16AF	; 0x8016af <pxCurrentTCB>
     98a:	b0 91 b0 16 	lds	r27, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
     98e:	cd 91       	ld	r28, X+
     990:	cd bf       	out	0x3d, r28	; 61
     992:	dd 91       	ld	r29, X+
     994:	de bf       	out	0x3e, r29	; 62
     996:	ff 91       	pop	r31
     998:	ef 91       	pop	r30
     99a:	df 91       	pop	r29
     99c:	cf 91       	pop	r28
     99e:	bf 91       	pop	r27
     9a0:	af 91       	pop	r26
     9a2:	9f 91       	pop	r25
     9a4:	8f 91       	pop	r24
     9a6:	7f 91       	pop	r23
     9a8:	6f 91       	pop	r22
     9aa:	5f 91       	pop	r21
     9ac:	4f 91       	pop	r20
     9ae:	3f 91       	pop	r19
     9b0:	2f 91       	pop	r18
     9b2:	1f 91       	pop	r17
     9b4:	0f 91       	pop	r16
     9b6:	ff 90       	pop	r15
     9b8:	ef 90       	pop	r14
     9ba:	df 90       	pop	r13
     9bc:	cf 90       	pop	r12
     9be:	bf 90       	pop	r11
     9c0:	af 90       	pop	r10
     9c2:	9f 90       	pop	r9
     9c4:	8f 90       	pop	r8
     9c6:	7f 90       	pop	r7
     9c8:	6f 90       	pop	r6
     9ca:	5f 90       	pop	r5
     9cc:	4f 90       	pop	r4
     9ce:	3f 90       	pop	r3
     9d0:	2f 90       	pop	r2
     9d2:	1f 90       	pop	r1
     9d4:	0f 90       	pop	r0
     9d6:	0c be       	out	0x3c, r0	; 60
     9d8:	0f 90       	pop	r0
     9da:	0b be       	out	0x3b, r0	; 59
     9dc:	0f 90       	pop	r0
     9de:	0f be       	out	0x3f, r0	; 63
     9e0:	0f 90       	pop	r0
     9e2:	08 95       	ret

000009e4 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     9e4:	0f 92       	push	r0
     9e6:	0f b6       	in	r0, 0x3f	; 63
     9e8:	f8 94       	cli
     9ea:	0f 92       	push	r0
     9ec:	0b b6       	in	r0, 0x3b	; 59
     9ee:	0f 92       	push	r0
     9f0:	0c b6       	in	r0, 0x3c	; 60
     9f2:	0f 92       	push	r0
     9f4:	1f 92       	push	r1
     9f6:	11 24       	eor	r1, r1
     9f8:	2f 92       	push	r2
     9fa:	3f 92       	push	r3
     9fc:	4f 92       	push	r4
     9fe:	5f 92       	push	r5
     a00:	6f 92       	push	r6
     a02:	7f 92       	push	r7
     a04:	8f 92       	push	r8
     a06:	9f 92       	push	r9
     a08:	af 92       	push	r10
     a0a:	bf 92       	push	r11
     a0c:	cf 92       	push	r12
     a0e:	df 92       	push	r13
     a10:	ef 92       	push	r14
     a12:	ff 92       	push	r15
     a14:	0f 93       	push	r16
     a16:	1f 93       	push	r17
     a18:	2f 93       	push	r18
     a1a:	3f 93       	push	r19
     a1c:	4f 93       	push	r20
     a1e:	5f 93       	push	r21
     a20:	6f 93       	push	r22
     a22:	7f 93       	push	r23
     a24:	8f 93       	push	r24
     a26:	9f 93       	push	r25
     a28:	af 93       	push	r26
     a2a:	bf 93       	push	r27
     a2c:	cf 93       	push	r28
     a2e:	df 93       	push	r29
     a30:	ef 93       	push	r30
     a32:	ff 93       	push	r31
     a34:	a0 91 af 16 	lds	r26, 0x16AF	; 0x8016af <pxCurrentTCB>
     a38:	b0 91 b0 16 	lds	r27, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
     a3c:	0d b6       	in	r0, 0x3d	; 61
     a3e:	0d 92       	st	X+, r0
     a40:	0e b6       	in	r0, 0x3e	; 62
     a42:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     a44:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     a46:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <xTaskIncrementTick>
     a4a:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     a4c:	0e 94 59 11 	call	0x22b2	; 0x22b2 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     a50:	a0 91 af 16 	lds	r26, 0x16AF	; 0x8016af <pxCurrentTCB>
     a54:	b0 91 b0 16 	lds	r27, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
     a58:	cd 91       	ld	r28, X+
     a5a:	cd bf       	out	0x3d, r28	; 61
     a5c:	dd 91       	ld	r29, X+
     a5e:	de bf       	out	0x3e, r29	; 62
     a60:	ff 91       	pop	r31
     a62:	ef 91       	pop	r30
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	bf 91       	pop	r27
     a6a:	af 91       	pop	r26
     a6c:	9f 91       	pop	r25
     a6e:	8f 91       	pop	r24
     a70:	7f 91       	pop	r23
     a72:	6f 91       	pop	r22
     a74:	5f 91       	pop	r21
     a76:	4f 91       	pop	r20
     a78:	3f 91       	pop	r19
     a7a:	2f 91       	pop	r18
     a7c:	1f 91       	pop	r17
     a7e:	0f 91       	pop	r16
     a80:	ff 90       	pop	r15
     a82:	ef 90       	pop	r14
     a84:	df 90       	pop	r13
     a86:	cf 90       	pop	r12
     a88:	bf 90       	pop	r11
     a8a:	af 90       	pop	r10
     a8c:	9f 90       	pop	r9
     a8e:	8f 90       	pop	r8
     a90:	7f 90       	pop	r7
     a92:	6f 90       	pop	r6
     a94:	5f 90       	pop	r5
     a96:	4f 90       	pop	r4
     a98:	3f 90       	pop	r3
     a9a:	2f 90       	pop	r2
     a9c:	1f 90       	pop	r1
     a9e:	0f 90       	pop	r0
     aa0:	0c be       	out	0x3c, r0	; 60
     aa2:	0f 90       	pop	r0
     aa4:	0b be       	out	0x3b, r0	; 59
     aa6:	0f 90       	pop	r0
     aa8:	0f be       	out	0x3f, r0	; 63
     aaa:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     aac:	08 95       	ret

00000aae <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     aae:	9a df       	rcall	.-204    	; 0x9e4 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     ab0:	18 95       	reti

00000ab2 <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     ab2:	dc 01       	movw	r26, r24
     ab4:	53 96       	adiw	r26, 0x13	; 19
     ab6:	2c 91       	ld	r18, X
     ab8:	53 97       	sbiw	r26, 0x13	; 19
     aba:	22 23       	and	r18, r18
     abc:	41 f0       	breq	.+16     	; 0xace <prvGetDisinheritPriorityAfterTimeout+0x1c>
     abe:	5a 96       	adiw	r26, 0x1a	; 26
     ac0:	ed 91       	ld	r30, X+
     ac2:	fc 91       	ld	r31, X
     ac4:	5b 97       	sbiw	r26, 0x1b	; 27
     ac6:	90 81       	ld	r25, Z
     ac8:	8a e0       	ldi	r24, 0x0A	; 10
     aca:	89 1b       	sub	r24, r25
     acc:	08 95       	ret
     ace:	80 e0       	ldi	r24, 0x00	; 0
     ad0:	08 95       	ret

00000ad2 <prvIsQueueEmpty>:
     ad2:	0f b6       	in	r0, 0x3f	; 63
     ad4:	f8 94       	cli
     ad6:	0f 92       	push	r0
     ad8:	fc 01       	movw	r30, r24
     ada:	86 8d       	ldd	r24, Z+30	; 0x1e
     adc:	81 11       	cpse	r24, r1
     ade:	02 c0       	rjmp	.+4      	; 0xae4 <prvIsQueueEmpty+0x12>
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	01 c0       	rjmp	.+2      	; 0xae6 <prvIsQueueEmpty+0x14>
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	0f 90       	pop	r0
     ae8:	0f be       	out	0x3f, r0	; 63
     aea:	08 95       	ret

00000aec <prvIsQueueFull>:
     aec:	0f b6       	in	r0, 0x3f	; 63
     aee:	f8 94       	cli
     af0:	0f 92       	push	r0
     af2:	fc 01       	movw	r30, r24
     af4:	26 8d       	ldd	r18, Z+30	; 0x1e
     af6:	87 8d       	ldd	r24, Z+31	; 0x1f
     af8:	28 13       	cpse	r18, r24
     afa:	02 c0       	rjmp	.+4      	; 0xb00 <prvIsQueueFull+0x14>
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	01 c0       	rjmp	.+2      	; 0xb02 <prvIsQueueFull+0x16>
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	0f 90       	pop	r0
     b04:	0f be       	out	0x3f, r0	; 63
     b06:	08 95       	ret

00000b08 <prvCopyDataToQueue>:
     b08:	0f 93       	push	r16
     b0a:	1f 93       	push	r17
     b0c:	cf 93       	push	r28
     b0e:	df 93       	push	r29
     b10:	ec 01       	movw	r28, r24
     b12:	04 2f       	mov	r16, r20
     b14:	1e 8d       	ldd	r17, Y+30	; 0x1e
     b16:	48 a1       	ldd	r20, Y+32	; 0x20
     b18:	41 11       	cpse	r20, r1
     b1a:	0c c0       	rjmp	.+24     	; 0xb34 <prvCopyDataToQueue+0x2c>
     b1c:	88 81       	ld	r24, Y
     b1e:	99 81       	ldd	r25, Y+1	; 0x01
     b20:	89 2b       	or	r24, r25
     b22:	09 f0       	breq	.+2      	; 0xb26 <prvCopyDataToQueue+0x1e>
     b24:	42 c0       	rjmp	.+132    	; 0xbaa <prvCopyDataToQueue+0xa2>
     b26:	8c 81       	ldd	r24, Y+4	; 0x04
     b28:	9d 81       	ldd	r25, Y+5	; 0x05
     b2a:	0e 94 d5 14 	call	0x29aa	; 0x29aa <xTaskPriorityDisinherit>
     b2e:	1d 82       	std	Y+5, r1	; 0x05
     b30:	1c 82       	std	Y+4, r1	; 0x04
     b32:	42 c0       	rjmp	.+132    	; 0xbb8 <prvCopyDataToQueue+0xb0>
     b34:	01 11       	cpse	r16, r1
     b36:	17 c0       	rjmp	.+46     	; 0xb66 <prvCopyDataToQueue+0x5e>
     b38:	50 e0       	ldi	r21, 0x00	; 0
     b3a:	8a 81       	ldd	r24, Y+2	; 0x02
     b3c:	9b 81       	ldd	r25, Y+3	; 0x03
     b3e:	0e 94 aa 32 	call	0x6554	; 0x6554 <memcpy>
     b42:	28 a1       	ldd	r18, Y+32	; 0x20
     b44:	8a 81       	ldd	r24, Y+2	; 0x02
     b46:	9b 81       	ldd	r25, Y+3	; 0x03
     b48:	82 0f       	add	r24, r18
     b4a:	91 1d       	adc	r25, r1
     b4c:	9b 83       	std	Y+3, r25	; 0x03
     b4e:	8a 83       	std	Y+2, r24	; 0x02
     b50:	2c 81       	ldd	r18, Y+4	; 0x04
     b52:	3d 81       	ldd	r19, Y+5	; 0x05
     b54:	82 17       	cp	r24, r18
     b56:	93 07       	cpc	r25, r19
     b58:	50 f1       	brcs	.+84     	; 0xbae <prvCopyDataToQueue+0xa6>
     b5a:	88 81       	ld	r24, Y
     b5c:	99 81       	ldd	r25, Y+1	; 0x01
     b5e:	9b 83       	std	Y+3, r25	; 0x03
     b60:	8a 83       	std	Y+2, r24	; 0x02
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	29 c0       	rjmp	.+82     	; 0xbb8 <prvCopyDataToQueue+0xb0>
     b66:	50 e0       	ldi	r21, 0x00	; 0
     b68:	8e 81       	ldd	r24, Y+6	; 0x06
     b6a:	9f 81       	ldd	r25, Y+7	; 0x07
     b6c:	0e 94 aa 32 	call	0x6554	; 0x6554 <memcpy>
     b70:	88 a1       	ldd	r24, Y+32	; 0x20
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	91 95       	neg	r25
     b76:	81 95       	neg	r24
     b78:	91 09       	sbc	r25, r1
     b7a:	2e 81       	ldd	r18, Y+6	; 0x06
     b7c:	3f 81       	ldd	r19, Y+7	; 0x07
     b7e:	28 0f       	add	r18, r24
     b80:	39 1f       	adc	r19, r25
     b82:	3f 83       	std	Y+7, r19	; 0x07
     b84:	2e 83       	std	Y+6, r18	; 0x06
     b86:	48 81       	ld	r20, Y
     b88:	59 81       	ldd	r21, Y+1	; 0x01
     b8a:	24 17       	cp	r18, r20
     b8c:	35 07       	cpc	r19, r21
     b8e:	30 f4       	brcc	.+12     	; 0xb9c <prvCopyDataToQueue+0x94>
     b90:	2c 81       	ldd	r18, Y+4	; 0x04
     b92:	3d 81       	ldd	r19, Y+5	; 0x05
     b94:	82 0f       	add	r24, r18
     b96:	93 1f       	adc	r25, r19
     b98:	9f 83       	std	Y+7, r25	; 0x07
     b9a:	8e 83       	std	Y+6, r24	; 0x06
     b9c:	02 30       	cpi	r16, 0x02	; 2
     b9e:	49 f4       	brne	.+18     	; 0xbb2 <prvCopyDataToQueue+0xaa>
     ba0:	11 23       	and	r17, r17
     ba2:	49 f0       	breq	.+18     	; 0xbb6 <prvCopyDataToQueue+0xae>
     ba4:	11 50       	subi	r17, 0x01	; 1
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	07 c0       	rjmp	.+14     	; 0xbb8 <prvCopyDataToQueue+0xb0>
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	05 c0       	rjmp	.+10     	; 0xbb8 <prvCopyDataToQueue+0xb0>
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	03 c0       	rjmp	.+6      	; 0xbb8 <prvCopyDataToQueue+0xb0>
     bb2:	80 e0       	ldi	r24, 0x00	; 0
     bb4:	01 c0       	rjmp	.+2      	; 0xbb8 <prvCopyDataToQueue+0xb0>
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	1f 5f       	subi	r17, 0xFF	; 255
     bba:	1e 8f       	std	Y+30, r17	; 0x1e
     bbc:	df 91       	pop	r29
     bbe:	cf 91       	pop	r28
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	08 95       	ret

00000bc6 <prvCopyDataFromQueue>:
     bc6:	fc 01       	movw	r30, r24
     bc8:	40 a1       	ldd	r20, Z+32	; 0x20
     bca:	44 23       	and	r20, r20
     bcc:	a9 f0       	breq	.+42     	; 0xbf8 <prvCopyDataFromQueue+0x32>
     bce:	50 e0       	ldi	r21, 0x00	; 0
     bd0:	26 81       	ldd	r18, Z+6	; 0x06
     bd2:	37 81       	ldd	r19, Z+7	; 0x07
     bd4:	24 0f       	add	r18, r20
     bd6:	35 1f       	adc	r19, r21
     bd8:	37 83       	std	Z+7, r19	; 0x07
     bda:	26 83       	std	Z+6, r18	; 0x06
     bdc:	84 81       	ldd	r24, Z+4	; 0x04
     bde:	95 81       	ldd	r25, Z+5	; 0x05
     be0:	28 17       	cp	r18, r24
     be2:	39 07       	cpc	r19, r25
     be4:	20 f0       	brcs	.+8      	; 0xbee <prvCopyDataFromQueue+0x28>
     be6:	80 81       	ld	r24, Z
     be8:	91 81       	ldd	r25, Z+1	; 0x01
     bea:	97 83       	std	Z+7, r25	; 0x07
     bec:	86 83       	std	Z+6, r24	; 0x06
     bee:	cb 01       	movw	r24, r22
     bf0:	66 81       	ldd	r22, Z+6	; 0x06
     bf2:	77 81       	ldd	r23, Z+7	; 0x07
     bf4:	0c 94 aa 32 	jmp	0x6554	; 0x6554 <memcpy>
     bf8:	08 95       	ret

00000bfa <prvUnlockQueue>:
     bfa:	1f 93       	push	r17
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	ec 01       	movw	r28, r24
     c02:	0f b6       	in	r0, 0x3f	; 63
     c04:	f8 94       	cli
     c06:	0f 92       	push	r0
     c08:	1a a1       	ldd	r17, Y+34	; 0x22
     c0a:	0b c0       	rjmp	.+22     	; 0xc22 <prvUnlockQueue+0x28>
     c0c:	8b 89       	ldd	r24, Y+19	; 0x13
     c0e:	88 23       	and	r24, r24
     c10:	51 f0       	breq	.+20     	; 0xc26 <prvUnlockQueue+0x2c>
     c12:	ce 01       	movw	r24, r28
     c14:	43 96       	adiw	r24, 0x13	; 19
     c16:	0e 94 61 12 	call	0x24c2	; 0x24c2 <xTaskRemoveFromEventList>
     c1a:	81 11       	cpse	r24, r1
     c1c:	0e 94 37 14 	call	0x286e	; 0x286e <vTaskMissedYield>
     c20:	11 50       	subi	r17, 0x01	; 1
     c22:	11 16       	cp	r1, r17
     c24:	9c f3       	brlt	.-26     	; 0xc0c <prvUnlockQueue+0x12>
     c26:	8f ef       	ldi	r24, 0xFF	; 255
     c28:	8a a3       	std	Y+34, r24	; 0x22
     c2a:	0f 90       	pop	r0
     c2c:	0f be       	out	0x3f, r0	; 63
     c2e:	0f b6       	in	r0, 0x3f	; 63
     c30:	f8 94       	cli
     c32:	0f 92       	push	r0
     c34:	19 a1       	ldd	r17, Y+33	; 0x21
     c36:	0b c0       	rjmp	.+22     	; 0xc4e <prvUnlockQueue+0x54>
     c38:	88 85       	ldd	r24, Y+8	; 0x08
     c3a:	88 23       	and	r24, r24
     c3c:	51 f0       	breq	.+20     	; 0xc52 <prvUnlockQueue+0x58>
     c3e:	ce 01       	movw	r24, r28
     c40:	08 96       	adiw	r24, 0x08	; 8
     c42:	0e 94 61 12 	call	0x24c2	; 0x24c2 <xTaskRemoveFromEventList>
     c46:	81 11       	cpse	r24, r1
     c48:	0e 94 37 14 	call	0x286e	; 0x286e <vTaskMissedYield>
     c4c:	11 50       	subi	r17, 0x01	; 1
     c4e:	11 16       	cp	r1, r17
     c50:	9c f3       	brlt	.-26     	; 0xc38 <prvUnlockQueue+0x3e>
     c52:	8f ef       	ldi	r24, 0xFF	; 255
     c54:	89 a3       	std	Y+33, r24	; 0x21
     c56:	0f 90       	pop	r0
     c58:	0f be       	out	0x3f, r0	; 63
     c5a:	df 91       	pop	r29
     c5c:	cf 91       	pop	r28
     c5e:	1f 91       	pop	r17
     c60:	08 95       	ret

00000c62 <xQueueGenericReset>:
     c62:	cf 93       	push	r28
     c64:	df 93       	push	r29
     c66:	ec 01       	movw	r28, r24
     c68:	0f b6       	in	r0, 0x3f	; 63
     c6a:	f8 94       	cli
     c6c:	0f 92       	push	r0
     c6e:	e8 81       	ld	r30, Y
     c70:	f9 81       	ldd	r31, Y+1	; 0x01
     c72:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c74:	28 a1       	ldd	r18, Y+32	; 0x20
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	82 9f       	mul	r24, r18
     c7c:	a0 01       	movw	r20, r0
     c7e:	83 9f       	mul	r24, r19
     c80:	50 0d       	add	r21, r0
     c82:	92 9f       	mul	r25, r18
     c84:	50 0d       	add	r21, r0
     c86:	11 24       	eor	r1, r1
     c88:	4e 0f       	add	r20, r30
     c8a:	5f 1f       	adc	r21, r31
     c8c:	5d 83       	std	Y+5, r21	; 0x05
     c8e:	4c 83       	std	Y+4, r20	; 0x04
     c90:	1e 8e       	std	Y+30, r1	; 0x1e
     c92:	fb 83       	std	Y+3, r31	; 0x03
     c94:	ea 83       	std	Y+2, r30	; 0x02
     c96:	01 97       	sbiw	r24, 0x01	; 1
     c98:	28 9f       	mul	r18, r24
     c9a:	a0 01       	movw	r20, r0
     c9c:	29 9f       	mul	r18, r25
     c9e:	50 0d       	add	r21, r0
     ca0:	38 9f       	mul	r19, r24
     ca2:	50 0d       	add	r21, r0
     ca4:	11 24       	eor	r1, r1
     ca6:	cf 01       	movw	r24, r30
     ca8:	84 0f       	add	r24, r20
     caa:	95 1f       	adc	r25, r21
     cac:	9f 83       	std	Y+7, r25	; 0x07
     cae:	8e 83       	std	Y+6, r24	; 0x06
     cb0:	8f ef       	ldi	r24, 0xFF	; 255
     cb2:	89 a3       	std	Y+33, r24	; 0x21
     cb4:	8a a3       	std	Y+34, r24	; 0x22
     cb6:	61 11       	cpse	r22, r1
     cb8:	0b c0       	rjmp	.+22     	; 0xcd0 <xQueueGenericReset+0x6e>
     cba:	88 85       	ldd	r24, Y+8	; 0x08
     cbc:	88 23       	and	r24, r24
     cbe:	71 f0       	breq	.+28     	; 0xcdc <xQueueGenericReset+0x7a>
     cc0:	ce 01       	movw	r24, r28
     cc2:	08 96       	adiw	r24, 0x08	; 8
     cc4:	0e 94 61 12 	call	0x24c2	; 0x24c2 <xTaskRemoveFromEventList>
     cc8:	88 23       	and	r24, r24
     cca:	41 f0       	breq	.+16     	; 0xcdc <xQueueGenericReset+0x7a>
     ccc:	2a de       	rcall	.-940    	; 0x922 <vPortYield>
     cce:	06 c0       	rjmp	.+12     	; 0xcdc <xQueueGenericReset+0x7a>
     cd0:	ce 01       	movw	r24, r28
     cd2:	08 96       	adiw	r24, 0x08	; 8
     cd4:	58 dd       	rcall	.-1360   	; 0x786 <vListInitialise>
     cd6:	ce 01       	movw	r24, r28
     cd8:	43 96       	adiw	r24, 0x13	; 19
     cda:	55 dd       	rcall	.-1366   	; 0x786 <vListInitialise>
     cdc:	0f 90       	pop	r0
     cde:	0f be       	out	0x3f, r0	; 63
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	df 91       	pop	r29
     ce4:	cf 91       	pop	r28
     ce6:	08 95       	ret

00000ce8 <prvInitialiseNewQueue>:
     ce8:	0f 93       	push	r16
     cea:	1f 93       	push	r17
     cec:	f8 01       	movw	r30, r16
     cee:	61 11       	cpse	r22, r1
     cf0:	03 c0       	rjmp	.+6      	; 0xcf8 <prvInitialiseNewQueue+0x10>
     cf2:	11 83       	std	Z+1, r17	; 0x01
     cf4:	00 83       	st	Z, r16
     cf6:	02 c0       	rjmp	.+4      	; 0xcfc <prvInitialiseNewQueue+0x14>
     cf8:	51 83       	std	Z+1, r21	; 0x01
     cfa:	40 83       	st	Z, r20
     cfc:	87 8f       	std	Z+31, r24	; 0x1f
     cfe:	60 a3       	std	Z+32, r22	; 0x20
     d00:	61 e0       	ldi	r22, 0x01	; 1
     d02:	cf 01       	movw	r24, r30
     d04:	ae df       	rcall	.-164    	; 0xc62 <xQueueGenericReset>
     d06:	1f 91       	pop	r17
     d08:	0f 91       	pop	r16
     d0a:	08 95       	ret

00000d0c <xQueueGenericCreate>:
     d0c:	df 92       	push	r13
     d0e:	ef 92       	push	r14
     d10:	ff 92       	push	r15
     d12:	0f 93       	push	r16
     d14:	1f 93       	push	r17
     d16:	cf 93       	push	r28
     d18:	df 93       	push	r29
     d1a:	f8 2e       	mov	r15, r24
     d1c:	e6 2e       	mov	r14, r22
     d1e:	d4 2e       	mov	r13, r20
     d20:	86 9f       	mul	r24, r22
     d22:	c0 01       	movw	r24, r0
     d24:	11 24       	eor	r1, r1
     d26:	83 96       	adiw	r24, 0x23	; 35
     d28:	48 dc       	rcall	.-1904   	; 0x5ba <pvPortMalloc>
     d2a:	ec 01       	movw	r28, r24
     d2c:	00 97       	sbiw	r24, 0x00	; 0
     d2e:	41 f0       	breq	.+16     	; 0xd40 <xQueueGenericCreate+0x34>
     d30:	8c 01       	movw	r16, r24
     d32:	2d 2d       	mov	r18, r13
     d34:	ac 01       	movw	r20, r24
     d36:	4d 5d       	subi	r20, 0xDD	; 221
     d38:	5f 4f       	sbci	r21, 0xFF	; 255
     d3a:	6e 2d       	mov	r22, r14
     d3c:	8f 2d       	mov	r24, r15
     d3e:	d4 df       	rcall	.-88     	; 0xce8 <prvInitialiseNewQueue>
     d40:	ce 01       	movw	r24, r28
     d42:	df 91       	pop	r29
     d44:	cf 91       	pop	r28
     d46:	1f 91       	pop	r17
     d48:	0f 91       	pop	r16
     d4a:	ff 90       	pop	r15
     d4c:	ef 90       	pop	r14
     d4e:	df 90       	pop	r13
     d50:	08 95       	ret

00000d52 <xQueueGenericSend>:
     d52:	cf 92       	push	r12
     d54:	df 92       	push	r13
     d56:	ef 92       	push	r14
     d58:	ff 92       	push	r15
     d5a:	0f 93       	push	r16
     d5c:	1f 93       	push	r17
     d5e:	cf 93       	push	r28
     d60:	df 93       	push	r29
     d62:	cd b7       	in	r28, 0x3d	; 61
     d64:	de b7       	in	r29, 0x3e	; 62
     d66:	29 97       	sbiw	r28, 0x09	; 9
     d68:	0f b6       	in	r0, 0x3f	; 63
     d6a:	f8 94       	cli
     d6c:	de bf       	out	0x3e, r29	; 62
     d6e:	0f be       	out	0x3f, r0	; 63
     d70:	cd bf       	out	0x3d, r28	; 61
     d72:	7c 01       	movw	r14, r24
     d74:	6b 01       	movw	r12, r22
     d76:	2e 83       	std	Y+6, r18	; 0x06
     d78:	3f 83       	std	Y+7, r19	; 0x07
     d7a:	48 87       	std	Y+8, r20	; 0x08
     d7c:	59 87       	std	Y+9, r21	; 0x09
     d7e:	10 e0       	ldi	r17, 0x00	; 0
     d80:	0f b6       	in	r0, 0x3f	; 63
     d82:	f8 94       	cli
     d84:	0f 92       	push	r0
     d86:	f7 01       	movw	r30, r14
     d88:	96 8d       	ldd	r25, Z+30	; 0x1e
     d8a:	87 8d       	ldd	r24, Z+31	; 0x1f
     d8c:	98 17       	cp	r25, r24
     d8e:	10 f0       	brcs	.+4      	; 0xd94 <xQueueGenericSend+0x42>
     d90:	02 30       	cpi	r16, 0x02	; 2
     d92:	b1 f4       	brne	.+44     	; 0xdc0 <xQueueGenericSend+0x6e>
     d94:	40 2f       	mov	r20, r16
     d96:	b6 01       	movw	r22, r12
     d98:	c7 01       	movw	r24, r14
     d9a:	b6 de       	rcall	.-660    	; 0xb08 <prvCopyDataToQueue>
     d9c:	f7 01       	movw	r30, r14
     d9e:	93 89       	ldd	r25, Z+19	; 0x13
     da0:	99 23       	and	r25, r25
     da2:	41 f0       	breq	.+16     	; 0xdb4 <xQueueGenericSend+0x62>
     da4:	c7 01       	movw	r24, r14
     da6:	43 96       	adiw	r24, 0x13	; 19
     da8:	0e 94 61 12 	call	0x24c2	; 0x24c2 <xTaskRemoveFromEventList>
     dac:	88 23       	and	r24, r24
     dae:	21 f0       	breq	.+8      	; 0xdb8 <xQueueGenericSend+0x66>
     db0:	b8 dd       	rcall	.-1168   	; 0x922 <vPortYield>
     db2:	02 c0       	rjmp	.+4      	; 0xdb8 <xQueueGenericSend+0x66>
     db4:	81 11       	cpse	r24, r1
     db6:	b5 dd       	rcall	.-1174   	; 0x922 <vPortYield>
     db8:	0f 90       	pop	r0
     dba:	0f be       	out	0x3f, r0	; 63
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	4c c0       	rjmp	.+152    	; 0xe58 <xQueueGenericSend+0x106>
     dc0:	8e 81       	ldd	r24, Y+6	; 0x06
     dc2:	9f 81       	ldd	r25, Y+7	; 0x07
     dc4:	a8 85       	ldd	r26, Y+8	; 0x08
     dc6:	b9 85       	ldd	r27, Y+9	; 0x09
     dc8:	89 2b       	or	r24, r25
     dca:	8a 2b       	or	r24, r26
     dcc:	8b 2b       	or	r24, r27
     dce:	21 f4       	brne	.+8      	; 0xdd8 <xQueueGenericSend+0x86>
     dd0:	0f 90       	pop	r0
     dd2:	0f be       	out	0x3f, r0	; 63
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	40 c0       	rjmp	.+128    	; 0xe58 <xQueueGenericSend+0x106>
     dd8:	11 11       	cpse	r17, r1
     dda:	05 c0       	rjmp	.+10     	; 0xde6 <xQueueGenericSend+0x94>
     ddc:	ce 01       	movw	r24, r28
     dde:	01 96       	adiw	r24, 0x01	; 1
     de0:	0e 94 c0 13 	call	0x2780	; 0x2780 <vTaskInternalSetTimeOutState>
     de4:	11 e0       	ldi	r17, 0x01	; 1
     de6:	0f 90       	pop	r0
     de8:	0f be       	out	0x3f, r0	; 63
     dea:	c7 d7       	rcall	.+3982   	; 0x1d7a <vTaskSuspendAll>
     dec:	0f b6       	in	r0, 0x3f	; 63
     dee:	f8 94       	cli
     df0:	0f 92       	push	r0
     df2:	f7 01       	movw	r30, r14
     df4:	81 a1       	ldd	r24, Z+33	; 0x21
     df6:	8f 3f       	cpi	r24, 0xFF	; 255
     df8:	09 f4       	brne	.+2      	; 0xdfc <xQueueGenericSend+0xaa>
     dfa:	11 a2       	std	Z+33, r1	; 0x21
     dfc:	f7 01       	movw	r30, r14
     dfe:	82 a1       	ldd	r24, Z+34	; 0x22
     e00:	8f 3f       	cpi	r24, 0xFF	; 255
     e02:	09 f4       	brne	.+2      	; 0xe06 <xQueueGenericSend+0xb4>
     e04:	12 a2       	std	Z+34, r1	; 0x22
     e06:	0f 90       	pop	r0
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	be 01       	movw	r22, r28
     e0c:	6a 5f       	subi	r22, 0xFA	; 250
     e0e:	7f 4f       	sbci	r23, 0xFF	; 255
     e10:	ce 01       	movw	r24, r28
     e12:	01 96       	adiw	r24, 0x01	; 1
     e14:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <xTaskCheckForTimeOut>
     e18:	81 11       	cpse	r24, r1
     e1a:	19 c0       	rjmp	.+50     	; 0xe4e <xQueueGenericSend+0xfc>
     e1c:	c7 01       	movw	r24, r14
     e1e:	66 de       	rcall	.-820    	; 0xaec <prvIsQueueFull>
     e20:	88 23       	and	r24, r24
     e22:	81 f0       	breq	.+32     	; 0xe44 <xQueueGenericSend+0xf2>
     e24:	4e 81       	ldd	r20, Y+6	; 0x06
     e26:	5f 81       	ldd	r21, Y+7	; 0x07
     e28:	68 85       	ldd	r22, Y+8	; 0x08
     e2a:	79 85       	ldd	r23, Y+9	; 0x09
     e2c:	c7 01       	movw	r24, r14
     e2e:	08 96       	adiw	r24, 0x08	; 8
     e30:	0e 94 be 11 	call	0x237c	; 0x237c <vTaskPlaceOnEventList>
     e34:	c7 01       	movw	r24, r14
     e36:	e1 de       	rcall	.-574    	; 0xbfa <prvUnlockQueue>
     e38:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <xTaskResumeAll>
     e3c:	81 11       	cpse	r24, r1
     e3e:	a0 cf       	rjmp	.-192    	; 0xd80 <xQueueGenericSend+0x2e>
     e40:	70 dd       	rcall	.-1312   	; 0x922 <vPortYield>
     e42:	9e cf       	rjmp	.-196    	; 0xd80 <xQueueGenericSend+0x2e>
     e44:	c7 01       	movw	r24, r14
     e46:	d9 de       	rcall	.-590    	; 0xbfa <prvUnlockQueue>
     e48:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <xTaskResumeAll>
     e4c:	99 cf       	rjmp	.-206    	; 0xd80 <xQueueGenericSend+0x2e>
     e4e:	c7 01       	movw	r24, r14
     e50:	d4 de       	rcall	.-600    	; 0xbfa <prvUnlockQueue>
     e52:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <xTaskResumeAll>
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	29 96       	adiw	r28, 0x09	; 9
     e5a:	0f b6       	in	r0, 0x3f	; 63
     e5c:	f8 94       	cli
     e5e:	de bf       	out	0x3e, r29	; 62
     e60:	0f be       	out	0x3f, r0	; 63
     e62:	cd bf       	out	0x3d, r28	; 61
     e64:	df 91       	pop	r29
     e66:	cf 91       	pop	r28
     e68:	1f 91       	pop	r17
     e6a:	0f 91       	pop	r16
     e6c:	ff 90       	pop	r15
     e6e:	ef 90       	pop	r14
     e70:	df 90       	pop	r13
     e72:	cf 90       	pop	r12
     e74:	08 95       	ret

00000e76 <prvInitialiseMutex>:
     e76:	0f 93       	push	r16
     e78:	00 97       	sbiw	r24, 0x00	; 0
     e7a:	69 f0       	breq	.+26     	; 0xe96 <prvInitialiseMutex+0x20>
     e7c:	fc 01       	movw	r30, r24
     e7e:	15 82       	std	Z+5, r1	; 0x05
     e80:	14 82       	std	Z+4, r1	; 0x04
     e82:	11 82       	std	Z+1, r1	; 0x01
     e84:	10 82       	st	Z, r1
     e86:	16 82       	std	Z+6, r1	; 0x06
     e88:	00 e0       	ldi	r16, 0x00	; 0
     e8a:	20 e0       	ldi	r18, 0x00	; 0
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	a9 01       	movw	r20, r18
     e90:	60 e0       	ldi	r22, 0x00	; 0
     e92:	70 e0       	ldi	r23, 0x00	; 0
     e94:	5e df       	rcall	.-324    	; 0xd52 <xQueueGenericSend>
     e96:	0f 91       	pop	r16
     e98:	08 95       	ret

00000e9a <xQueueCreateMutex>:
     e9a:	cf 93       	push	r28
     e9c:	df 93       	push	r29
     e9e:	48 2f       	mov	r20, r24
     ea0:	60 e0       	ldi	r22, 0x00	; 0
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	33 df       	rcall	.-410    	; 0xd0c <xQueueGenericCreate>
     ea6:	ec 01       	movw	r28, r24
     ea8:	e6 df       	rcall	.-52     	; 0xe76 <prvInitialiseMutex>
     eaa:	ce 01       	movw	r24, r28
     eac:	df 91       	pop	r29
     eae:	cf 91       	pop	r28
     eb0:	08 95       	ret

00000eb2 <xQueueGenericSendFromISR>:
     eb2:	ef 92       	push	r14
     eb4:	ff 92       	push	r15
     eb6:	0f 93       	push	r16
     eb8:	1f 93       	push	r17
     eba:	cf 93       	push	r28
     ebc:	df 93       	push	r29
     ebe:	8a 01       	movw	r16, r20
     ec0:	fc 01       	movw	r30, r24
     ec2:	56 8d       	ldd	r21, Z+30	; 0x1e
     ec4:	37 8d       	ldd	r19, Z+31	; 0x1f
     ec6:	53 17       	cp	r21, r19
     ec8:	10 f0       	brcs	.+4      	; 0xece <xQueueGenericSendFromISR+0x1c>
     eca:	22 30       	cpi	r18, 0x02	; 2
     ecc:	f9 f4       	brne	.+62     	; 0xf0c <xQueueGenericSendFromISR+0x5a>
     ece:	42 2f       	mov	r20, r18
     ed0:	78 01       	movw	r14, r16
     ed2:	ec 01       	movw	r28, r24
     ed4:	1a a1       	ldd	r17, Y+34	; 0x22
     ed6:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ed8:	ce 01       	movw	r24, r28
     eda:	16 de       	rcall	.-980    	; 0xb08 <prvCopyDataToQueue>
     edc:	1f 3f       	cpi	r17, 0xFF	; 255
     ede:	81 f4       	brne	.+32     	; 0xf00 <xQueueGenericSendFromISR+0x4e>
     ee0:	8b 89       	ldd	r24, Y+19	; 0x13
     ee2:	88 23       	and	r24, r24
     ee4:	a9 f0       	breq	.+42     	; 0xf10 <xQueueGenericSendFromISR+0x5e>
     ee6:	ce 01       	movw	r24, r28
     ee8:	43 96       	adiw	r24, 0x13	; 19
     eea:	0e 94 61 12 	call	0x24c2	; 0x24c2 <xTaskRemoveFromEventList>
     eee:	88 23       	and	r24, r24
     ef0:	89 f0       	breq	.+34     	; 0xf14 <xQueueGenericSendFromISR+0x62>
     ef2:	e1 14       	cp	r14, r1
     ef4:	f1 04       	cpc	r15, r1
     ef6:	81 f0       	breq	.+32     	; 0xf18 <xQueueGenericSendFromISR+0x66>
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	f7 01       	movw	r30, r14
     efc:	80 83       	st	Z, r24
     efe:	0d c0       	rjmp	.+26     	; 0xf1a <xQueueGenericSendFromISR+0x68>
     f00:	ff 24       	eor	r15, r15
     f02:	f3 94       	inc	r15
     f04:	f1 0e       	add	r15, r17
     f06:	fa a2       	std	Y+34, r15	; 0x22
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	07 c0       	rjmp	.+14     	; 0xf1a <xQueueGenericSendFromISR+0x68>
     f0c:	80 e0       	ldi	r24, 0x00	; 0
     f0e:	05 c0       	rjmp	.+10     	; 0xf1a <xQueueGenericSendFromISR+0x68>
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	03 c0       	rjmp	.+6      	; 0xf1a <xQueueGenericSendFromISR+0x68>
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	01 c0       	rjmp	.+2      	; 0xf1a <xQueueGenericSendFromISR+0x68>
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	df 91       	pop	r29
     f1c:	cf 91       	pop	r28
     f1e:	1f 91       	pop	r17
     f20:	0f 91       	pop	r16
     f22:	ff 90       	pop	r15
     f24:	ef 90       	pop	r14
     f26:	08 95       	ret

00000f28 <xQueueReceive>:
     f28:	cf 92       	push	r12
     f2a:	df 92       	push	r13
     f2c:	ef 92       	push	r14
     f2e:	ff 92       	push	r15
     f30:	0f 93       	push	r16
     f32:	1f 93       	push	r17
     f34:	cf 93       	push	r28
     f36:	df 93       	push	r29
     f38:	cd b7       	in	r28, 0x3d	; 61
     f3a:	de b7       	in	r29, 0x3e	; 62
     f3c:	29 97       	sbiw	r28, 0x09	; 9
     f3e:	0f b6       	in	r0, 0x3f	; 63
     f40:	f8 94       	cli
     f42:	de bf       	out	0x3e, r29	; 62
     f44:	0f be       	out	0x3f, r0	; 63
     f46:	cd bf       	out	0x3d, r28	; 61
     f48:	8c 01       	movw	r16, r24
     f4a:	6b 01       	movw	r12, r22
     f4c:	2e 83       	std	Y+6, r18	; 0x06
     f4e:	3f 83       	std	Y+7, r19	; 0x07
     f50:	48 87       	std	Y+8, r20	; 0x08
     f52:	59 87       	std	Y+9, r21	; 0x09
     f54:	e1 2c       	mov	r14, r1
     f56:	0f b6       	in	r0, 0x3f	; 63
     f58:	f8 94       	cli
     f5a:	0f 92       	push	r0
     f5c:	f8 01       	movw	r30, r16
     f5e:	f6 8c       	ldd	r15, Z+30	; 0x1e
     f60:	ff 20       	and	r15, r15
     f62:	99 f0       	breq	.+38     	; 0xf8a <xQueueReceive+0x62>
     f64:	b6 01       	movw	r22, r12
     f66:	c8 01       	movw	r24, r16
     f68:	2e de       	rcall	.-932    	; 0xbc6 <prvCopyDataFromQueue>
     f6a:	fa 94       	dec	r15
     f6c:	f8 01       	movw	r30, r16
     f6e:	f6 8e       	std	Z+30, r15	; 0x1e
     f70:	80 85       	ldd	r24, Z+8	; 0x08
     f72:	88 23       	and	r24, r24
     f74:	31 f0       	breq	.+12     	; 0xf82 <xQueueReceive+0x5a>
     f76:	c8 01       	movw	r24, r16
     f78:	08 96       	adiw	r24, 0x08	; 8
     f7a:	0e 94 61 12 	call	0x24c2	; 0x24c2 <xTaskRemoveFromEventList>
     f7e:	81 11       	cpse	r24, r1
     f80:	d0 dc       	rcall	.-1632   	; 0x922 <vPortYield>
     f82:	0f 90       	pop	r0
     f84:	0f be       	out	0x3f, r0	; 63
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	4f c0       	rjmp	.+158    	; 0x1028 <__EEPROM_REGION_LENGTH__+0x28>
     f8a:	8e 81       	ldd	r24, Y+6	; 0x06
     f8c:	9f 81       	ldd	r25, Y+7	; 0x07
     f8e:	a8 85       	ldd	r26, Y+8	; 0x08
     f90:	b9 85       	ldd	r27, Y+9	; 0x09
     f92:	89 2b       	or	r24, r25
     f94:	8a 2b       	or	r24, r26
     f96:	8b 2b       	or	r24, r27
     f98:	21 f4       	brne	.+8      	; 0xfa2 <xQueueReceive+0x7a>
     f9a:	0f 90       	pop	r0
     f9c:	0f be       	out	0x3f, r0	; 63
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	43 c0       	rjmp	.+134    	; 0x1028 <__EEPROM_REGION_LENGTH__+0x28>
     fa2:	e1 10       	cpse	r14, r1
     fa4:	06 c0       	rjmp	.+12     	; 0xfb2 <xQueueReceive+0x8a>
     fa6:	ce 01       	movw	r24, r28
     fa8:	01 96       	adiw	r24, 0x01	; 1
     faa:	0e 94 c0 13 	call	0x2780	; 0x2780 <vTaskInternalSetTimeOutState>
     fae:	ee 24       	eor	r14, r14
     fb0:	e3 94       	inc	r14
     fb2:	0f 90       	pop	r0
     fb4:	0f be       	out	0x3f, r0	; 63
     fb6:	e1 d6       	rcall	.+3522   	; 0x1d7a <vTaskSuspendAll>
     fb8:	0f b6       	in	r0, 0x3f	; 63
     fba:	f8 94       	cli
     fbc:	0f 92       	push	r0
     fbe:	f8 01       	movw	r30, r16
     fc0:	81 a1       	ldd	r24, Z+33	; 0x21
     fc2:	8f 3f       	cpi	r24, 0xFF	; 255
     fc4:	09 f4       	brne	.+2      	; 0xfc8 <xQueueReceive+0xa0>
     fc6:	11 a2       	std	Z+33, r1	; 0x21
     fc8:	f8 01       	movw	r30, r16
     fca:	82 a1       	ldd	r24, Z+34	; 0x22
     fcc:	8f 3f       	cpi	r24, 0xFF	; 255
     fce:	09 f4       	brne	.+2      	; 0xfd2 <xQueueReceive+0xaa>
     fd0:	12 a2       	std	Z+34, r1	; 0x22
     fd2:	0f 90       	pop	r0
     fd4:	0f be       	out	0x3f, r0	; 63
     fd6:	be 01       	movw	r22, r28
     fd8:	6a 5f       	subi	r22, 0xFA	; 250
     fda:	7f 4f       	sbci	r23, 0xFF	; 255
     fdc:	ce 01       	movw	r24, r28
     fde:	01 96       	adiw	r24, 0x01	; 1
     fe0:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <xTaskCheckForTimeOut>
     fe4:	81 11       	cpse	r24, r1
     fe6:	17 c0       	rjmp	.+46     	; 0x1016 <__EEPROM_REGION_LENGTH__+0x16>
     fe8:	c8 01       	movw	r24, r16
     fea:	73 dd       	rcall	.-1306   	; 0xad2 <prvIsQueueEmpty>
     fec:	88 23       	and	r24, r24
     fee:	79 f0       	breq	.+30     	; 0x100e <__EEPROM_REGION_LENGTH__+0xe>
     ff0:	4e 81       	ldd	r20, Y+6	; 0x06
     ff2:	5f 81       	ldd	r21, Y+7	; 0x07
     ff4:	68 85       	ldd	r22, Y+8	; 0x08
     ff6:	79 85       	ldd	r23, Y+9	; 0x09
     ff8:	c8 01       	movw	r24, r16
     ffa:	43 96       	adiw	r24, 0x13	; 19
     ffc:	0e 94 be 11 	call	0x237c	; 0x237c <vTaskPlaceOnEventList>
    1000:	c8 01       	movw	r24, r16
    1002:	fb dd       	rcall	.-1034   	; 0xbfa <prvUnlockQueue>
    1004:	fa d7       	rcall	.+4084   	; 0x1ffa <xTaskResumeAll>
    1006:	81 11       	cpse	r24, r1
    1008:	a6 cf       	rjmp	.-180    	; 0xf56 <xQueueReceive+0x2e>
    100a:	8b dc       	rcall	.-1770   	; 0x922 <vPortYield>
    100c:	a4 cf       	rjmp	.-184    	; 0xf56 <xQueueReceive+0x2e>
    100e:	c8 01       	movw	r24, r16
    1010:	f4 dd       	rcall	.-1048   	; 0xbfa <prvUnlockQueue>
    1012:	f3 d7       	rcall	.+4070   	; 0x1ffa <xTaskResumeAll>
    1014:	a0 cf       	rjmp	.-192    	; 0xf56 <xQueueReceive+0x2e>
    1016:	c8 01       	movw	r24, r16
    1018:	f0 dd       	rcall	.-1056   	; 0xbfa <prvUnlockQueue>
    101a:	ef d7       	rcall	.+4062   	; 0x1ffa <xTaskResumeAll>
    101c:	c8 01       	movw	r24, r16
    101e:	59 dd       	rcall	.-1358   	; 0xad2 <prvIsQueueEmpty>
    1020:	88 23       	and	r24, r24
    1022:	09 f4       	brne	.+2      	; 0x1026 <__EEPROM_REGION_LENGTH__+0x26>
    1024:	98 cf       	rjmp	.-208    	; 0xf56 <xQueueReceive+0x2e>
    1026:	80 e0       	ldi	r24, 0x00	; 0
    1028:	29 96       	adiw	r28, 0x09	; 9
    102a:	0f b6       	in	r0, 0x3f	; 63
    102c:	f8 94       	cli
    102e:	de bf       	out	0x3e, r29	; 62
    1030:	0f be       	out	0x3f, r0	; 63
    1032:	cd bf       	out	0x3d, r28	; 61
    1034:	df 91       	pop	r29
    1036:	cf 91       	pop	r28
    1038:	1f 91       	pop	r17
    103a:	0f 91       	pop	r16
    103c:	ff 90       	pop	r15
    103e:	ef 90       	pop	r14
    1040:	df 90       	pop	r13
    1042:	cf 90       	pop	r12
    1044:	08 95       	ret

00001046 <xQueueSemaphoreTake>:
    1046:	ef 92       	push	r14
    1048:	ff 92       	push	r15
    104a:	0f 93       	push	r16
    104c:	1f 93       	push	r17
    104e:	cf 93       	push	r28
    1050:	df 93       	push	r29
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62
    1056:	29 97       	sbiw	r28, 0x09	; 9
    1058:	0f b6       	in	r0, 0x3f	; 63
    105a:	f8 94       	cli
    105c:	de bf       	out	0x3e, r29	; 62
    105e:	0f be       	out	0x3f, r0	; 63
    1060:	cd bf       	out	0x3d, r28	; 61
    1062:	8c 01       	movw	r16, r24
    1064:	4e 83       	std	Y+6, r20	; 0x06
    1066:	5f 83       	std	Y+7, r21	; 0x07
    1068:	68 87       	std	Y+8, r22	; 0x08
    106a:	79 87       	std	Y+9, r23	; 0x09
    106c:	e1 2c       	mov	r14, r1
    106e:	f1 2c       	mov	r15, r1
    1070:	0f b6       	in	r0, 0x3f	; 63
    1072:	f8 94       	cli
    1074:	0f 92       	push	r0
    1076:	f8 01       	movw	r30, r16
    1078:	86 8d       	ldd	r24, Z+30	; 0x1e
    107a:	88 23       	and	r24, r24
    107c:	c9 f0       	breq	.+50     	; 0x10b0 <xQueueSemaphoreTake+0x6a>
    107e:	81 50       	subi	r24, 0x01	; 1
    1080:	86 8f       	std	Z+30, r24	; 0x1e
    1082:	80 81       	ld	r24, Z
    1084:	91 81       	ldd	r25, Z+1	; 0x01
    1086:	89 2b       	or	r24, r25
    1088:	29 f4       	brne	.+10     	; 0x1094 <xQueueSemaphoreTake+0x4e>
    108a:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <pvTaskIncrementMutexHeldCount>
    108e:	f8 01       	movw	r30, r16
    1090:	95 83       	std	Z+5, r25	; 0x05
    1092:	84 83       	std	Z+4, r24	; 0x04
    1094:	f8 01       	movw	r30, r16
    1096:	80 85       	ldd	r24, Z+8	; 0x08
    1098:	88 23       	and	r24, r24
    109a:	31 f0       	breq	.+12     	; 0x10a8 <xQueueSemaphoreTake+0x62>
    109c:	c8 01       	movw	r24, r16
    109e:	08 96       	adiw	r24, 0x08	; 8
    10a0:	0e 94 61 12 	call	0x24c2	; 0x24c2 <xTaskRemoveFromEventList>
    10a4:	81 11       	cpse	r24, r1
    10a6:	3d dc       	rcall	.-1926   	; 0x922 <vPortYield>
    10a8:	0f 90       	pop	r0
    10aa:	0f be       	out	0x3f, r0	; 63
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	6f c0       	rjmp	.+222    	; 0x118e <xQueueSemaphoreTake+0x148>
    10b0:	8e 81       	ldd	r24, Y+6	; 0x06
    10b2:	9f 81       	ldd	r25, Y+7	; 0x07
    10b4:	a8 85       	ldd	r26, Y+8	; 0x08
    10b6:	b9 85       	ldd	r27, Y+9	; 0x09
    10b8:	89 2b       	or	r24, r25
    10ba:	8a 2b       	or	r24, r26
    10bc:	8b 2b       	or	r24, r27
    10be:	21 f4       	brne	.+8      	; 0x10c8 <xQueueSemaphoreTake+0x82>
    10c0:	0f 90       	pop	r0
    10c2:	0f be       	out	0x3f, r0	; 63
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	63 c0       	rjmp	.+198    	; 0x118e <xQueueSemaphoreTake+0x148>
    10c8:	f1 10       	cpse	r15, r1
    10ca:	06 c0       	rjmp	.+12     	; 0x10d8 <xQueueSemaphoreTake+0x92>
    10cc:	ce 01       	movw	r24, r28
    10ce:	01 96       	adiw	r24, 0x01	; 1
    10d0:	0e 94 c0 13 	call	0x2780	; 0x2780 <vTaskInternalSetTimeOutState>
    10d4:	ff 24       	eor	r15, r15
    10d6:	f3 94       	inc	r15
    10d8:	0f 90       	pop	r0
    10da:	0f be       	out	0x3f, r0	; 63
    10dc:	4e d6       	rcall	.+3228   	; 0x1d7a <vTaskSuspendAll>
    10de:	0f b6       	in	r0, 0x3f	; 63
    10e0:	f8 94       	cli
    10e2:	0f 92       	push	r0
    10e4:	f8 01       	movw	r30, r16
    10e6:	81 a1       	ldd	r24, Z+33	; 0x21
    10e8:	8f 3f       	cpi	r24, 0xFF	; 255
    10ea:	09 f4       	brne	.+2      	; 0x10ee <xQueueSemaphoreTake+0xa8>
    10ec:	11 a2       	std	Z+33, r1	; 0x21
    10ee:	f8 01       	movw	r30, r16
    10f0:	82 a1       	ldd	r24, Z+34	; 0x22
    10f2:	8f 3f       	cpi	r24, 0xFF	; 255
    10f4:	09 f4       	brne	.+2      	; 0x10f8 <xQueueSemaphoreTake+0xb2>
    10f6:	12 a2       	std	Z+34, r1	; 0x22
    10f8:	0f 90       	pop	r0
    10fa:	0f be       	out	0x3f, r0	; 63
    10fc:	be 01       	movw	r22, r28
    10fe:	6a 5f       	subi	r22, 0xFA	; 250
    1100:	7f 4f       	sbci	r23, 0xFF	; 255
    1102:	ce 01       	movw	r24, r28
    1104:	01 96       	adiw	r24, 0x01	; 1
    1106:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <xTaskCheckForTimeOut>
    110a:	81 11       	cpse	r24, r1
    110c:	26 c0       	rjmp	.+76     	; 0x115a <xQueueSemaphoreTake+0x114>
    110e:	c8 01       	movw	r24, r16
    1110:	e0 dc       	rcall	.-1600   	; 0xad2 <prvIsQueueEmpty>
    1112:	88 23       	and	r24, r24
    1114:	f1 f0       	breq	.+60     	; 0x1152 <xQueueSemaphoreTake+0x10c>
    1116:	f8 01       	movw	r30, r16
    1118:	80 81       	ld	r24, Z
    111a:	91 81       	ldd	r25, Z+1	; 0x01
    111c:	89 2b       	or	r24, r25
    111e:	51 f4       	brne	.+20     	; 0x1134 <xQueueSemaphoreTake+0xee>
    1120:	0f b6       	in	r0, 0x3f	; 63
    1122:	f8 94       	cli
    1124:	0f 92       	push	r0
    1126:	84 81       	ldd	r24, Z+4	; 0x04
    1128:	95 81       	ldd	r25, Z+5	; 0x05
    112a:	0e 94 4e 14 	call	0x289c	; 0x289c <xTaskPriorityInherit>
    112e:	e8 2e       	mov	r14, r24
    1130:	0f 90       	pop	r0
    1132:	0f be       	out	0x3f, r0	; 63
    1134:	4e 81       	ldd	r20, Y+6	; 0x06
    1136:	5f 81       	ldd	r21, Y+7	; 0x07
    1138:	68 85       	ldd	r22, Y+8	; 0x08
    113a:	79 85       	ldd	r23, Y+9	; 0x09
    113c:	c8 01       	movw	r24, r16
    113e:	43 96       	adiw	r24, 0x13	; 19
    1140:	0e 94 be 11 	call	0x237c	; 0x237c <vTaskPlaceOnEventList>
    1144:	c8 01       	movw	r24, r16
    1146:	59 dd       	rcall	.-1358   	; 0xbfa <prvUnlockQueue>
    1148:	58 d7       	rcall	.+3760   	; 0x1ffa <xTaskResumeAll>
    114a:	81 11       	cpse	r24, r1
    114c:	91 cf       	rjmp	.-222    	; 0x1070 <xQueueSemaphoreTake+0x2a>
    114e:	e9 db       	rcall	.-2094   	; 0x922 <vPortYield>
    1150:	8f cf       	rjmp	.-226    	; 0x1070 <xQueueSemaphoreTake+0x2a>
    1152:	c8 01       	movw	r24, r16
    1154:	52 dd       	rcall	.-1372   	; 0xbfa <prvUnlockQueue>
    1156:	51 d7       	rcall	.+3746   	; 0x1ffa <xTaskResumeAll>
    1158:	8b cf       	rjmp	.-234    	; 0x1070 <xQueueSemaphoreTake+0x2a>
    115a:	c8 01       	movw	r24, r16
    115c:	4e dd       	rcall	.-1380   	; 0xbfa <prvUnlockQueue>
    115e:	4d d7       	rcall	.+3738   	; 0x1ffa <xTaskResumeAll>
    1160:	c8 01       	movw	r24, r16
    1162:	b7 dc       	rcall	.-1682   	; 0xad2 <prvIsQueueEmpty>
    1164:	88 23       	and	r24, r24
    1166:	09 f4       	brne	.+2      	; 0x116a <xQueueSemaphoreTake+0x124>
    1168:	83 cf       	rjmp	.-250    	; 0x1070 <xQueueSemaphoreTake+0x2a>
    116a:	ee 20       	and	r14, r14
    116c:	79 f0       	breq	.+30     	; 0x118c <xQueueSemaphoreTake+0x146>
    116e:	0f b6       	in	r0, 0x3f	; 63
    1170:	f8 94       	cli
    1172:	0f 92       	push	r0
    1174:	c8 01       	movw	r24, r16
    1176:	9d dc       	rcall	.-1734   	; 0xab2 <prvGetDisinheritPriorityAfterTimeout>
    1178:	68 2f       	mov	r22, r24
    117a:	f8 01       	movw	r30, r16
    117c:	84 81       	ldd	r24, Z+4	; 0x04
    117e:	95 81       	ldd	r25, Z+5	; 0x05
    1180:	0e 94 30 15 	call	0x2a60	; 0x2a60 <vTaskPriorityDisinheritAfterTimeout>
    1184:	0f 90       	pop	r0
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	80 e0       	ldi	r24, 0x00	; 0
    118a:	01 c0       	rjmp	.+2      	; 0x118e <xQueueSemaphoreTake+0x148>
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	29 96       	adiw	r28, 0x09	; 9
    1190:	0f b6       	in	r0, 0x3f	; 63
    1192:	f8 94       	cli
    1194:	de bf       	out	0x3e, r29	; 62
    1196:	0f be       	out	0x3f, r0	; 63
    1198:	cd bf       	out	0x3d, r28	; 61
    119a:	df 91       	pop	r29
    119c:	cf 91       	pop	r28
    119e:	1f 91       	pop	r17
    11a0:	0f 91       	pop	r16
    11a2:	ff 90       	pop	r15
    11a4:	ef 90       	pop	r14
    11a6:	08 95       	ret

000011a8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    11a8:	cf 93       	push	r28
    11aa:	df 93       	push	r29
    11ac:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    11ae:	0f b6       	in	r0, 0x3f	; 63
    11b0:	f8 94       	cli
    11b2:	0f 92       	push	r0
    11b4:	89 a1       	ldd	r24, Y+33	; 0x21
    11b6:	8f 3f       	cpi	r24, 0xFF	; 255
    11b8:	09 f4       	brne	.+2      	; 0x11bc <vQueueWaitForMessageRestricted+0x14>
    11ba:	19 a2       	std	Y+33, r1	; 0x21
    11bc:	8a a1       	ldd	r24, Y+34	; 0x22
    11be:	8f 3f       	cpi	r24, 0xFF	; 255
    11c0:	09 f4       	brne	.+2      	; 0x11c4 <vQueueWaitForMessageRestricted+0x1c>
    11c2:	1a a2       	std	Y+34, r1	; 0x22
    11c4:	0f 90       	pop	r0
    11c6:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    11c8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11ca:	81 11       	cpse	r24, r1
    11cc:	04 c0       	rjmp	.+8      	; 0x11d6 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    11ce:	ce 01       	movw	r24, r28
    11d0:	43 96       	adiw	r24, 0x13	; 19
    11d2:	0e 94 1f 12 	call	0x243e	; 0x243e <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    11d6:	ce 01       	movw	r24, r28
    11d8:	10 dd       	rcall	.-1504   	; 0xbfa <prvUnlockQueue>
    }
    11da:	df 91       	pop	r29
    11dc:	cf 91       	pop	r28
    11de:	08 95       	ret

000011e0 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    11e0:	fc 01       	movw	r30, r24
    11e2:	44 81       	ldd	r20, Z+4	; 0x04
    11e4:	55 81       	ldd	r21, Z+5	; 0x05
    11e6:	22 81       	ldd	r18, Z+2	; 0x02
    11e8:	33 81       	ldd	r19, Z+3	; 0x03
    11ea:	24 0f       	add	r18, r20
    11ec:	35 1f       	adc	r19, r21
    11ee:	80 81       	ld	r24, Z
    11f0:	91 81       	ldd	r25, Z+1	; 0x01
    11f2:	b9 01       	movw	r22, r18
    11f4:	68 1b       	sub	r22, r24
    11f6:	79 0b       	sbc	r23, r25
    11f8:	cb 01       	movw	r24, r22
    11fa:	64 17       	cp	r22, r20
    11fc:	75 07       	cpc	r23, r21
    11fe:	10 f0       	brcs	.+4      	; 0x1204 <prvBytesInBuffer+0x24>
    1200:	84 1b       	sub	r24, r20
    1202:	95 0b       	sbc	r25, r21
    1204:	08 95       	ret

00001206 <prvInitialiseNewStreamBuffer>:
    1206:	0f 93       	push	r16
    1208:	fc 01       	movw	r30, r24
    120a:	8f e0       	ldi	r24, 0x0F	; 15
    120c:	df 01       	movw	r26, r30
    120e:	1d 92       	st	X+, r1
    1210:	8a 95       	dec	r24
    1212:	e9 f7       	brne	.-6      	; 0x120e <prvInitialiseNewStreamBuffer+0x8>
    1214:	75 87       	std	Z+13, r23	; 0x0d
    1216:	64 87       	std	Z+12, r22	; 0x0c
    1218:	55 83       	std	Z+5, r21	; 0x05
    121a:	44 83       	std	Z+4, r20	; 0x04
    121c:	37 83       	std	Z+7, r19	; 0x07
    121e:	26 83       	std	Z+6, r18	; 0x06
    1220:	06 87       	std	Z+14, r16	; 0x0e
    1222:	0f 91       	pop	r16
    1224:	08 95       	ret

00001226 <prvWriteBytesToBuffer>:
    1226:	af 92       	push	r10
    1228:	bf 92       	push	r11
    122a:	cf 92       	push	r12
    122c:	df 92       	push	r13
    122e:	ef 92       	push	r14
    1230:	ff 92       	push	r15
    1232:	0f 93       	push	r16
    1234:	1f 93       	push	r17
    1236:	cf 93       	push	r28
    1238:	df 93       	push	r29
    123a:	6c 01       	movw	r12, r24
    123c:	5b 01       	movw	r10, r22
    123e:	7a 01       	movw	r14, r20
    1240:	fc 01       	movw	r30, r24
    1242:	c2 81       	ldd	r28, Z+2	; 0x02
    1244:	d3 81       	ldd	r29, Z+3	; 0x03
    1246:	04 81       	ldd	r16, Z+4	; 0x04
    1248:	15 81       	ldd	r17, Z+5	; 0x05
    124a:	0c 1b       	sub	r16, r28
    124c:	1d 0b       	sbc	r17, r29
    124e:	40 17       	cp	r20, r16
    1250:	51 07       	cpc	r21, r17
    1252:	08 f4       	brcc	.+2      	; 0x1256 <prvWriteBytesToBuffer+0x30>
    1254:	8a 01       	movw	r16, r20
    1256:	f6 01       	movw	r30, r12
    1258:	84 85       	ldd	r24, Z+12	; 0x0c
    125a:	95 85       	ldd	r25, Z+13	; 0x0d
    125c:	a8 01       	movw	r20, r16
    125e:	b5 01       	movw	r22, r10
    1260:	8c 0f       	add	r24, r28
    1262:	9d 1f       	adc	r25, r29
    1264:	0e 94 aa 32 	call	0x6554	; 0x6554 <memcpy>
    1268:	0e 15       	cp	r16, r14
    126a:	1f 05       	cpc	r17, r15
    126c:	58 f4       	brcc	.+22     	; 0x1284 <prvWriteBytesToBuffer+0x5e>
    126e:	a7 01       	movw	r20, r14
    1270:	40 1b       	sub	r20, r16
    1272:	51 0b       	sbc	r21, r17
    1274:	b5 01       	movw	r22, r10
    1276:	60 0f       	add	r22, r16
    1278:	71 1f       	adc	r23, r17
    127a:	f6 01       	movw	r30, r12
    127c:	84 85       	ldd	r24, Z+12	; 0x0c
    127e:	95 85       	ldd	r25, Z+13	; 0x0d
    1280:	0e 94 aa 32 	call	0x6554	; 0x6554 <memcpy>
    1284:	ce 01       	movw	r24, r28
    1286:	8e 0d       	add	r24, r14
    1288:	9f 1d       	adc	r25, r15
    128a:	f6 01       	movw	r30, r12
    128c:	24 81       	ldd	r18, Z+4	; 0x04
    128e:	35 81       	ldd	r19, Z+5	; 0x05
    1290:	82 17       	cp	r24, r18
    1292:	93 07       	cpc	r25, r19
    1294:	10 f0       	brcs	.+4      	; 0x129a <prvWriteBytesToBuffer+0x74>
    1296:	82 1b       	sub	r24, r18
    1298:	93 0b       	sbc	r25, r19
    129a:	f6 01       	movw	r30, r12
    129c:	93 83       	std	Z+3, r25	; 0x03
    129e:	82 83       	std	Z+2, r24	; 0x02
    12a0:	c7 01       	movw	r24, r14
    12a2:	df 91       	pop	r29
    12a4:	cf 91       	pop	r28
    12a6:	1f 91       	pop	r17
    12a8:	0f 91       	pop	r16
    12aa:	ff 90       	pop	r15
    12ac:	ef 90       	pop	r14
    12ae:	df 90       	pop	r13
    12b0:	cf 90       	pop	r12
    12b2:	bf 90       	pop	r11
    12b4:	af 90       	pop	r10
    12b6:	08 95       	ret

000012b8 <prvWriteMessageToBuffer>:
    12b8:	cf 92       	push	r12
    12ba:	df 92       	push	r13
    12bc:	ef 92       	push	r14
    12be:	ff 92       	push	r15
    12c0:	0f 93       	push	r16
    12c2:	1f 93       	push	r17
    12c4:	cf 93       	push	r28
    12c6:	df 93       	push	r29
    12c8:	1f 92       	push	r1
    12ca:	1f 92       	push	r1
    12cc:	cd b7       	in	r28, 0x3d	; 61
    12ce:	de b7       	in	r29, 0x3e	; 62
    12d0:	7c 01       	movw	r14, r24
    12d2:	6b 01       	movw	r12, r22
    12d4:	5a 83       	std	Y+2, r21	; 0x02
    12d6:	49 83       	std	Y+1, r20	; 0x01
    12d8:	21 15       	cp	r18, r1
    12da:	31 05       	cpc	r19, r1
    12dc:	c1 f0       	breq	.+48     	; 0x130e <prvWriteMessageToBuffer+0x56>
    12de:	fc 01       	movw	r30, r24
    12e0:	86 85       	ldd	r24, Z+14	; 0x0e
    12e2:	80 fd       	sbrc	r24, 0
    12e4:	08 c0       	rjmp	.+16     	; 0x12f6 <prvWriteMessageToBuffer+0x3e>
    12e6:	42 17       	cp	r20, r18
    12e8:	53 07       	cpc	r21, r19
    12ea:	08 f4       	brcc	.+2      	; 0x12ee <prvWriteMessageToBuffer+0x36>
    12ec:	9a 01       	movw	r18, r20
    12ee:	3a 83       	std	Y+2, r19	; 0x02
    12f0:	29 83       	std	Y+1, r18	; 0x01
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	0f c0       	rjmp	.+30     	; 0x1314 <prvWriteMessageToBuffer+0x5c>
    12f6:	20 17       	cp	r18, r16
    12f8:	31 07       	cpc	r19, r17
    12fa:	58 f0       	brcs	.+22     	; 0x1312 <prvWriteMessageToBuffer+0x5a>
    12fc:	42 e0       	ldi	r20, 0x02	; 2
    12fe:	50 e0       	ldi	r21, 0x00	; 0
    1300:	be 01       	movw	r22, r28
    1302:	6f 5f       	subi	r22, 0xFF	; 255
    1304:	7f 4f       	sbci	r23, 0xFF	; 255
    1306:	c7 01       	movw	r24, r14
    1308:	8e df       	rcall	.-228    	; 0x1226 <prvWriteBytesToBuffer>
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	03 c0       	rjmp	.+6      	; 0x1314 <prvWriteMessageToBuffer+0x5c>
    130e:	80 e0       	ldi	r24, 0x00	; 0
    1310:	01 c0       	rjmp	.+2      	; 0x1314 <prvWriteMessageToBuffer+0x5c>
    1312:	80 e0       	ldi	r24, 0x00	; 0
    1314:	88 23       	and	r24, r24
    1316:	31 f0       	breq	.+12     	; 0x1324 <prvWriteMessageToBuffer+0x6c>
    1318:	49 81       	ldd	r20, Y+1	; 0x01
    131a:	5a 81       	ldd	r21, Y+2	; 0x02
    131c:	b6 01       	movw	r22, r12
    131e:	c7 01       	movw	r24, r14
    1320:	82 df       	rcall	.-252    	; 0x1226 <prvWriteBytesToBuffer>
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <prvWriteMessageToBuffer+0x70>
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	0f 90       	pop	r0
    132a:	0f 90       	pop	r0
    132c:	df 91       	pop	r29
    132e:	cf 91       	pop	r28
    1330:	1f 91       	pop	r17
    1332:	0f 91       	pop	r16
    1334:	ff 90       	pop	r15
    1336:	ef 90       	pop	r14
    1338:	df 90       	pop	r13
    133a:	cf 90       	pop	r12
    133c:	08 95       	ret

0000133e <prvReadBytesFromBuffer>:
    133e:	af 92       	push	r10
    1340:	bf 92       	push	r11
    1342:	cf 92       	push	r12
    1344:	df 92       	push	r13
    1346:	ef 92       	push	r14
    1348:	ff 92       	push	r15
    134a:	0f 93       	push	r16
    134c:	1f 93       	push	r17
    134e:	cf 93       	push	r28
    1350:	df 93       	push	r29
    1352:	7c 01       	movw	r14, r24
    1354:	5b 01       	movw	r10, r22
    1356:	e9 01       	movw	r28, r18
    1358:	42 17       	cp	r20, r18
    135a:	53 07       	cpc	r21, r19
    135c:	08 f4       	brcc	.+2      	; 0x1360 <prvReadBytesFromBuffer+0x22>
    135e:	ea 01       	movw	r28, r20
    1360:	20 97       	sbiw	r28, 0x00	; 0
    1362:	81 f1       	breq	.+96     	; 0x13c4 <prvReadBytesFromBuffer+0x86>
    1364:	f7 01       	movw	r30, r14
    1366:	00 81       	ld	r16, Z
    1368:	11 81       	ldd	r17, Z+1	; 0x01
    136a:	84 81       	ldd	r24, Z+4	; 0x04
    136c:	95 81       	ldd	r25, Z+5	; 0x05
    136e:	80 1b       	sub	r24, r16
    1370:	91 0b       	sbc	r25, r17
    1372:	6e 01       	movw	r12, r28
    1374:	8c 17       	cp	r24, r28
    1376:	9d 07       	cpc	r25, r29
    1378:	08 f4       	brcc	.+2      	; 0x137c <prvReadBytesFromBuffer+0x3e>
    137a:	6c 01       	movw	r12, r24
    137c:	f7 01       	movw	r30, r14
    137e:	64 85       	ldd	r22, Z+12	; 0x0c
    1380:	75 85       	ldd	r23, Z+13	; 0x0d
    1382:	60 0f       	add	r22, r16
    1384:	71 1f       	adc	r23, r17
    1386:	a6 01       	movw	r20, r12
    1388:	c5 01       	movw	r24, r10
    138a:	0e 94 aa 32 	call	0x6554	; 0x6554 <memcpy>
    138e:	cc 16       	cp	r12, r28
    1390:	dd 06       	cpc	r13, r29
    1392:	58 f4       	brcc	.+22     	; 0x13aa <prvReadBytesFromBuffer+0x6c>
    1394:	ae 01       	movw	r20, r28
    1396:	4c 19       	sub	r20, r12
    1398:	5d 09       	sbc	r21, r13
    139a:	f7 01       	movw	r30, r14
    139c:	64 85       	ldd	r22, Z+12	; 0x0c
    139e:	75 85       	ldd	r23, Z+13	; 0x0d
    13a0:	c5 01       	movw	r24, r10
    13a2:	8c 0d       	add	r24, r12
    13a4:	9d 1d       	adc	r25, r13
    13a6:	0e 94 aa 32 	call	0x6554	; 0x6554 <memcpy>
    13aa:	0c 0f       	add	r16, r28
    13ac:	1d 1f       	adc	r17, r29
    13ae:	f7 01       	movw	r30, r14
    13b0:	84 81       	ldd	r24, Z+4	; 0x04
    13b2:	95 81       	ldd	r25, Z+5	; 0x05
    13b4:	08 17       	cp	r16, r24
    13b6:	19 07       	cpc	r17, r25
    13b8:	10 f0       	brcs	.+4      	; 0x13be <prvReadBytesFromBuffer+0x80>
    13ba:	08 1b       	sub	r16, r24
    13bc:	19 0b       	sbc	r17, r25
    13be:	f7 01       	movw	r30, r14
    13c0:	11 83       	std	Z+1, r17	; 0x01
    13c2:	00 83       	st	Z, r16
    13c4:	ce 01       	movw	r24, r28
    13c6:	df 91       	pop	r29
    13c8:	cf 91       	pop	r28
    13ca:	1f 91       	pop	r17
    13cc:	0f 91       	pop	r16
    13ce:	ff 90       	pop	r15
    13d0:	ef 90       	pop	r14
    13d2:	df 90       	pop	r13
    13d4:	cf 90       	pop	r12
    13d6:	bf 90       	pop	r11
    13d8:	af 90       	pop	r10
    13da:	08 95       	ret

000013dc <prvReadMessageFromBuffer>:
    13dc:	6f 92       	push	r6
    13de:	7f 92       	push	r7
    13e0:	8f 92       	push	r8
    13e2:	9f 92       	push	r9
    13e4:	af 92       	push	r10
    13e6:	bf 92       	push	r11
    13e8:	cf 92       	push	r12
    13ea:	df 92       	push	r13
    13ec:	ef 92       	push	r14
    13ee:	ff 92       	push	r15
    13f0:	0f 93       	push	r16
    13f2:	1f 93       	push	r17
    13f4:	cf 93       	push	r28
    13f6:	df 93       	push	r29
    13f8:	1f 92       	push	r1
    13fa:	1f 92       	push	r1
    13fc:	cd b7       	in	r28, 0x3d	; 61
    13fe:	de b7       	in	r29, 0x3e	; 62
    1400:	6c 01       	movw	r12, r24
    1402:	4b 01       	movw	r8, r22
    1404:	5a 01       	movw	r10, r20
    1406:	79 01       	movw	r14, r18
    1408:	01 15       	cp	r16, r1
    140a:	11 05       	cpc	r17, r1
    140c:	b1 f0       	breq	.+44     	; 0x143a <prvReadMessageFromBuffer+0x5e>
    140e:	fc 01       	movw	r30, r24
    1410:	60 80       	ld	r6, Z
    1412:	71 80       	ldd	r7, Z+1	; 0x01
    1414:	a8 01       	movw	r20, r16
    1416:	be 01       	movw	r22, r28
    1418:	6f 5f       	subi	r22, 0xFF	; 255
    141a:	7f 4f       	sbci	r23, 0xFF	; 255
    141c:	90 df       	rcall	.-224    	; 0x133e <prvReadBytesFromBuffer>
    141e:	89 81       	ldd	r24, Y+1	; 0x01
    1420:	9a 81       	ldd	r25, Y+2	; 0x02
    1422:	e0 1a       	sub	r14, r16
    1424:	f1 0a       	sbc	r15, r17
    1426:	a8 16       	cp	r10, r24
    1428:	b9 06       	cpc	r11, r25
    142a:	30 f4       	brcc	.+12     	; 0x1438 <prvReadMessageFromBuffer+0x5c>
    142c:	f6 01       	movw	r30, r12
    142e:	71 82       	std	Z+1, r7	; 0x01
    1430:	60 82       	st	Z, r6
    1432:	a1 2c       	mov	r10, r1
    1434:	b1 2c       	mov	r11, r1
    1436:	01 c0       	rjmp	.+2      	; 0x143a <prvReadMessageFromBuffer+0x5e>
    1438:	5c 01       	movw	r10, r24
    143a:	97 01       	movw	r18, r14
    143c:	a5 01       	movw	r20, r10
    143e:	b4 01       	movw	r22, r8
    1440:	c6 01       	movw	r24, r12
    1442:	7d df       	rcall	.-262    	; 0x133e <prvReadBytesFromBuffer>
    1444:	0f 90       	pop	r0
    1446:	0f 90       	pop	r0
    1448:	df 91       	pop	r29
    144a:	cf 91       	pop	r28
    144c:	1f 91       	pop	r17
    144e:	0f 91       	pop	r16
    1450:	ff 90       	pop	r15
    1452:	ef 90       	pop	r14
    1454:	df 90       	pop	r13
    1456:	cf 90       	pop	r12
    1458:	bf 90       	pop	r11
    145a:	af 90       	pop	r10
    145c:	9f 90       	pop	r9
    145e:	8f 90       	pop	r8
    1460:	7f 90       	pop	r7
    1462:	6f 90       	pop	r6
    1464:	08 95       	ret

00001466 <xStreamBufferGenericCreate>:
    1466:	cf 92       	push	r12
    1468:	df 92       	push	r13
    146a:	ef 92       	push	r14
    146c:	ff 92       	push	r15
    146e:	0f 93       	push	r16
    1470:	cf 93       	push	r28
    1472:	df 93       	push	r29
    1474:	ec 01       	movw	r28, r24
    1476:	6b 01       	movw	r12, r22
    1478:	41 30       	cpi	r20, 0x01	; 1
    147a:	11 f4       	brne	.+4      	; 0x1480 <xStreamBufferGenericCreate+0x1a>
    147c:	01 e0       	ldi	r16, 0x01	; 1
    147e:	01 c0       	rjmp	.+2      	; 0x1482 <xStreamBufferGenericCreate+0x1c>
    1480:	00 e0       	ldi	r16, 0x00	; 0
    1482:	c1 14       	cp	r12, r1
    1484:	d1 04       	cpc	r13, r1
    1486:	19 f4       	brne	.+6      	; 0x148e <xStreamBufferGenericCreate+0x28>
    1488:	cc 24       	eor	r12, r12
    148a:	c3 94       	inc	r12
    148c:	d1 2c       	mov	r13, r1
    148e:	ce 01       	movw	r24, r28
    1490:	40 96       	adiw	r24, 0x10	; 16
    1492:	c8 17       	cp	r28, r24
    1494:	d9 07       	cpc	r29, r25
    1496:	20 f4       	brcc	.+8      	; 0x14a0 <xStreamBufferGenericCreate+0x3a>
    1498:	21 96       	adiw	r28, 0x01	; 1
    149a:	8f d8       	rcall	.-3810   	; 0x5ba <pvPortMalloc>
    149c:	7c 01       	movw	r14, r24
    149e:	02 c0       	rjmp	.+4      	; 0x14a4 <xStreamBufferGenericCreate+0x3e>
    14a0:	e1 2c       	mov	r14, r1
    14a2:	f1 2c       	mov	r15, r1
    14a4:	e1 14       	cp	r14, r1
    14a6:	f1 04       	cpc	r15, r1
    14a8:	39 f0       	breq	.+14     	; 0x14b8 <xStreamBufferGenericCreate+0x52>
    14aa:	96 01       	movw	r18, r12
    14ac:	ae 01       	movw	r20, r28
    14ae:	b7 01       	movw	r22, r14
    14b0:	61 5f       	subi	r22, 0xF1	; 241
    14b2:	7f 4f       	sbci	r23, 0xFF	; 255
    14b4:	c7 01       	movw	r24, r14
    14b6:	a7 de       	rcall	.-690    	; 0x1206 <prvInitialiseNewStreamBuffer>
    14b8:	c7 01       	movw	r24, r14
    14ba:	df 91       	pop	r29
    14bc:	cf 91       	pop	r28
    14be:	0f 91       	pop	r16
    14c0:	ff 90       	pop	r15
    14c2:	ef 90       	pop	r14
    14c4:	df 90       	pop	r13
    14c6:	cf 90       	pop	r12
    14c8:	08 95       	ret

000014ca <xStreamBufferReset>:
    14ca:	0f 93       	push	r16
    14cc:	0f b6       	in	r0, 0x3f	; 63
    14ce:	f8 94       	cli
    14d0:	0f 92       	push	r0
    14d2:	fc 01       	movw	r30, r24
    14d4:	20 85       	ldd	r18, Z+8	; 0x08
    14d6:	31 85       	ldd	r19, Z+9	; 0x09
    14d8:	23 2b       	or	r18, r19
    14da:	71 f4       	brne	.+28     	; 0x14f8 <xStreamBufferReset+0x2e>
    14dc:	22 85       	ldd	r18, Z+10	; 0x0a
    14de:	33 85       	ldd	r19, Z+11	; 0x0b
    14e0:	23 2b       	or	r18, r19
    14e2:	61 f4       	brne	.+24     	; 0x14fc <xStreamBufferReset+0x32>
    14e4:	26 81       	ldd	r18, Z+6	; 0x06
    14e6:	37 81       	ldd	r19, Z+7	; 0x07
    14e8:	44 81       	ldd	r20, Z+4	; 0x04
    14ea:	55 81       	ldd	r21, Z+5	; 0x05
    14ec:	64 85       	ldd	r22, Z+12	; 0x0c
    14ee:	75 85       	ldd	r23, Z+13	; 0x0d
    14f0:	06 85       	ldd	r16, Z+14	; 0x0e
    14f2:	89 de       	rcall	.-750    	; 0x1206 <prvInitialiseNewStreamBuffer>
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	03 c0       	rjmp	.+6      	; 0x14fe <xStreamBufferReset+0x34>
    14f8:	80 e0       	ldi	r24, 0x00	; 0
    14fa:	01 c0       	rjmp	.+2      	; 0x14fe <xStreamBufferReset+0x34>
    14fc:	80 e0       	ldi	r24, 0x00	; 0
    14fe:	0f 90       	pop	r0
    1500:	0f be       	out	0x3f, r0	; 63
    1502:	0f 91       	pop	r16
    1504:	08 95       	ret

00001506 <xStreamBufferSpacesAvailable>:
    1506:	fc 01       	movw	r30, r24
    1508:	24 81       	ldd	r18, Z+4	; 0x04
    150a:	35 81       	ldd	r19, Z+5	; 0x05
    150c:	80 81       	ld	r24, Z
    150e:	91 81       	ldd	r25, Z+1	; 0x01
    1510:	82 0f       	add	r24, r18
    1512:	93 1f       	adc	r25, r19
    1514:	42 81       	ldd	r20, Z+2	; 0x02
    1516:	53 81       	ldd	r21, Z+3	; 0x03
    1518:	84 1b       	sub	r24, r20
    151a:	95 0b       	sbc	r25, r21
    151c:	01 97       	sbiw	r24, 0x01	; 1
    151e:	82 17       	cp	r24, r18
    1520:	93 07       	cpc	r25, r19
    1522:	10 f0       	brcs	.+4      	; 0x1528 <xStreamBufferSpacesAvailable+0x22>
    1524:	82 1b       	sub	r24, r18
    1526:	93 0b       	sbc	r25, r19
    1528:	08 95       	ret

0000152a <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    152a:	2f 92       	push	r2
    152c:	3f 92       	push	r3
    152e:	4f 92       	push	r4
    1530:	5f 92       	push	r5
    1532:	6f 92       	push	r6
    1534:	7f 92       	push	r7
    1536:	8f 92       	push	r8
    1538:	9f 92       	push	r9
    153a:	af 92       	push	r10
    153c:	bf 92       	push	r11
    153e:	cf 92       	push	r12
    1540:	df 92       	push	r13
    1542:	ef 92       	push	r14
    1544:	ff 92       	push	r15
    1546:	0f 93       	push	r16
    1548:	1f 93       	push	r17
    154a:	cf 93       	push	r28
    154c:	df 93       	push	r29
    154e:	cd b7       	in	r28, 0x3d	; 61
    1550:	de b7       	in	r29, 0x3e	; 62
    1552:	2b 97       	sbiw	r28, 0x0b	; 11
    1554:	0f b6       	in	r0, 0x3f	; 63
    1556:	f8 94       	cli
    1558:	de bf       	out	0x3e, r29	; 62
    155a:	0f be       	out	0x3f, r0	; 63
    155c:	cd bf       	out	0x3d, r28	; 61
    155e:	4c 01       	movw	r8, r24
    1560:	7b 87       	std	Y+11, r23	; 0x0b
    1562:	6a 87       	std	Y+10, r22	; 0x0a
    1564:	1a 01       	movw	r2, r20
    1566:	0e 83       	std	Y+6, r16	; 0x06
    1568:	1f 83       	std	Y+7, r17	; 0x07
    156a:	28 87       	std	Y+8, r18	; 0x08
    156c:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    156e:	fc 01       	movw	r30, r24
    1570:	84 81       	ldd	r24, Z+4	; 0x04
    1572:	95 81       	ldd	r25, Z+5	; 0x05
    1574:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1576:	26 85       	ldd	r18, Z+14	; 0x0e
    1578:	20 ff       	sbrs	r18, 0
    157a:	0c c0       	rjmp	.+24     	; 0x1594 <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    157c:	2a 01       	movw	r4, r20
    157e:	f2 e0       	ldi	r31, 0x02	; 2
    1580:	4f 0e       	add	r4, r31
    1582:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    1584:	84 15       	cp	r24, r4
    1586:	95 05       	cpc	r25, r5
    1588:	58 f4       	brcc	.+22     	; 0x15a0 <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    158a:	1e 82       	std	Y+6, r1	; 0x06
    158c:	1f 82       	std	Y+7, r1	; 0x07
    158e:	18 86       	std	Y+8, r1	; 0x08
    1590:	19 86       	std	Y+9, r1	; 0x09
    1592:	06 c0       	rjmp	.+12     	; 0x15a0 <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    1594:	84 17       	cp	r24, r20
    1596:	95 07       	cpc	r25, r21
    1598:	10 f0       	brcs	.+4      	; 0x159e <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    159a:	2a 01       	movw	r4, r20
    159c:	01 c0       	rjmp	.+2      	; 0x15a0 <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    159e:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    15a0:	8e 81       	ldd	r24, Y+6	; 0x06
    15a2:	9f 81       	ldd	r25, Y+7	; 0x07
    15a4:	a8 85       	ldd	r26, Y+8	; 0x08
    15a6:	b9 85       	ldd	r27, Y+9	; 0x09
    15a8:	89 2b       	or	r24, r25
    15aa:	8a 2b       	or	r24, r26
    15ac:	8b 2b       	or	r24, r27
    15ae:	09 f4       	brne	.+2      	; 0x15b2 <xStreamBufferSend+0x88>
    15b0:	38 c0       	rjmp	.+112    	; 0x1622 <xStreamBufferSend+0xf8>
    {
        vTaskSetTimeOutState( &xTimeOut );
    15b2:	ce 01       	movw	r24, r28
    15b4:	01 96       	adiw	r24, 0x01	; 1
    15b6:	0e 94 aa 13 	call	0x2754	; 0x2754 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    15ba:	0f b6       	in	r0, 0x3f	; 63
    15bc:	f8 94       	cli
    15be:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    15c0:	c4 01       	movw	r24, r8
    15c2:	a1 df       	rcall	.-190    	; 0x1506 <xStreamBufferSpacesAvailable>
    15c4:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    15c6:	84 15       	cp	r24, r4
    15c8:	95 05       	cpc	r25, r5
    15ca:	40 f5       	brcc	.+80     	; 0x161c <xStreamBufferSend+0xf2>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    15cc:	60 e0       	ldi	r22, 0x00	; 0
    15ce:	80 e0       	ldi	r24, 0x00	; 0
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	0e 94 94 18 	call	0x3128	; 0x3128 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    15d6:	0e 94 3b 14 	call	0x2876	; 0x2876 <xTaskGetCurrentTaskHandle>
    15da:	f4 01       	movw	r30, r8
    15dc:	93 87       	std	Z+11, r25	; 0x0b
    15de:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    15e0:	0f 90       	pop	r0
    15e2:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    15e4:	ae 80       	ldd	r10, Y+6	; 0x06
    15e6:	bf 80       	ldd	r11, Y+7	; 0x07
    15e8:	c8 84       	ldd	r12, Y+8	; 0x08
    15ea:	d9 84       	ldd	r13, Y+9	; 0x09
    15ec:	e1 2c       	mov	r14, r1
    15ee:	f1 2c       	mov	r15, r1
    15f0:	00 e0       	ldi	r16, 0x00	; 0
    15f2:	10 e0       	ldi	r17, 0x00	; 0
    15f4:	98 01       	movw	r18, r16
    15f6:	40 e0       	ldi	r20, 0x00	; 0
    15f8:	50 e0       	ldi	r21, 0x00	; 0
    15fa:	ba 01       	movw	r22, r20
    15fc:	80 e0       	ldi	r24, 0x00	; 0
    15fe:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1602:	f4 01       	movw	r30, r8
    1604:	13 86       	std	Z+11, r1	; 0x0b
    1606:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1608:	be 01       	movw	r22, r28
    160a:	6a 5f       	subi	r22, 0xFA	; 250
    160c:	7f 4f       	sbci	r23, 0xFF	; 255
    160e:	ce 01       	movw	r24, r28
    1610:	01 96       	adiw	r24, 0x01	; 1
    1612:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <xTaskCheckForTimeOut>
    1616:	88 23       	and	r24, r24
    1618:	81 f2       	breq	.-96     	; 0x15ba <xStreamBufferSend+0x90>
    161a:	05 c0       	rjmp	.+10     	; 0x1626 <xStreamBufferSend+0xfc>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    161c:	0f 90       	pop	r0
    161e:	0f be       	out	0x3f, r0	; 63
                    break;
    1620:	02 c0       	rjmp	.+4      	; 0x1626 <xStreamBufferSend+0xfc>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    1622:	61 2c       	mov	r6, r1
    1624:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    1626:	61 14       	cp	r6, r1
    1628:	71 04       	cpc	r7, r1
    162a:	19 f4       	brne	.+6      	; 0x1632 <xStreamBufferSend+0x108>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    162c:	c4 01       	movw	r24, r8
    162e:	6b df       	rcall	.-298    	; 0x1506 <xStreamBufferSpacesAvailable>
    1630:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1632:	82 01       	movw	r16, r4
    1634:	93 01       	movw	r18, r6
    1636:	a1 01       	movw	r20, r2
    1638:	6a 85       	ldd	r22, Y+10	; 0x0a
    163a:	7b 85       	ldd	r23, Y+11	; 0x0b
    163c:	c4 01       	movw	r24, r8
    163e:	3c de       	rcall	.-904    	; 0x12b8 <prvWriteMessageToBuffer>
    1640:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    1642:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1644:	e9 f0       	breq	.+58     	; 0x1680 <xStreamBufferSend+0x156>
    1646:	c4 01       	movw	r24, r8
    1648:	cb dd       	rcall	.-1130   	; 0x11e0 <prvBytesInBuffer>
    164a:	f4 01       	movw	r30, r8
    164c:	26 81       	ldd	r18, Z+6	; 0x06
    164e:	37 81       	ldd	r19, Z+7	; 0x07
    1650:	82 17       	cp	r24, r18
    1652:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    1654:	a8 f0       	brcs	.+42     	; 0x1680 <xStreamBufferSend+0x156>
    1656:	91 d3       	rcall	.+1826   	; 0x1d7a <vTaskSuspendAll>
    1658:	f4 01       	movw	r30, r8
    165a:	80 85       	ldd	r24, Z+8	; 0x08
    165c:	91 85       	ldd	r25, Z+9	; 0x09
    165e:	89 2b       	or	r24, r25
    1660:	71 f0       	breq	.+28     	; 0x167e <xStreamBufferSend+0x154>
    1662:	80 85       	ldd	r24, Z+8	; 0x08
    1664:	91 85       	ldd	r25, Z+9	; 0x09
    1666:	e1 2c       	mov	r14, r1
    1668:	f1 2c       	mov	r15, r1
    166a:	00 e0       	ldi	r16, 0x00	; 0
    166c:	20 e0       	ldi	r18, 0x00	; 0
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	a9 01       	movw	r20, r18
    1672:	60 e0       	ldi	r22, 0x00	; 0
    1674:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <xTaskGenericNotify>
    1678:	f4 01       	movw	r30, r8
    167a:	11 86       	std	Z+9, r1	; 0x09
    167c:	10 86       	std	Z+8, r1	; 0x08
    167e:	bd d4       	rcall	.+2426   	; 0x1ffa <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1680:	c6 01       	movw	r24, r12
    1682:	2b 96       	adiw	r28, 0x0b	; 11
    1684:	0f b6       	in	r0, 0x3f	; 63
    1686:	f8 94       	cli
    1688:	de bf       	out	0x3e, r29	; 62
    168a:	0f be       	out	0x3f, r0	; 63
    168c:	cd bf       	out	0x3d, r28	; 61
    168e:	df 91       	pop	r29
    1690:	cf 91       	pop	r28
    1692:	1f 91       	pop	r17
    1694:	0f 91       	pop	r16
    1696:	ff 90       	pop	r15
    1698:	ef 90       	pop	r14
    169a:	df 90       	pop	r13
    169c:	cf 90       	pop	r12
    169e:	bf 90       	pop	r11
    16a0:	af 90       	pop	r10
    16a2:	9f 90       	pop	r9
    16a4:	8f 90       	pop	r8
    16a6:	7f 90       	pop	r7
    16a8:	6f 90       	pop	r6
    16aa:	5f 90       	pop	r5
    16ac:	4f 90       	pop	r4
    16ae:	3f 90       	pop	r3
    16b0:	2f 90       	pop	r2
    16b2:	08 95       	ret

000016b4 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    16b4:	af 92       	push	r10
    16b6:	bf 92       	push	r11
    16b8:	cf 92       	push	r12
    16ba:	df 92       	push	r13
    16bc:	ef 92       	push	r14
    16be:	ff 92       	push	r15
    16c0:	0f 93       	push	r16
    16c2:	1f 93       	push	r17
    16c4:	cf 93       	push	r28
    16c6:	df 93       	push	r29
    16c8:	ec 01       	movw	r28, r24
    16ca:	7b 01       	movw	r14, r22
    16cc:	5a 01       	movw	r10, r20
    16ce:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    16d0:	8e 85       	ldd	r24, Y+14	; 0x0e
    16d2:	80 ff       	sbrs	r24, 0
    16d4:	04 c0       	rjmp	.+8      	; 0x16de <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    16d6:	8a 01       	movw	r16, r20
    16d8:	0e 5f       	subi	r16, 0xFE	; 254
    16da:	1f 4f       	sbci	r17, 0xFF	; 255
    16dc:	01 c0       	rjmp	.+2      	; 0x16e0 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    16de:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    16e0:	ce 01       	movw	r24, r28
    16e2:	11 df       	rcall	.-478    	; 0x1506 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    16e4:	9c 01       	movw	r18, r24
    16e6:	a5 01       	movw	r20, r10
    16e8:	b7 01       	movw	r22, r14
    16ea:	ce 01       	movw	r24, r28
    16ec:	e5 dd       	rcall	.-1078   	; 0x12b8 <prvWriteMessageToBuffer>
    16ee:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    16f0:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    16f2:	c1 f0       	breq	.+48     	; 0x1724 <xStreamBufferSendFromISR+0x70>
    16f4:	ce 01       	movw	r24, r28
    16f6:	74 dd       	rcall	.-1304   	; 0x11e0 <prvBytesInBuffer>
    16f8:	2e 81       	ldd	r18, Y+6	; 0x06
    16fa:	3f 81       	ldd	r19, Y+7	; 0x07
    16fc:	82 17       	cp	r24, r18
    16fe:	93 07       	cpc	r25, r19
    1700:	88 f0       	brcs	.+34     	; 0x1724 <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1702:	88 85       	ldd	r24, Y+8	; 0x08
    1704:	99 85       	ldd	r25, Y+9	; 0x09
    1706:	89 2b       	or	r24, r25
    1708:	69 f0       	breq	.+26     	; 0x1724 <xStreamBufferSendFromISR+0x70>
    170a:	88 85       	ldd	r24, Y+8	; 0x08
    170c:	99 85       	ldd	r25, Y+9	; 0x09
    170e:	e1 2c       	mov	r14, r1
    1710:	f1 2c       	mov	r15, r1
    1712:	00 e0       	ldi	r16, 0x00	; 0
    1714:	20 e0       	ldi	r18, 0x00	; 0
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	a9 01       	movw	r20, r18
    171a:	60 e0       	ldi	r22, 0x00	; 0
    171c:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <xTaskGenericNotifyFromISR>
    1720:	19 86       	std	Y+9, r1	; 0x09
    1722:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    1724:	c5 01       	movw	r24, r10
    1726:	df 91       	pop	r29
    1728:	cf 91       	pop	r28
    172a:	1f 91       	pop	r17
    172c:	0f 91       	pop	r16
    172e:	ff 90       	pop	r15
    1730:	ef 90       	pop	r14
    1732:	df 90       	pop	r13
    1734:	cf 90       	pop	r12
    1736:	bf 90       	pop	r11
    1738:	af 90       	pop	r10
    173a:	08 95       	ret

0000173c <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    173c:	4f 92       	push	r4
    173e:	5f 92       	push	r5
    1740:	6f 92       	push	r6
    1742:	7f 92       	push	r7
    1744:	8f 92       	push	r8
    1746:	9f 92       	push	r9
    1748:	af 92       	push	r10
    174a:	bf 92       	push	r11
    174c:	cf 92       	push	r12
    174e:	df 92       	push	r13
    1750:	ef 92       	push	r14
    1752:	ff 92       	push	r15
    1754:	0f 93       	push	r16
    1756:	1f 93       	push	r17
    1758:	cf 93       	push	r28
    175a:	df 93       	push	r29
    175c:	ec 01       	movw	r28, r24
    175e:	2b 01       	movw	r4, r22
    1760:	3a 01       	movw	r6, r20
    1762:	58 01       	movw	r10, r16
    1764:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1766:	8e 85       	ldd	r24, Y+14	; 0x0e
    1768:	80 ff       	sbrs	r24, 0
    176a:	05 c0       	rjmp	.+10     	; 0x1776 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    176c:	68 94       	set
    176e:	88 24       	eor	r8, r8
    1770:	81 f8       	bld	r8, 1
    1772:	91 2c       	mov	r9, r1
    1774:	02 c0       	rjmp	.+4      	; 0x177a <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1776:	81 2c       	mov	r8, r1
    1778:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    177a:	a1 14       	cp	r10, r1
    177c:	b1 04       	cpc	r11, r1
    177e:	c1 04       	cpc	r12, r1
    1780:	d1 04       	cpc	r13, r1
    1782:	41 f1       	breq	.+80     	; 0x17d4 <xStreamBufferReceive+0x98>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    1784:	0f b6       	in	r0, 0x3f	; 63
    1786:	f8 94       	cli
    1788:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    178a:	ce 01       	movw	r24, r28
    178c:	29 dd       	rcall	.-1454   	; 0x11e0 <prvBytesInBuffer>
    178e:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1790:	88 16       	cp	r8, r24
    1792:	99 06       	cpc	r9, r25
    1794:	48 f0       	brcs	.+18     	; 0x17a8 <xStreamBufferReceive+0x6c>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1796:	60 e0       	ldi	r22, 0x00	; 0
    1798:	80 e0       	ldi	r24, 0x00	; 0
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	0e 94 94 18 	call	0x3128	; 0x3128 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    17a0:	0e 94 3b 14 	call	0x2876	; 0x2876 <xTaskGetCurrentTaskHandle>
    17a4:	99 87       	std	Y+9, r25	; 0x09
    17a6:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    17a8:	0f 90       	pop	r0
    17aa:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    17ac:	8e 14       	cp	r8, r14
    17ae:	9f 04       	cpc	r9, r15
    17b0:	a0 f0       	brcs	.+40     	; 0x17da <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    17b2:	e1 2c       	mov	r14, r1
    17b4:	f1 2c       	mov	r15, r1
    17b6:	00 e0       	ldi	r16, 0x00	; 0
    17b8:	10 e0       	ldi	r17, 0x00	; 0
    17ba:	98 01       	movw	r18, r16
    17bc:	40 e0       	ldi	r20, 0x00	; 0
    17be:	50 e0       	ldi	r21, 0x00	; 0
    17c0:	ba 01       	movw	r22, r20
    17c2:	80 e0       	ldi	r24, 0x00	; 0
    17c4:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    17c8:	19 86       	std	Y+9, r1	; 0x09
    17ca:	18 86       	std	Y+8, r1	; 0x08

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    17cc:	ce 01       	movw	r24, r28
    17ce:	08 dd       	rcall	.-1520   	; 0x11e0 <prvBytesInBuffer>
    17d0:	7c 01       	movw	r14, r24
    17d2:	03 c0       	rjmp	.+6      	; 0x17da <xStreamBufferReceive+0x9e>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    17d4:	ce 01       	movw	r24, r28
    17d6:	04 dd       	rcall	.-1528   	; 0x11e0 <prvBytesInBuffer>
    17d8:	7c 01       	movw	r14, r24
    17da:	8e 14       	cp	r8, r14
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    17dc:	9f 04       	cpc	r9, r15
    17de:	e8 f4       	brcc	.+58     	; 0x181a <xStreamBufferReceive+0xde>
    17e0:	84 01       	movw	r16, r8
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    17e2:	97 01       	movw	r18, r14
    17e4:	a3 01       	movw	r20, r6
    17e6:	b2 01       	movw	r22, r4
    17e8:	ce 01       	movw	r24, r28
    17ea:	f8 dd       	rcall	.-1040   	; 0x13dc <prvReadMessageFromBuffer>
    17ec:	6c 01       	movw	r12, r24

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    17ee:	89 2b       	or	r24, r25
    17f0:	b1 f0       	breq	.+44     	; 0x181e <xStreamBufferReceive+0xe2>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    17f2:	c3 d2       	rcall	.+1414   	; 0x1d7a <vTaskSuspendAll>
    17f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    17f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    17f8:	89 2b       	or	r24, r25
    17fa:	69 f0       	breq	.+26     	; 0x1816 <xStreamBufferReceive+0xda>
    17fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    17fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    1800:	e1 2c       	mov	r14, r1
    1802:	f1 2c       	mov	r15, r1
    1804:	00 e0       	ldi	r16, 0x00	; 0
    1806:	20 e0       	ldi	r18, 0x00	; 0
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	a9 01       	movw	r20, r18
    180c:	60 e0       	ldi	r22, 0x00	; 0
    180e:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <xTaskGenericNotify>
    1812:	1b 86       	std	Y+11, r1	; 0x0b
    1814:	1a 86       	std	Y+10, r1	; 0x0a
    1816:	f1 d3       	rcall	.+2018   	; 0x1ffa <xTaskResumeAll>
    1818:	02 c0       	rjmp	.+4      	; 0x181e <xStreamBufferReceive+0xe2>
    181a:	c1 2c       	mov	r12, r1
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    181c:	d1 2c       	mov	r13, r1
    181e:	c6 01       	movw	r24, r12
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1820:	df 91       	pop	r29
    1822:	cf 91       	pop	r28
    1824:	1f 91       	pop	r17
    1826:	0f 91       	pop	r16
    1828:	ff 90       	pop	r15
    182a:	ef 90       	pop	r14
    182c:	df 90       	pop	r13
    182e:	cf 90       	pop	r12
    1830:	bf 90       	pop	r11
    1832:	af 90       	pop	r10
    1834:	9f 90       	pop	r9
    1836:	8f 90       	pop	r8
    1838:	7f 90       	pop	r7
    183a:	6f 90       	pop	r6
    183c:	5f 90       	pop	r5
    183e:	4f 90       	pop	r4
    1840:	08 95       	ret

00001842 <prvResetNextTaskUnblockTime>:
    1842:	e0 91 29 16 	lds	r30, 0x1629	; 0x801629 <pxDelayedTaskList>
    1846:	f0 91 2a 16 	lds	r31, 0x162A	; 0x80162a <pxDelayedTaskList+0x1>
    184a:	80 81       	ld	r24, Z
    184c:	81 11       	cpse	r24, r1
    184e:	0c c0       	rjmp	.+24     	; 0x1868 <prvResetNextTaskUnblockTime+0x26>
    1850:	8f ef       	ldi	r24, 0xFF	; 255
    1852:	9f ef       	ldi	r25, 0xFF	; 255
    1854:	dc 01       	movw	r26, r24
    1856:	80 93 f3 15 	sts	0x15F3, r24	; 0x8015f3 <xNextTaskUnblockTime>
    185a:	90 93 f4 15 	sts	0x15F4, r25	; 0x8015f4 <xNextTaskUnblockTime+0x1>
    185e:	a0 93 f5 15 	sts	0x15F5, r26	; 0x8015f5 <xNextTaskUnblockTime+0x2>
    1862:	b0 93 f6 15 	sts	0x15F6, r27	; 0x8015f6 <xNextTaskUnblockTime+0x3>
    1866:	08 95       	ret
    1868:	e0 91 29 16 	lds	r30, 0x1629	; 0x801629 <pxDelayedTaskList>
    186c:	f0 91 2a 16 	lds	r31, 0x162A	; 0x80162a <pxDelayedTaskList+0x1>
    1870:	07 80       	ldd	r0, Z+7	; 0x07
    1872:	f0 85       	ldd	r31, Z+8	; 0x08
    1874:	e0 2d       	mov	r30, r0
    1876:	80 81       	ld	r24, Z
    1878:	91 81       	ldd	r25, Z+1	; 0x01
    187a:	a2 81       	ldd	r26, Z+2	; 0x02
    187c:	b3 81       	ldd	r27, Z+3	; 0x03
    187e:	80 93 f3 15 	sts	0x15F3, r24	; 0x8015f3 <xNextTaskUnblockTime>
    1882:	90 93 f4 15 	sts	0x15F4, r25	; 0x8015f4 <xNextTaskUnblockTime+0x1>
    1886:	a0 93 f5 15 	sts	0x15F5, r26	; 0x8015f5 <xNextTaskUnblockTime+0x2>
    188a:	b0 93 f6 15 	sts	0x15F6, r27	; 0x8015f6 <xNextTaskUnblockTime+0x3>
    188e:	08 95       	ret

00001890 <prvDeleteTCB>:
    1890:	cf 93       	push	r28
    1892:	df 93       	push	r29
    1894:	ec 01       	movw	r28, r24
    1896:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1898:	9c 8d       	ldd	r25, Y+28	; 0x1c
    189a:	0e 94 86 03 	call	0x70c	; 0x70c <vPortFree>
    189e:	ce 01       	movw	r24, r28
    18a0:	0e 94 86 03 	call	0x70c	; 0x70c <vPortFree>
    18a4:	df 91       	pop	r29
    18a6:	cf 91       	pop	r28
    18a8:	08 95       	ret

000018aa <prvInitialiseNewTask>:
    18aa:	4f 92       	push	r4
    18ac:	5f 92       	push	r5
    18ae:	6f 92       	push	r6
    18b0:	7f 92       	push	r7
    18b2:	8f 92       	push	r8
    18b4:	9f 92       	push	r9
    18b6:	af 92       	push	r10
    18b8:	bf 92       	push	r11
    18ba:	cf 92       	push	r12
    18bc:	df 92       	push	r13
    18be:	ef 92       	push	r14
    18c0:	ff 92       	push	r15
    18c2:	0f 93       	push	r16
    18c4:	cf 93       	push	r28
    18c6:	df 93       	push	r29
    18c8:	2c 01       	movw	r4, r24
    18ca:	5b 01       	movw	r10, r22
    18cc:	4a 01       	movw	r8, r20
    18ce:	39 01       	movw	r6, r18
    18d0:	e6 01       	movw	r28, r12
    18d2:	65 ea       	ldi	r22, 0xA5	; 165
    18d4:	70 e0       	ldi	r23, 0x00	; 0
    18d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18da:	0e 94 b3 32 	call	0x6566	; 0x6566 <memset>
    18de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18e2:	21 e0       	ldi	r18, 0x01	; 1
    18e4:	82 1a       	sub	r8, r18
    18e6:	91 08       	sbc	r9, r1
    18e8:	88 0e       	add	r8, r24
    18ea:	99 1e       	adc	r9, r25
    18ec:	a1 14       	cp	r10, r1
    18ee:	b1 04       	cpc	r11, r1
    18f0:	89 f4       	brne	.+34     	; 0x1914 <prvInitialiseNewTask+0x6a>
    18f2:	15 c0       	rjmp	.+42     	; 0x191e <prvInitialiseNewTask+0x74>
    18f4:	82 2f       	mov	r24, r18
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	f5 01       	movw	r30, r10
    18fa:	e8 0f       	add	r30, r24
    18fc:	f9 1f       	adc	r31, r25
    18fe:	30 81       	ld	r19, Z
    1900:	de 01       	movw	r26, r28
    1902:	a8 0f       	add	r26, r24
    1904:	b9 1f       	adc	r27, r25
    1906:	5d 96       	adiw	r26, 0x1d	; 29
    1908:	3c 93       	st	X, r19
    190a:	80 81       	ld	r24, Z
    190c:	88 23       	and	r24, r24
    190e:	29 f0       	breq	.+10     	; 0x191a <prvInitialiseNewTask+0x70>
    1910:	2f 5f       	subi	r18, 0xFF	; 255
    1912:	01 c0       	rjmp	.+2      	; 0x1916 <prvInitialiseNewTask+0x6c>
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	20 31       	cpi	r18, 0x10	; 16
    1918:	68 f3       	brcs	.-38     	; 0x18f4 <prvInitialiseNewTask+0x4a>
    191a:	1c a6       	std	Y+44, r1	; 0x2c
    191c:	01 c0       	rjmp	.+2      	; 0x1920 <prvInitialiseNewTask+0x76>
    191e:	1d 8e       	std	Y+29, r1	; 0x1d
    1920:	0a 30       	cpi	r16, 0x0A	; 10
    1922:	08 f0       	brcs	.+2      	; 0x1926 <prvInitialiseNewTask+0x7c>
    1924:	09 e0       	ldi	r16, 0x09	; 9
    1926:	0a 8f       	std	Y+26, r16	; 0x1a
    1928:	0d a7       	std	Y+45, r16	; 0x2d
    192a:	1e a6       	std	Y+46, r1	; 0x2e
    192c:	ce 01       	movw	r24, r28
    192e:	02 96       	adiw	r24, 0x02	; 2
    1930:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <vListInitialiseItem>
    1934:	ce 01       	movw	r24, r28
    1936:	0e 96       	adiw	r24, 0x0e	; 14
    1938:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <vListInitialiseItem>
    193c:	db 87       	std	Y+11, r29	; 0x0b
    193e:	ca 87       	std	Y+10, r28	; 0x0a
    1940:	8a e0       	ldi	r24, 0x0A	; 10
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	a0 e0       	ldi	r26, 0x00	; 0
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	80 1b       	sub	r24, r16
    194a:	91 09       	sbc	r25, r1
    194c:	a1 09       	sbc	r26, r1
    194e:	b1 09       	sbc	r27, r1
    1950:	8e 87       	std	Y+14, r24	; 0x0e
    1952:	9f 87       	std	Y+15, r25	; 0x0f
    1954:	a8 8b       	std	Y+16, r26	; 0x10
    1956:	b9 8b       	std	Y+17, r27	; 0x11
    1958:	df 8b       	std	Y+23, r29	; 0x17
    195a:	ce 8b       	std	Y+22, r28	; 0x16
    195c:	84 e0       	ldi	r24, 0x04	; 4
    195e:	fe 01       	movw	r30, r28
    1960:	bf 96       	adiw	r30, 0x2f	; 47
    1962:	df 01       	movw	r26, r30
    1964:	1d 92       	st	X+, r1
    1966:	8a 95       	dec	r24
    1968:	e9 f7       	brne	.-6      	; 0x1964 <prvInitialiseNewTask+0xba>
    196a:	1b aa       	std	Y+51, r1	; 0x33
    196c:	a3 01       	movw	r20, r6
    196e:	b2 01       	movw	r22, r4
    1970:	c4 01       	movw	r24, r8
    1972:	0e 94 48 04 	call	0x890	; 0x890 <pxPortInitialiseStack>
    1976:	99 83       	std	Y+1, r25	; 0x01
    1978:	88 83       	st	Y, r24
    197a:	e1 14       	cp	r14, r1
    197c:	f1 04       	cpc	r15, r1
    197e:	19 f0       	breq	.+6      	; 0x1986 <prvInitialiseNewTask+0xdc>
    1980:	f7 01       	movw	r30, r14
    1982:	d1 83       	std	Z+1, r29	; 0x01
    1984:	c0 83       	st	Z, r28
    1986:	df 91       	pop	r29
    1988:	cf 91       	pop	r28
    198a:	0f 91       	pop	r16
    198c:	ff 90       	pop	r15
    198e:	ef 90       	pop	r14
    1990:	df 90       	pop	r13
    1992:	cf 90       	pop	r12
    1994:	bf 90       	pop	r11
    1996:	af 90       	pop	r10
    1998:	9f 90       	pop	r9
    199a:	8f 90       	pop	r8
    199c:	7f 90       	pop	r7
    199e:	6f 90       	pop	r6
    19a0:	5f 90       	pop	r5
    19a2:	4f 90       	pop	r4
    19a4:	08 95       	ret

000019a6 <prvInitialiseTaskLists>:
    19a6:	cf 93       	push	r28
    19a8:	c0 e0       	ldi	r28, 0x00	; 0
    19aa:	09 c0       	rjmp	.+18     	; 0x19be <prvInitialiseTaskLists+0x18>
    19ac:	2b e0       	ldi	r18, 0x0B	; 11
    19ae:	c2 9f       	mul	r28, r18
    19b0:	c0 01       	movw	r24, r0
    19b2:	11 24       	eor	r1, r1
    19b4:	8f 5b       	subi	r24, 0xBF	; 191
    19b6:	99 4e       	sbci	r25, 0xE9	; 233
    19b8:	0e 94 c3 03 	call	0x786	; 0x786 <vListInitialise>
    19bc:	cf 5f       	subi	r28, 0xFF	; 255
    19be:	ca 30       	cpi	r28, 0x0A	; 10
    19c0:	a8 f3       	brcs	.-22     	; 0x19ac <prvInitialiseTaskLists+0x6>
    19c2:	86 e3       	ldi	r24, 0x36	; 54
    19c4:	96 e1       	ldi	r25, 0x16	; 22
    19c6:	0e 94 c3 03 	call	0x786	; 0x786 <vListInitialise>
    19ca:	8b e2       	ldi	r24, 0x2B	; 43
    19cc:	96 e1       	ldi	r25, 0x16	; 22
    19ce:	0e 94 c3 03 	call	0x786	; 0x786 <vListInitialise>
    19d2:	8c e1       	ldi	r24, 0x1C	; 28
    19d4:	96 e1       	ldi	r25, 0x16	; 22
    19d6:	0e 94 c3 03 	call	0x786	; 0x786 <vListInitialise>
    19da:	81 e1       	ldi	r24, 0x11	; 17
    19dc:	96 e1       	ldi	r25, 0x16	; 22
    19de:	0e 94 c3 03 	call	0x786	; 0x786 <vListInitialise>
    19e2:	85 e0       	ldi	r24, 0x05	; 5
    19e4:	96 e1       	ldi	r25, 0x16	; 22
    19e6:	0e 94 c3 03 	call	0x786	; 0x786 <vListInitialise>
    19ea:	86 e3       	ldi	r24, 0x36	; 54
    19ec:	96 e1       	ldi	r25, 0x16	; 22
    19ee:	90 93 2a 16 	sts	0x162A, r25	; 0x80162a <pxDelayedTaskList+0x1>
    19f2:	80 93 29 16 	sts	0x1629, r24	; 0x801629 <pxDelayedTaskList>
    19f6:	8b e2       	ldi	r24, 0x2B	; 43
    19f8:	96 e1       	ldi	r25, 0x16	; 22
    19fa:	90 93 28 16 	sts	0x1628, r25	; 0x801628 <pxOverflowDelayedTaskList+0x1>
    19fe:	80 93 27 16 	sts	0x1627, r24	; 0x801627 <pxOverflowDelayedTaskList>
    1a02:	cf 91       	pop	r28
    1a04:	08 95       	ret

00001a06 <prvAddNewTaskToReadyList>:
    1a06:	cf 93       	push	r28
    1a08:	df 93       	push	r29
    1a0a:	ec 01       	movw	r28, r24
    1a0c:	0f b6       	in	r0, 0x3f	; 63
    1a0e:	f8 94       	cli
    1a10:	0f 92       	push	r0
    1a12:	80 91 04 16 	lds	r24, 0x1604	; 0x801604 <uxCurrentNumberOfTasks>
    1a16:	8f 5f       	subi	r24, 0xFF	; 255
    1a18:	80 93 04 16 	sts	0x1604, r24	; 0x801604 <uxCurrentNumberOfTasks>
    1a1c:	80 91 af 16 	lds	r24, 0x16AF	; 0x8016af <pxCurrentTCB>
    1a20:	90 91 b0 16 	lds	r25, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    1a24:	89 2b       	or	r24, r25
    1a26:	51 f4       	brne	.+20     	; 0x1a3c <prvAddNewTaskToReadyList+0x36>
    1a28:	d0 93 b0 16 	sts	0x16B0, r29	; 0x8016b0 <pxCurrentTCB+0x1>
    1a2c:	c0 93 af 16 	sts	0x16AF, r28	; 0x8016af <pxCurrentTCB>
    1a30:	80 91 04 16 	lds	r24, 0x1604	; 0x801604 <uxCurrentNumberOfTasks>
    1a34:	81 30       	cpi	r24, 0x01	; 1
    1a36:	91 f4       	brne	.+36     	; 0x1a5c <prvAddNewTaskToReadyList+0x56>
    1a38:	b6 df       	rcall	.-148    	; 0x19a6 <prvInitialiseTaskLists>
    1a3a:	10 c0       	rjmp	.+32     	; 0x1a5c <prvAddNewTaskToReadyList+0x56>
    1a3c:	80 91 fe 15 	lds	r24, 0x15FE	; 0x8015fe <xSchedulerRunning>
    1a40:	81 11       	cpse	r24, r1
    1a42:	0c c0       	rjmp	.+24     	; 0x1a5c <prvAddNewTaskToReadyList+0x56>
    1a44:	e0 91 af 16 	lds	r30, 0x16AF	; 0x8016af <pxCurrentTCB>
    1a48:	f0 91 b0 16 	lds	r31, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    1a4c:	92 8d       	ldd	r25, Z+26	; 0x1a
    1a4e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1a50:	89 17       	cp	r24, r25
    1a52:	20 f0       	brcs	.+8      	; 0x1a5c <prvAddNewTaskToReadyList+0x56>
    1a54:	d0 93 b0 16 	sts	0x16B0, r29	; 0x8016b0 <pxCurrentTCB+0x1>
    1a58:	c0 93 af 16 	sts	0x16AF, r28	; 0x8016af <pxCurrentTCB>
    1a5c:	80 91 f7 15 	lds	r24, 0x15F7	; 0x8015f7 <uxTaskNumber>
    1a60:	8f 5f       	subi	r24, 0xFF	; 255
    1a62:	80 93 f7 15 	sts	0x15F7, r24	; 0x8015f7 <uxTaskNumber>
    1a66:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1a68:	80 91 ff 15 	lds	r24, 0x15FF	; 0x8015ff <uxTopReadyPriority>
    1a6c:	8e 17       	cp	r24, r30
    1a6e:	10 f4       	brcc	.+4      	; 0x1a74 <prvAddNewTaskToReadyList+0x6e>
    1a70:	e0 93 ff 15 	sts	0x15FF, r30	; 0x8015ff <uxTopReadyPriority>
    1a74:	8b e0       	ldi	r24, 0x0B	; 11
    1a76:	8e 9f       	mul	r24, r30
    1a78:	f0 01       	movw	r30, r0
    1a7a:	11 24       	eor	r1, r1
    1a7c:	ef 5b       	subi	r30, 0xBF	; 191
    1a7e:	f9 4e       	sbci	r31, 0xE9	; 233
    1a80:	01 80       	ldd	r0, Z+1	; 0x01
    1a82:	f2 81       	ldd	r31, Z+2	; 0x02
    1a84:	e0 2d       	mov	r30, r0
    1a86:	ff 83       	std	Y+7, r31	; 0x07
    1a88:	ee 83       	std	Y+6, r30	; 0x06
    1a8a:	26 81       	ldd	r18, Z+6	; 0x06
    1a8c:	37 81       	ldd	r19, Z+7	; 0x07
    1a8e:	39 87       	std	Y+9, r19	; 0x09
    1a90:	28 87       	std	Y+8, r18	; 0x08
    1a92:	a6 81       	ldd	r26, Z+6	; 0x06
    1a94:	b7 81       	ldd	r27, Z+7	; 0x07
    1a96:	9e 01       	movw	r18, r28
    1a98:	2e 5f       	subi	r18, 0xFE	; 254
    1a9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a9c:	15 96       	adiw	r26, 0x05	; 5
    1a9e:	3c 93       	st	X, r19
    1aa0:	2e 93       	st	-X, r18
    1aa2:	14 97       	sbiw	r26, 0x04	; 4
    1aa4:	37 83       	std	Z+7, r19	; 0x07
    1aa6:	26 83       	std	Z+6, r18	; 0x06
    1aa8:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1aaa:	8e 9f       	mul	r24, r30
    1aac:	f0 01       	movw	r30, r0
    1aae:	11 24       	eor	r1, r1
    1ab0:	ef 5b       	subi	r30, 0xBF	; 191
    1ab2:	f9 4e       	sbci	r31, 0xE9	; 233
    1ab4:	fd 87       	std	Y+13, r31	; 0x0d
    1ab6:	ec 87       	std	Y+12, r30	; 0x0c
    1ab8:	80 81       	ld	r24, Z
    1aba:	8f 5f       	subi	r24, 0xFF	; 255
    1abc:	80 83       	st	Z, r24
    1abe:	0f 90       	pop	r0
    1ac0:	0f be       	out	0x3f, r0	; 63
    1ac2:	80 91 fe 15 	lds	r24, 0x15FE	; 0x8015fe <xSchedulerRunning>
    1ac6:	88 23       	and	r24, r24
    1ac8:	51 f0       	breq	.+20     	; 0x1ade <prvAddNewTaskToReadyList+0xd8>
    1aca:	e0 91 af 16 	lds	r30, 0x16AF	; 0x8016af <pxCurrentTCB>
    1ace:	f0 91 b0 16 	lds	r31, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    1ad2:	92 8d       	ldd	r25, Z+26	; 0x1a
    1ad4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1ad6:	98 17       	cp	r25, r24
    1ad8:	10 f4       	brcc	.+4      	; 0x1ade <prvAddNewTaskToReadyList+0xd8>
    1ada:	0e 94 91 04 	call	0x922	; 0x922 <vPortYield>
    1ade:	df 91       	pop	r29
    1ae0:	cf 91       	pop	r28
    1ae2:	08 95       	ret

00001ae4 <prvCheckTasksWaitingTermination>:
    1ae4:	cf 93       	push	r28
    1ae6:	df 93       	push	r29
    1ae8:	1b c0       	rjmp	.+54     	; 0x1b20 <prvCheckTasksWaitingTermination+0x3c>
    1aea:	0f b6       	in	r0, 0x3f	; 63
    1aec:	f8 94       	cli
    1aee:	0f 92       	push	r0
    1af0:	e0 91 18 16 	lds	r30, 0x1618	; 0x801618 <xTasksWaitingTermination+0x7>
    1af4:	f0 91 19 16 	lds	r31, 0x1619	; 0x801619 <xTasksWaitingTermination+0x8>
    1af8:	c0 85       	ldd	r28, Z+8	; 0x08
    1afa:	d1 85       	ldd	r29, Z+9	; 0x09
    1afc:	ce 01       	movw	r24, r28
    1afe:	02 96       	adiw	r24, 0x02	; 2
    1b00:	0e 94 15 04 	call	0x82a	; 0x82a <uxListRemove>
    1b04:	80 91 04 16 	lds	r24, 0x1604	; 0x801604 <uxCurrentNumberOfTasks>
    1b08:	81 50       	subi	r24, 0x01	; 1
    1b0a:	80 93 04 16 	sts	0x1604, r24	; 0x801604 <uxCurrentNumberOfTasks>
    1b0e:	80 91 10 16 	lds	r24, 0x1610	; 0x801610 <uxDeletedTasksWaitingCleanUp>
    1b12:	81 50       	subi	r24, 0x01	; 1
    1b14:	80 93 10 16 	sts	0x1610, r24	; 0x801610 <uxDeletedTasksWaitingCleanUp>
    1b18:	0f 90       	pop	r0
    1b1a:	0f be       	out	0x3f, r0	; 63
    1b1c:	ce 01       	movw	r24, r28
    1b1e:	b8 de       	rcall	.-656    	; 0x1890 <prvDeleteTCB>
    1b20:	80 91 10 16 	lds	r24, 0x1610	; 0x801610 <uxDeletedTasksWaitingCleanUp>
    1b24:	81 11       	cpse	r24, r1
    1b26:	e1 cf       	rjmp	.-62     	; 0x1aea <prvCheckTasksWaitingTermination+0x6>
    1b28:	df 91       	pop	r29
    1b2a:	cf 91       	pop	r28
    1b2c:	08 95       	ret

00001b2e <prvAddCurrentTaskToDelayedList>:
    1b2e:	8f 92       	push	r8
    1b30:	9f 92       	push	r9
    1b32:	af 92       	push	r10
    1b34:	bf 92       	push	r11
    1b36:	cf 92       	push	r12
    1b38:	df 92       	push	r13
    1b3a:	ef 92       	push	r14
    1b3c:	ff 92       	push	r15
    1b3e:	cf 93       	push	r28
    1b40:	df 93       	push	r29
    1b42:	6b 01       	movw	r12, r22
    1b44:	7c 01       	movw	r14, r24
    1b46:	c4 2f       	mov	r28, r20
    1b48:	80 90 00 16 	lds	r8, 0x1600	; 0x801600 <xTickCount>
    1b4c:	90 90 01 16 	lds	r9, 0x1601	; 0x801601 <xTickCount+0x1>
    1b50:	a0 90 02 16 	lds	r10, 0x1602	; 0x801602 <xTickCount+0x2>
    1b54:	b0 90 03 16 	lds	r11, 0x1603	; 0x801603 <xTickCount+0x3>
    1b58:	80 91 af 16 	lds	r24, 0x16AF	; 0x8016af <pxCurrentTCB>
    1b5c:	90 91 b0 16 	lds	r25, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    1b60:	02 96       	adiw	r24, 0x02	; 2
    1b62:	0e 94 15 04 	call	0x82a	; 0x82a <uxListRemove>
    1b66:	8f ef       	ldi	r24, 0xFF	; 255
    1b68:	c8 16       	cp	r12, r24
    1b6a:	d8 06       	cpc	r13, r24
    1b6c:	e8 06       	cpc	r14, r24
    1b6e:	f8 06       	cpc	r15, r24
    1b70:	b1 f5       	brne	.+108    	; 0x1bde <prvAddCurrentTaskToDelayedList+0xb0>
    1b72:	cc 23       	and	r28, r28
    1b74:	a1 f1       	breq	.+104    	; 0x1bde <prvAddCurrentTaskToDelayedList+0xb0>
    1b76:	e5 e0       	ldi	r30, 0x05	; 5
    1b78:	f6 e1       	ldi	r31, 0x16	; 22
    1b7a:	a1 81       	ldd	r26, Z+1	; 0x01
    1b7c:	b2 81       	ldd	r27, Z+2	; 0x02
    1b7e:	c0 91 af 16 	lds	r28, 0x16AF	; 0x8016af <pxCurrentTCB>
    1b82:	d0 91 b0 16 	lds	r29, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    1b86:	bf 83       	std	Y+7, r27	; 0x07
    1b88:	ae 83       	std	Y+6, r26	; 0x06
    1b8a:	c0 91 af 16 	lds	r28, 0x16AF	; 0x8016af <pxCurrentTCB>
    1b8e:	d0 91 b0 16 	lds	r29, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    1b92:	16 96       	adiw	r26, 0x06	; 6
    1b94:	8d 91       	ld	r24, X+
    1b96:	9c 91       	ld	r25, X
    1b98:	17 97       	sbiw	r26, 0x07	; 7
    1b9a:	99 87       	std	Y+9, r25	; 0x09
    1b9c:	88 87       	std	Y+8, r24	; 0x08
    1b9e:	16 96       	adiw	r26, 0x06	; 6
    1ba0:	cd 91       	ld	r28, X+
    1ba2:	dc 91       	ld	r29, X
    1ba4:	17 97       	sbiw	r26, 0x07	; 7
    1ba6:	80 91 af 16 	lds	r24, 0x16AF	; 0x8016af <pxCurrentTCB>
    1baa:	90 91 b0 16 	lds	r25, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    1bae:	02 96       	adiw	r24, 0x02	; 2
    1bb0:	9d 83       	std	Y+5, r25	; 0x05
    1bb2:	8c 83       	std	Y+4, r24	; 0x04
    1bb4:	80 91 af 16 	lds	r24, 0x16AF	; 0x8016af <pxCurrentTCB>
    1bb8:	90 91 b0 16 	lds	r25, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    1bbc:	02 96       	adiw	r24, 0x02	; 2
    1bbe:	17 96       	adiw	r26, 0x07	; 7
    1bc0:	9c 93       	st	X, r25
    1bc2:	8e 93       	st	-X, r24
    1bc4:	16 97       	sbiw	r26, 0x06	; 6
    1bc6:	a0 91 af 16 	lds	r26, 0x16AF	; 0x8016af <pxCurrentTCB>
    1bca:	b0 91 b0 16 	lds	r27, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    1bce:	1d 96       	adiw	r26, 0x0d	; 13
    1bd0:	fc 93       	st	X, r31
    1bd2:	ee 93       	st	-X, r30
    1bd4:	1c 97       	sbiw	r26, 0x0c	; 12
    1bd6:	80 81       	ld	r24, Z
    1bd8:	8f 5f       	subi	r24, 0xFF	; 255
    1bda:	80 83       	st	Z, r24
    1bdc:	3f c0       	rjmp	.+126    	; 0x1c5c <prvAddCurrentTaskToDelayedList+0x12e>
    1bde:	c8 0c       	add	r12, r8
    1be0:	d9 1c       	adc	r13, r9
    1be2:	ea 1c       	adc	r14, r10
    1be4:	fb 1c       	adc	r15, r11
    1be6:	e0 91 af 16 	lds	r30, 0x16AF	; 0x8016af <pxCurrentTCB>
    1bea:	f0 91 b0 16 	lds	r31, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    1bee:	c2 82       	std	Z+2, r12	; 0x02
    1bf0:	d3 82       	std	Z+3, r13	; 0x03
    1bf2:	e4 82       	std	Z+4, r14	; 0x04
    1bf4:	f5 82       	std	Z+5, r15	; 0x05
    1bf6:	c8 14       	cp	r12, r8
    1bf8:	d9 04       	cpc	r13, r9
    1bfa:	ea 04       	cpc	r14, r10
    1bfc:	fb 04       	cpc	r15, r11
    1bfe:	68 f4       	brcc	.+26     	; 0x1c1a <prvAddCurrentTaskToDelayedList+0xec>
    1c00:	60 91 af 16 	lds	r22, 0x16AF	; 0x8016af <pxCurrentTCB>
    1c04:	70 91 b0 16 	lds	r23, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    1c08:	80 91 27 16 	lds	r24, 0x1627	; 0x801627 <pxOverflowDelayedTaskList>
    1c0c:	90 91 28 16 	lds	r25, 0x1628	; 0x801628 <pxOverflowDelayedTaskList+0x1>
    1c10:	6e 5f       	subi	r22, 0xFE	; 254
    1c12:	7f 4f       	sbci	r23, 0xFF	; 255
    1c14:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <vListInsert>
    1c18:	21 c0       	rjmp	.+66     	; 0x1c5c <prvAddCurrentTaskToDelayedList+0x12e>
    1c1a:	60 91 af 16 	lds	r22, 0x16AF	; 0x8016af <pxCurrentTCB>
    1c1e:	70 91 b0 16 	lds	r23, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    1c22:	80 91 29 16 	lds	r24, 0x1629	; 0x801629 <pxDelayedTaskList>
    1c26:	90 91 2a 16 	lds	r25, 0x162A	; 0x80162a <pxDelayedTaskList+0x1>
    1c2a:	6e 5f       	subi	r22, 0xFE	; 254
    1c2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c2e:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <vListInsert>
    1c32:	80 91 f3 15 	lds	r24, 0x15F3	; 0x8015f3 <xNextTaskUnblockTime>
    1c36:	90 91 f4 15 	lds	r25, 0x15F4	; 0x8015f4 <xNextTaskUnblockTime+0x1>
    1c3a:	a0 91 f5 15 	lds	r26, 0x15F5	; 0x8015f5 <xNextTaskUnblockTime+0x2>
    1c3e:	b0 91 f6 15 	lds	r27, 0x15F6	; 0x8015f6 <xNextTaskUnblockTime+0x3>
    1c42:	c8 16       	cp	r12, r24
    1c44:	d9 06       	cpc	r13, r25
    1c46:	ea 06       	cpc	r14, r26
    1c48:	fb 06       	cpc	r15, r27
    1c4a:	40 f4       	brcc	.+16     	; 0x1c5c <prvAddCurrentTaskToDelayedList+0x12e>
    1c4c:	c0 92 f3 15 	sts	0x15F3, r12	; 0x8015f3 <xNextTaskUnblockTime>
    1c50:	d0 92 f4 15 	sts	0x15F4, r13	; 0x8015f4 <xNextTaskUnblockTime+0x1>
    1c54:	e0 92 f5 15 	sts	0x15F5, r14	; 0x8015f5 <xNextTaskUnblockTime+0x2>
    1c58:	f0 92 f6 15 	sts	0x15F6, r15	; 0x8015f6 <xNextTaskUnblockTime+0x3>
    1c5c:	df 91       	pop	r29
    1c5e:	cf 91       	pop	r28
    1c60:	ff 90       	pop	r15
    1c62:	ef 90       	pop	r14
    1c64:	df 90       	pop	r13
    1c66:	cf 90       	pop	r12
    1c68:	bf 90       	pop	r11
    1c6a:	af 90       	pop	r10
    1c6c:	9f 90       	pop	r9
    1c6e:	8f 90       	pop	r8
    1c70:	08 95       	ret

00001c72 <xTaskCreate>:
    1c72:	2f 92       	push	r2
    1c74:	3f 92       	push	r3
    1c76:	4f 92       	push	r4
    1c78:	5f 92       	push	r5
    1c7a:	6f 92       	push	r6
    1c7c:	7f 92       	push	r7
    1c7e:	8f 92       	push	r8
    1c80:	9f 92       	push	r9
    1c82:	af 92       	push	r10
    1c84:	bf 92       	push	r11
    1c86:	cf 92       	push	r12
    1c88:	df 92       	push	r13
    1c8a:	ef 92       	push	r14
    1c8c:	ff 92       	push	r15
    1c8e:	0f 93       	push	r16
    1c90:	cf 93       	push	r28
    1c92:	df 93       	push	r29
    1c94:	3c 01       	movw	r6, r24
    1c96:	1b 01       	movw	r2, r22
    1c98:	4a 01       	movw	r8, r20
    1c9a:	29 01       	movw	r4, r18
    1c9c:	ca 01       	movw	r24, r20
    1c9e:	0e 94 dd 02 	call	0x5ba	; 0x5ba <pvPortMalloc>
    1ca2:	6c 01       	movw	r12, r24
    1ca4:	89 2b       	or	r24, r25
    1ca6:	71 f0       	breq	.+28     	; 0x1cc4 <xTaskCreate+0x52>
    1ca8:	84 e3       	ldi	r24, 0x34	; 52
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	0e 94 dd 02 	call	0x5ba	; 0x5ba <pvPortMalloc>
    1cb0:	ec 01       	movw	r28, r24
    1cb2:	89 2b       	or	r24, r25
    1cb4:	19 f0       	breq	.+6      	; 0x1cbc <xTaskCreate+0x4a>
    1cb6:	dc 8e       	std	Y+28, r13	; 0x1c
    1cb8:	cb 8e       	std	Y+27, r12	; 0x1b
    1cba:	06 c0       	rjmp	.+12     	; 0x1cc8 <xTaskCreate+0x56>
    1cbc:	c6 01       	movw	r24, r12
    1cbe:	0e 94 86 03 	call	0x70c	; 0x70c <vPortFree>
    1cc2:	02 c0       	rjmp	.+4      	; 0x1cc8 <xTaskCreate+0x56>
    1cc4:	c0 e0       	ldi	r28, 0x00	; 0
    1cc6:	d0 e0       	ldi	r29, 0x00	; 0
    1cc8:	20 97       	sbiw	r28, 0x00	; 0
    1cca:	61 f0       	breq	.+24     	; 0x1ce4 <xTaskCreate+0x72>
    1ccc:	a1 2c       	mov	r10, r1
    1cce:	b1 2c       	mov	r11, r1
    1cd0:	6e 01       	movw	r12, r28
    1cd2:	92 01       	movw	r18, r4
    1cd4:	a4 01       	movw	r20, r8
    1cd6:	b1 01       	movw	r22, r2
    1cd8:	c3 01       	movw	r24, r6
    1cda:	e7 dd       	rcall	.-1074   	; 0x18aa <prvInitialiseNewTask>
    1cdc:	ce 01       	movw	r24, r28
    1cde:	93 de       	rcall	.-730    	; 0x1a06 <prvAddNewTaskToReadyList>
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	01 c0       	rjmp	.+2      	; 0x1ce6 <xTaskCreate+0x74>
    1ce4:	8f ef       	ldi	r24, 0xFF	; 255
    1ce6:	df 91       	pop	r29
    1ce8:	cf 91       	pop	r28
    1cea:	0f 91       	pop	r16
    1cec:	ff 90       	pop	r15
    1cee:	ef 90       	pop	r14
    1cf0:	df 90       	pop	r13
    1cf2:	cf 90       	pop	r12
    1cf4:	bf 90       	pop	r11
    1cf6:	af 90       	pop	r10
    1cf8:	9f 90       	pop	r9
    1cfa:	8f 90       	pop	r8
    1cfc:	7f 90       	pop	r7
    1cfe:	6f 90       	pop	r6
    1d00:	5f 90       	pop	r5
    1d02:	4f 90       	pop	r4
    1d04:	3f 90       	pop	r3
    1d06:	2f 90       	pop	r2
    1d08:	08 95       	ret

00001d0a <vTaskStartScheduler>:
    1d0a:	ef 92       	push	r14
    1d0c:	ff 92       	push	r15
    1d0e:	0f 93       	push	r16
    1d10:	0f 2e       	mov	r0, r31
    1d12:	f1 ef       	ldi	r31, 0xF1	; 241
    1d14:	ef 2e       	mov	r14, r31
    1d16:	f5 e1       	ldi	r31, 0x15	; 21
    1d18:	ff 2e       	mov	r15, r31
    1d1a:	f0 2d       	mov	r31, r0
    1d1c:	00 e0       	ldi	r16, 0x00	; 0
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	40 ec       	ldi	r20, 0xC0	; 192
    1d24:	50 e0       	ldi	r21, 0x00	; 0
    1d26:	6f e6       	ldi	r22, 0x6F	; 111
    1d28:	72 e0       	ldi	r23, 0x02	; 2
    1d2a:	8d ec       	ldi	r24, 0xCD	; 205
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	a1 df       	rcall	.-190    	; 0x1c72 <xTaskCreate>
    1d30:	81 30       	cpi	r24, 0x01	; 1
    1d32:	11 f4       	brne	.+4      	; 0x1d38 <vTaskStartScheduler+0x2e>
    1d34:	0e 94 38 19 	call	0x3270	; 0x3270 <xTimerCreateTimerTask>
    1d38:	81 30       	cpi	r24, 0x01	; 1
    1d3a:	c9 f4       	brne	.+50     	; 0x1d6e <vTaskStartScheduler+0x64>
    1d3c:	f8 94       	cli
    1d3e:	8f ef       	ldi	r24, 0xFF	; 255
    1d40:	9f ef       	ldi	r25, 0xFF	; 255
    1d42:	dc 01       	movw	r26, r24
    1d44:	80 93 f3 15 	sts	0x15F3, r24	; 0x8015f3 <xNextTaskUnblockTime>
    1d48:	90 93 f4 15 	sts	0x15F4, r25	; 0x8015f4 <xNextTaskUnblockTime+0x1>
    1d4c:	a0 93 f5 15 	sts	0x15F5, r26	; 0x8015f5 <xNextTaskUnblockTime+0x2>
    1d50:	b0 93 f6 15 	sts	0x15F6, r27	; 0x8015f6 <xNextTaskUnblockTime+0x3>
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	80 93 fe 15 	sts	0x15FE, r24	; 0x8015fe <xSchedulerRunning>
    1d5a:	10 92 00 16 	sts	0x1600, r1	; 0x801600 <xTickCount>
    1d5e:	10 92 01 16 	sts	0x1601, r1	; 0x801601 <xTickCount+0x1>
    1d62:	10 92 02 16 	sts	0x1602, r1	; 0x801602 <xTickCount+0x2>
    1d66:	10 92 03 16 	sts	0x1603, r1	; 0x801603 <xTickCount+0x3>
    1d6a:	0e 94 5f 04 	call	0x8be	; 0x8be <xPortStartScheduler>
    1d6e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1d72:	0f 91       	pop	r16
    1d74:	ff 90       	pop	r15
    1d76:	ef 90       	pop	r14
    1d78:	08 95       	ret

00001d7a <vTaskSuspendAll>:
    1d7a:	80 91 f0 15 	lds	r24, 0x15F0	; 0x8015f0 <uxSchedulerSuspended>
    1d7e:	8f 5f       	subi	r24, 0xFF	; 255
    1d80:	80 93 f0 15 	sts	0x15F0, r24	; 0x8015f0 <uxSchedulerSuspended>
    1d84:	08 95       	ret

00001d86 <xTaskGetTickCount>:
    1d86:	0f b6       	in	r0, 0x3f	; 63
    1d88:	f8 94       	cli
    1d8a:	0f 92       	push	r0
    1d8c:	60 91 00 16 	lds	r22, 0x1600	; 0x801600 <xTickCount>
    1d90:	70 91 01 16 	lds	r23, 0x1601	; 0x801601 <xTickCount+0x1>
    1d94:	80 91 02 16 	lds	r24, 0x1602	; 0x801602 <xTickCount+0x2>
    1d98:	90 91 03 16 	lds	r25, 0x1603	; 0x801603 <xTickCount+0x3>
    1d9c:	0f 90       	pop	r0
    1d9e:	0f be       	out	0x3f, r0	; 63
    1da0:	08 95       	ret

00001da2 <xTaskIncrementTick>:
    1da2:	cf 92       	push	r12
    1da4:	df 92       	push	r13
    1da6:	ef 92       	push	r14
    1da8:	ff 92       	push	r15
    1daa:	cf 93       	push	r28
    1dac:	df 93       	push	r29
    1dae:	80 91 f0 15 	lds	r24, 0x15F0	; 0x8015f0 <uxSchedulerSuspended>
    1db2:	81 11       	cpse	r24, r1
    1db4:	05 c1       	rjmp	.+522    	; 0x1fc0 <xTaskIncrementTick+0x21e>
    1db6:	c0 90 00 16 	lds	r12, 0x1600	; 0x801600 <xTickCount>
    1dba:	d0 90 01 16 	lds	r13, 0x1601	; 0x801601 <xTickCount+0x1>
    1dbe:	e0 90 02 16 	lds	r14, 0x1602	; 0x801602 <xTickCount+0x2>
    1dc2:	f0 90 03 16 	lds	r15, 0x1603	; 0x801603 <xTickCount+0x3>
    1dc6:	8f ef       	ldi	r24, 0xFF	; 255
    1dc8:	c8 1a       	sub	r12, r24
    1dca:	d8 0a       	sbc	r13, r24
    1dcc:	e8 0a       	sbc	r14, r24
    1dce:	f8 0a       	sbc	r15, r24
    1dd0:	c0 92 00 16 	sts	0x1600, r12	; 0x801600 <xTickCount>
    1dd4:	d0 92 01 16 	sts	0x1601, r13	; 0x801601 <xTickCount+0x1>
    1dd8:	e0 92 02 16 	sts	0x1602, r14	; 0x801602 <xTickCount+0x2>
    1ddc:	f0 92 03 16 	sts	0x1603, r15	; 0x801603 <xTickCount+0x3>
    1de0:	c1 14       	cp	r12, r1
    1de2:	d1 04       	cpc	r13, r1
    1de4:	e1 04       	cpc	r14, r1
    1de6:	f1 04       	cpc	r15, r1
    1de8:	b1 f4       	brne	.+44     	; 0x1e16 <xTaskIncrementTick+0x74>
    1dea:	80 91 29 16 	lds	r24, 0x1629	; 0x801629 <pxDelayedTaskList>
    1dee:	90 91 2a 16 	lds	r25, 0x162A	; 0x80162a <pxDelayedTaskList+0x1>
    1df2:	20 91 27 16 	lds	r18, 0x1627	; 0x801627 <pxOverflowDelayedTaskList>
    1df6:	30 91 28 16 	lds	r19, 0x1628	; 0x801628 <pxOverflowDelayedTaskList+0x1>
    1dfa:	30 93 2a 16 	sts	0x162A, r19	; 0x80162a <pxDelayedTaskList+0x1>
    1dfe:	20 93 29 16 	sts	0x1629, r18	; 0x801629 <pxDelayedTaskList>
    1e02:	90 93 28 16 	sts	0x1628, r25	; 0x801628 <pxOverflowDelayedTaskList+0x1>
    1e06:	80 93 27 16 	sts	0x1627, r24	; 0x801627 <pxOverflowDelayedTaskList>
    1e0a:	80 91 f8 15 	lds	r24, 0x15F8	; 0x8015f8 <xNumOfOverflows>
    1e0e:	8f 5f       	subi	r24, 0xFF	; 255
    1e10:	80 93 f8 15 	sts	0x15F8, r24	; 0x8015f8 <xNumOfOverflows>
    1e14:	16 dd       	rcall	.-1492   	; 0x1842 <prvResetNextTaskUnblockTime>
    1e16:	80 91 f3 15 	lds	r24, 0x15F3	; 0x8015f3 <xNextTaskUnblockTime>
    1e1a:	90 91 f4 15 	lds	r25, 0x15F4	; 0x8015f4 <xNextTaskUnblockTime+0x1>
    1e1e:	a0 91 f5 15 	lds	r26, 0x15F5	; 0x8015f5 <xNextTaskUnblockTime+0x2>
    1e22:	b0 91 f6 15 	lds	r27, 0x15F6	; 0x8015f6 <xNextTaskUnblockTime+0x3>
    1e26:	c8 16       	cp	r12, r24
    1e28:	d9 06       	cpc	r13, r25
    1e2a:	ea 06       	cpc	r14, r26
    1e2c:	fb 06       	cpc	r15, r27
    1e2e:	20 f4       	brcc	.+8      	; 0x1e38 <xTaskIncrementTick+0x96>
    1e30:	80 e0       	ldi	r24, 0x00	; 0
    1e32:	b2 c0       	rjmp	.+356    	; 0x1f98 <xTaskIncrementTick+0x1f6>
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	01 c0       	rjmp	.+2      	; 0x1e3a <xTaskIncrementTick+0x98>
    1e38:	80 e0       	ldi	r24, 0x00	; 0
    1e3a:	e0 91 29 16 	lds	r30, 0x1629	; 0x801629 <pxDelayedTaskList>
    1e3e:	f0 91 2a 16 	lds	r31, 0x162A	; 0x80162a <pxDelayedTaskList+0x1>
    1e42:	90 81       	ld	r25, Z
    1e44:	91 11       	cpse	r25, r1
    1e46:	0c c0       	rjmp	.+24     	; 0x1e60 <xTaskIncrementTick+0xbe>
    1e48:	4f ef       	ldi	r20, 0xFF	; 255
    1e4a:	5f ef       	ldi	r21, 0xFF	; 255
    1e4c:	ba 01       	movw	r22, r20
    1e4e:	40 93 f3 15 	sts	0x15F3, r20	; 0x8015f3 <xNextTaskUnblockTime>
    1e52:	50 93 f4 15 	sts	0x15F4, r21	; 0x8015f4 <xNextTaskUnblockTime+0x1>
    1e56:	60 93 f5 15 	sts	0x15F5, r22	; 0x8015f5 <xNextTaskUnblockTime+0x2>
    1e5a:	70 93 f6 15 	sts	0x15F6, r23	; 0x8015f6 <xNextTaskUnblockTime+0x3>
    1e5e:	9c c0       	rjmp	.+312    	; 0x1f98 <xTaskIncrementTick+0x1f6>
    1e60:	e0 91 29 16 	lds	r30, 0x1629	; 0x801629 <pxDelayedTaskList>
    1e64:	f0 91 2a 16 	lds	r31, 0x162A	; 0x80162a <pxDelayedTaskList+0x1>
    1e68:	07 80       	ldd	r0, Z+7	; 0x07
    1e6a:	f0 85       	ldd	r31, Z+8	; 0x08
    1e6c:	e0 2d       	mov	r30, r0
    1e6e:	00 84       	ldd	r0, Z+8	; 0x08
    1e70:	f1 85       	ldd	r31, Z+9	; 0x09
    1e72:	e0 2d       	mov	r30, r0
    1e74:	42 81       	ldd	r20, Z+2	; 0x02
    1e76:	53 81       	ldd	r21, Z+3	; 0x03
    1e78:	64 81       	ldd	r22, Z+4	; 0x04
    1e7a:	75 81       	ldd	r23, Z+5	; 0x05
    1e7c:	c4 16       	cp	r12, r20
    1e7e:	d5 06       	cpc	r13, r21
    1e80:	e6 06       	cpc	r14, r22
    1e82:	f7 06       	cpc	r15, r23
    1e84:	48 f4       	brcc	.+18     	; 0x1e98 <xTaskIncrementTick+0xf6>
    1e86:	40 93 f3 15 	sts	0x15F3, r20	; 0x8015f3 <xNextTaskUnblockTime>
    1e8a:	50 93 f4 15 	sts	0x15F4, r21	; 0x8015f4 <xNextTaskUnblockTime+0x1>
    1e8e:	60 93 f5 15 	sts	0x15F5, r22	; 0x8015f5 <xNextTaskUnblockTime+0x2>
    1e92:	70 93 f6 15 	sts	0x15F6, r23	; 0x8015f6 <xNextTaskUnblockTime+0x3>
    1e96:	80 c0       	rjmp	.+256    	; 0x1f98 <xTaskIncrementTick+0x1f6>
    1e98:	a4 85       	ldd	r26, Z+12	; 0x0c
    1e9a:	b5 85       	ldd	r27, Z+13	; 0x0d
    1e9c:	c6 81       	ldd	r28, Z+6	; 0x06
    1e9e:	d7 81       	ldd	r29, Z+7	; 0x07
    1ea0:	20 85       	ldd	r18, Z+8	; 0x08
    1ea2:	31 85       	ldd	r19, Z+9	; 0x09
    1ea4:	3f 83       	std	Y+7, r19	; 0x07
    1ea6:	2e 83       	std	Y+6, r18	; 0x06
    1ea8:	c0 85       	ldd	r28, Z+8	; 0x08
    1eaa:	d1 85       	ldd	r29, Z+9	; 0x09
    1eac:	26 81       	ldd	r18, Z+6	; 0x06
    1eae:	37 81       	ldd	r19, Z+7	; 0x07
    1eb0:	3d 83       	std	Y+5, r19	; 0x05
    1eb2:	2c 83       	std	Y+4, r18	; 0x04
    1eb4:	11 96       	adiw	r26, 0x01	; 1
    1eb6:	4d 91       	ld	r20, X+
    1eb8:	5c 91       	ld	r21, X
    1eba:	12 97       	sbiw	r26, 0x02	; 2
    1ebc:	9f 01       	movw	r18, r30
    1ebe:	2e 5f       	subi	r18, 0xFE	; 254
    1ec0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ec2:	42 17       	cp	r20, r18
    1ec4:	53 07       	cpc	r21, r19
    1ec6:	31 f4       	brne	.+12     	; 0x1ed4 <xTaskIncrementTick+0x132>
    1ec8:	40 85       	ldd	r20, Z+8	; 0x08
    1eca:	51 85       	ldd	r21, Z+9	; 0x09
    1ecc:	12 96       	adiw	r26, 0x02	; 2
    1ece:	5c 93       	st	X, r21
    1ed0:	4e 93       	st	-X, r20
    1ed2:	11 97       	sbiw	r26, 0x01	; 1
    1ed4:	15 86       	std	Z+13, r1	; 0x0d
    1ed6:	14 86       	std	Z+12, r1	; 0x0c
    1ed8:	9c 91       	ld	r25, X
    1eda:	91 50       	subi	r25, 0x01	; 1
    1edc:	9c 93       	st	X, r25
    1ede:	a0 8d       	ldd	r26, Z+24	; 0x18
    1ee0:	b1 8d       	ldd	r27, Z+25	; 0x19
    1ee2:	10 97       	sbiw	r26, 0x00	; 0
    1ee4:	09 f1       	breq	.+66     	; 0x1f28 <xTaskIncrementTick+0x186>
    1ee6:	c2 89       	ldd	r28, Z+18	; 0x12
    1ee8:	d3 89       	ldd	r29, Z+19	; 0x13
    1eea:	44 89       	ldd	r20, Z+20	; 0x14
    1eec:	55 89       	ldd	r21, Z+21	; 0x15
    1eee:	5f 83       	std	Y+7, r21	; 0x07
    1ef0:	4e 83       	std	Y+6, r20	; 0x06
    1ef2:	c4 89       	ldd	r28, Z+20	; 0x14
    1ef4:	d5 89       	ldd	r29, Z+21	; 0x15
    1ef6:	42 89       	ldd	r20, Z+18	; 0x12
    1ef8:	53 89       	ldd	r21, Z+19	; 0x13
    1efa:	5d 83       	std	Y+5, r21	; 0x05
    1efc:	4c 83       	std	Y+4, r20	; 0x04
    1efe:	11 96       	adiw	r26, 0x01	; 1
    1f00:	6d 91       	ld	r22, X+
    1f02:	7c 91       	ld	r23, X
    1f04:	12 97       	sbiw	r26, 0x02	; 2
    1f06:	af 01       	movw	r20, r30
    1f08:	42 5f       	subi	r20, 0xF2	; 242
    1f0a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f0c:	64 17       	cp	r22, r20
    1f0e:	75 07       	cpc	r23, r21
    1f10:	31 f4       	brne	.+12     	; 0x1f1e <xTaskIncrementTick+0x17c>
    1f12:	44 89       	ldd	r20, Z+20	; 0x14
    1f14:	55 89       	ldd	r21, Z+21	; 0x15
    1f16:	12 96       	adiw	r26, 0x02	; 2
    1f18:	5c 93       	st	X, r21
    1f1a:	4e 93       	st	-X, r20
    1f1c:	11 97       	sbiw	r26, 0x01	; 1
    1f1e:	11 8e       	std	Z+25, r1	; 0x19
    1f20:	10 8e       	std	Z+24, r1	; 0x18
    1f22:	9c 91       	ld	r25, X
    1f24:	91 50       	subi	r25, 0x01	; 1
    1f26:	9c 93       	st	X, r25
    1f28:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1f2a:	90 91 ff 15 	lds	r25, 0x15FF	; 0x8015ff <uxTopReadyPriority>
    1f2e:	9a 17       	cp	r25, r26
    1f30:	10 f4       	brcc	.+4      	; 0x1f36 <xTaskIncrementTick+0x194>
    1f32:	a0 93 ff 15 	sts	0x15FF, r26	; 0x8015ff <uxTopReadyPriority>
    1f36:	9b e0       	ldi	r25, 0x0B	; 11
    1f38:	9a 9f       	mul	r25, r26
    1f3a:	d0 01       	movw	r26, r0
    1f3c:	11 24       	eor	r1, r1
    1f3e:	af 5b       	subi	r26, 0xBF	; 191
    1f40:	b9 4e       	sbci	r27, 0xE9	; 233
    1f42:	11 96       	adiw	r26, 0x01	; 1
    1f44:	0d 90       	ld	r0, X+
    1f46:	bc 91       	ld	r27, X
    1f48:	a0 2d       	mov	r26, r0
    1f4a:	b7 83       	std	Z+7, r27	; 0x07
    1f4c:	a6 83       	std	Z+6, r26	; 0x06
    1f4e:	16 96       	adiw	r26, 0x06	; 6
    1f50:	4d 91       	ld	r20, X+
    1f52:	5c 91       	ld	r21, X
    1f54:	17 97       	sbiw	r26, 0x07	; 7
    1f56:	51 87       	std	Z+9, r21	; 0x09
    1f58:	40 87       	std	Z+8, r20	; 0x08
    1f5a:	16 96       	adiw	r26, 0x06	; 6
    1f5c:	cd 91       	ld	r28, X+
    1f5e:	dc 91       	ld	r29, X
    1f60:	17 97       	sbiw	r26, 0x07	; 7
    1f62:	3d 83       	std	Y+5, r19	; 0x05
    1f64:	2c 83       	std	Y+4, r18	; 0x04
    1f66:	17 96       	adiw	r26, 0x07	; 7
    1f68:	3c 93       	st	X, r19
    1f6a:	2e 93       	st	-X, r18
    1f6c:	16 97       	sbiw	r26, 0x06	; 6
    1f6e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1f70:	9a 9f       	mul	r25, r26
    1f72:	d0 01       	movw	r26, r0
    1f74:	11 24       	eor	r1, r1
    1f76:	af 5b       	subi	r26, 0xBF	; 191
    1f78:	b9 4e       	sbci	r27, 0xE9	; 233
    1f7a:	b5 87       	std	Z+13, r27	; 0x0d
    1f7c:	a4 87       	std	Z+12, r26	; 0x0c
    1f7e:	9c 91       	ld	r25, X
    1f80:	9f 5f       	subi	r25, 0xFF	; 255
    1f82:	9c 93       	st	X, r25
    1f84:	22 8d       	ldd	r18, Z+26	; 0x1a
    1f86:	e0 91 af 16 	lds	r30, 0x16AF	; 0x8016af <pxCurrentTCB>
    1f8a:	f0 91 b0 16 	lds	r31, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    1f8e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1f90:	29 17       	cp	r18, r25
    1f92:	08 f0       	brcs	.+2      	; 0x1f96 <xTaskIncrementTick+0x1f4>
    1f94:	4f cf       	rjmp	.-354    	; 0x1e34 <xTaskIncrementTick+0x92>
    1f96:	51 cf       	rjmp	.-350    	; 0x1e3a <xTaskIncrementTick+0x98>
    1f98:	e0 91 af 16 	lds	r30, 0x16AF	; 0x8016af <pxCurrentTCB>
    1f9c:	f0 91 b0 16 	lds	r31, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    1fa0:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1fa2:	9b e0       	ldi	r25, 0x0B	; 11
    1fa4:	e9 9f       	mul	r30, r25
    1fa6:	f0 01       	movw	r30, r0
    1fa8:	11 24       	eor	r1, r1
    1faa:	ef 5b       	subi	r30, 0xBF	; 191
    1fac:	f9 4e       	sbci	r31, 0xE9	; 233
    1fae:	90 81       	ld	r25, Z
    1fb0:	92 30       	cpi	r25, 0x02	; 2
    1fb2:	08 f0       	brcs	.+2      	; 0x1fb6 <xTaskIncrementTick+0x214>
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
    1fb6:	90 91 f9 15 	lds	r25, 0x15F9	; 0x8015f9 <xYieldPending>
    1fba:	91 11       	cpse	r25, r1
    1fbc:	16 c0       	rjmp	.+44     	; 0x1fea <xTaskIncrementTick+0x248>
    1fbe:	16 c0       	rjmp	.+44     	; 0x1fec <xTaskIncrementTick+0x24a>
    1fc0:	80 91 fa 15 	lds	r24, 0x15FA	; 0x8015fa <xPendedTicks>
    1fc4:	90 91 fb 15 	lds	r25, 0x15FB	; 0x8015fb <xPendedTicks+0x1>
    1fc8:	a0 91 fc 15 	lds	r26, 0x15FC	; 0x8015fc <xPendedTicks+0x2>
    1fcc:	b0 91 fd 15 	lds	r27, 0x15FD	; 0x8015fd <xPendedTicks+0x3>
    1fd0:	01 96       	adiw	r24, 0x01	; 1
    1fd2:	a1 1d       	adc	r26, r1
    1fd4:	b1 1d       	adc	r27, r1
    1fd6:	80 93 fa 15 	sts	0x15FA, r24	; 0x8015fa <xPendedTicks>
    1fda:	90 93 fb 15 	sts	0x15FB, r25	; 0x8015fb <xPendedTicks+0x1>
    1fde:	a0 93 fc 15 	sts	0x15FC, r26	; 0x8015fc <xPendedTicks+0x2>
    1fe2:	b0 93 fd 15 	sts	0x15FD, r27	; 0x8015fd <xPendedTicks+0x3>
    1fe6:	80 e0       	ldi	r24, 0x00	; 0
    1fe8:	01 c0       	rjmp	.+2      	; 0x1fec <xTaskIncrementTick+0x24a>
    1fea:	81 e0       	ldi	r24, 0x01	; 1
    1fec:	df 91       	pop	r29
    1fee:	cf 91       	pop	r28
    1ff0:	ff 90       	pop	r15
    1ff2:	ef 90       	pop	r14
    1ff4:	df 90       	pop	r13
    1ff6:	cf 90       	pop	r12
    1ff8:	08 95       	ret

00001ffa <xTaskResumeAll>:
    1ffa:	cf 92       	push	r12
    1ffc:	df 92       	push	r13
    1ffe:	ef 92       	push	r14
    2000:	ff 92       	push	r15
    2002:	cf 93       	push	r28
    2004:	df 93       	push	r29
    2006:	0f b6       	in	r0, 0x3f	; 63
    2008:	f8 94       	cli
    200a:	0f 92       	push	r0
    200c:	80 91 f0 15 	lds	r24, 0x15F0	; 0x8015f0 <uxSchedulerSuspended>
    2010:	81 50       	subi	r24, 0x01	; 1
    2012:	80 93 f0 15 	sts	0x15F0, r24	; 0x8015f0 <uxSchedulerSuspended>
    2016:	80 91 f0 15 	lds	r24, 0x15F0	; 0x8015f0 <uxSchedulerSuspended>
    201a:	81 11       	cpse	r24, r1
    201c:	be c0       	rjmp	.+380    	; 0x219a <__DATA_REGION_LENGTH__+0x19a>
    201e:	80 91 04 16 	lds	r24, 0x1604	; 0x801604 <uxCurrentNumberOfTasks>
    2022:	81 11       	cpse	r24, r1
    2024:	88 c0       	rjmp	.+272    	; 0x2136 <__DATA_REGION_LENGTH__+0x136>
    2026:	bc c0       	rjmp	.+376    	; 0x21a0 <__DATA_REGION_LENGTH__+0x1a0>
    2028:	e0 91 23 16 	lds	r30, 0x1623	; 0x801623 <xPendingReadyList+0x7>
    202c:	f0 91 24 16 	lds	r31, 0x1624	; 0x801624 <xPendingReadyList+0x8>
    2030:	00 84       	ldd	r0, Z+8	; 0x08
    2032:	f1 85       	ldd	r31, Z+9	; 0x09
    2034:	e0 2d       	mov	r30, r0
    2036:	a0 8d       	ldd	r26, Z+24	; 0x18
    2038:	b1 8d       	ldd	r27, Z+25	; 0x19
    203a:	c2 89       	ldd	r28, Z+18	; 0x12
    203c:	d3 89       	ldd	r29, Z+19	; 0x13
    203e:	84 89       	ldd	r24, Z+20	; 0x14
    2040:	95 89       	ldd	r25, Z+21	; 0x15
    2042:	9f 83       	std	Y+7, r25	; 0x07
    2044:	8e 83       	std	Y+6, r24	; 0x06
    2046:	c4 89       	ldd	r28, Z+20	; 0x14
    2048:	d5 89       	ldd	r29, Z+21	; 0x15
    204a:	82 89       	ldd	r24, Z+18	; 0x12
    204c:	93 89       	ldd	r25, Z+19	; 0x13
    204e:	9d 83       	std	Y+5, r25	; 0x05
    2050:	8c 83       	std	Y+4, r24	; 0x04
    2052:	11 96       	adiw	r26, 0x01	; 1
    2054:	2d 91       	ld	r18, X+
    2056:	3c 91       	ld	r19, X
    2058:	12 97       	sbiw	r26, 0x02	; 2
    205a:	cf 01       	movw	r24, r30
    205c:	0e 96       	adiw	r24, 0x0e	; 14
    205e:	28 17       	cp	r18, r24
    2060:	39 07       	cpc	r19, r25
    2062:	31 f4       	brne	.+12     	; 0x2070 <__DATA_REGION_LENGTH__+0x70>
    2064:	84 89       	ldd	r24, Z+20	; 0x14
    2066:	95 89       	ldd	r25, Z+21	; 0x15
    2068:	12 96       	adiw	r26, 0x02	; 2
    206a:	9c 93       	st	X, r25
    206c:	8e 93       	st	-X, r24
    206e:	11 97       	sbiw	r26, 0x01	; 1
    2070:	11 8e       	std	Z+25, r1	; 0x19
    2072:	10 8e       	std	Z+24, r1	; 0x18
    2074:	8c 91       	ld	r24, X
    2076:	81 50       	subi	r24, 0x01	; 1
    2078:	8c 93       	st	X, r24
    207a:	a4 85       	ldd	r26, Z+12	; 0x0c
    207c:	b5 85       	ldd	r27, Z+13	; 0x0d
    207e:	c6 81       	ldd	r28, Z+6	; 0x06
    2080:	d7 81       	ldd	r29, Z+7	; 0x07
    2082:	80 85       	ldd	r24, Z+8	; 0x08
    2084:	91 85       	ldd	r25, Z+9	; 0x09
    2086:	9f 83       	std	Y+7, r25	; 0x07
    2088:	8e 83       	std	Y+6, r24	; 0x06
    208a:	c0 85       	ldd	r28, Z+8	; 0x08
    208c:	d1 85       	ldd	r29, Z+9	; 0x09
    208e:	86 81       	ldd	r24, Z+6	; 0x06
    2090:	97 81       	ldd	r25, Z+7	; 0x07
    2092:	9d 83       	std	Y+5, r25	; 0x05
    2094:	8c 83       	std	Y+4, r24	; 0x04
    2096:	11 96       	adiw	r26, 0x01	; 1
    2098:	8d 91       	ld	r24, X+
    209a:	9c 91       	ld	r25, X
    209c:	12 97       	sbiw	r26, 0x02	; 2
    209e:	9f 01       	movw	r18, r30
    20a0:	2e 5f       	subi	r18, 0xFE	; 254
    20a2:	3f 4f       	sbci	r19, 0xFF	; 255
    20a4:	82 17       	cp	r24, r18
    20a6:	93 07       	cpc	r25, r19
    20a8:	31 f4       	brne	.+12     	; 0x20b6 <__DATA_REGION_LENGTH__+0xb6>
    20aa:	80 85       	ldd	r24, Z+8	; 0x08
    20ac:	91 85       	ldd	r25, Z+9	; 0x09
    20ae:	12 96       	adiw	r26, 0x02	; 2
    20b0:	9c 93       	st	X, r25
    20b2:	8e 93       	st	-X, r24
    20b4:	11 97       	sbiw	r26, 0x01	; 1
    20b6:	15 86       	std	Z+13, r1	; 0x0d
    20b8:	14 86       	std	Z+12, r1	; 0x0c
    20ba:	8c 91       	ld	r24, X
    20bc:	81 50       	subi	r24, 0x01	; 1
    20be:	8c 93       	st	X, r24
    20c0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    20c2:	80 91 ff 15 	lds	r24, 0x15FF	; 0x8015ff <uxTopReadyPriority>
    20c6:	8a 17       	cp	r24, r26
    20c8:	10 f4       	brcc	.+4      	; 0x20ce <__DATA_REGION_LENGTH__+0xce>
    20ca:	a0 93 ff 15 	sts	0x15FF, r26	; 0x8015ff <uxTopReadyPriority>
    20ce:	8b e0       	ldi	r24, 0x0B	; 11
    20d0:	8a 9f       	mul	r24, r26
    20d2:	d0 01       	movw	r26, r0
    20d4:	11 24       	eor	r1, r1
    20d6:	af 5b       	subi	r26, 0xBF	; 191
    20d8:	b9 4e       	sbci	r27, 0xE9	; 233
    20da:	11 96       	adiw	r26, 0x01	; 1
    20dc:	0d 90       	ld	r0, X+
    20de:	bc 91       	ld	r27, X
    20e0:	a0 2d       	mov	r26, r0
    20e2:	b7 83       	std	Z+7, r27	; 0x07
    20e4:	a6 83       	std	Z+6, r26	; 0x06
    20e6:	16 96       	adiw	r26, 0x06	; 6
    20e8:	4d 91       	ld	r20, X+
    20ea:	5c 91       	ld	r21, X
    20ec:	17 97       	sbiw	r26, 0x07	; 7
    20ee:	51 87       	std	Z+9, r21	; 0x09
    20f0:	40 87       	std	Z+8, r20	; 0x08
    20f2:	16 96       	adiw	r26, 0x06	; 6
    20f4:	cd 91       	ld	r28, X+
    20f6:	dc 91       	ld	r29, X
    20f8:	17 97       	sbiw	r26, 0x07	; 7
    20fa:	3d 83       	std	Y+5, r19	; 0x05
    20fc:	2c 83       	std	Y+4, r18	; 0x04
    20fe:	17 96       	adiw	r26, 0x07	; 7
    2100:	3c 93       	st	X, r19
    2102:	2e 93       	st	-X, r18
    2104:	16 97       	sbiw	r26, 0x06	; 6
    2106:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2108:	8a 9f       	mul	r24, r26
    210a:	d0 01       	movw	r26, r0
    210c:	11 24       	eor	r1, r1
    210e:	af 5b       	subi	r26, 0xBF	; 191
    2110:	b9 4e       	sbci	r27, 0xE9	; 233
    2112:	b5 87       	std	Z+13, r27	; 0x0d
    2114:	a4 87       	std	Z+12, r26	; 0x0c
    2116:	8c 91       	ld	r24, X
    2118:	8f 5f       	subi	r24, 0xFF	; 255
    211a:	8c 93       	st	X, r24
    211c:	92 8d       	ldd	r25, Z+26	; 0x1a
    211e:	a0 91 af 16 	lds	r26, 0x16AF	; 0x8016af <pxCurrentTCB>
    2122:	b0 91 b0 16 	lds	r27, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    2126:	5a 96       	adiw	r26, 0x1a	; 26
    2128:	8c 91       	ld	r24, X
    212a:	98 17       	cp	r25, r24
    212c:	30 f0       	brcs	.+12     	; 0x213a <__DATA_REGION_LENGTH__+0x13a>
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	80 93 f9 15 	sts	0x15F9, r24	; 0x8015f9 <xYieldPending>
    2134:	02 c0       	rjmp	.+4      	; 0x213a <__DATA_REGION_LENGTH__+0x13a>
    2136:	e0 e0       	ldi	r30, 0x00	; 0
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	80 91 1c 16 	lds	r24, 0x161C	; 0x80161c <xPendingReadyList>
    213e:	81 11       	cpse	r24, r1
    2140:	73 cf       	rjmp	.-282    	; 0x2028 <__DATA_REGION_LENGTH__+0x28>
    2142:	ef 2b       	or	r30, r31
    2144:	09 f0       	breq	.+2      	; 0x2148 <__DATA_REGION_LENGTH__+0x148>
    2146:	7d db       	rcall	.-2310   	; 0x1842 <prvResetNextTaskUnblockTime>
    2148:	c0 90 fa 15 	lds	r12, 0x15FA	; 0x8015fa <xPendedTicks>
    214c:	d0 90 fb 15 	lds	r13, 0x15FB	; 0x8015fb <xPendedTicks+0x1>
    2150:	e0 90 fc 15 	lds	r14, 0x15FC	; 0x8015fc <xPendedTicks+0x2>
    2154:	f0 90 fd 15 	lds	r15, 0x15FD	; 0x8015fd <xPendedTicks+0x3>
    2158:	c1 14       	cp	r12, r1
    215a:	d1 04       	cpc	r13, r1
    215c:	e1 04       	cpc	r14, r1
    215e:	f1 04       	cpc	r15, r1
    2160:	a1 f0       	breq	.+40     	; 0x218a <__DATA_REGION_LENGTH__+0x18a>
    2162:	1f de       	rcall	.-962    	; 0x1da2 <xTaskIncrementTick>
    2164:	88 23       	and	r24, r24
    2166:	19 f0       	breq	.+6      	; 0x216e <__DATA_REGION_LENGTH__+0x16e>
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	80 93 f9 15 	sts	0x15F9, r24	; 0x8015f9 <xYieldPending>
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	c8 1a       	sub	r12, r24
    2172:	d1 08       	sbc	r13, r1
    2174:	e1 08       	sbc	r14, r1
    2176:	f1 08       	sbc	r15, r1
    2178:	a1 f7       	brne	.-24     	; 0x2162 <__DATA_REGION_LENGTH__+0x162>
    217a:	10 92 fa 15 	sts	0x15FA, r1	; 0x8015fa <xPendedTicks>
    217e:	10 92 fb 15 	sts	0x15FB, r1	; 0x8015fb <xPendedTicks+0x1>
    2182:	10 92 fc 15 	sts	0x15FC, r1	; 0x8015fc <xPendedTicks+0x2>
    2186:	10 92 fd 15 	sts	0x15FD, r1	; 0x8015fd <xPendedTicks+0x3>
    218a:	80 91 f9 15 	lds	r24, 0x15F9	; 0x8015f9 <xYieldPending>
    218e:	88 23       	and	r24, r24
    2190:	31 f0       	breq	.+12     	; 0x219e <__DATA_REGION_LENGTH__+0x19e>
    2192:	0e 94 91 04 	call	0x922	; 0x922 <vPortYield>
    2196:	81 e0       	ldi	r24, 0x01	; 1
    2198:	03 c0       	rjmp	.+6      	; 0x21a0 <__DATA_REGION_LENGTH__+0x1a0>
    219a:	80 e0       	ldi	r24, 0x00	; 0
    219c:	01 c0       	rjmp	.+2      	; 0x21a0 <__DATA_REGION_LENGTH__+0x1a0>
    219e:	80 e0       	ldi	r24, 0x00	; 0
    21a0:	0f 90       	pop	r0
    21a2:	0f be       	out	0x3f, r0	; 63
    21a4:	df 91       	pop	r29
    21a6:	cf 91       	pop	r28
    21a8:	ff 90       	pop	r15
    21aa:	ef 90       	pop	r14
    21ac:	df 90       	pop	r13
    21ae:	cf 90       	pop	r12
    21b0:	08 95       	ret

000021b2 <xTaskDelayUntil>:
    21b2:	8f 92       	push	r8
    21b4:	9f 92       	push	r9
    21b6:	af 92       	push	r10
    21b8:	bf 92       	push	r11
    21ba:	cf 92       	push	r12
    21bc:	df 92       	push	r13
    21be:	ef 92       	push	r14
    21c0:	ff 92       	push	r15
    21c2:	1f 93       	push	r17
    21c4:	cf 93       	push	r28
    21c6:	df 93       	push	r29
    21c8:	ec 01       	movw	r28, r24
    21ca:	6a 01       	movw	r12, r20
    21cc:	7b 01       	movw	r14, r22
    21ce:	d5 dd       	rcall	.-1110   	; 0x1d7a <vTaskSuspendAll>
    21d0:	80 90 00 16 	lds	r8, 0x1600	; 0x801600 <xTickCount>
    21d4:	90 90 01 16 	lds	r9, 0x1601	; 0x801601 <xTickCount+0x1>
    21d8:	a0 90 02 16 	lds	r10, 0x1602	; 0x801602 <xTickCount+0x2>
    21dc:	b0 90 03 16 	lds	r11, 0x1603	; 0x801603 <xTickCount+0x3>
    21e0:	88 81       	ld	r24, Y
    21e2:	99 81       	ldd	r25, Y+1	; 0x01
    21e4:	aa 81       	ldd	r26, Y+2	; 0x02
    21e6:	bb 81       	ldd	r27, Y+3	; 0x03
    21e8:	ac 01       	movw	r20, r24
    21ea:	bd 01       	movw	r22, r26
    21ec:	4c 0d       	add	r20, r12
    21ee:	5d 1d       	adc	r21, r13
    21f0:	6e 1d       	adc	r22, r14
    21f2:	7f 1d       	adc	r23, r15
    21f4:	88 16       	cp	r8, r24
    21f6:	99 06       	cpc	r9, r25
    21f8:	aa 06       	cpc	r10, r26
    21fa:	bb 06       	cpc	r11, r27
    21fc:	60 f4       	brcc	.+24     	; 0x2216 <__stack+0x17>
    21fe:	48 17       	cp	r20, r24
    2200:	59 07       	cpc	r21, r25
    2202:	6a 07       	cpc	r22, r26
    2204:	7b 07       	cpc	r23, r27
    2206:	98 f4       	brcc	.+38     	; 0x222e <__stack+0x2f>
    2208:	84 16       	cp	r8, r20
    220a:	95 06       	cpc	r9, r21
    220c:	a6 06       	cpc	r10, r22
    220e:	b7 06       	cpc	r11, r23
    2210:	80 f0       	brcs	.+32     	; 0x2232 <__stack+0x33>
    2212:	10 e0       	ldi	r17, 0x00	; 0
    2214:	13 c0       	rjmp	.+38     	; 0x223c <__stack+0x3d>
    2216:	48 17       	cp	r20, r24
    2218:	59 07       	cpc	r21, r25
    221a:	6a 07       	cpc	r22, r26
    221c:	7b 07       	cpc	r23, r27
    221e:	58 f0       	brcs	.+22     	; 0x2236 <__stack+0x37>
    2220:	84 16       	cp	r8, r20
    2222:	95 06       	cpc	r9, r21
    2224:	a6 06       	cpc	r10, r22
    2226:	b7 06       	cpc	r11, r23
    2228:	40 f0       	brcs	.+16     	; 0x223a <__stack+0x3b>
    222a:	10 e0       	ldi	r17, 0x00	; 0
    222c:	07 c0       	rjmp	.+14     	; 0x223c <__stack+0x3d>
    222e:	10 e0       	ldi	r17, 0x00	; 0
    2230:	05 c0       	rjmp	.+10     	; 0x223c <__stack+0x3d>
    2232:	11 e0       	ldi	r17, 0x01	; 1
    2234:	03 c0       	rjmp	.+6      	; 0x223c <__stack+0x3d>
    2236:	11 e0       	ldi	r17, 0x01	; 1
    2238:	01 c0       	rjmp	.+2      	; 0x223c <__stack+0x3d>
    223a:	11 e0       	ldi	r17, 0x01	; 1
    223c:	48 83       	st	Y, r20
    223e:	59 83       	std	Y+1, r21	; 0x01
    2240:	6a 83       	std	Y+2, r22	; 0x02
    2242:	7b 83       	std	Y+3, r23	; 0x03
    2244:	11 23       	and	r17, r17
    2246:	41 f0       	breq	.+16     	; 0x2258 <__stack+0x59>
    2248:	cb 01       	movw	r24, r22
    224a:	ba 01       	movw	r22, r20
    224c:	68 19       	sub	r22, r8
    224e:	79 09       	sbc	r23, r9
    2250:	8a 09       	sbc	r24, r10
    2252:	9b 09       	sbc	r25, r11
    2254:	40 e0       	ldi	r20, 0x00	; 0
    2256:	6b dc       	rcall	.-1834   	; 0x1b2e <prvAddCurrentTaskToDelayedList>
    2258:	d0 de       	rcall	.-608    	; 0x1ffa <xTaskResumeAll>
    225a:	81 11       	cpse	r24, r1
    225c:	02 c0       	rjmp	.+4      	; 0x2262 <__stack+0x63>
    225e:	0e 94 91 04 	call	0x922	; 0x922 <vPortYield>
    2262:	81 2f       	mov	r24, r17
    2264:	df 91       	pop	r29
    2266:	cf 91       	pop	r28
    2268:	1f 91       	pop	r17
    226a:	ff 90       	pop	r15
    226c:	ef 90       	pop	r14
    226e:	df 90       	pop	r13
    2270:	cf 90       	pop	r12
    2272:	bf 90       	pop	r11
    2274:	af 90       	pop	r10
    2276:	9f 90       	pop	r9
    2278:	8f 90       	pop	r8
    227a:	08 95       	ret

0000227c <vTaskDelay>:
    227c:	cf 92       	push	r12
    227e:	df 92       	push	r13
    2280:	ef 92       	push	r14
    2282:	ff 92       	push	r15
    2284:	6b 01       	movw	r12, r22
    2286:	7c 01       	movw	r14, r24
    2288:	67 2b       	or	r22, r23
    228a:	68 2b       	or	r22, r24
    228c:	69 2b       	or	r22, r25
    228e:	39 f0       	breq	.+14     	; 0x229e <vTaskDelay+0x22>
    2290:	74 dd       	rcall	.-1304   	; 0x1d7a <vTaskSuspendAll>
    2292:	40 e0       	ldi	r20, 0x00	; 0
    2294:	c7 01       	movw	r24, r14
    2296:	b6 01       	movw	r22, r12
    2298:	4a dc       	rcall	.-1900   	; 0x1b2e <prvAddCurrentTaskToDelayedList>
    229a:	af de       	rcall	.-674    	; 0x1ffa <xTaskResumeAll>
    229c:	01 c0       	rjmp	.+2      	; 0x22a0 <vTaskDelay+0x24>
    229e:	80 e0       	ldi	r24, 0x00	; 0
    22a0:	81 11       	cpse	r24, r1
    22a2:	02 c0       	rjmp	.+4      	; 0x22a8 <vTaskDelay+0x2c>
    22a4:	0e 94 91 04 	call	0x922	; 0x922 <vPortYield>
    22a8:	ff 90       	pop	r15
    22aa:	ef 90       	pop	r14
    22ac:	df 90       	pop	r13
    22ae:	cf 90       	pop	r12
    22b0:	08 95       	ret

000022b2 <vTaskSwitchContext>:
    22b2:	80 91 f0 15 	lds	r24, 0x15F0	; 0x8015f0 <uxSchedulerSuspended>
    22b6:	88 23       	and	r24, r24
    22b8:	21 f0       	breq	.+8      	; 0x22c2 <vTaskSwitchContext+0x10>
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	80 93 f9 15 	sts	0x15F9, r24	; 0x8015f9 <xYieldPending>
    22c0:	08 95       	ret
    22c2:	10 92 f9 15 	sts	0x15F9, r1	; 0x8015f9 <xYieldPending>
    22c6:	e0 91 af 16 	lds	r30, 0x16AF	; 0x8016af <pxCurrentTCB>
    22ca:	f0 91 b0 16 	lds	r31, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    22ce:	20 81       	ld	r18, Z
    22d0:	31 81       	ldd	r19, Z+1	; 0x01
    22d2:	e0 91 af 16 	lds	r30, 0x16AF	; 0x8016af <pxCurrentTCB>
    22d6:	f0 91 b0 16 	lds	r31, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    22da:	83 8d       	ldd	r24, Z+27	; 0x1b
    22dc:	94 8d       	ldd	r25, Z+28	; 0x1c
    22de:	82 17       	cp	r24, r18
    22e0:	93 07       	cpc	r25, r19
    22e2:	60 f0       	brcs	.+24     	; 0x22fc <vTaskSwitchContext+0x4a>
    22e4:	60 91 af 16 	lds	r22, 0x16AF	; 0x8016af <pxCurrentTCB>
    22e8:	70 91 b0 16 	lds	r23, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    22ec:	63 5e       	subi	r22, 0xE3	; 227
    22ee:	7f 4f       	sbci	r23, 0xFF	; 255
    22f0:	80 91 af 16 	lds	r24, 0x16AF	; 0x8016af <pxCurrentTCB>
    22f4:	90 91 b0 16 	lds	r25, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    22f8:	0e 94 c6 1b 	call	0x378c	; 0x378c <vApplicationStackOverflowHook>
    22fc:	80 91 ff 15 	lds	r24, 0x15FF	; 0x8015ff <uxTopReadyPriority>
    2300:	01 c0       	rjmp	.+2      	; 0x2304 <vTaskSwitchContext+0x52>
    2302:	81 50       	subi	r24, 0x01	; 1
    2304:	28 2f       	mov	r18, r24
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	9b e0       	ldi	r25, 0x0B	; 11
    230a:	92 9f       	mul	r25, r18
    230c:	f0 01       	movw	r30, r0
    230e:	93 9f       	mul	r25, r19
    2310:	f0 0d       	add	r31, r0
    2312:	11 24       	eor	r1, r1
    2314:	ef 5b       	subi	r30, 0xBF	; 191
    2316:	f9 4e       	sbci	r31, 0xE9	; 233
    2318:	90 81       	ld	r25, Z
    231a:	99 23       	and	r25, r25
    231c:	91 f3       	breq	.-28     	; 0x2302 <vTaskSwitchContext+0x50>
    231e:	9b e0       	ldi	r25, 0x0B	; 11
    2320:	92 9f       	mul	r25, r18
    2322:	a0 01       	movw	r20, r0
    2324:	93 9f       	mul	r25, r19
    2326:	50 0d       	add	r21, r0
    2328:	11 24       	eor	r1, r1
    232a:	df 01       	movw	r26, r30
    232c:	01 80       	ldd	r0, Z+1	; 0x01
    232e:	f2 81       	ldd	r31, Z+2	; 0x02
    2330:	e0 2d       	mov	r30, r0
    2332:	04 80       	ldd	r0, Z+4	; 0x04
    2334:	f5 81       	ldd	r31, Z+5	; 0x05
    2336:	e0 2d       	mov	r30, r0
    2338:	12 96       	adiw	r26, 0x02	; 2
    233a:	fc 93       	st	X, r31
    233c:	ee 93       	st	-X, r30
    233e:	11 97       	sbiw	r26, 0x01	; 1
    2340:	4c 5b       	subi	r20, 0xBC	; 188
    2342:	59 4e       	sbci	r21, 0xE9	; 233
    2344:	e4 17       	cp	r30, r20
    2346:	f5 07       	cpc	r31, r21
    2348:	29 f4       	brne	.+10     	; 0x2354 <vTaskSwitchContext+0xa2>
    234a:	44 81       	ldd	r20, Z+4	; 0x04
    234c:	55 81       	ldd	r21, Z+5	; 0x05
    234e:	fd 01       	movw	r30, r26
    2350:	52 83       	std	Z+2, r21	; 0x02
    2352:	41 83       	std	Z+1, r20	; 0x01
    2354:	9b e0       	ldi	r25, 0x0B	; 11
    2356:	92 9f       	mul	r25, r18
    2358:	f0 01       	movw	r30, r0
    235a:	93 9f       	mul	r25, r19
    235c:	f0 0d       	add	r31, r0
    235e:	11 24       	eor	r1, r1
    2360:	ef 5b       	subi	r30, 0xBF	; 191
    2362:	f9 4e       	sbci	r31, 0xE9	; 233
    2364:	01 80       	ldd	r0, Z+1	; 0x01
    2366:	f2 81       	ldd	r31, Z+2	; 0x02
    2368:	e0 2d       	mov	r30, r0
    236a:	20 85       	ldd	r18, Z+8	; 0x08
    236c:	31 85       	ldd	r19, Z+9	; 0x09
    236e:	30 93 b0 16 	sts	0x16B0, r19	; 0x8016b0 <pxCurrentTCB+0x1>
    2372:	20 93 af 16 	sts	0x16AF, r18	; 0x8016af <pxCurrentTCB>
    2376:	80 93 ff 15 	sts	0x15FF, r24	; 0x8015ff <uxTopReadyPriority>
    237a:	08 95       	ret

0000237c <vTaskPlaceOnEventList>:
    237c:	cf 92       	push	r12
    237e:	df 92       	push	r13
    2380:	ef 92       	push	r14
    2382:	ff 92       	push	r15
    2384:	6a 01       	movw	r12, r20
    2386:	7b 01       	movw	r14, r22
    2388:	60 91 af 16 	lds	r22, 0x16AF	; 0x8016af <pxCurrentTCB>
    238c:	70 91 b0 16 	lds	r23, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    2390:	62 5f       	subi	r22, 0xF2	; 242
    2392:	7f 4f       	sbci	r23, 0xFF	; 255
    2394:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <vListInsert>
    2398:	41 e0       	ldi	r20, 0x01	; 1
    239a:	c7 01       	movw	r24, r14
    239c:	b6 01       	movw	r22, r12
    239e:	c7 db       	rcall	.-2162   	; 0x1b2e <prvAddCurrentTaskToDelayedList>
    23a0:	ff 90       	pop	r15
    23a2:	ef 90       	pop	r14
    23a4:	df 90       	pop	r13
    23a6:	cf 90       	pop	r12
    23a8:	08 95       	ret

000023aa <vTaskPlaceOnUnorderedEventList>:
    23aa:	0f 93       	push	r16
    23ac:	1f 93       	push	r17
    23ae:	cf 93       	push	r28
    23b0:	df 93       	push	r29
    23b2:	fc 01       	movw	r30, r24
    23b4:	a0 91 af 16 	lds	r26, 0x16AF	; 0x8016af <pxCurrentTCB>
    23b8:	b0 91 b0 16 	lds	r27, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    23bc:	70 68       	ori	r23, 0x80	; 128
    23be:	1e 96       	adiw	r26, 0x0e	; 14
    23c0:	4d 93       	st	X+, r20
    23c2:	5d 93       	st	X+, r21
    23c4:	6d 93       	st	X+, r22
    23c6:	7c 93       	st	X, r23
    23c8:	51 97       	sbiw	r26, 0x11	; 17
    23ca:	a1 81       	ldd	r26, Z+1	; 0x01
    23cc:	b2 81       	ldd	r27, Z+2	; 0x02
    23ce:	c0 91 af 16 	lds	r28, 0x16AF	; 0x8016af <pxCurrentTCB>
    23d2:	d0 91 b0 16 	lds	r29, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    23d6:	bb 8b       	std	Y+19, r27	; 0x13
    23d8:	aa 8b       	std	Y+18, r26	; 0x12
    23da:	c0 91 af 16 	lds	r28, 0x16AF	; 0x8016af <pxCurrentTCB>
    23de:	d0 91 b0 16 	lds	r29, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    23e2:	16 96       	adiw	r26, 0x06	; 6
    23e4:	8d 91       	ld	r24, X+
    23e6:	9c 91       	ld	r25, X
    23e8:	17 97       	sbiw	r26, 0x07	; 7
    23ea:	9d 8b       	std	Y+21, r25	; 0x15
    23ec:	8c 8b       	std	Y+20, r24	; 0x14
    23ee:	16 96       	adiw	r26, 0x06	; 6
    23f0:	cd 91       	ld	r28, X+
    23f2:	dc 91       	ld	r29, X
    23f4:	17 97       	sbiw	r26, 0x07	; 7
    23f6:	80 91 af 16 	lds	r24, 0x16AF	; 0x8016af <pxCurrentTCB>
    23fa:	90 91 b0 16 	lds	r25, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    23fe:	0e 96       	adiw	r24, 0x0e	; 14
    2400:	9d 83       	std	Y+5, r25	; 0x05
    2402:	8c 83       	std	Y+4, r24	; 0x04
    2404:	80 91 af 16 	lds	r24, 0x16AF	; 0x8016af <pxCurrentTCB>
    2408:	90 91 b0 16 	lds	r25, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    240c:	0e 96       	adiw	r24, 0x0e	; 14
    240e:	17 96       	adiw	r26, 0x07	; 7
    2410:	9c 93       	st	X, r25
    2412:	8e 93       	st	-X, r24
    2414:	16 97       	sbiw	r26, 0x06	; 6
    2416:	a0 91 af 16 	lds	r26, 0x16AF	; 0x8016af <pxCurrentTCB>
    241a:	b0 91 b0 16 	lds	r27, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    241e:	59 96       	adiw	r26, 0x19	; 25
    2420:	fc 93       	st	X, r31
    2422:	ee 93       	st	-X, r30
    2424:	58 97       	sbiw	r26, 0x18	; 24
    2426:	80 81       	ld	r24, Z
    2428:	8f 5f       	subi	r24, 0xFF	; 255
    242a:	80 83       	st	Z, r24
    242c:	41 e0       	ldi	r20, 0x01	; 1
    242e:	c9 01       	movw	r24, r18
    2430:	b8 01       	movw	r22, r16
    2432:	7d db       	rcall	.-2310   	; 0x1b2e <prvAddCurrentTaskToDelayedList>
    2434:	df 91       	pop	r29
    2436:	cf 91       	pop	r28
    2438:	1f 91       	pop	r17
    243a:	0f 91       	pop	r16
    243c:	08 95       	ret

0000243e <vTaskPlaceOnEventListRestricted>:
    243e:	cf 93       	push	r28
    2440:	df 93       	push	r29
    2442:	fc 01       	movw	r30, r24
    2444:	cb 01       	movw	r24, r22
    2446:	ba 01       	movw	r22, r20
    2448:	a1 81       	ldd	r26, Z+1	; 0x01
    244a:	b2 81       	ldd	r27, Z+2	; 0x02
    244c:	c0 91 af 16 	lds	r28, 0x16AF	; 0x8016af <pxCurrentTCB>
    2450:	d0 91 b0 16 	lds	r29, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    2454:	bb 8b       	std	Y+19, r27	; 0x13
    2456:	aa 8b       	std	Y+18, r26	; 0x12
    2458:	c0 91 af 16 	lds	r28, 0x16AF	; 0x8016af <pxCurrentTCB>
    245c:	d0 91 b0 16 	lds	r29, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    2460:	16 96       	adiw	r26, 0x06	; 6
    2462:	4d 91       	ld	r20, X+
    2464:	5c 91       	ld	r21, X
    2466:	17 97       	sbiw	r26, 0x07	; 7
    2468:	5d 8b       	std	Y+21, r21	; 0x15
    246a:	4c 8b       	std	Y+20, r20	; 0x14
    246c:	16 96       	adiw	r26, 0x06	; 6
    246e:	cd 91       	ld	r28, X+
    2470:	dc 91       	ld	r29, X
    2472:	17 97       	sbiw	r26, 0x07	; 7
    2474:	40 91 af 16 	lds	r20, 0x16AF	; 0x8016af <pxCurrentTCB>
    2478:	50 91 b0 16 	lds	r21, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    247c:	42 5f       	subi	r20, 0xF2	; 242
    247e:	5f 4f       	sbci	r21, 0xFF	; 255
    2480:	5d 83       	std	Y+5, r21	; 0x05
    2482:	4c 83       	std	Y+4, r20	; 0x04
    2484:	40 91 af 16 	lds	r20, 0x16AF	; 0x8016af <pxCurrentTCB>
    2488:	50 91 b0 16 	lds	r21, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    248c:	42 5f       	subi	r20, 0xF2	; 242
    248e:	5f 4f       	sbci	r21, 0xFF	; 255
    2490:	17 96       	adiw	r26, 0x07	; 7
    2492:	5c 93       	st	X, r21
    2494:	4e 93       	st	-X, r20
    2496:	16 97       	sbiw	r26, 0x06	; 6
    2498:	a0 91 af 16 	lds	r26, 0x16AF	; 0x8016af <pxCurrentTCB>
    249c:	b0 91 b0 16 	lds	r27, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    24a0:	59 96       	adiw	r26, 0x19	; 25
    24a2:	fc 93       	st	X, r31
    24a4:	ee 93       	st	-X, r30
    24a6:	58 97       	sbiw	r26, 0x18	; 24
    24a8:	30 81       	ld	r19, Z
    24aa:	3f 5f       	subi	r19, 0xFF	; 255
    24ac:	30 83       	st	Z, r19
    24ae:	22 23       	and	r18, r18
    24b0:	19 f0       	breq	.+6      	; 0x24b8 <vTaskPlaceOnEventListRestricted+0x7a>
    24b2:	6f ef       	ldi	r22, 0xFF	; 255
    24b4:	7f ef       	ldi	r23, 0xFF	; 255
    24b6:	cb 01       	movw	r24, r22
    24b8:	42 2f       	mov	r20, r18
    24ba:	39 db       	rcall	.-2446   	; 0x1b2e <prvAddCurrentTaskToDelayedList>
    24bc:	df 91       	pop	r29
    24be:	cf 91       	pop	r28
    24c0:	08 95       	ret

000024c2 <xTaskRemoveFromEventList>:
    24c2:	cf 93       	push	r28
    24c4:	df 93       	push	r29
    24c6:	dc 01       	movw	r26, r24
    24c8:	17 96       	adiw	r26, 0x07	; 7
    24ca:	ed 91       	ld	r30, X+
    24cc:	fc 91       	ld	r31, X
    24ce:	18 97       	sbiw	r26, 0x08	; 8
    24d0:	00 84       	ldd	r0, Z+8	; 0x08
    24d2:	f1 85       	ldd	r31, Z+9	; 0x09
    24d4:	e0 2d       	mov	r30, r0
    24d6:	a0 8d       	ldd	r26, Z+24	; 0x18
    24d8:	b1 8d       	ldd	r27, Z+25	; 0x19
    24da:	c2 89       	ldd	r28, Z+18	; 0x12
    24dc:	d3 89       	ldd	r29, Z+19	; 0x13
    24de:	84 89       	ldd	r24, Z+20	; 0x14
    24e0:	95 89       	ldd	r25, Z+21	; 0x15
    24e2:	9f 83       	std	Y+7, r25	; 0x07
    24e4:	8e 83       	std	Y+6, r24	; 0x06
    24e6:	c4 89       	ldd	r28, Z+20	; 0x14
    24e8:	d5 89       	ldd	r29, Z+21	; 0x15
    24ea:	82 89       	ldd	r24, Z+18	; 0x12
    24ec:	93 89       	ldd	r25, Z+19	; 0x13
    24ee:	9d 83       	std	Y+5, r25	; 0x05
    24f0:	8c 83       	std	Y+4, r24	; 0x04
    24f2:	11 96       	adiw	r26, 0x01	; 1
    24f4:	8d 91       	ld	r24, X+
    24f6:	9c 91       	ld	r25, X
    24f8:	12 97       	sbiw	r26, 0x02	; 2
    24fa:	9f 01       	movw	r18, r30
    24fc:	22 5f       	subi	r18, 0xF2	; 242
    24fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2500:	82 17       	cp	r24, r18
    2502:	93 07       	cpc	r25, r19
    2504:	31 f4       	brne	.+12     	; 0x2512 <xTaskRemoveFromEventList+0x50>
    2506:	84 89       	ldd	r24, Z+20	; 0x14
    2508:	95 89       	ldd	r25, Z+21	; 0x15
    250a:	12 96       	adiw	r26, 0x02	; 2
    250c:	9c 93       	st	X, r25
    250e:	8e 93       	st	-X, r24
    2510:	11 97       	sbiw	r26, 0x01	; 1
    2512:	11 8e       	std	Z+25, r1	; 0x19
    2514:	10 8e       	std	Z+24, r1	; 0x18
    2516:	8c 91       	ld	r24, X
    2518:	81 50       	subi	r24, 0x01	; 1
    251a:	8c 93       	st	X, r24
    251c:	80 91 f0 15 	lds	r24, 0x15F0	; 0x8015f0 <uxSchedulerSuspended>
    2520:	81 11       	cpse	r24, r1
    2522:	52 c0       	rjmp	.+164    	; 0x25c8 <xTaskRemoveFromEventList+0x106>
    2524:	a4 85       	ldd	r26, Z+12	; 0x0c
    2526:	b5 85       	ldd	r27, Z+13	; 0x0d
    2528:	c6 81       	ldd	r28, Z+6	; 0x06
    252a:	d7 81       	ldd	r29, Z+7	; 0x07
    252c:	80 85       	ldd	r24, Z+8	; 0x08
    252e:	91 85       	ldd	r25, Z+9	; 0x09
    2530:	9f 83       	std	Y+7, r25	; 0x07
    2532:	8e 83       	std	Y+6, r24	; 0x06
    2534:	c0 85       	ldd	r28, Z+8	; 0x08
    2536:	d1 85       	ldd	r29, Z+9	; 0x09
    2538:	86 81       	ldd	r24, Z+6	; 0x06
    253a:	97 81       	ldd	r25, Z+7	; 0x07
    253c:	9d 83       	std	Y+5, r25	; 0x05
    253e:	8c 83       	std	Y+4, r24	; 0x04
    2540:	11 96       	adiw	r26, 0x01	; 1
    2542:	8d 91       	ld	r24, X+
    2544:	9c 91       	ld	r25, X
    2546:	12 97       	sbiw	r26, 0x02	; 2
    2548:	9f 01       	movw	r18, r30
    254a:	2e 5f       	subi	r18, 0xFE	; 254
    254c:	3f 4f       	sbci	r19, 0xFF	; 255
    254e:	82 17       	cp	r24, r18
    2550:	93 07       	cpc	r25, r19
    2552:	31 f4       	brne	.+12     	; 0x2560 <xTaskRemoveFromEventList+0x9e>
    2554:	80 85       	ldd	r24, Z+8	; 0x08
    2556:	91 85       	ldd	r25, Z+9	; 0x09
    2558:	12 96       	adiw	r26, 0x02	; 2
    255a:	9c 93       	st	X, r25
    255c:	8e 93       	st	-X, r24
    255e:	11 97       	sbiw	r26, 0x01	; 1
    2560:	15 86       	std	Z+13, r1	; 0x0d
    2562:	14 86       	std	Z+12, r1	; 0x0c
    2564:	8c 91       	ld	r24, X
    2566:	81 50       	subi	r24, 0x01	; 1
    2568:	8c 93       	st	X, r24
    256a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    256c:	80 91 ff 15 	lds	r24, 0x15FF	; 0x8015ff <uxTopReadyPriority>
    2570:	8a 17       	cp	r24, r26
    2572:	10 f4       	brcc	.+4      	; 0x2578 <xTaskRemoveFromEventList+0xb6>
    2574:	a0 93 ff 15 	sts	0x15FF, r26	; 0x8015ff <uxTopReadyPriority>
    2578:	8b e0       	ldi	r24, 0x0B	; 11
    257a:	8a 9f       	mul	r24, r26
    257c:	d0 01       	movw	r26, r0
    257e:	11 24       	eor	r1, r1
    2580:	af 5b       	subi	r26, 0xBF	; 191
    2582:	b9 4e       	sbci	r27, 0xE9	; 233
    2584:	11 96       	adiw	r26, 0x01	; 1
    2586:	0d 90       	ld	r0, X+
    2588:	bc 91       	ld	r27, X
    258a:	a0 2d       	mov	r26, r0
    258c:	b7 83       	std	Z+7, r27	; 0x07
    258e:	a6 83       	std	Z+6, r26	; 0x06
    2590:	16 96       	adiw	r26, 0x06	; 6
    2592:	4d 91       	ld	r20, X+
    2594:	5c 91       	ld	r21, X
    2596:	17 97       	sbiw	r26, 0x07	; 7
    2598:	51 87       	std	Z+9, r21	; 0x09
    259a:	40 87       	std	Z+8, r20	; 0x08
    259c:	16 96       	adiw	r26, 0x06	; 6
    259e:	cd 91       	ld	r28, X+
    25a0:	dc 91       	ld	r29, X
    25a2:	17 97       	sbiw	r26, 0x07	; 7
    25a4:	3d 83       	std	Y+5, r19	; 0x05
    25a6:	2c 83       	std	Y+4, r18	; 0x04
    25a8:	17 96       	adiw	r26, 0x07	; 7
    25aa:	3c 93       	st	X, r19
    25ac:	2e 93       	st	-X, r18
    25ae:	16 97       	sbiw	r26, 0x06	; 6
    25b0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    25b2:	8a 9f       	mul	r24, r26
    25b4:	d0 01       	movw	r26, r0
    25b6:	11 24       	eor	r1, r1
    25b8:	af 5b       	subi	r26, 0xBF	; 191
    25ba:	b9 4e       	sbci	r27, 0xE9	; 233
    25bc:	b5 87       	std	Z+13, r27	; 0x0d
    25be:	a4 87       	std	Z+12, r26	; 0x0c
    25c0:	8c 91       	ld	r24, X
    25c2:	8f 5f       	subi	r24, 0xFF	; 255
    25c4:	8c 93       	st	X, r24
    25c6:	1c c0       	rjmp	.+56     	; 0x2600 <xTaskRemoveFromEventList+0x13e>
    25c8:	4c e1       	ldi	r20, 0x1C	; 28
    25ca:	56 e1       	ldi	r21, 0x16	; 22
    25cc:	da 01       	movw	r26, r20
    25ce:	11 96       	adiw	r26, 0x01	; 1
    25d0:	cd 91       	ld	r28, X+
    25d2:	dc 91       	ld	r29, X
    25d4:	12 97       	sbiw	r26, 0x02	; 2
    25d6:	d3 8b       	std	Z+19, r29	; 0x13
    25d8:	c2 8b       	std	Z+18, r28	; 0x12
    25da:	8e 81       	ldd	r24, Y+6	; 0x06
    25dc:	9f 81       	ldd	r25, Y+7	; 0x07
    25de:	95 8b       	std	Z+21, r25	; 0x15
    25e0:	84 8b       	std	Z+20, r24	; 0x14
    25e2:	8e 81       	ldd	r24, Y+6	; 0x06
    25e4:	9f 81       	ldd	r25, Y+7	; 0x07
    25e6:	dc 01       	movw	r26, r24
    25e8:	15 96       	adiw	r26, 0x05	; 5
    25ea:	3c 93       	st	X, r19
    25ec:	2e 93       	st	-X, r18
    25ee:	14 97       	sbiw	r26, 0x04	; 4
    25f0:	3f 83       	std	Y+7, r19	; 0x07
    25f2:	2e 83       	std	Y+6, r18	; 0x06
    25f4:	51 8f       	std	Z+25, r21	; 0x19
    25f6:	40 8f       	std	Z+24, r20	; 0x18
    25f8:	da 01       	movw	r26, r20
    25fa:	8c 91       	ld	r24, X
    25fc:	8f 5f       	subi	r24, 0xFF	; 255
    25fe:	8c 93       	st	X, r24
    2600:	92 8d       	ldd	r25, Z+26	; 0x1a
    2602:	e0 91 af 16 	lds	r30, 0x16AF	; 0x8016af <pxCurrentTCB>
    2606:	f0 91 b0 16 	lds	r31, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    260a:	82 8d       	ldd	r24, Z+26	; 0x1a
    260c:	89 17       	cp	r24, r25
    260e:	20 f4       	brcc	.+8      	; 0x2618 <xTaskRemoveFromEventList+0x156>
    2610:	81 e0       	ldi	r24, 0x01	; 1
    2612:	80 93 f9 15 	sts	0x15F9, r24	; 0x8015f9 <xYieldPending>
    2616:	01 c0       	rjmp	.+2      	; 0x261a <xTaskRemoveFromEventList+0x158>
    2618:	80 e0       	ldi	r24, 0x00	; 0
    261a:	df 91       	pop	r29
    261c:	cf 91       	pop	r28
    261e:	08 95       	ret

00002620 <vTaskRemoveFromUnorderedEventList>:
    2620:	cf 93       	push	r28
    2622:	df 93       	push	r29
    2624:	dc 01       	movw	r26, r24
    2626:	70 68       	ori	r23, 0x80	; 128
    2628:	4d 93       	st	X+, r20
    262a:	5d 93       	st	X+, r21
    262c:	6d 93       	st	X+, r22
    262e:	7c 93       	st	X, r23
    2630:	13 97       	sbiw	r26, 0x03	; 3
    2632:	18 96       	adiw	r26, 0x08	; 8
    2634:	ed 91       	ld	r30, X+
    2636:	fc 91       	ld	r31, X
    2638:	19 97       	sbiw	r26, 0x09	; 9
    263a:	1a 96       	adiw	r26, 0x0a	; 10
    263c:	4d 91       	ld	r20, X+
    263e:	5c 91       	ld	r21, X
    2640:	1b 97       	sbiw	r26, 0x0b	; 11
    2642:	14 96       	adiw	r26, 0x04	; 4
    2644:	8d 91       	ld	r24, X+
    2646:	9c 91       	ld	r25, X
    2648:	15 97       	sbiw	r26, 0x05	; 5
    264a:	16 96       	adiw	r26, 0x06	; 6
    264c:	2d 91       	ld	r18, X+
    264e:	3c 91       	ld	r19, X
    2650:	17 97       	sbiw	r26, 0x07	; 7
    2652:	ec 01       	movw	r28, r24
    2654:	3f 83       	std	Y+7, r19	; 0x07
    2656:	2e 83       	std	Y+6, r18	; 0x06
    2658:	16 96       	adiw	r26, 0x06	; 6
    265a:	8d 91       	ld	r24, X+
    265c:	9c 91       	ld	r25, X
    265e:	17 97       	sbiw	r26, 0x07	; 7
    2660:	14 96       	adiw	r26, 0x04	; 4
    2662:	2d 91       	ld	r18, X+
    2664:	3c 91       	ld	r19, X
    2666:	15 97       	sbiw	r26, 0x05	; 5
    2668:	ec 01       	movw	r28, r24
    266a:	3d 83       	std	Y+5, r19	; 0x05
    266c:	2c 83       	std	Y+4, r18	; 0x04
    266e:	ea 01       	movw	r28, r20
    2670:	89 81       	ldd	r24, Y+1	; 0x01
    2672:	9a 81       	ldd	r25, Y+2	; 0x02
    2674:	a8 17       	cp	r26, r24
    2676:	b9 07       	cpc	r27, r25
    2678:	31 f4       	brne	.+12     	; 0x2686 <vTaskRemoveFromUnorderedEventList+0x66>
    267a:	16 96       	adiw	r26, 0x06	; 6
    267c:	8d 91       	ld	r24, X+
    267e:	9c 91       	ld	r25, X
    2680:	17 97       	sbiw	r26, 0x07	; 7
    2682:	9a 83       	std	Y+2, r25	; 0x02
    2684:	89 83       	std	Y+1, r24	; 0x01
    2686:	1b 96       	adiw	r26, 0x0b	; 11
    2688:	1c 92       	st	X, r1
    268a:	1e 92       	st	-X, r1
    268c:	1a 97       	sbiw	r26, 0x0a	; 10
    268e:	da 01       	movw	r26, r20
    2690:	8c 91       	ld	r24, X
    2692:	81 50       	subi	r24, 0x01	; 1
    2694:	8c 93       	st	X, r24
    2696:	a4 85       	ldd	r26, Z+12	; 0x0c
    2698:	b5 85       	ldd	r27, Z+13	; 0x0d
    269a:	c6 81       	ldd	r28, Z+6	; 0x06
    269c:	d7 81       	ldd	r29, Z+7	; 0x07
    269e:	80 85       	ldd	r24, Z+8	; 0x08
    26a0:	91 85       	ldd	r25, Z+9	; 0x09
    26a2:	9f 83       	std	Y+7, r25	; 0x07
    26a4:	8e 83       	std	Y+6, r24	; 0x06
    26a6:	c0 85       	ldd	r28, Z+8	; 0x08
    26a8:	d1 85       	ldd	r29, Z+9	; 0x09
    26aa:	86 81       	ldd	r24, Z+6	; 0x06
    26ac:	97 81       	ldd	r25, Z+7	; 0x07
    26ae:	9d 83       	std	Y+5, r25	; 0x05
    26b0:	8c 83       	std	Y+4, r24	; 0x04
    26b2:	11 96       	adiw	r26, 0x01	; 1
    26b4:	8d 91       	ld	r24, X+
    26b6:	9c 91       	ld	r25, X
    26b8:	12 97       	sbiw	r26, 0x02	; 2
    26ba:	9f 01       	movw	r18, r30
    26bc:	2e 5f       	subi	r18, 0xFE	; 254
    26be:	3f 4f       	sbci	r19, 0xFF	; 255
    26c0:	82 17       	cp	r24, r18
    26c2:	93 07       	cpc	r25, r19
    26c4:	31 f4       	brne	.+12     	; 0x26d2 <vTaskRemoveFromUnorderedEventList+0xb2>
    26c6:	80 85       	ldd	r24, Z+8	; 0x08
    26c8:	91 85       	ldd	r25, Z+9	; 0x09
    26ca:	12 96       	adiw	r26, 0x02	; 2
    26cc:	9c 93       	st	X, r25
    26ce:	8e 93       	st	-X, r24
    26d0:	11 97       	sbiw	r26, 0x01	; 1
    26d2:	15 86       	std	Z+13, r1	; 0x0d
    26d4:	14 86       	std	Z+12, r1	; 0x0c
    26d6:	8c 91       	ld	r24, X
    26d8:	81 50       	subi	r24, 0x01	; 1
    26da:	8c 93       	st	X, r24
    26dc:	a2 8d       	ldd	r26, Z+26	; 0x1a
    26de:	80 91 ff 15 	lds	r24, 0x15FF	; 0x8015ff <uxTopReadyPriority>
    26e2:	8a 17       	cp	r24, r26
    26e4:	10 f4       	brcc	.+4      	; 0x26ea <vTaskRemoveFromUnorderedEventList+0xca>
    26e6:	a0 93 ff 15 	sts	0x15FF, r26	; 0x8015ff <uxTopReadyPriority>
    26ea:	8b e0       	ldi	r24, 0x0B	; 11
    26ec:	8a 9f       	mul	r24, r26
    26ee:	d0 01       	movw	r26, r0
    26f0:	11 24       	eor	r1, r1
    26f2:	af 5b       	subi	r26, 0xBF	; 191
    26f4:	b9 4e       	sbci	r27, 0xE9	; 233
    26f6:	11 96       	adiw	r26, 0x01	; 1
    26f8:	0d 90       	ld	r0, X+
    26fa:	bc 91       	ld	r27, X
    26fc:	a0 2d       	mov	r26, r0
    26fe:	b7 83       	std	Z+7, r27	; 0x07
    2700:	a6 83       	std	Z+6, r26	; 0x06
    2702:	16 96       	adiw	r26, 0x06	; 6
    2704:	4d 91       	ld	r20, X+
    2706:	5c 91       	ld	r21, X
    2708:	17 97       	sbiw	r26, 0x07	; 7
    270a:	51 87       	std	Z+9, r21	; 0x09
    270c:	40 87       	std	Z+8, r20	; 0x08
    270e:	16 96       	adiw	r26, 0x06	; 6
    2710:	cd 91       	ld	r28, X+
    2712:	dc 91       	ld	r29, X
    2714:	17 97       	sbiw	r26, 0x07	; 7
    2716:	3d 83       	std	Y+5, r19	; 0x05
    2718:	2c 83       	std	Y+4, r18	; 0x04
    271a:	17 96       	adiw	r26, 0x07	; 7
    271c:	3c 93       	st	X, r19
    271e:	2e 93       	st	-X, r18
    2720:	16 97       	sbiw	r26, 0x06	; 6
    2722:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2724:	8a 9f       	mul	r24, r26
    2726:	d0 01       	movw	r26, r0
    2728:	11 24       	eor	r1, r1
    272a:	af 5b       	subi	r26, 0xBF	; 191
    272c:	b9 4e       	sbci	r27, 0xE9	; 233
    272e:	b5 87       	std	Z+13, r27	; 0x0d
    2730:	a4 87       	std	Z+12, r26	; 0x0c
    2732:	8c 91       	ld	r24, X
    2734:	8f 5f       	subi	r24, 0xFF	; 255
    2736:	8c 93       	st	X, r24
    2738:	92 8d       	ldd	r25, Z+26	; 0x1a
    273a:	e0 91 af 16 	lds	r30, 0x16AF	; 0x8016af <pxCurrentTCB>
    273e:	f0 91 b0 16 	lds	r31, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    2742:	82 8d       	ldd	r24, Z+26	; 0x1a
    2744:	89 17       	cp	r24, r25
    2746:	18 f4       	brcc	.+6      	; 0x274e <vTaskRemoveFromUnorderedEventList+0x12e>
    2748:	81 e0       	ldi	r24, 0x01	; 1
    274a:	80 93 f9 15 	sts	0x15F9, r24	; 0x8015f9 <xYieldPending>
    274e:	df 91       	pop	r29
    2750:	cf 91       	pop	r28
    2752:	08 95       	ret

00002754 <vTaskSetTimeOutState>:
    2754:	0f b6       	in	r0, 0x3f	; 63
    2756:	f8 94       	cli
    2758:	0f 92       	push	r0
    275a:	20 91 f8 15 	lds	r18, 0x15F8	; 0x8015f8 <xNumOfOverflows>
    275e:	fc 01       	movw	r30, r24
    2760:	20 83       	st	Z, r18
    2762:	40 91 00 16 	lds	r20, 0x1600	; 0x801600 <xTickCount>
    2766:	50 91 01 16 	lds	r21, 0x1601	; 0x801601 <xTickCount+0x1>
    276a:	60 91 02 16 	lds	r22, 0x1602	; 0x801602 <xTickCount+0x2>
    276e:	70 91 03 16 	lds	r23, 0x1603	; 0x801603 <xTickCount+0x3>
    2772:	41 83       	std	Z+1, r20	; 0x01
    2774:	52 83       	std	Z+2, r21	; 0x02
    2776:	63 83       	std	Z+3, r22	; 0x03
    2778:	74 83       	std	Z+4, r23	; 0x04
    277a:	0f 90       	pop	r0
    277c:	0f be       	out	0x3f, r0	; 63
    277e:	08 95       	ret

00002780 <vTaskInternalSetTimeOutState>:
    2780:	20 91 f8 15 	lds	r18, 0x15F8	; 0x8015f8 <xNumOfOverflows>
    2784:	fc 01       	movw	r30, r24
    2786:	20 83       	st	Z, r18
    2788:	40 91 00 16 	lds	r20, 0x1600	; 0x801600 <xTickCount>
    278c:	50 91 01 16 	lds	r21, 0x1601	; 0x801601 <xTickCount+0x1>
    2790:	60 91 02 16 	lds	r22, 0x1602	; 0x801602 <xTickCount+0x2>
    2794:	70 91 03 16 	lds	r23, 0x1603	; 0x801603 <xTickCount+0x3>
    2798:	41 83       	std	Z+1, r20	; 0x01
    279a:	52 83       	std	Z+2, r21	; 0x02
    279c:	63 83       	std	Z+3, r22	; 0x03
    279e:	74 83       	std	Z+4, r23	; 0x04
    27a0:	08 95       	ret

000027a2 <xTaskCheckForTimeOut>:
    27a2:	8f 92       	push	r8
    27a4:	9f 92       	push	r9
    27a6:	af 92       	push	r10
    27a8:	bf 92       	push	r11
    27aa:	cf 92       	push	r12
    27ac:	df 92       	push	r13
    27ae:	ef 92       	push	r14
    27b0:	ff 92       	push	r15
    27b2:	0f 93       	push	r16
    27b4:	1f 93       	push	r17
    27b6:	cf 93       	push	r28
    27b8:	df 93       	push	r29
    27ba:	fb 01       	movw	r30, r22
    27bc:	0f b6       	in	r0, 0x3f	; 63
    27be:	f8 94       	cli
    27c0:	0f 92       	push	r0
    27c2:	c0 90 00 16 	lds	r12, 0x1600	; 0x801600 <xTickCount>
    27c6:	d0 90 01 16 	lds	r13, 0x1601	; 0x801601 <xTickCount+0x1>
    27ca:	e0 90 02 16 	lds	r14, 0x1602	; 0x801602 <xTickCount+0x2>
    27ce:	f0 90 03 16 	lds	r15, 0x1603	; 0x801603 <xTickCount+0x3>
    27d2:	dc 01       	movw	r26, r24
    27d4:	11 96       	adiw	r26, 0x01	; 1
    27d6:	0d 91       	ld	r16, X+
    27d8:	1d 91       	ld	r17, X+
    27da:	2d 91       	ld	r18, X+
    27dc:	3c 91       	ld	r19, X
    27de:	14 97       	sbiw	r26, 0x04	; 4
    27e0:	46 01       	movw	r8, r12
    27e2:	57 01       	movw	r10, r14
    27e4:	80 1a       	sub	r8, r16
    27e6:	91 0a       	sbc	r9, r17
    27e8:	a2 0a       	sbc	r10, r18
    27ea:	b3 0a       	sbc	r11, r19
    27ec:	40 81       	ld	r20, Z
    27ee:	51 81       	ldd	r21, Z+1	; 0x01
    27f0:	62 81       	ldd	r22, Z+2	; 0x02
    27f2:	73 81       	ldd	r23, Z+3	; 0x03
    27f4:	4f 3f       	cpi	r20, 0xFF	; 255
    27f6:	bf ef       	ldi	r27, 0xFF	; 255
    27f8:	5b 07       	cpc	r21, r27
    27fa:	6b 07       	cpc	r22, r27
    27fc:	7b 07       	cpc	r23, r27
    27fe:	39 f1       	breq	.+78     	; 0x284e <xTaskCheckForTimeOut+0xac>
    2800:	ec 01       	movw	r28, r24
    2802:	b8 81       	ld	r27, Y
    2804:	a0 91 f8 15 	lds	r26, 0x15F8	; 0x8015f8 <xNumOfOverflows>
    2808:	ba 17       	cp	r27, r26
    280a:	59 f0       	breq	.+22     	; 0x2822 <xTaskCheckForTimeOut+0x80>
    280c:	c0 16       	cp	r12, r16
    280e:	d1 06       	cpc	r13, r17
    2810:	e2 06       	cpc	r14, r18
    2812:	f3 06       	cpc	r15, r19
    2814:	30 f0       	brcs	.+12     	; 0x2822 <xTaskCheckForTimeOut+0x80>
    2816:	10 82       	st	Z, r1
    2818:	11 82       	std	Z+1, r1	; 0x01
    281a:	12 82       	std	Z+2, r1	; 0x02
    281c:	13 82       	std	Z+3, r1	; 0x03
    281e:	81 e0       	ldi	r24, 0x01	; 1
    2820:	17 c0       	rjmp	.+46     	; 0x2850 <xTaskCheckForTimeOut+0xae>
    2822:	84 16       	cp	r8, r20
    2824:	95 06       	cpc	r9, r21
    2826:	a6 06       	cpc	r10, r22
    2828:	b7 06       	cpc	r11, r23
    282a:	58 f4       	brcc	.+22     	; 0x2842 <xTaskCheckForTimeOut+0xa0>
    282c:	48 19       	sub	r20, r8
    282e:	59 09       	sbc	r21, r9
    2830:	6a 09       	sbc	r22, r10
    2832:	7b 09       	sbc	r23, r11
    2834:	40 83       	st	Z, r20
    2836:	51 83       	std	Z+1, r21	; 0x01
    2838:	62 83       	std	Z+2, r22	; 0x02
    283a:	73 83       	std	Z+3, r23	; 0x03
    283c:	a1 df       	rcall	.-190    	; 0x2780 <vTaskInternalSetTimeOutState>
    283e:	80 e0       	ldi	r24, 0x00	; 0
    2840:	07 c0       	rjmp	.+14     	; 0x2850 <xTaskCheckForTimeOut+0xae>
    2842:	10 82       	st	Z, r1
    2844:	11 82       	std	Z+1, r1	; 0x01
    2846:	12 82       	std	Z+2, r1	; 0x02
    2848:	13 82       	std	Z+3, r1	; 0x03
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	01 c0       	rjmp	.+2      	; 0x2850 <xTaskCheckForTimeOut+0xae>
    284e:	80 e0       	ldi	r24, 0x00	; 0
    2850:	0f 90       	pop	r0
    2852:	0f be       	out	0x3f, r0	; 63
    2854:	df 91       	pop	r29
    2856:	cf 91       	pop	r28
    2858:	1f 91       	pop	r17
    285a:	0f 91       	pop	r16
    285c:	ff 90       	pop	r15
    285e:	ef 90       	pop	r14
    2860:	df 90       	pop	r13
    2862:	cf 90       	pop	r12
    2864:	bf 90       	pop	r11
    2866:	af 90       	pop	r10
    2868:	9f 90       	pop	r9
    286a:	8f 90       	pop	r8
    286c:	08 95       	ret

0000286e <vTaskMissedYield>:
    286e:	81 e0       	ldi	r24, 0x01	; 1
    2870:	80 93 f9 15 	sts	0x15F9, r24	; 0x8015f9 <xYieldPending>
    2874:	08 95       	ret

00002876 <xTaskGetCurrentTaskHandle>:
    2876:	80 91 af 16 	lds	r24, 0x16AF	; 0x8016af <pxCurrentTCB>
    287a:	90 91 b0 16 	lds	r25, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    287e:	08 95       	ret

00002880 <xTaskGetSchedulerState>:
    2880:	80 91 fe 15 	lds	r24, 0x15FE	; 0x8015fe <xSchedulerRunning>
    2884:	88 23       	and	r24, r24
    2886:	31 f0       	breq	.+12     	; 0x2894 <xTaskGetSchedulerState+0x14>
    2888:	80 91 f0 15 	lds	r24, 0x15F0	; 0x8015f0 <uxSchedulerSuspended>
    288c:	81 11       	cpse	r24, r1
    288e:	04 c0       	rjmp	.+8      	; 0x2898 <xTaskGetSchedulerState+0x18>
    2890:	82 e0       	ldi	r24, 0x02	; 2
    2892:	08 95       	ret
    2894:	81 e0       	ldi	r24, 0x01	; 1
    2896:	08 95       	ret
    2898:	80 e0       	ldi	r24, 0x00	; 0
    289a:	08 95       	ret

0000289c <xTaskPriorityInherit>:
    289c:	0f 93       	push	r16
    289e:	1f 93       	push	r17
    28a0:	cf 93       	push	r28
    28a2:	df 93       	push	r29
    28a4:	fc 01       	movw	r30, r24
    28a6:	89 2b       	or	r24, r25
    28a8:	09 f4       	brne	.+2      	; 0x28ac <xTaskPriorityInherit+0x10>
    28aa:	77 c0       	rjmp	.+238    	; 0x299a <xTaskPriorityInherit+0xfe>
    28ac:	82 8d       	ldd	r24, Z+26	; 0x1a
    28ae:	a0 91 af 16 	lds	r26, 0x16AF	; 0x8016af <pxCurrentTCB>
    28b2:	b0 91 b0 16 	lds	r27, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    28b6:	5a 96       	adiw	r26, 0x1a	; 26
    28b8:	9c 91       	ld	r25, X
    28ba:	89 17       	cp	r24, r25
    28bc:	08 f0       	brcs	.+2      	; 0x28c0 <xTaskPriorityInherit+0x24>
    28be:	63 c0       	rjmp	.+198    	; 0x2986 <xTaskPriorityInherit+0xea>
    28c0:	46 85       	ldd	r20, Z+14	; 0x0e
    28c2:	57 85       	ldd	r21, Z+15	; 0x0f
    28c4:	60 89       	ldd	r22, Z+16	; 0x10
    28c6:	71 89       	ldd	r23, Z+17	; 0x11
    28c8:	77 23       	and	r23, r23
    28ca:	94 f0       	brlt	.+36     	; 0x28f0 <xTaskPriorityInherit+0x54>
    28cc:	a0 91 af 16 	lds	r26, 0x16AF	; 0x8016af <pxCurrentTCB>
    28d0:	b0 91 b0 16 	lds	r27, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    28d4:	5a 96       	adiw	r26, 0x1a	; 26
    28d6:	9c 91       	ld	r25, X
    28d8:	4a e0       	ldi	r20, 0x0A	; 10
    28da:	50 e0       	ldi	r21, 0x00	; 0
    28dc:	60 e0       	ldi	r22, 0x00	; 0
    28de:	70 e0       	ldi	r23, 0x00	; 0
    28e0:	49 1b       	sub	r20, r25
    28e2:	51 09       	sbc	r21, r1
    28e4:	61 09       	sbc	r22, r1
    28e6:	71 09       	sbc	r23, r1
    28e8:	46 87       	std	Z+14, r20	; 0x0e
    28ea:	57 87       	std	Z+15, r21	; 0x0f
    28ec:	60 8b       	std	Z+16, r22	; 0x10
    28ee:	71 8b       	std	Z+17, r23	; 0x11
    28f0:	24 85       	ldd	r18, Z+12	; 0x0c
    28f2:	35 85       	ldd	r19, Z+13	; 0x0d
    28f4:	4b e0       	ldi	r20, 0x0B	; 11
    28f6:	84 9f       	mul	r24, r20
    28f8:	c0 01       	movw	r24, r0
    28fa:	11 24       	eor	r1, r1
    28fc:	8f 5b       	subi	r24, 0xBF	; 191
    28fe:	99 4e       	sbci	r25, 0xE9	; 233
    2900:	28 17       	cp	r18, r24
    2902:	39 07       	cpc	r19, r25
    2904:	b9 f5       	brne	.+110    	; 0x2974 <xTaskPriorityInherit+0xd8>
    2906:	ef 01       	movw	r28, r30
    2908:	8f 01       	movw	r16, r30
    290a:	0e 5f       	subi	r16, 0xFE	; 254
    290c:	1f 4f       	sbci	r17, 0xFF	; 255
    290e:	c8 01       	movw	r24, r16
    2910:	0e 94 15 04 	call	0x82a	; 0x82a <uxListRemove>
    2914:	e0 91 af 16 	lds	r30, 0x16AF	; 0x8016af <pxCurrentTCB>
    2918:	f0 91 b0 16 	lds	r31, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    291c:	e2 8d       	ldd	r30, Z+26	; 0x1a
    291e:	ea 8f       	std	Y+26, r30	; 0x1a
    2920:	80 91 ff 15 	lds	r24, 0x15FF	; 0x8015ff <uxTopReadyPriority>
    2924:	8e 17       	cp	r24, r30
    2926:	10 f4       	brcc	.+4      	; 0x292c <xTaskPriorityInherit+0x90>
    2928:	e0 93 ff 15 	sts	0x15FF, r30	; 0x8015ff <uxTopReadyPriority>
    292c:	8b e0       	ldi	r24, 0x0B	; 11
    292e:	8e 9f       	mul	r24, r30
    2930:	f0 01       	movw	r30, r0
    2932:	11 24       	eor	r1, r1
    2934:	ef 5b       	subi	r30, 0xBF	; 191
    2936:	f9 4e       	sbci	r31, 0xE9	; 233
    2938:	01 80       	ldd	r0, Z+1	; 0x01
    293a:	f2 81       	ldd	r31, Z+2	; 0x02
    293c:	e0 2d       	mov	r30, r0
    293e:	ff 83       	std	Y+7, r31	; 0x07
    2940:	ee 83       	std	Y+6, r30	; 0x06
    2942:	26 81       	ldd	r18, Z+6	; 0x06
    2944:	37 81       	ldd	r19, Z+7	; 0x07
    2946:	39 87       	std	Y+9, r19	; 0x09
    2948:	28 87       	std	Y+8, r18	; 0x08
    294a:	a6 81       	ldd	r26, Z+6	; 0x06
    294c:	b7 81       	ldd	r27, Z+7	; 0x07
    294e:	15 96       	adiw	r26, 0x05	; 5
    2950:	1c 93       	st	X, r17
    2952:	0e 93       	st	-X, r16
    2954:	14 97       	sbiw	r26, 0x04	; 4
    2956:	17 83       	std	Z+7, r17	; 0x07
    2958:	06 83       	std	Z+6, r16	; 0x06
    295a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    295c:	8e 9f       	mul	r24, r30
    295e:	f0 01       	movw	r30, r0
    2960:	11 24       	eor	r1, r1
    2962:	ef 5b       	subi	r30, 0xBF	; 191
    2964:	f9 4e       	sbci	r31, 0xE9	; 233
    2966:	fd 87       	std	Y+13, r31	; 0x0d
    2968:	ec 87       	std	Y+12, r30	; 0x0c
    296a:	80 81       	ld	r24, Z
    296c:	8f 5f       	subi	r24, 0xFF	; 255
    296e:	80 83       	st	Z, r24
    2970:	81 e0       	ldi	r24, 0x01	; 1
    2972:	16 c0       	rjmp	.+44     	; 0x29a0 <xTaskPriorityInherit+0x104>
    2974:	a0 91 af 16 	lds	r26, 0x16AF	; 0x8016af <pxCurrentTCB>
    2978:	b0 91 b0 16 	lds	r27, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    297c:	5a 96       	adiw	r26, 0x1a	; 26
    297e:	8c 91       	ld	r24, X
    2980:	82 8f       	std	Z+26, r24	; 0x1a
    2982:	81 e0       	ldi	r24, 0x01	; 1
    2984:	0d c0       	rjmp	.+26     	; 0x29a0 <xTaskPriorityInherit+0x104>
    2986:	95 a5       	ldd	r25, Z+45	; 0x2d
    2988:	e0 91 af 16 	lds	r30, 0x16AF	; 0x8016af <pxCurrentTCB>
    298c:	f0 91 b0 16 	lds	r31, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    2990:	82 8d       	ldd	r24, Z+26	; 0x1a
    2992:	98 17       	cp	r25, r24
    2994:	20 f0       	brcs	.+8      	; 0x299e <xTaskPriorityInherit+0x102>
    2996:	80 e0       	ldi	r24, 0x00	; 0
    2998:	03 c0       	rjmp	.+6      	; 0x29a0 <xTaskPriorityInherit+0x104>
    299a:	80 e0       	ldi	r24, 0x00	; 0
    299c:	01 c0       	rjmp	.+2      	; 0x29a0 <xTaskPriorityInherit+0x104>
    299e:	81 e0       	ldi	r24, 0x01	; 1
    29a0:	df 91       	pop	r29
    29a2:	cf 91       	pop	r28
    29a4:	1f 91       	pop	r17
    29a6:	0f 91       	pop	r16
    29a8:	08 95       	ret

000029aa <xTaskPriorityDisinherit>:
    29aa:	0f 93       	push	r16
    29ac:	1f 93       	push	r17
    29ae:	cf 93       	push	r28
    29b0:	df 93       	push	r29
    29b2:	fc 01       	movw	r30, r24
    29b4:	89 2b       	or	r24, r25
    29b6:	09 f4       	brne	.+2      	; 0x29ba <xTaskPriorityDisinherit+0x10>
    29b8:	49 c0       	rjmp	.+146    	; 0x2a4c <xTaskPriorityDisinherit+0xa2>
    29ba:	86 a5       	ldd	r24, Z+46	; 0x2e
    29bc:	81 50       	subi	r24, 0x01	; 1
    29be:	86 a7       	std	Z+46, r24	; 0x2e
    29c0:	22 8d       	ldd	r18, Z+26	; 0x1a
    29c2:	95 a5       	ldd	r25, Z+45	; 0x2d
    29c4:	29 17       	cp	r18, r25
    29c6:	09 f4       	brne	.+2      	; 0x29ca <xTaskPriorityDisinherit+0x20>
    29c8:	43 c0       	rjmp	.+134    	; 0x2a50 <xTaskPriorityDisinherit+0xa6>
    29ca:	81 11       	cpse	r24, r1
    29cc:	43 c0       	rjmp	.+134    	; 0x2a54 <xTaskPriorityDisinherit+0xaa>
    29ce:	ef 01       	movw	r28, r30
    29d0:	8f 01       	movw	r16, r30
    29d2:	0e 5f       	subi	r16, 0xFE	; 254
    29d4:	1f 4f       	sbci	r17, 0xFF	; 255
    29d6:	c8 01       	movw	r24, r16
    29d8:	0e 94 15 04 	call	0x82a	; 0x82a <uxListRemove>
    29dc:	ed a5       	ldd	r30, Y+45	; 0x2d
    29de:	ea 8f       	std	Y+26, r30	; 0x1a
    29e0:	8a e0       	ldi	r24, 0x0A	; 10
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	a0 e0       	ldi	r26, 0x00	; 0
    29e6:	b0 e0       	ldi	r27, 0x00	; 0
    29e8:	8e 1b       	sub	r24, r30
    29ea:	91 09       	sbc	r25, r1
    29ec:	a1 09       	sbc	r26, r1
    29ee:	b1 09       	sbc	r27, r1
    29f0:	8e 87       	std	Y+14, r24	; 0x0e
    29f2:	9f 87       	std	Y+15, r25	; 0x0f
    29f4:	a8 8b       	std	Y+16, r26	; 0x10
    29f6:	b9 8b       	std	Y+17, r27	; 0x11
    29f8:	80 91 ff 15 	lds	r24, 0x15FF	; 0x8015ff <uxTopReadyPriority>
    29fc:	8e 17       	cp	r24, r30
    29fe:	10 f4       	brcc	.+4      	; 0x2a04 <xTaskPriorityDisinherit+0x5a>
    2a00:	e0 93 ff 15 	sts	0x15FF, r30	; 0x8015ff <uxTopReadyPriority>
    2a04:	8b e0       	ldi	r24, 0x0B	; 11
    2a06:	8e 9f       	mul	r24, r30
    2a08:	f0 01       	movw	r30, r0
    2a0a:	11 24       	eor	r1, r1
    2a0c:	ef 5b       	subi	r30, 0xBF	; 191
    2a0e:	f9 4e       	sbci	r31, 0xE9	; 233
    2a10:	01 80       	ldd	r0, Z+1	; 0x01
    2a12:	f2 81       	ldd	r31, Z+2	; 0x02
    2a14:	e0 2d       	mov	r30, r0
    2a16:	ff 83       	std	Y+7, r31	; 0x07
    2a18:	ee 83       	std	Y+6, r30	; 0x06
    2a1a:	26 81       	ldd	r18, Z+6	; 0x06
    2a1c:	37 81       	ldd	r19, Z+7	; 0x07
    2a1e:	39 87       	std	Y+9, r19	; 0x09
    2a20:	28 87       	std	Y+8, r18	; 0x08
    2a22:	a6 81       	ldd	r26, Z+6	; 0x06
    2a24:	b7 81       	ldd	r27, Z+7	; 0x07
    2a26:	15 96       	adiw	r26, 0x05	; 5
    2a28:	1c 93       	st	X, r17
    2a2a:	0e 93       	st	-X, r16
    2a2c:	14 97       	sbiw	r26, 0x04	; 4
    2a2e:	17 83       	std	Z+7, r17	; 0x07
    2a30:	06 83       	std	Z+6, r16	; 0x06
    2a32:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2a34:	8e 9f       	mul	r24, r30
    2a36:	f0 01       	movw	r30, r0
    2a38:	11 24       	eor	r1, r1
    2a3a:	ef 5b       	subi	r30, 0xBF	; 191
    2a3c:	f9 4e       	sbci	r31, 0xE9	; 233
    2a3e:	fd 87       	std	Y+13, r31	; 0x0d
    2a40:	ec 87       	std	Y+12, r30	; 0x0c
    2a42:	80 81       	ld	r24, Z
    2a44:	8f 5f       	subi	r24, 0xFF	; 255
    2a46:	80 83       	st	Z, r24
    2a48:	81 e0       	ldi	r24, 0x01	; 1
    2a4a:	05 c0       	rjmp	.+10     	; 0x2a56 <xTaskPriorityDisinherit+0xac>
    2a4c:	80 e0       	ldi	r24, 0x00	; 0
    2a4e:	03 c0       	rjmp	.+6      	; 0x2a56 <xTaskPriorityDisinherit+0xac>
    2a50:	80 e0       	ldi	r24, 0x00	; 0
    2a52:	01 c0       	rjmp	.+2      	; 0x2a56 <xTaskPriorityDisinherit+0xac>
    2a54:	80 e0       	ldi	r24, 0x00	; 0
    2a56:	df 91       	pop	r29
    2a58:	cf 91       	pop	r28
    2a5a:	1f 91       	pop	r17
    2a5c:	0f 91       	pop	r16
    2a5e:	08 95       	ret

00002a60 <vTaskPriorityDisinheritAfterTimeout>:
    2a60:	0f 93       	push	r16
    2a62:	1f 93       	push	r17
    2a64:	cf 93       	push	r28
    2a66:	df 93       	push	r29
    2a68:	fc 01       	movw	r30, r24
    2a6a:	89 2b       	or	r24, r25
    2a6c:	09 f4       	brne	.+2      	; 0x2a70 <vTaskPriorityDisinheritAfterTimeout+0x10>
    2a6e:	5a c0       	rjmp	.+180    	; 0x2b24 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2a70:	85 a5       	ldd	r24, Z+45	; 0x2d
    2a72:	86 17       	cp	r24, r22
    2a74:	08 f4       	brcc	.+2      	; 0x2a78 <vTaskPriorityDisinheritAfterTimeout+0x18>
    2a76:	86 2f       	mov	r24, r22
    2a78:	92 8d       	ldd	r25, Z+26	; 0x1a
    2a7a:	89 17       	cp	r24, r25
    2a7c:	09 f4       	brne	.+2      	; 0x2a80 <vTaskPriorityDisinheritAfterTimeout+0x20>
    2a7e:	52 c0       	rjmp	.+164    	; 0x2b24 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2a80:	26 a5       	ldd	r18, Z+46	; 0x2e
    2a82:	21 30       	cpi	r18, 0x01	; 1
    2a84:	09 f0       	breq	.+2      	; 0x2a88 <vTaskPriorityDisinheritAfterTimeout+0x28>
    2a86:	4e c0       	rjmp	.+156    	; 0x2b24 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2a88:	82 8f       	std	Z+26, r24	; 0x1a
    2a8a:	46 85       	ldd	r20, Z+14	; 0x0e
    2a8c:	57 85       	ldd	r21, Z+15	; 0x0f
    2a8e:	60 89       	ldd	r22, Z+16	; 0x10
    2a90:	71 89       	ldd	r23, Z+17	; 0x11
    2a92:	77 23       	and	r23, r23
    2a94:	64 f0       	brlt	.+24     	; 0x2aae <vTaskPriorityDisinheritAfterTimeout+0x4e>
    2a96:	4a e0       	ldi	r20, 0x0A	; 10
    2a98:	50 e0       	ldi	r21, 0x00	; 0
    2a9a:	60 e0       	ldi	r22, 0x00	; 0
    2a9c:	70 e0       	ldi	r23, 0x00	; 0
    2a9e:	48 1b       	sub	r20, r24
    2aa0:	51 09       	sbc	r21, r1
    2aa2:	61 09       	sbc	r22, r1
    2aa4:	71 09       	sbc	r23, r1
    2aa6:	46 87       	std	Z+14, r20	; 0x0e
    2aa8:	57 87       	std	Z+15, r21	; 0x0f
    2aaa:	60 8b       	std	Z+16, r22	; 0x10
    2aac:	71 8b       	std	Z+17, r23	; 0x11
    2aae:	24 85       	ldd	r18, Z+12	; 0x0c
    2ab0:	35 85       	ldd	r19, Z+13	; 0x0d
    2ab2:	4b e0       	ldi	r20, 0x0B	; 11
    2ab4:	94 9f       	mul	r25, r20
    2ab6:	c0 01       	movw	r24, r0
    2ab8:	11 24       	eor	r1, r1
    2aba:	8f 5b       	subi	r24, 0xBF	; 191
    2abc:	99 4e       	sbci	r25, 0xE9	; 233
    2abe:	28 17       	cp	r18, r24
    2ac0:	39 07       	cpc	r19, r25
    2ac2:	81 f5       	brne	.+96     	; 0x2b24 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2ac4:	ef 01       	movw	r28, r30
    2ac6:	8f 01       	movw	r16, r30
    2ac8:	0e 5f       	subi	r16, 0xFE	; 254
    2aca:	1f 4f       	sbci	r17, 0xFF	; 255
    2acc:	c8 01       	movw	r24, r16
    2ace:	0e 94 15 04 	call	0x82a	; 0x82a <uxListRemove>
    2ad2:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2ad4:	80 91 ff 15 	lds	r24, 0x15FF	; 0x8015ff <uxTopReadyPriority>
    2ad8:	8e 17       	cp	r24, r30
    2ada:	10 f4       	brcc	.+4      	; 0x2ae0 <vTaskPriorityDisinheritAfterTimeout+0x80>
    2adc:	e0 93 ff 15 	sts	0x15FF, r30	; 0x8015ff <uxTopReadyPriority>
    2ae0:	8b e0       	ldi	r24, 0x0B	; 11
    2ae2:	8e 9f       	mul	r24, r30
    2ae4:	f0 01       	movw	r30, r0
    2ae6:	11 24       	eor	r1, r1
    2ae8:	ef 5b       	subi	r30, 0xBF	; 191
    2aea:	f9 4e       	sbci	r31, 0xE9	; 233
    2aec:	01 80       	ldd	r0, Z+1	; 0x01
    2aee:	f2 81       	ldd	r31, Z+2	; 0x02
    2af0:	e0 2d       	mov	r30, r0
    2af2:	ff 83       	std	Y+7, r31	; 0x07
    2af4:	ee 83       	std	Y+6, r30	; 0x06
    2af6:	26 81       	ldd	r18, Z+6	; 0x06
    2af8:	37 81       	ldd	r19, Z+7	; 0x07
    2afa:	39 87       	std	Y+9, r19	; 0x09
    2afc:	28 87       	std	Y+8, r18	; 0x08
    2afe:	a6 81       	ldd	r26, Z+6	; 0x06
    2b00:	b7 81       	ldd	r27, Z+7	; 0x07
    2b02:	15 96       	adiw	r26, 0x05	; 5
    2b04:	1c 93       	st	X, r17
    2b06:	0e 93       	st	-X, r16
    2b08:	14 97       	sbiw	r26, 0x04	; 4
    2b0a:	17 83       	std	Z+7, r17	; 0x07
    2b0c:	06 83       	std	Z+6, r16	; 0x06
    2b0e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2b10:	8e 9f       	mul	r24, r30
    2b12:	f0 01       	movw	r30, r0
    2b14:	11 24       	eor	r1, r1
    2b16:	ef 5b       	subi	r30, 0xBF	; 191
    2b18:	f9 4e       	sbci	r31, 0xE9	; 233
    2b1a:	fd 87       	std	Y+13, r31	; 0x0d
    2b1c:	ec 87       	std	Y+12, r30	; 0x0c
    2b1e:	80 81       	ld	r24, Z
    2b20:	8f 5f       	subi	r24, 0xFF	; 255
    2b22:	80 83       	st	Z, r24
    2b24:	df 91       	pop	r29
    2b26:	cf 91       	pop	r28
    2b28:	1f 91       	pop	r17
    2b2a:	0f 91       	pop	r16
    2b2c:	08 95       	ret

00002b2e <uxTaskResetEventItemValue>:
    2b2e:	cf 92       	push	r12
    2b30:	df 92       	push	r13
    2b32:	ef 92       	push	r14
    2b34:	ff 92       	push	r15
    2b36:	e0 91 af 16 	lds	r30, 0x16AF	; 0x8016af <pxCurrentTCB>
    2b3a:	f0 91 b0 16 	lds	r31, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    2b3e:	66 85       	ldd	r22, Z+14	; 0x0e
    2b40:	77 85       	ldd	r23, Z+15	; 0x0f
    2b42:	80 89       	ldd	r24, Z+16	; 0x10
    2b44:	91 89       	ldd	r25, Z+17	; 0x11
    2b46:	e0 91 af 16 	lds	r30, 0x16AF	; 0x8016af <pxCurrentTCB>
    2b4a:	f0 91 b0 16 	lds	r31, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    2b4e:	a0 91 af 16 	lds	r26, 0x16AF	; 0x8016af <pxCurrentTCB>
    2b52:	b0 91 b0 16 	lds	r27, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    2b56:	5a 96       	adiw	r26, 0x1a	; 26
    2b58:	2c 91       	ld	r18, X
    2b5a:	0f 2e       	mov	r0, r31
    2b5c:	fa e0       	ldi	r31, 0x0A	; 10
    2b5e:	cf 2e       	mov	r12, r31
    2b60:	d1 2c       	mov	r13, r1
    2b62:	e1 2c       	mov	r14, r1
    2b64:	f1 2c       	mov	r15, r1
    2b66:	f0 2d       	mov	r31, r0
    2b68:	c2 1a       	sub	r12, r18
    2b6a:	d1 08       	sbc	r13, r1
    2b6c:	e1 08       	sbc	r14, r1
    2b6e:	f1 08       	sbc	r15, r1
    2b70:	c6 86       	std	Z+14, r12	; 0x0e
    2b72:	d7 86       	std	Z+15, r13	; 0x0f
    2b74:	e0 8a       	std	Z+16, r14	; 0x10
    2b76:	f1 8a       	std	Z+17, r15	; 0x11
    2b78:	ff 90       	pop	r15
    2b7a:	ef 90       	pop	r14
    2b7c:	df 90       	pop	r13
    2b7e:	cf 90       	pop	r12
    2b80:	08 95       	ret

00002b82 <pvTaskIncrementMutexHeldCount>:
    2b82:	80 91 af 16 	lds	r24, 0x16AF	; 0x8016af <pxCurrentTCB>
    2b86:	90 91 b0 16 	lds	r25, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    2b8a:	89 2b       	or	r24, r25
    2b8c:	39 f0       	breq	.+14     	; 0x2b9c <pvTaskIncrementMutexHeldCount+0x1a>
    2b8e:	e0 91 af 16 	lds	r30, 0x16AF	; 0x8016af <pxCurrentTCB>
    2b92:	f0 91 b0 16 	lds	r31, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    2b96:	86 a5       	ldd	r24, Z+46	; 0x2e
    2b98:	8f 5f       	subi	r24, 0xFF	; 255
    2b9a:	86 a7       	std	Z+46, r24	; 0x2e
    2b9c:	80 91 af 16 	lds	r24, 0x16AF	; 0x8016af <pxCurrentTCB>
    2ba0:	90 91 b0 16 	lds	r25, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    2ba4:	08 95       	ret

00002ba6 <xTaskGenericNotifyWait>:
    2ba6:	4f 92       	push	r4
    2ba8:	5f 92       	push	r5
    2baa:	6f 92       	push	r6
    2bac:	7f 92       	push	r7
    2bae:	af 92       	push	r10
    2bb0:	bf 92       	push	r11
    2bb2:	cf 92       	push	r12
    2bb4:	df 92       	push	r13
    2bb6:	ef 92       	push	r14
    2bb8:	ff 92       	push	r15
    2bba:	0f 93       	push	r16
    2bbc:	1f 93       	push	r17
    2bbe:	cf 93       	push	r28
    2bc0:	df 93       	push	r29
    2bc2:	28 01       	movw	r4, r16
    2bc4:	39 01       	movw	r6, r18
    2bc6:	0f b6       	in	r0, 0x3f	; 63
    2bc8:	f8 94       	cli
    2bca:	0f 92       	push	r0
    2bcc:	e0 91 af 16 	lds	r30, 0x16AF	; 0x8016af <pxCurrentTCB>
    2bd0:	f0 91 b0 16 	lds	r31, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    2bd4:	c8 2f       	mov	r28, r24
    2bd6:	d0 e0       	ldi	r29, 0x00	; 0
    2bd8:	ec 0f       	add	r30, r28
    2bda:	fd 1f       	adc	r31, r29
    2bdc:	83 a9       	ldd	r24, Z+51	; 0x33
    2bde:	82 30       	cpi	r24, 0x02	; 2
    2be0:	79 f1       	breq	.+94     	; 0x2c40 <xTaskGenericNotifyWait+0x9a>
    2be2:	e0 91 af 16 	lds	r30, 0x16AF	; 0x8016af <pxCurrentTCB>
    2be6:	f0 91 b0 16 	lds	r31, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    2bea:	ce 01       	movw	r24, r28
    2bec:	88 0f       	add	r24, r24
    2bee:	99 1f       	adc	r25, r25
    2bf0:	88 0f       	add	r24, r24
    2bf2:	99 1f       	adc	r25, r25
    2bf4:	e8 0f       	add	r30, r24
    2bf6:	f9 1f       	adc	r31, r25
    2bf8:	87 a5       	ldd	r24, Z+47	; 0x2f
    2bfa:	90 a9       	ldd	r25, Z+48	; 0x30
    2bfc:	a1 a9       	ldd	r26, Z+49	; 0x31
    2bfe:	b2 a9       	ldd	r27, Z+50	; 0x32
    2c00:	40 95       	com	r20
    2c02:	50 95       	com	r21
    2c04:	60 95       	com	r22
    2c06:	70 95       	com	r23
    2c08:	48 23       	and	r20, r24
    2c0a:	59 23       	and	r21, r25
    2c0c:	6a 23       	and	r22, r26
    2c0e:	7b 23       	and	r23, r27
    2c10:	47 a7       	std	Z+47, r20	; 0x2f
    2c12:	50 ab       	std	Z+48, r21	; 0x30
    2c14:	61 ab       	std	Z+49, r22	; 0x31
    2c16:	72 ab       	std	Z+50, r23	; 0x32
    2c18:	e0 91 af 16 	lds	r30, 0x16AF	; 0x8016af <pxCurrentTCB>
    2c1c:	f0 91 b0 16 	lds	r31, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    2c20:	ec 0f       	add	r30, r28
    2c22:	fd 1f       	adc	r31, r29
    2c24:	81 e0       	ldi	r24, 0x01	; 1
    2c26:	83 ab       	std	Z+51, r24	; 0x33
    2c28:	a1 14       	cp	r10, r1
    2c2a:	b1 04       	cpc	r11, r1
    2c2c:	c1 04       	cpc	r12, r1
    2c2e:	d1 04       	cpc	r13, r1
    2c30:	39 f0       	breq	.+14     	; 0x2c40 <xTaskGenericNotifyWait+0x9a>
    2c32:	41 e0       	ldi	r20, 0x01	; 1
    2c34:	c6 01       	movw	r24, r12
    2c36:	b5 01       	movw	r22, r10
    2c38:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <prvAddCurrentTaskToDelayedList>
    2c3c:	0e 94 91 04 	call	0x922	; 0x922 <vPortYield>
    2c40:	0f 90       	pop	r0
    2c42:	0f be       	out	0x3f, r0	; 63
    2c44:	0f b6       	in	r0, 0x3f	; 63
    2c46:	f8 94       	cli
    2c48:	0f 92       	push	r0
    2c4a:	e1 14       	cp	r14, r1
    2c4c:	f1 04       	cpc	r15, r1
    2c4e:	a1 f0       	breq	.+40     	; 0x2c78 <xTaskGenericNotifyWait+0xd2>
    2c50:	e0 91 af 16 	lds	r30, 0x16AF	; 0x8016af <pxCurrentTCB>
    2c54:	f0 91 b0 16 	lds	r31, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    2c58:	ce 01       	movw	r24, r28
    2c5a:	88 0f       	add	r24, r24
    2c5c:	99 1f       	adc	r25, r25
    2c5e:	88 0f       	add	r24, r24
    2c60:	99 1f       	adc	r25, r25
    2c62:	e8 0f       	add	r30, r24
    2c64:	f9 1f       	adc	r31, r25
    2c66:	87 a5       	ldd	r24, Z+47	; 0x2f
    2c68:	90 a9       	ldd	r25, Z+48	; 0x30
    2c6a:	a1 a9       	ldd	r26, Z+49	; 0x31
    2c6c:	b2 a9       	ldd	r27, Z+50	; 0x32
    2c6e:	f7 01       	movw	r30, r14
    2c70:	80 83       	st	Z, r24
    2c72:	91 83       	std	Z+1, r25	; 0x01
    2c74:	a2 83       	std	Z+2, r26	; 0x02
    2c76:	b3 83       	std	Z+3, r27	; 0x03
    2c78:	e0 91 af 16 	lds	r30, 0x16AF	; 0x8016af <pxCurrentTCB>
    2c7c:	f0 91 b0 16 	lds	r31, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    2c80:	ec 0f       	add	r30, r28
    2c82:	fd 1f       	adc	r31, r29
    2c84:	83 a9       	ldd	r24, Z+51	; 0x33
    2c86:	82 30       	cpi	r24, 0x02	; 2
    2c88:	e9 f4       	brne	.+58     	; 0x2cc4 <xTaskGenericNotifyWait+0x11e>
    2c8a:	e0 91 af 16 	lds	r30, 0x16AF	; 0x8016af <pxCurrentTCB>
    2c8e:	f0 91 b0 16 	lds	r31, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    2c92:	ce 01       	movw	r24, r28
    2c94:	88 0f       	add	r24, r24
    2c96:	99 1f       	adc	r25, r25
    2c98:	88 0f       	add	r24, r24
    2c9a:	99 1f       	adc	r25, r25
    2c9c:	e8 0f       	add	r30, r24
    2c9e:	f9 1f       	adc	r31, r25
    2ca0:	87 a5       	ldd	r24, Z+47	; 0x2f
    2ca2:	90 a9       	ldd	r25, Z+48	; 0x30
    2ca4:	a1 a9       	ldd	r26, Z+49	; 0x31
    2ca6:	b2 a9       	ldd	r27, Z+50	; 0x32
    2ca8:	40 94       	com	r4
    2caa:	50 94       	com	r5
    2cac:	60 94       	com	r6
    2cae:	70 94       	com	r7
    2cb0:	48 22       	and	r4, r24
    2cb2:	59 22       	and	r5, r25
    2cb4:	6a 22       	and	r6, r26
    2cb6:	7b 22       	and	r7, r27
    2cb8:	47 a6       	std	Z+47, r4	; 0x2f
    2cba:	50 aa       	std	Z+48, r5	; 0x30
    2cbc:	61 aa       	std	Z+49, r6	; 0x31
    2cbe:	72 aa       	std	Z+50, r7	; 0x32
    2cc0:	81 e0       	ldi	r24, 0x01	; 1
    2cc2:	01 c0       	rjmp	.+2      	; 0x2cc6 <xTaskGenericNotifyWait+0x120>
    2cc4:	80 e0       	ldi	r24, 0x00	; 0
    2cc6:	20 91 af 16 	lds	r18, 0x16AF	; 0x8016af <pxCurrentTCB>
    2cca:	30 91 b0 16 	lds	r19, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    2cce:	c2 0f       	add	r28, r18
    2cd0:	d3 1f       	adc	r29, r19
    2cd2:	1b aa       	std	Y+51, r1	; 0x33
    2cd4:	0f 90       	pop	r0
    2cd6:	0f be       	out	0x3f, r0	; 63
    2cd8:	df 91       	pop	r29
    2cda:	cf 91       	pop	r28
    2cdc:	1f 91       	pop	r17
    2cde:	0f 91       	pop	r16
    2ce0:	ff 90       	pop	r15
    2ce2:	ef 90       	pop	r14
    2ce4:	df 90       	pop	r13
    2ce6:	cf 90       	pop	r12
    2ce8:	bf 90       	pop	r11
    2cea:	af 90       	pop	r10
    2cec:	7f 90       	pop	r7
    2cee:	6f 90       	pop	r6
    2cf0:	5f 90       	pop	r5
    2cf2:	4f 90       	pop	r4
    2cf4:	08 95       	ret

00002cf6 <xTaskGenericNotify>:
    2cf6:	8f 92       	push	r8
    2cf8:	9f 92       	push	r9
    2cfa:	af 92       	push	r10
    2cfc:	bf 92       	push	r11
    2cfe:	ef 92       	push	r14
    2d00:	ff 92       	push	r15
    2d02:	0f 93       	push	r16
    2d04:	cf 93       	push	r28
    2d06:	df 93       	push	r29
    2d08:	dc 01       	movw	r26, r24
    2d0a:	0f b6       	in	r0, 0x3f	; 63
    2d0c:	f8 94       	cli
    2d0e:	0f 92       	push	r0
    2d10:	e1 14       	cp	r14, r1
    2d12:	f1 04       	cpc	r15, r1
    2d14:	89 f0       	breq	.+34     	; 0x2d38 <xTaskGenericNotify+0x42>
    2d16:	e6 2f       	mov	r30, r22
    2d18:	f0 e0       	ldi	r31, 0x00	; 0
    2d1a:	ee 0f       	add	r30, r30
    2d1c:	ff 1f       	adc	r31, r31
    2d1e:	ee 0f       	add	r30, r30
    2d20:	ff 1f       	adc	r31, r31
    2d22:	e8 0f       	add	r30, r24
    2d24:	f9 1f       	adc	r31, r25
    2d26:	87 a4       	ldd	r8, Z+47	; 0x2f
    2d28:	90 a8       	ldd	r9, Z+48	; 0x30
    2d2a:	a1 a8       	ldd	r10, Z+49	; 0x31
    2d2c:	b2 a8       	ldd	r11, Z+50	; 0x32
    2d2e:	f7 01       	movw	r30, r14
    2d30:	80 82       	st	Z, r8
    2d32:	91 82       	std	Z+1, r9	; 0x01
    2d34:	a2 82       	std	Z+2, r10	; 0x02
    2d36:	b3 82       	std	Z+3, r11	; 0x03
    2d38:	70 e0       	ldi	r23, 0x00	; 0
    2d3a:	fd 01       	movw	r30, r26
    2d3c:	e6 0f       	add	r30, r22
    2d3e:	f7 1f       	adc	r31, r23
    2d40:	83 a9       	ldd	r24, Z+51	; 0x33
    2d42:	92 e0       	ldi	r25, 0x02	; 2
    2d44:	93 ab       	std	Z+51, r25	; 0x33
    2d46:	02 30       	cpi	r16, 0x02	; 2
    2d48:	01 f1       	breq	.+64     	; 0x2d8a <xTaskGenericNotify+0x94>
    2d4a:	18 f4       	brcc	.+6      	; 0x2d52 <xTaskGenericNotify+0x5c>
    2d4c:	01 30       	cpi	r16, 0x01	; 1
    2d4e:	31 f0       	breq	.+12     	; 0x2d5c <xTaskGenericNotify+0x66>
    2d50:	4d c0       	rjmp	.+154    	; 0x2dec <xTaskGenericNotify+0xf6>
    2d52:	03 30       	cpi	r16, 0x03	; 3
    2d54:	79 f1       	breq	.+94     	; 0x2db4 <xTaskGenericNotify+0xbe>
    2d56:	04 30       	cpi	r16, 0x04	; 4
    2d58:	d1 f1       	breq	.+116    	; 0x2dce <xTaskGenericNotify+0xd8>
    2d5a:	48 c0       	rjmp	.+144    	; 0x2dec <xTaskGenericNotify+0xf6>
    2d5c:	66 0f       	add	r22, r22
    2d5e:	77 1f       	adc	r23, r23
    2d60:	66 0f       	add	r22, r22
    2d62:	77 1f       	adc	r23, r23
    2d64:	fd 01       	movw	r30, r26
    2d66:	e6 0f       	add	r30, r22
    2d68:	f7 1f       	adc	r31, r23
    2d6a:	87 a4       	ldd	r8, Z+47	; 0x2f
    2d6c:	90 a8       	ldd	r9, Z+48	; 0x30
    2d6e:	a1 a8       	ldd	r10, Z+49	; 0x31
    2d70:	b2 a8       	ldd	r11, Z+50	; 0x32
    2d72:	ba 01       	movw	r22, r20
    2d74:	a9 01       	movw	r20, r18
    2d76:	48 29       	or	r20, r8
    2d78:	59 29       	or	r21, r9
    2d7a:	6a 29       	or	r22, r10
    2d7c:	7b 29       	or	r23, r11
    2d7e:	47 a7       	std	Z+47, r20	; 0x2f
    2d80:	50 ab       	std	Z+48, r21	; 0x30
    2d82:	61 ab       	std	Z+49, r22	; 0x31
    2d84:	72 ab       	std	Z+50, r23	; 0x32
    2d86:	01 e0       	ldi	r16, 0x01	; 1
    2d88:	34 c0       	rjmp	.+104    	; 0x2df2 <xTaskGenericNotify+0xfc>
    2d8a:	66 0f       	add	r22, r22
    2d8c:	77 1f       	adc	r23, r23
    2d8e:	66 0f       	add	r22, r22
    2d90:	77 1f       	adc	r23, r23
    2d92:	fd 01       	movw	r30, r26
    2d94:	e6 0f       	add	r30, r22
    2d96:	f7 1f       	adc	r31, r23
    2d98:	47 a5       	ldd	r20, Z+47	; 0x2f
    2d9a:	50 a9       	ldd	r21, Z+48	; 0x30
    2d9c:	61 a9       	ldd	r22, Z+49	; 0x31
    2d9e:	72 a9       	ldd	r23, Z+50	; 0x32
    2da0:	4f 5f       	subi	r20, 0xFF	; 255
    2da2:	5f 4f       	sbci	r21, 0xFF	; 255
    2da4:	6f 4f       	sbci	r22, 0xFF	; 255
    2da6:	7f 4f       	sbci	r23, 0xFF	; 255
    2da8:	47 a7       	std	Z+47, r20	; 0x2f
    2daa:	50 ab       	std	Z+48, r21	; 0x30
    2dac:	61 ab       	std	Z+49, r22	; 0x31
    2dae:	72 ab       	std	Z+50, r23	; 0x32
    2db0:	01 e0       	ldi	r16, 0x01	; 1
    2db2:	1f c0       	rjmp	.+62     	; 0x2df2 <xTaskGenericNotify+0xfc>
    2db4:	66 0f       	add	r22, r22
    2db6:	77 1f       	adc	r23, r23
    2db8:	66 0f       	add	r22, r22
    2dba:	77 1f       	adc	r23, r23
    2dbc:	fd 01       	movw	r30, r26
    2dbe:	e6 0f       	add	r30, r22
    2dc0:	f7 1f       	adc	r31, r23
    2dc2:	27 a7       	std	Z+47, r18	; 0x2f
    2dc4:	30 ab       	std	Z+48, r19	; 0x30
    2dc6:	41 ab       	std	Z+49, r20	; 0x31
    2dc8:	52 ab       	std	Z+50, r21	; 0x32
    2dca:	01 e0       	ldi	r16, 0x01	; 1
    2dcc:	12 c0       	rjmp	.+36     	; 0x2df2 <xTaskGenericNotify+0xfc>
    2dce:	82 30       	cpi	r24, 0x02	; 2
    2dd0:	79 f0       	breq	.+30     	; 0x2df0 <xTaskGenericNotify+0xfa>
    2dd2:	66 0f       	add	r22, r22
    2dd4:	77 1f       	adc	r23, r23
    2dd6:	66 0f       	add	r22, r22
    2dd8:	77 1f       	adc	r23, r23
    2dda:	fd 01       	movw	r30, r26
    2ddc:	e6 0f       	add	r30, r22
    2dde:	f7 1f       	adc	r31, r23
    2de0:	27 a7       	std	Z+47, r18	; 0x2f
    2de2:	30 ab       	std	Z+48, r19	; 0x30
    2de4:	41 ab       	std	Z+49, r20	; 0x31
    2de6:	52 ab       	std	Z+50, r21	; 0x32
    2de8:	01 e0       	ldi	r16, 0x01	; 1
    2dea:	03 c0       	rjmp	.+6      	; 0x2df2 <xTaskGenericNotify+0xfc>
    2dec:	01 e0       	ldi	r16, 0x01	; 1
    2dee:	01 c0       	rjmp	.+2      	; 0x2df2 <xTaskGenericNotify+0xfc>
    2df0:	00 e0       	ldi	r16, 0x00	; 0
    2df2:	81 30       	cpi	r24, 0x01	; 1
    2df4:	09 f0       	breq	.+2      	; 0x2df8 <xTaskGenericNotify+0x102>
    2df6:	69 c0       	rjmp	.+210    	; 0x2eca <xTaskGenericNotify+0x1d4>
    2df8:	1c 96       	adiw	r26, 0x0c	; 12
    2dfa:	ed 91       	ld	r30, X+
    2dfc:	fc 91       	ld	r31, X
    2dfe:	1d 97       	sbiw	r26, 0x0d	; 13
    2e00:	16 96       	adiw	r26, 0x06	; 6
    2e02:	cd 91       	ld	r28, X+
    2e04:	dc 91       	ld	r29, X
    2e06:	17 97       	sbiw	r26, 0x07	; 7
    2e08:	18 96       	adiw	r26, 0x08	; 8
    2e0a:	8d 91       	ld	r24, X+
    2e0c:	9c 91       	ld	r25, X
    2e0e:	19 97       	sbiw	r26, 0x09	; 9
    2e10:	9f 83       	std	Y+7, r25	; 0x07
    2e12:	8e 83       	std	Y+6, r24	; 0x06
    2e14:	18 96       	adiw	r26, 0x08	; 8
    2e16:	cd 91       	ld	r28, X+
    2e18:	dc 91       	ld	r29, X
    2e1a:	19 97       	sbiw	r26, 0x09	; 9
    2e1c:	16 96       	adiw	r26, 0x06	; 6
    2e1e:	8d 91       	ld	r24, X+
    2e20:	9c 91       	ld	r25, X
    2e22:	17 97       	sbiw	r26, 0x07	; 7
    2e24:	9d 83       	std	Y+5, r25	; 0x05
    2e26:	8c 83       	std	Y+4, r24	; 0x04
    2e28:	81 81       	ldd	r24, Z+1	; 0x01
    2e2a:	92 81       	ldd	r25, Z+2	; 0x02
    2e2c:	9d 01       	movw	r18, r26
    2e2e:	2e 5f       	subi	r18, 0xFE	; 254
    2e30:	3f 4f       	sbci	r19, 0xFF	; 255
    2e32:	82 17       	cp	r24, r18
    2e34:	93 07       	cpc	r25, r19
    2e36:	31 f4       	brne	.+12     	; 0x2e44 <xTaskGenericNotify+0x14e>
    2e38:	18 96       	adiw	r26, 0x08	; 8
    2e3a:	8d 91       	ld	r24, X+
    2e3c:	9c 91       	ld	r25, X
    2e3e:	19 97       	sbiw	r26, 0x09	; 9
    2e40:	92 83       	std	Z+2, r25	; 0x02
    2e42:	81 83       	std	Z+1, r24	; 0x01
    2e44:	1d 96       	adiw	r26, 0x0d	; 13
    2e46:	1c 92       	st	X, r1
    2e48:	1e 92       	st	-X, r1
    2e4a:	1c 97       	sbiw	r26, 0x0c	; 12
    2e4c:	80 81       	ld	r24, Z
    2e4e:	81 50       	subi	r24, 0x01	; 1
    2e50:	80 83       	st	Z, r24
    2e52:	5a 96       	adiw	r26, 0x1a	; 26
    2e54:	ec 91       	ld	r30, X
    2e56:	5a 97       	sbiw	r26, 0x1a	; 26
    2e58:	80 91 ff 15 	lds	r24, 0x15FF	; 0x8015ff <uxTopReadyPriority>
    2e5c:	8e 17       	cp	r24, r30
    2e5e:	10 f4       	brcc	.+4      	; 0x2e64 <xTaskGenericNotify+0x16e>
    2e60:	e0 93 ff 15 	sts	0x15FF, r30	; 0x8015ff <uxTopReadyPriority>
    2e64:	8b e0       	ldi	r24, 0x0B	; 11
    2e66:	8e 9f       	mul	r24, r30
    2e68:	f0 01       	movw	r30, r0
    2e6a:	11 24       	eor	r1, r1
    2e6c:	ef 5b       	subi	r30, 0xBF	; 191
    2e6e:	f9 4e       	sbci	r31, 0xE9	; 233
    2e70:	01 80       	ldd	r0, Z+1	; 0x01
    2e72:	f2 81       	ldd	r31, Z+2	; 0x02
    2e74:	e0 2d       	mov	r30, r0
    2e76:	17 96       	adiw	r26, 0x07	; 7
    2e78:	fc 93       	st	X, r31
    2e7a:	ee 93       	st	-X, r30
    2e7c:	16 97       	sbiw	r26, 0x06	; 6
    2e7e:	46 81       	ldd	r20, Z+6	; 0x06
    2e80:	57 81       	ldd	r21, Z+7	; 0x07
    2e82:	19 96       	adiw	r26, 0x09	; 9
    2e84:	5c 93       	st	X, r21
    2e86:	4e 93       	st	-X, r20
    2e88:	18 97       	sbiw	r26, 0x08	; 8
    2e8a:	c6 81       	ldd	r28, Z+6	; 0x06
    2e8c:	d7 81       	ldd	r29, Z+7	; 0x07
    2e8e:	3d 83       	std	Y+5, r19	; 0x05
    2e90:	2c 83       	std	Y+4, r18	; 0x04
    2e92:	37 83       	std	Z+7, r19	; 0x07
    2e94:	26 83       	std	Z+6, r18	; 0x06
    2e96:	5a 96       	adiw	r26, 0x1a	; 26
    2e98:	ec 91       	ld	r30, X
    2e9a:	5a 97       	sbiw	r26, 0x1a	; 26
    2e9c:	8e 9f       	mul	r24, r30
    2e9e:	f0 01       	movw	r30, r0
    2ea0:	11 24       	eor	r1, r1
    2ea2:	ef 5b       	subi	r30, 0xBF	; 191
    2ea4:	f9 4e       	sbci	r31, 0xE9	; 233
    2ea6:	1d 96       	adiw	r26, 0x0d	; 13
    2ea8:	fc 93       	st	X, r31
    2eaa:	ee 93       	st	-X, r30
    2eac:	1c 97       	sbiw	r26, 0x0c	; 12
    2eae:	80 81       	ld	r24, Z
    2eb0:	8f 5f       	subi	r24, 0xFF	; 255
    2eb2:	80 83       	st	Z, r24
    2eb4:	5a 96       	adiw	r26, 0x1a	; 26
    2eb6:	9c 91       	ld	r25, X
    2eb8:	e0 91 af 16 	lds	r30, 0x16AF	; 0x8016af <pxCurrentTCB>
    2ebc:	f0 91 b0 16 	lds	r31, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    2ec0:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ec2:	89 17       	cp	r24, r25
    2ec4:	10 f4       	brcc	.+4      	; 0x2eca <xTaskGenericNotify+0x1d4>
    2ec6:	0e 94 91 04 	call	0x922	; 0x922 <vPortYield>
    2eca:	0f 90       	pop	r0
    2ecc:	0f be       	out	0x3f, r0	; 63
    2ece:	80 2f       	mov	r24, r16
    2ed0:	df 91       	pop	r29
    2ed2:	cf 91       	pop	r28
    2ed4:	0f 91       	pop	r16
    2ed6:	ff 90       	pop	r15
    2ed8:	ef 90       	pop	r14
    2eda:	bf 90       	pop	r11
    2edc:	af 90       	pop	r10
    2ede:	9f 90       	pop	r9
    2ee0:	8f 90       	pop	r8
    2ee2:	08 95       	ret

00002ee4 <xTaskGenericNotifyFromISR>:
    2ee4:	8f 92       	push	r8
    2ee6:	9f 92       	push	r9
    2ee8:	af 92       	push	r10
    2eea:	bf 92       	push	r11
    2eec:	cf 92       	push	r12
    2eee:	df 92       	push	r13
    2ef0:	ef 92       	push	r14
    2ef2:	ff 92       	push	r15
    2ef4:	0f 93       	push	r16
    2ef6:	cf 93       	push	r28
    2ef8:	df 93       	push	r29
    2efa:	dc 01       	movw	r26, r24
    2efc:	e1 14       	cp	r14, r1
    2efe:	f1 04       	cpc	r15, r1
    2f00:	89 f0       	breq	.+34     	; 0x2f24 <xTaskGenericNotifyFromISR+0x40>
    2f02:	e6 2f       	mov	r30, r22
    2f04:	f0 e0       	ldi	r31, 0x00	; 0
    2f06:	ee 0f       	add	r30, r30
    2f08:	ff 1f       	adc	r31, r31
    2f0a:	ee 0f       	add	r30, r30
    2f0c:	ff 1f       	adc	r31, r31
    2f0e:	e8 0f       	add	r30, r24
    2f10:	f9 1f       	adc	r31, r25
    2f12:	87 a4       	ldd	r8, Z+47	; 0x2f
    2f14:	90 a8       	ldd	r9, Z+48	; 0x30
    2f16:	a1 a8       	ldd	r10, Z+49	; 0x31
    2f18:	b2 a8       	ldd	r11, Z+50	; 0x32
    2f1a:	f7 01       	movw	r30, r14
    2f1c:	80 82       	st	Z, r8
    2f1e:	91 82       	std	Z+1, r9	; 0x01
    2f20:	a2 82       	std	Z+2, r10	; 0x02
    2f22:	b3 82       	std	Z+3, r11	; 0x03
    2f24:	70 e0       	ldi	r23, 0x00	; 0
    2f26:	fd 01       	movw	r30, r26
    2f28:	e6 0f       	add	r30, r22
    2f2a:	f7 1f       	adc	r31, r23
    2f2c:	93 a9       	ldd	r25, Z+51	; 0x33
    2f2e:	82 e0       	ldi	r24, 0x02	; 2
    2f30:	83 ab       	std	Z+51, r24	; 0x33
    2f32:	02 30       	cpi	r16, 0x02	; 2
    2f34:	01 f1       	breq	.+64     	; 0x2f76 <xTaskGenericNotifyFromISR+0x92>
    2f36:	18 f4       	brcc	.+6      	; 0x2f3e <xTaskGenericNotifyFromISR+0x5a>
    2f38:	01 30       	cpi	r16, 0x01	; 1
    2f3a:	31 f0       	breq	.+12     	; 0x2f48 <xTaskGenericNotifyFromISR+0x64>
    2f3c:	4d c0       	rjmp	.+154    	; 0x2fd8 <xTaskGenericNotifyFromISR+0xf4>
    2f3e:	03 30       	cpi	r16, 0x03	; 3
    2f40:	79 f1       	breq	.+94     	; 0x2fa0 <xTaskGenericNotifyFromISR+0xbc>
    2f42:	04 30       	cpi	r16, 0x04	; 4
    2f44:	d1 f1       	breq	.+116    	; 0x2fba <xTaskGenericNotifyFromISR+0xd6>
    2f46:	48 c0       	rjmp	.+144    	; 0x2fd8 <xTaskGenericNotifyFromISR+0xf4>
    2f48:	66 0f       	add	r22, r22
    2f4a:	77 1f       	adc	r23, r23
    2f4c:	66 0f       	add	r22, r22
    2f4e:	77 1f       	adc	r23, r23
    2f50:	fd 01       	movw	r30, r26
    2f52:	e6 0f       	add	r30, r22
    2f54:	f7 1f       	adc	r31, r23
    2f56:	87 a4       	ldd	r8, Z+47	; 0x2f
    2f58:	90 a8       	ldd	r9, Z+48	; 0x30
    2f5a:	a1 a8       	ldd	r10, Z+49	; 0x31
    2f5c:	b2 a8       	ldd	r11, Z+50	; 0x32
    2f5e:	ba 01       	movw	r22, r20
    2f60:	a9 01       	movw	r20, r18
    2f62:	48 29       	or	r20, r8
    2f64:	59 29       	or	r21, r9
    2f66:	6a 29       	or	r22, r10
    2f68:	7b 29       	or	r23, r11
    2f6a:	47 a7       	std	Z+47, r20	; 0x2f
    2f6c:	50 ab       	std	Z+48, r21	; 0x30
    2f6e:	61 ab       	std	Z+49, r22	; 0x31
    2f70:	72 ab       	std	Z+50, r23	; 0x32
    2f72:	81 e0       	ldi	r24, 0x01	; 1
    2f74:	34 c0       	rjmp	.+104    	; 0x2fde <xTaskGenericNotifyFromISR+0xfa>
    2f76:	66 0f       	add	r22, r22
    2f78:	77 1f       	adc	r23, r23
    2f7a:	66 0f       	add	r22, r22
    2f7c:	77 1f       	adc	r23, r23
    2f7e:	fd 01       	movw	r30, r26
    2f80:	e6 0f       	add	r30, r22
    2f82:	f7 1f       	adc	r31, r23
    2f84:	47 a5       	ldd	r20, Z+47	; 0x2f
    2f86:	50 a9       	ldd	r21, Z+48	; 0x30
    2f88:	61 a9       	ldd	r22, Z+49	; 0x31
    2f8a:	72 a9       	ldd	r23, Z+50	; 0x32
    2f8c:	4f 5f       	subi	r20, 0xFF	; 255
    2f8e:	5f 4f       	sbci	r21, 0xFF	; 255
    2f90:	6f 4f       	sbci	r22, 0xFF	; 255
    2f92:	7f 4f       	sbci	r23, 0xFF	; 255
    2f94:	47 a7       	std	Z+47, r20	; 0x2f
    2f96:	50 ab       	std	Z+48, r21	; 0x30
    2f98:	61 ab       	std	Z+49, r22	; 0x31
    2f9a:	72 ab       	std	Z+50, r23	; 0x32
    2f9c:	81 e0       	ldi	r24, 0x01	; 1
    2f9e:	1f c0       	rjmp	.+62     	; 0x2fde <xTaskGenericNotifyFromISR+0xfa>
    2fa0:	66 0f       	add	r22, r22
    2fa2:	77 1f       	adc	r23, r23
    2fa4:	66 0f       	add	r22, r22
    2fa6:	77 1f       	adc	r23, r23
    2fa8:	fd 01       	movw	r30, r26
    2faa:	e6 0f       	add	r30, r22
    2fac:	f7 1f       	adc	r31, r23
    2fae:	27 a7       	std	Z+47, r18	; 0x2f
    2fb0:	30 ab       	std	Z+48, r19	; 0x30
    2fb2:	41 ab       	std	Z+49, r20	; 0x31
    2fb4:	52 ab       	std	Z+50, r21	; 0x32
    2fb6:	81 e0       	ldi	r24, 0x01	; 1
    2fb8:	12 c0       	rjmp	.+36     	; 0x2fde <xTaskGenericNotifyFromISR+0xfa>
    2fba:	92 30       	cpi	r25, 0x02	; 2
    2fbc:	79 f0       	breq	.+30     	; 0x2fdc <xTaskGenericNotifyFromISR+0xf8>
    2fbe:	66 0f       	add	r22, r22
    2fc0:	77 1f       	adc	r23, r23
    2fc2:	66 0f       	add	r22, r22
    2fc4:	77 1f       	adc	r23, r23
    2fc6:	fd 01       	movw	r30, r26
    2fc8:	e6 0f       	add	r30, r22
    2fca:	f7 1f       	adc	r31, r23
    2fcc:	27 a7       	std	Z+47, r18	; 0x2f
    2fce:	30 ab       	std	Z+48, r19	; 0x30
    2fd0:	41 ab       	std	Z+49, r20	; 0x31
    2fd2:	52 ab       	std	Z+50, r21	; 0x32
    2fd4:	81 e0       	ldi	r24, 0x01	; 1
    2fd6:	03 c0       	rjmp	.+6      	; 0x2fde <xTaskGenericNotifyFromISR+0xfa>
    2fd8:	81 e0       	ldi	r24, 0x01	; 1
    2fda:	01 c0       	rjmp	.+2      	; 0x2fde <xTaskGenericNotifyFromISR+0xfa>
    2fdc:	80 e0       	ldi	r24, 0x00	; 0
    2fde:	91 30       	cpi	r25, 0x01	; 1
    2fe0:	09 f0       	breq	.+2      	; 0x2fe4 <xTaskGenericNotifyFromISR+0x100>
    2fe2:	96 c0       	rjmp	.+300    	; 0x3110 <xTaskGenericNotifyFromISR+0x22c>
    2fe4:	90 91 f0 15 	lds	r25, 0x15F0	; 0x8015f0 <uxSchedulerSuspended>
    2fe8:	91 11       	cpse	r25, r1
    2fea:	5f c0       	rjmp	.+190    	; 0x30aa <xTaskGenericNotifyFromISR+0x1c6>
    2fec:	1c 96       	adiw	r26, 0x0c	; 12
    2fee:	ed 91       	ld	r30, X+
    2ff0:	fc 91       	ld	r31, X
    2ff2:	1d 97       	sbiw	r26, 0x0d	; 13
    2ff4:	16 96       	adiw	r26, 0x06	; 6
    2ff6:	cd 91       	ld	r28, X+
    2ff8:	dc 91       	ld	r29, X
    2ffa:	17 97       	sbiw	r26, 0x07	; 7
    2ffc:	18 96       	adiw	r26, 0x08	; 8
    2ffe:	2d 91       	ld	r18, X+
    3000:	3c 91       	ld	r19, X
    3002:	19 97       	sbiw	r26, 0x09	; 9
    3004:	3f 83       	std	Y+7, r19	; 0x07
    3006:	2e 83       	std	Y+6, r18	; 0x06
    3008:	18 96       	adiw	r26, 0x08	; 8
    300a:	cd 91       	ld	r28, X+
    300c:	dc 91       	ld	r29, X
    300e:	19 97       	sbiw	r26, 0x09	; 9
    3010:	16 96       	adiw	r26, 0x06	; 6
    3012:	2d 91       	ld	r18, X+
    3014:	3c 91       	ld	r19, X
    3016:	17 97       	sbiw	r26, 0x07	; 7
    3018:	3d 83       	std	Y+5, r19	; 0x05
    301a:	2c 83       	std	Y+4, r18	; 0x04
    301c:	41 81       	ldd	r20, Z+1	; 0x01
    301e:	52 81       	ldd	r21, Z+2	; 0x02
    3020:	9d 01       	movw	r18, r26
    3022:	2e 5f       	subi	r18, 0xFE	; 254
    3024:	3f 4f       	sbci	r19, 0xFF	; 255
    3026:	42 17       	cp	r20, r18
    3028:	53 07       	cpc	r21, r19
    302a:	31 f4       	brne	.+12     	; 0x3038 <xTaskGenericNotifyFromISR+0x154>
    302c:	18 96       	adiw	r26, 0x08	; 8
    302e:	4d 91       	ld	r20, X+
    3030:	5c 91       	ld	r21, X
    3032:	19 97       	sbiw	r26, 0x09	; 9
    3034:	52 83       	std	Z+2, r21	; 0x02
    3036:	41 83       	std	Z+1, r20	; 0x01
    3038:	1d 96       	adiw	r26, 0x0d	; 13
    303a:	1c 92       	st	X, r1
    303c:	1e 92       	st	-X, r1
    303e:	1c 97       	sbiw	r26, 0x0c	; 12
    3040:	90 81       	ld	r25, Z
    3042:	91 50       	subi	r25, 0x01	; 1
    3044:	90 83       	st	Z, r25
    3046:	5a 96       	adiw	r26, 0x1a	; 26
    3048:	ec 91       	ld	r30, X
    304a:	5a 97       	sbiw	r26, 0x1a	; 26
    304c:	90 91 ff 15 	lds	r25, 0x15FF	; 0x8015ff <uxTopReadyPriority>
    3050:	9e 17       	cp	r25, r30
    3052:	10 f4       	brcc	.+4      	; 0x3058 <xTaskGenericNotifyFromISR+0x174>
    3054:	e0 93 ff 15 	sts	0x15FF, r30	; 0x8015ff <uxTopReadyPriority>
    3058:	9b e0       	ldi	r25, 0x0B	; 11
    305a:	9e 9f       	mul	r25, r30
    305c:	f0 01       	movw	r30, r0
    305e:	11 24       	eor	r1, r1
    3060:	ef 5b       	subi	r30, 0xBF	; 191
    3062:	f9 4e       	sbci	r31, 0xE9	; 233
    3064:	01 80       	ldd	r0, Z+1	; 0x01
    3066:	f2 81       	ldd	r31, Z+2	; 0x02
    3068:	e0 2d       	mov	r30, r0
    306a:	17 96       	adiw	r26, 0x07	; 7
    306c:	fc 93       	st	X, r31
    306e:	ee 93       	st	-X, r30
    3070:	16 97       	sbiw	r26, 0x06	; 6
    3072:	46 81       	ldd	r20, Z+6	; 0x06
    3074:	57 81       	ldd	r21, Z+7	; 0x07
    3076:	19 96       	adiw	r26, 0x09	; 9
    3078:	5c 93       	st	X, r21
    307a:	4e 93       	st	-X, r20
    307c:	18 97       	sbiw	r26, 0x08	; 8
    307e:	c6 81       	ldd	r28, Z+6	; 0x06
    3080:	d7 81       	ldd	r29, Z+7	; 0x07
    3082:	3d 83       	std	Y+5, r19	; 0x05
    3084:	2c 83       	std	Y+4, r18	; 0x04
    3086:	37 83       	std	Z+7, r19	; 0x07
    3088:	26 83       	std	Z+6, r18	; 0x06
    308a:	5a 96       	adiw	r26, 0x1a	; 26
    308c:	ec 91       	ld	r30, X
    308e:	5a 97       	sbiw	r26, 0x1a	; 26
    3090:	9e 9f       	mul	r25, r30
    3092:	f0 01       	movw	r30, r0
    3094:	11 24       	eor	r1, r1
    3096:	ef 5b       	subi	r30, 0xBF	; 191
    3098:	f9 4e       	sbci	r31, 0xE9	; 233
    309a:	1d 96       	adiw	r26, 0x0d	; 13
    309c:	fc 93       	st	X, r31
    309e:	ee 93       	st	-X, r30
    30a0:	1c 97       	sbiw	r26, 0x0c	; 12
    30a2:	90 81       	ld	r25, Z
    30a4:	9f 5f       	subi	r25, 0xFF	; 255
    30a6:	90 83       	st	Z, r25
    30a8:	21 c0       	rjmp	.+66     	; 0x30ec <xTaskGenericNotifyFromISR+0x208>
    30aa:	6c e1       	ldi	r22, 0x1C	; 28
    30ac:	76 e1       	ldi	r23, 0x16	; 22
    30ae:	fb 01       	movw	r30, r22
    30b0:	c1 81       	ldd	r28, Z+1	; 0x01
    30b2:	d2 81       	ldd	r29, Z+2	; 0x02
    30b4:	53 96       	adiw	r26, 0x13	; 19
    30b6:	dc 93       	st	X, r29
    30b8:	ce 93       	st	-X, r28
    30ba:	52 97       	sbiw	r26, 0x12	; 18
    30bc:	2e 81       	ldd	r18, Y+6	; 0x06
    30be:	3f 81       	ldd	r19, Y+7	; 0x07
    30c0:	55 96       	adiw	r26, 0x15	; 21
    30c2:	3c 93       	st	X, r19
    30c4:	2e 93       	st	-X, r18
    30c6:	54 97       	sbiw	r26, 0x14	; 20
    30c8:	4e 81       	ldd	r20, Y+6	; 0x06
    30ca:	5f 81       	ldd	r21, Y+7	; 0x07
    30cc:	9d 01       	movw	r18, r26
    30ce:	22 5f       	subi	r18, 0xF2	; 242
    30d0:	3f 4f       	sbci	r19, 0xFF	; 255
    30d2:	fa 01       	movw	r30, r20
    30d4:	35 83       	std	Z+5, r19	; 0x05
    30d6:	24 83       	std	Z+4, r18	; 0x04
    30d8:	3f 83       	std	Y+7, r19	; 0x07
    30da:	2e 83       	std	Y+6, r18	; 0x06
    30dc:	59 96       	adiw	r26, 0x19	; 25
    30de:	7c 93       	st	X, r23
    30e0:	6e 93       	st	-X, r22
    30e2:	58 97       	sbiw	r26, 0x18	; 24
    30e4:	fb 01       	movw	r30, r22
    30e6:	90 81       	ld	r25, Z
    30e8:	9f 5f       	subi	r25, 0xFF	; 255
    30ea:	90 83       	st	Z, r25
    30ec:	5a 96       	adiw	r26, 0x1a	; 26
    30ee:	2c 91       	ld	r18, X
    30f0:	e0 91 af 16 	lds	r30, 0x16AF	; 0x8016af <pxCurrentTCB>
    30f4:	f0 91 b0 16 	lds	r31, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>
    30f8:	92 8d       	ldd	r25, Z+26	; 0x1a
    30fa:	92 17       	cp	r25, r18
    30fc:	48 f4       	brcc	.+18     	; 0x3110 <xTaskGenericNotifyFromISR+0x22c>
    30fe:	c1 14       	cp	r12, r1
    3100:	d1 04       	cpc	r13, r1
    3102:	19 f0       	breq	.+6      	; 0x310a <xTaskGenericNotifyFromISR+0x226>
    3104:	91 e0       	ldi	r25, 0x01	; 1
    3106:	f6 01       	movw	r30, r12
    3108:	90 83       	st	Z, r25
    310a:	91 e0       	ldi	r25, 0x01	; 1
    310c:	90 93 f9 15 	sts	0x15F9, r25	; 0x8015f9 <xYieldPending>
    3110:	df 91       	pop	r29
    3112:	cf 91       	pop	r28
    3114:	0f 91       	pop	r16
    3116:	ff 90       	pop	r15
    3118:	ef 90       	pop	r14
    311a:	df 90       	pop	r13
    311c:	cf 90       	pop	r12
    311e:	bf 90       	pop	r11
    3120:	af 90       	pop	r10
    3122:	9f 90       	pop	r9
    3124:	8f 90       	pop	r8
    3126:	08 95       	ret

00003128 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    3128:	00 97       	sbiw	r24, 0x00	; 0
    312a:	21 f4       	brne	.+8      	; 0x3134 <xTaskGenericNotifyStateClear+0xc>
    312c:	80 91 af 16 	lds	r24, 0x16AF	; 0x8016af <pxCurrentTCB>
    3130:	90 91 b0 16 	lds	r25, 0x16B0	; 0x8016b0 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    3134:	0f b6       	in	r0, 0x3f	; 63
    3136:	f8 94       	cli
    3138:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    313a:	70 e0       	ldi	r23, 0x00	; 0
    313c:	fc 01       	movw	r30, r24
    313e:	e6 0f       	add	r30, r22
    3140:	f7 1f       	adc	r31, r23
    3142:	23 a9       	ldd	r18, Z+51	; 0x33
    3144:	22 30       	cpi	r18, 0x02	; 2
    3146:	31 f4       	brne	.+12     	; 0x3154 <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    3148:	fc 01       	movw	r30, r24
    314a:	e6 0f       	add	r30, r22
    314c:	f7 1f       	adc	r31, r23
    314e:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    3150:	81 e0       	ldi	r24, 0x01	; 1
    3152:	01 c0       	rjmp	.+2      	; 0x3156 <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    3154:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    3156:	0f 90       	pop	r0
    3158:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    315a:	08 95       	ret

0000315c <prvGetNextExpireTime>:
    315c:	dc 01       	movw	r26, r24
    315e:	e0 91 bb 16 	lds	r30, 0x16BB	; 0x8016bb <pxCurrentTimerList>
    3162:	f0 91 bc 16 	lds	r31, 0x16BC	; 0x8016bc <pxCurrentTimerList+0x1>
    3166:	80 81       	ld	r24, Z
    3168:	91 e0       	ldi	r25, 0x01	; 1
    316a:	81 11       	cpse	r24, r1
    316c:	90 e0       	ldi	r25, 0x00	; 0
    316e:	9c 93       	st	X, r25
    3170:	91 11       	cpse	r25, r1
    3172:	08 c0       	rjmp	.+16     	; 0x3184 <prvGetNextExpireTime+0x28>
    3174:	07 80       	ldd	r0, Z+7	; 0x07
    3176:	f0 85       	ldd	r31, Z+8	; 0x08
    3178:	e0 2d       	mov	r30, r0
    317a:	60 81       	ld	r22, Z
    317c:	71 81       	ldd	r23, Z+1	; 0x01
    317e:	82 81       	ldd	r24, Z+2	; 0x02
    3180:	93 81       	ldd	r25, Z+3	; 0x03
    3182:	08 95       	ret
    3184:	60 e0       	ldi	r22, 0x00	; 0
    3186:	70 e0       	ldi	r23, 0x00	; 0
    3188:	cb 01       	movw	r24, r22
    318a:	08 95       	ret

0000318c <prvInsertTimerInActiveList>:
    318c:	cf 92       	push	r12
    318e:	df 92       	push	r13
    3190:	ef 92       	push	r14
    3192:	ff 92       	push	r15
    3194:	0f 93       	push	r16
    3196:	1f 93       	push	r17
    3198:	fc 01       	movw	r30, r24
    319a:	42 83       	std	Z+2, r20	; 0x02
    319c:	53 83       	std	Z+3, r21	; 0x03
    319e:	64 83       	std	Z+4, r22	; 0x04
    31a0:	75 83       	std	Z+5, r23	; 0x05
    31a2:	93 87       	std	Z+11, r25	; 0x0b
    31a4:	82 87       	std	Z+10, r24	; 0x0a
    31a6:	04 17       	cp	r16, r20
    31a8:	15 07       	cpc	r17, r21
    31aa:	26 07       	cpc	r18, r22
    31ac:	37 07       	cpc	r19, r23
    31ae:	c0 f0       	brcs	.+48     	; 0x31e0 <prvInsertTimerInActiveList+0x54>
    31b0:	0c 19       	sub	r16, r12
    31b2:	1d 09       	sbc	r17, r13
    31b4:	2e 09       	sbc	r18, r14
    31b6:	3f 09       	sbc	r19, r15
    31b8:	86 85       	ldd	r24, Z+14	; 0x0e
    31ba:	97 85       	ldd	r25, Z+15	; 0x0f
    31bc:	a0 89       	ldd	r26, Z+16	; 0x10
    31be:	b1 89       	ldd	r27, Z+17	; 0x11
    31c0:	08 17       	cp	r16, r24
    31c2:	19 07       	cpc	r17, r25
    31c4:	2a 07       	cpc	r18, r26
    31c6:	3b 07       	cpc	r19, r27
    31c8:	00 f5       	brcc	.+64     	; 0x320a <prvInsertTimerInActiveList+0x7e>
    31ca:	bf 01       	movw	r22, r30
    31cc:	6e 5f       	subi	r22, 0xFE	; 254
    31ce:	7f 4f       	sbci	r23, 0xFF	; 255
    31d0:	80 91 b9 16 	lds	r24, 0x16B9	; 0x8016b9 <pxOverflowTimerList>
    31d4:	90 91 ba 16 	lds	r25, 0x16BA	; 0x8016ba <pxOverflowTimerList+0x1>
    31d8:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <vListInsert>
    31dc:	80 e0       	ldi	r24, 0x00	; 0
    31de:	18 c0       	rjmp	.+48     	; 0x3210 <prvInsertTimerInActiveList+0x84>
    31e0:	0c 15       	cp	r16, r12
    31e2:	1d 05       	cpc	r17, r13
    31e4:	2e 05       	cpc	r18, r14
    31e6:	3f 05       	cpc	r19, r15
    31e8:	28 f4       	brcc	.+10     	; 0x31f4 <prvInsertTimerInActiveList+0x68>
    31ea:	4c 15       	cp	r20, r12
    31ec:	5d 05       	cpc	r21, r13
    31ee:	6e 05       	cpc	r22, r14
    31f0:	7f 05       	cpc	r23, r15
    31f2:	68 f4       	brcc	.+26     	; 0x320e <prvInsertTimerInActiveList+0x82>
    31f4:	bf 01       	movw	r22, r30
    31f6:	6e 5f       	subi	r22, 0xFE	; 254
    31f8:	7f 4f       	sbci	r23, 0xFF	; 255
    31fa:	80 91 bb 16 	lds	r24, 0x16BB	; 0x8016bb <pxCurrentTimerList>
    31fe:	90 91 bc 16 	lds	r25, 0x16BC	; 0x8016bc <pxCurrentTimerList+0x1>
    3202:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <vListInsert>
    3206:	80 e0       	ldi	r24, 0x00	; 0
    3208:	03 c0       	rjmp	.+6      	; 0x3210 <prvInsertTimerInActiveList+0x84>
    320a:	81 e0       	ldi	r24, 0x01	; 1
    320c:	01 c0       	rjmp	.+2      	; 0x3210 <prvInsertTimerInActiveList+0x84>
    320e:	81 e0       	ldi	r24, 0x01	; 1
    3210:	1f 91       	pop	r17
    3212:	0f 91       	pop	r16
    3214:	ff 90       	pop	r15
    3216:	ef 90       	pop	r14
    3218:	df 90       	pop	r13
    321a:	cf 90       	pop	r12
    321c:	08 95       	ret

0000321e <prvCheckForValidListAndQueue>:
    321e:	0f b6       	in	r0, 0x3f	; 63
    3220:	f8 94       	cli
    3222:	0f 92       	push	r0
    3224:	80 91 b7 16 	lds	r24, 0x16B7	; 0x8016b7 <xTimerQueue>
    3228:	90 91 b8 16 	lds	r25, 0x16B8	; 0x8016b8 <xTimerQueue+0x1>
    322c:	89 2b       	or	r24, r25
    322e:	e9 f4       	brne	.+58     	; 0x326a <prvCheckForValidListAndQueue+0x4c>
    3230:	88 ec       	ldi	r24, 0xC8	; 200
    3232:	96 e1       	ldi	r25, 0x16	; 22
    3234:	0e 94 c3 03 	call	0x786	; 0x786 <vListInitialise>
    3238:	8d eb       	ldi	r24, 0xBD	; 189
    323a:	96 e1       	ldi	r25, 0x16	; 22
    323c:	0e 94 c3 03 	call	0x786	; 0x786 <vListInitialise>
    3240:	88 ec       	ldi	r24, 0xC8	; 200
    3242:	96 e1       	ldi	r25, 0x16	; 22
    3244:	90 93 bc 16 	sts	0x16BC, r25	; 0x8016bc <pxCurrentTimerList+0x1>
    3248:	80 93 bb 16 	sts	0x16BB, r24	; 0x8016bb <pxCurrentTimerList>
    324c:	8d eb       	ldi	r24, 0xBD	; 189
    324e:	96 e1       	ldi	r25, 0x16	; 22
    3250:	90 93 ba 16 	sts	0x16BA, r25	; 0x8016ba <pxOverflowTimerList+0x1>
    3254:	80 93 b9 16 	sts	0x16B9, r24	; 0x8016b9 <pxOverflowTimerList>
    3258:	40 e0       	ldi	r20, 0x00	; 0
    325a:	67 e0       	ldi	r22, 0x07	; 7
    325c:	8a e0       	ldi	r24, 0x0A	; 10
    325e:	0e 94 86 06 	call	0xd0c	; 0xd0c <xQueueGenericCreate>
    3262:	90 93 b8 16 	sts	0x16B8, r25	; 0x8016b8 <xTimerQueue+0x1>
    3266:	80 93 b7 16 	sts	0x16B7, r24	; 0x8016b7 <xTimerQueue>
    326a:	0f 90       	pop	r0
    326c:	0f be       	out	0x3f, r0	; 63
    326e:	08 95       	ret

00003270 <xTimerCreateTimerTask>:
    3270:	ef 92       	push	r14
    3272:	ff 92       	push	r15
    3274:	0f 93       	push	r16
    3276:	d3 df       	rcall	.-90     	; 0x321e <prvCheckForValidListAndQueue>
    3278:	80 91 b7 16 	lds	r24, 0x16B7	; 0x8016b7 <xTimerQueue>
    327c:	90 91 b8 16 	lds	r25, 0x16B8	; 0x8016b8 <xTimerQueue+0x1>
    3280:	89 2b       	or	r24, r25
    3282:	91 f0       	breq	.+36     	; 0x32a8 <xTimerCreateTimerTask+0x38>
    3284:	0f 2e       	mov	r0, r31
    3286:	f5 eb       	ldi	r31, 0xB5	; 181
    3288:	ef 2e       	mov	r14, r31
    328a:	f6 e1       	ldi	r31, 0x16	; 22
    328c:	ff 2e       	mov	r15, r31
    328e:	f0 2d       	mov	r31, r0
    3290:	03 e0       	ldi	r16, 0x03	; 3
    3292:	20 e0       	ldi	r18, 0x00	; 0
    3294:	30 e0       	ldi	r19, 0x00	; 0
    3296:	40 ec       	ldi	r20, 0xC0	; 192
    3298:	50 e0       	ldi	r21, 0x00	; 0
    329a:	64 e7       	ldi	r22, 0x74	; 116
    329c:	72 e0       	ldi	r23, 0x02	; 2
    329e:	87 ed       	ldi	r24, 0xD7	; 215
    32a0:	90 e0       	ldi	r25, 0x00	; 0
    32a2:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <xTaskCreate>
    32a6:	01 c0       	rjmp	.+2      	; 0x32aa <xTimerCreateTimerTask+0x3a>
    32a8:	80 e0       	ldi	r24, 0x00	; 0
    32aa:	0f 91       	pop	r16
    32ac:	ff 90       	pop	r15
    32ae:	ef 90       	pop	r14
    32b0:	08 95       	ret

000032b2 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    32b2:	8f 92       	push	r8
    32b4:	9f 92       	push	r9
    32b6:	af 92       	push	r10
    32b8:	bf 92       	push	r11
    32ba:	cf 92       	push	r12
    32bc:	df 92       	push	r13
    32be:	ef 92       	push	r14
    32c0:	ff 92       	push	r15
    32c2:	0f 93       	push	r16
    32c4:	1f 93       	push	r17
    32c6:	cf 93       	push	r28
    32c8:	df 93       	push	r29
    32ca:	cd b7       	in	r28, 0x3d	; 61
    32cc:	de b7       	in	r29, 0x3e	; 62
    32ce:	27 97       	sbiw	r28, 0x07	; 7
    32d0:	0f b6       	in	r0, 0x3f	; 63
    32d2:	f8 94       	cli
    32d4:	de bf       	out	0x3e, r29	; 62
    32d6:	0f be       	out	0x3f, r0	; 63
    32d8:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    32da:	e0 91 b7 16 	lds	r30, 0x16B7	; 0x8016b7 <xTimerQueue>
    32de:	f0 91 b8 16 	lds	r31, 0x16B8	; 0x8016b8 <xTimerQueue+0x1>
    32e2:	30 97       	sbiw	r30, 0x00	; 0
    32e4:	81 f1       	breq	.+96     	; 0x3346 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    32e6:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    32e8:	2a 83       	std	Y+2, r18	; 0x02
    32ea:	3b 83       	std	Y+3, r19	; 0x03
    32ec:	4c 83       	std	Y+4, r20	; 0x04
    32ee:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    32f0:	9f 83       	std	Y+7, r25	; 0x07
    32f2:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    32f4:	66 30       	cpi	r22, 0x06	; 6
    32f6:	f4 f4       	brge	.+60     	; 0x3334 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    32f8:	c3 da       	rcall	.-2682   	; 0x2880 <xTaskGetSchedulerState>
    32fa:	82 30       	cpi	r24, 0x02	; 2
    32fc:	69 f4       	brne	.+26     	; 0x3318 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    32fe:	00 e0       	ldi	r16, 0x00	; 0
    3300:	a7 01       	movw	r20, r14
    3302:	96 01       	movw	r18, r12
    3304:	be 01       	movw	r22, r28
    3306:	6f 5f       	subi	r22, 0xFF	; 255
    3308:	7f 4f       	sbci	r23, 0xFF	; 255
    330a:	80 91 b7 16 	lds	r24, 0x16B7	; 0x8016b7 <xTimerQueue>
    330e:	90 91 b8 16 	lds	r25, 0x16B8	; 0x8016b8 <xTimerQueue+0x1>
    3312:	0e 94 a9 06 	call	0xd52	; 0xd52 <xQueueGenericSend>
    3316:	18 c0       	rjmp	.+48     	; 0x3348 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    3318:	00 e0       	ldi	r16, 0x00	; 0
    331a:	20 e0       	ldi	r18, 0x00	; 0
    331c:	30 e0       	ldi	r19, 0x00	; 0
    331e:	a9 01       	movw	r20, r18
    3320:	be 01       	movw	r22, r28
    3322:	6f 5f       	subi	r22, 0xFF	; 255
    3324:	7f 4f       	sbci	r23, 0xFF	; 255
    3326:	80 91 b7 16 	lds	r24, 0x16B7	; 0x8016b7 <xTimerQueue>
    332a:	90 91 b8 16 	lds	r25, 0x16B8	; 0x8016b8 <xTimerQueue+0x1>
    332e:	0e 94 a9 06 	call	0xd52	; 0xd52 <xQueueGenericSend>
    3332:	0a c0       	rjmp	.+20     	; 0x3348 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3334:	20 e0       	ldi	r18, 0x00	; 0
    3336:	a8 01       	movw	r20, r16
    3338:	be 01       	movw	r22, r28
    333a:	6f 5f       	subi	r22, 0xFF	; 255
    333c:	7f 4f       	sbci	r23, 0xFF	; 255
    333e:	cf 01       	movw	r24, r30
    3340:	0e 94 59 07 	call	0xeb2	; 0xeb2 <xQueueGenericSendFromISR>
    3344:	01 c0       	rjmp	.+2      	; 0x3348 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    3346:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    3348:	27 96       	adiw	r28, 0x07	; 7
    334a:	0f b6       	in	r0, 0x3f	; 63
    334c:	f8 94       	cli
    334e:	de bf       	out	0x3e, r29	; 62
    3350:	0f be       	out	0x3f, r0	; 63
    3352:	cd bf       	out	0x3d, r28	; 61
    3354:	df 91       	pop	r29
    3356:	cf 91       	pop	r28
    3358:	1f 91       	pop	r17
    335a:	0f 91       	pop	r16
    335c:	ff 90       	pop	r15
    335e:	ef 90       	pop	r14
    3360:	df 90       	pop	r13
    3362:	cf 90       	pop	r12
    3364:	bf 90       	pop	r11
    3366:	af 90       	pop	r10
    3368:	9f 90       	pop	r9
    336a:	8f 90       	pop	r8
    336c:	08 95       	ret

0000336e <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    336e:	8f 92       	push	r8
    3370:	9f 92       	push	r9
    3372:	af 92       	push	r10
    3374:	bf 92       	push	r11
    3376:	cf 92       	push	r12
    3378:	df 92       	push	r13
    337a:	ef 92       	push	r14
    337c:	ff 92       	push	r15
    337e:	0f 93       	push	r16
    3380:	1f 93       	push	r17
    3382:	cf 93       	push	r28
    3384:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3386:	3b c0       	rjmp	.+118    	; 0x33fe <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3388:	07 80       	ldd	r0, Z+7	; 0x07
    338a:	f0 85       	ldd	r31, Z+8	; 0x08
    338c:	e0 2d       	mov	r30, r0
    338e:	80 80       	ld	r8, Z
    3390:	91 80       	ldd	r9, Z+1	; 0x01
    3392:	a2 80       	ldd	r10, Z+2	; 0x02
    3394:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3396:	c0 85       	ldd	r28, Z+8	; 0x08
    3398:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    339a:	8e 01       	movw	r16, r28
    339c:	0e 5f       	subi	r16, 0xFE	; 254
    339e:	1f 4f       	sbci	r17, 0xFF	; 255
    33a0:	c8 01       	movw	r24, r16
    33a2:	0e 94 15 04 	call	0x82a	; 0x82a <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    33a6:	ec 89       	ldd	r30, Y+20	; 0x14
    33a8:	fd 89       	ldd	r31, Y+21	; 0x15
    33aa:	ce 01       	movw	r24, r28
    33ac:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    33ae:	8e 89       	ldd	r24, Y+22	; 0x16
    33b0:	82 ff       	sbrs	r24, 2
    33b2:	25 c0       	rjmp	.+74     	; 0x33fe <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    33b4:	8e 85       	ldd	r24, Y+14	; 0x0e
    33b6:	9f 85       	ldd	r25, Y+15	; 0x0f
    33b8:	a8 89       	ldd	r26, Y+16	; 0x10
    33ba:	b9 89       	ldd	r27, Y+17	; 0x11
    33bc:	88 0d       	add	r24, r8
    33be:	99 1d       	adc	r25, r9
    33c0:	aa 1d       	adc	r26, r10
    33c2:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    33c4:	88 16       	cp	r8, r24
    33c6:	99 06       	cpc	r9, r25
    33c8:	aa 06       	cpc	r10, r26
    33ca:	bb 06       	cpc	r11, r27
    33cc:	70 f4       	brcc	.+28     	; 0x33ea <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    33ce:	8a 83       	std	Y+2, r24	; 0x02
    33d0:	9b 83       	std	Y+3, r25	; 0x03
    33d2:	ac 83       	std	Y+4, r26	; 0x04
    33d4:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    33d6:	db 87       	std	Y+11, r29	; 0x0b
    33d8:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    33da:	b8 01       	movw	r22, r16
    33dc:	80 91 bb 16 	lds	r24, 0x16BB	; 0x8016bb <pxCurrentTimerList>
    33e0:	90 91 bc 16 	lds	r25, 0x16BC	; 0x8016bc <pxCurrentTimerList+0x1>
    33e4:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <vListInsert>
    33e8:	0a c0       	rjmp	.+20     	; 0x33fe <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    33ea:	c1 2c       	mov	r12, r1
    33ec:	d1 2c       	mov	r13, r1
    33ee:	76 01       	movw	r14, r12
    33f0:	00 e0       	ldi	r16, 0x00	; 0
    33f2:	10 e0       	ldi	r17, 0x00	; 0
    33f4:	a5 01       	movw	r20, r10
    33f6:	94 01       	movw	r18, r8
    33f8:	60 e0       	ldi	r22, 0x00	; 0
    33fa:	ce 01       	movw	r24, r28
    33fc:	5a df       	rcall	.-332    	; 0x32b2 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    33fe:	e0 91 bb 16 	lds	r30, 0x16BB	; 0x8016bb <pxCurrentTimerList>
    3402:	f0 91 bc 16 	lds	r31, 0x16BC	; 0x8016bc <pxCurrentTimerList+0x1>
    3406:	80 81       	ld	r24, Z
    3408:	81 11       	cpse	r24, r1
    340a:	be cf       	rjmp	.-132    	; 0x3388 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    340c:	80 91 b9 16 	lds	r24, 0x16B9	; 0x8016b9 <pxOverflowTimerList>
    3410:	90 91 ba 16 	lds	r25, 0x16BA	; 0x8016ba <pxOverflowTimerList+0x1>
    3414:	90 93 bc 16 	sts	0x16BC, r25	; 0x8016bc <pxCurrentTimerList+0x1>
    3418:	80 93 bb 16 	sts	0x16BB, r24	; 0x8016bb <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    341c:	f0 93 ba 16 	sts	0x16BA, r31	; 0x8016ba <pxOverflowTimerList+0x1>
    3420:	e0 93 b9 16 	sts	0x16B9, r30	; 0x8016b9 <pxOverflowTimerList>
    }
    3424:	df 91       	pop	r29
    3426:	cf 91       	pop	r28
    3428:	1f 91       	pop	r17
    342a:	0f 91       	pop	r16
    342c:	ff 90       	pop	r15
    342e:	ef 90       	pop	r14
    3430:	df 90       	pop	r13
    3432:	cf 90       	pop	r12
    3434:	bf 90       	pop	r11
    3436:	af 90       	pop	r10
    3438:	9f 90       	pop	r9
    343a:	8f 90       	pop	r8
    343c:	08 95       	ret

0000343e <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    343e:	cf 92       	push	r12
    3440:	df 92       	push	r13
    3442:	ef 92       	push	r14
    3444:	ff 92       	push	r15
    3446:	cf 93       	push	r28
    3448:	df 93       	push	r29
    344a:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    344c:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <xTaskGetTickCount>
    3450:	6b 01       	movw	r12, r22
    3452:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    3454:	80 91 b1 16 	lds	r24, 0x16B1	; 0x8016b1 <xLastTime.2436>
    3458:	90 91 b2 16 	lds	r25, 0x16B2	; 0x8016b2 <xLastTime.2436+0x1>
    345c:	a0 91 b3 16 	lds	r26, 0x16B3	; 0x8016b3 <xLastTime.2436+0x2>
    3460:	b0 91 b4 16 	lds	r27, 0x16B4	; 0x8016b4 <xLastTime.2436+0x3>
    3464:	c8 16       	cp	r12, r24
    3466:	d9 06       	cpc	r13, r25
    3468:	ea 06       	cpc	r14, r26
    346a:	fb 06       	cpc	r15, r27
    346c:	20 f4       	brcc	.+8      	; 0x3476 <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    346e:	7f df       	rcall	.-258    	; 0x336e <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    3470:	81 e0       	ldi	r24, 0x01	; 1
    3472:	88 83       	st	Y, r24
    3474:	01 c0       	rjmp	.+2      	; 0x3478 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    3476:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    3478:	c0 92 b1 16 	sts	0x16B1, r12	; 0x8016b1 <xLastTime.2436>
    347c:	d0 92 b2 16 	sts	0x16B2, r13	; 0x8016b2 <xLastTime.2436+0x1>
    3480:	e0 92 b3 16 	sts	0x16B3, r14	; 0x8016b3 <xLastTime.2436+0x2>
    3484:	f0 92 b4 16 	sts	0x16B4, r15	; 0x8016b4 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    3488:	c7 01       	movw	r24, r14
    348a:	b6 01       	movw	r22, r12
    348c:	df 91       	pop	r29
    348e:	cf 91       	pop	r28
    3490:	ff 90       	pop	r15
    3492:	ef 90       	pop	r14
    3494:	df 90       	pop	r13
    3496:	cf 90       	pop	r12
    3498:	08 95       	ret

0000349a <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    349a:	4f 92       	push	r4
    349c:	5f 92       	push	r5
    349e:	6f 92       	push	r6
    34a0:	7f 92       	push	r7
    34a2:	8f 92       	push	r8
    34a4:	9f 92       	push	r9
    34a6:	af 92       	push	r10
    34a8:	bf 92       	push	r11
    34aa:	cf 92       	push	r12
    34ac:	df 92       	push	r13
    34ae:	ef 92       	push	r14
    34b0:	ff 92       	push	r15
    34b2:	0f 93       	push	r16
    34b4:	1f 93       	push	r17
    34b6:	cf 93       	push	r28
    34b8:	df 93       	push	r29
    34ba:	4b 01       	movw	r8, r22
    34bc:	5c 01       	movw	r10, r24
    34be:	29 01       	movw	r4, r18
    34c0:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    34c2:	e0 91 bb 16 	lds	r30, 0x16BB	; 0x8016bb <pxCurrentTimerList>
    34c6:	f0 91 bc 16 	lds	r31, 0x16BC	; 0x8016bc <pxCurrentTimerList+0x1>
    34ca:	07 80       	ldd	r0, Z+7	; 0x07
    34cc:	f0 85       	ldd	r31, Z+8	; 0x08
    34ce:	e0 2d       	mov	r30, r0
    34d0:	c0 85       	ldd	r28, Z+8	; 0x08
    34d2:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    34d4:	ce 01       	movw	r24, r28
    34d6:	02 96       	adiw	r24, 0x02	; 2
    34d8:	0e 94 15 04 	call	0x82a	; 0x82a <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    34dc:	8e 89       	ldd	r24, Y+22	; 0x16
    34de:	82 ff       	sbrs	r24, 2
    34e0:	1b c0       	rjmp	.+54     	; 0x3518 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    34e2:	4e 85       	ldd	r20, Y+14	; 0x0e
    34e4:	5f 85       	ldd	r21, Y+15	; 0x0f
    34e6:	68 89       	ldd	r22, Y+16	; 0x10
    34e8:	79 89       	ldd	r23, Y+17	; 0x11
    34ea:	48 0d       	add	r20, r8
    34ec:	59 1d       	adc	r21, r9
    34ee:	6a 1d       	adc	r22, r10
    34f0:	7b 1d       	adc	r23, r11
    34f2:	75 01       	movw	r14, r10
    34f4:	64 01       	movw	r12, r8
    34f6:	93 01       	movw	r18, r6
    34f8:	82 01       	movw	r16, r4
    34fa:	ce 01       	movw	r24, r28
    34fc:	47 de       	rcall	.-882    	; 0x318c <prvInsertTimerInActiveList>
    34fe:	88 23       	and	r24, r24
    3500:	69 f0       	breq	.+26     	; 0x351c <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3502:	c1 2c       	mov	r12, r1
    3504:	d1 2c       	mov	r13, r1
    3506:	76 01       	movw	r14, r12
    3508:	00 e0       	ldi	r16, 0x00	; 0
    350a:	10 e0       	ldi	r17, 0x00	; 0
    350c:	a5 01       	movw	r20, r10
    350e:	94 01       	movw	r18, r8
    3510:	60 e0       	ldi	r22, 0x00	; 0
    3512:	ce 01       	movw	r24, r28
    3514:	ce de       	rcall	.-612    	; 0x32b2 <xTimerGenericCommand>
    3516:	02 c0       	rjmp	.+4      	; 0x351c <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3518:	8e 7f       	andi	r24, 0xFE	; 254
    351a:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    351c:	ec 89       	ldd	r30, Y+20	; 0x14
    351e:	fd 89       	ldd	r31, Y+21	; 0x15
    3520:	ce 01       	movw	r24, r28
    3522:	19 95       	eicall
    }
    3524:	df 91       	pop	r29
    3526:	cf 91       	pop	r28
    3528:	1f 91       	pop	r17
    352a:	0f 91       	pop	r16
    352c:	ff 90       	pop	r15
    352e:	ef 90       	pop	r14
    3530:	df 90       	pop	r13
    3532:	cf 90       	pop	r12
    3534:	bf 90       	pop	r11
    3536:	af 90       	pop	r10
    3538:	9f 90       	pop	r9
    353a:	8f 90       	pop	r8
    353c:	7f 90       	pop	r7
    353e:	6f 90       	pop	r6
    3540:	5f 90       	pop	r5
    3542:	4f 90       	pop	r4
    3544:	08 95       	ret

00003546 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    3546:	8f 92       	push	r8
    3548:	9f 92       	push	r9
    354a:	af 92       	push	r10
    354c:	bf 92       	push	r11
    354e:	cf 92       	push	r12
    3550:	df 92       	push	r13
    3552:	ef 92       	push	r14
    3554:	ff 92       	push	r15
    3556:	1f 93       	push	r17
    3558:	cf 93       	push	r28
    355a:	df 93       	push	r29
    355c:	1f 92       	push	r1
    355e:	cd b7       	in	r28, 0x3d	; 61
    3560:	de b7       	in	r29, 0x3e	; 62
    3562:	6b 01       	movw	r12, r22
    3564:	7c 01       	movw	r14, r24
    3566:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    3568:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    356c:	ce 01       	movw	r24, r28
    356e:	01 96       	adiw	r24, 0x01	; 1
    3570:	66 df       	rcall	.-308    	; 0x343e <prvSampleTimeNow>
    3572:	4b 01       	movw	r8, r22
    3574:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    3576:	89 81       	ldd	r24, Y+1	; 0x01
    3578:	81 11       	cpse	r24, r1
    357a:	2d c0       	rjmp	.+90     	; 0x35d6 <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    357c:	11 11       	cpse	r17, r1
    357e:	0d c0       	rjmp	.+26     	; 0x359a <prvProcessTimerOrBlockTask+0x54>
    3580:	8c 14       	cp	r8, r12
    3582:	9d 04       	cpc	r9, r13
    3584:	ae 04       	cpc	r10, r14
    3586:	bf 04       	cpc	r11, r15
    3588:	40 f0       	brcs	.+16     	; 0x359a <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    358a:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    358e:	a5 01       	movw	r20, r10
    3590:	94 01       	movw	r18, r8
    3592:	c7 01       	movw	r24, r14
    3594:	b6 01       	movw	r22, r12
    3596:	81 df       	rcall	.-254    	; 0x349a <prvProcessExpiredTimer>
    3598:	20 c0       	rjmp	.+64     	; 0x35da <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    359a:	11 23       	and	r17, r17
    359c:	41 f0       	breq	.+16     	; 0x35ae <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    359e:	e0 91 b9 16 	lds	r30, 0x16B9	; 0x8016b9 <pxOverflowTimerList>
    35a2:	f0 91 ba 16 	lds	r31, 0x16BA	; 0x8016ba <pxOverflowTimerList+0x1>
    35a6:	80 81       	ld	r24, Z
    35a8:	11 e0       	ldi	r17, 0x01	; 1
    35aa:	81 11       	cpse	r24, r1
    35ac:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    35ae:	b7 01       	movw	r22, r14
    35b0:	a6 01       	movw	r20, r12
    35b2:	48 19       	sub	r20, r8
    35b4:	59 09       	sbc	r21, r9
    35b6:	6a 09       	sbc	r22, r10
    35b8:	7b 09       	sbc	r23, r11
    35ba:	21 2f       	mov	r18, r17
    35bc:	80 91 b7 16 	lds	r24, 0x16B7	; 0x8016b7 <xTimerQueue>
    35c0:	90 91 b8 16 	lds	r25, 0x16B8	; 0x8016b8 <xTimerQueue+0x1>
    35c4:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    35c8:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <xTaskResumeAll>
    35cc:	81 11       	cpse	r24, r1
    35ce:	05 c0       	rjmp	.+10     	; 0x35da <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    35d0:	0e 94 91 04 	call	0x922	; 0x922 <vPortYield>
    35d4:	02 c0       	rjmp	.+4      	; 0x35da <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    35d6:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <xTaskResumeAll>
            }
        }
    }
    35da:	0f 90       	pop	r0
    35dc:	df 91       	pop	r29
    35de:	cf 91       	pop	r28
    35e0:	1f 91       	pop	r17
    35e2:	ff 90       	pop	r15
    35e4:	ef 90       	pop	r14
    35e6:	df 90       	pop	r13
    35e8:	cf 90       	pop	r12
    35ea:	bf 90       	pop	r11
    35ec:	af 90       	pop	r10
    35ee:	9f 90       	pop	r9
    35f0:	8f 90       	pop	r8
    35f2:	08 95       	ret

000035f4 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    35f4:	af 92       	push	r10
    35f6:	bf 92       	push	r11
    35f8:	cf 92       	push	r12
    35fa:	df 92       	push	r13
    35fc:	ef 92       	push	r14
    35fe:	ff 92       	push	r15
    3600:	0f 93       	push	r16
    3602:	1f 93       	push	r17
    3604:	cf 93       	push	r28
    3606:	df 93       	push	r29
    3608:	cd b7       	in	r28, 0x3d	; 61
    360a:	de b7       	in	r29, 0x3e	; 62
    360c:	28 97       	sbiw	r28, 0x08	; 8
    360e:	0f b6       	in	r0, 0x3f	; 63
    3610:	f8 94       	cli
    3612:	de bf       	out	0x3e, r29	; 62
    3614:	0f be       	out	0x3f, r0	; 63
    3616:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3618:	82 c0       	rjmp	.+260    	; 0x371e <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    361a:	89 81       	ldd	r24, Y+1	; 0x01
    361c:	88 23       	and	r24, r24
    361e:	0c f4       	brge	.+2      	; 0x3622 <prvProcessReceivedCommands+0x2e>
    3620:	7e c0       	rjmp	.+252    	; 0x371e <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    3622:	ae 80       	ldd	r10, Y+6	; 0x06
    3624:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    3626:	d5 01       	movw	r26, r10
    3628:	1c 96       	adiw	r26, 0x0c	; 12
    362a:	8d 91       	ld	r24, X+
    362c:	9c 91       	ld	r25, X
    362e:	1d 97       	sbiw	r26, 0x0d	; 13
    3630:	89 2b       	or	r24, r25
    3632:	21 f0       	breq	.+8      	; 0x363c <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3634:	c5 01       	movw	r24, r10
    3636:	02 96       	adiw	r24, 0x02	; 2
    3638:	0e 94 15 04 	call	0x82a	; 0x82a <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    363c:	ce 01       	movw	r24, r28
    363e:	08 96       	adiw	r24, 0x08	; 8
    3640:	fe de       	rcall	.-516    	; 0x343e <prvSampleTimeNow>
    3642:	8b 01       	movw	r16, r22
    3644:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    3646:	e9 81       	ldd	r30, Y+1	; 0x01
    3648:	0e 2e       	mov	r0, r30
    364a:	00 0c       	add	r0, r0
    364c:	ff 0b       	sbc	r31, r31
    364e:	ea 30       	cpi	r30, 0x0A	; 10
    3650:	f1 05       	cpc	r31, r1
    3652:	08 f0       	brcs	.+2      	; 0x3656 <prvProcessReceivedCommands+0x62>
    3654:	64 c0       	rjmp	.+200    	; 0x371e <prvProcessReceivedCommands+0x12a>
    3656:	88 27       	eor	r24, r24
    3658:	ee 58       	subi	r30, 0x8E	; 142
    365a:	ff 4f       	sbci	r31, 0xFF	; 255
    365c:	8f 4f       	sbci	r24, 0xFF	; 255
    365e:	0c 94 7d 31 	jmp	0x62fa	; 0x62fa <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3662:	f5 01       	movw	r30, r10
    3664:	86 89       	ldd	r24, Z+22	; 0x16
    3666:	81 60       	ori	r24, 0x01	; 1
    3668:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    366a:	ca 80       	ldd	r12, Y+2	; 0x02
    366c:	db 80       	ldd	r13, Y+3	; 0x03
    366e:	ec 80       	ldd	r14, Y+4	; 0x04
    3670:	fd 80       	ldd	r15, Y+5	; 0x05
    3672:	46 85       	ldd	r20, Z+14	; 0x0e
    3674:	57 85       	ldd	r21, Z+15	; 0x0f
    3676:	60 89       	ldd	r22, Z+16	; 0x10
    3678:	71 89       	ldd	r23, Z+17	; 0x11
    367a:	4c 0d       	add	r20, r12
    367c:	5d 1d       	adc	r21, r13
    367e:	6e 1d       	adc	r22, r14
    3680:	7f 1d       	adc	r23, r15
    3682:	c5 01       	movw	r24, r10
    3684:	83 dd       	rcall	.-1274   	; 0x318c <prvInsertTimerInActiveList>
    3686:	88 23       	and	r24, r24
    3688:	09 f4       	brne	.+2      	; 0x368c <prvProcessReceivedCommands+0x98>
    368a:	49 c0       	rjmp	.+146    	; 0x371e <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    368c:	d5 01       	movw	r26, r10
    368e:	54 96       	adiw	r26, 0x14	; 20
    3690:	ed 91       	ld	r30, X+
    3692:	fc 91       	ld	r31, X
    3694:	55 97       	sbiw	r26, 0x15	; 21
    3696:	c5 01       	movw	r24, r10
    3698:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    369a:	f5 01       	movw	r30, r10
    369c:	86 89       	ldd	r24, Z+22	; 0x16
    369e:	82 ff       	sbrs	r24, 2
    36a0:	3e c0       	rjmp	.+124    	; 0x371e <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    36a2:	4a 81       	ldd	r20, Y+2	; 0x02
    36a4:	5b 81       	ldd	r21, Y+3	; 0x03
    36a6:	6c 81       	ldd	r22, Y+4	; 0x04
    36a8:	7d 81       	ldd	r23, Y+5	; 0x05
    36aa:	86 85       	ldd	r24, Z+14	; 0x0e
    36ac:	97 85       	ldd	r25, Z+15	; 0x0f
    36ae:	a0 89       	ldd	r26, Z+16	; 0x10
    36b0:	b1 89       	ldd	r27, Z+17	; 0x11
    36b2:	9a 01       	movw	r18, r20
    36b4:	ab 01       	movw	r20, r22
    36b6:	28 0f       	add	r18, r24
    36b8:	39 1f       	adc	r19, r25
    36ba:	4a 1f       	adc	r20, r26
    36bc:	5b 1f       	adc	r21, r27
    36be:	c1 2c       	mov	r12, r1
    36c0:	d1 2c       	mov	r13, r1
    36c2:	76 01       	movw	r14, r12
    36c4:	00 e0       	ldi	r16, 0x00	; 0
    36c6:	10 e0       	ldi	r17, 0x00	; 0
    36c8:	60 e0       	ldi	r22, 0x00	; 0
    36ca:	c5 01       	movw	r24, r10
    36cc:	f2 dd       	rcall	.-1052   	; 0x32b2 <xTimerGenericCommand>
    36ce:	27 c0       	rjmp	.+78     	; 0x371e <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    36d0:	d5 01       	movw	r26, r10
    36d2:	56 96       	adiw	r26, 0x16	; 22
    36d4:	8c 91       	ld	r24, X
    36d6:	56 97       	sbiw	r26, 0x16	; 22
    36d8:	8e 7f       	andi	r24, 0xFE	; 254
    36da:	56 96       	adiw	r26, 0x16	; 22
    36dc:	8c 93       	st	X, r24
                        break;
    36de:	1f c0       	rjmp	.+62     	; 0x371e <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    36e0:	f5 01       	movw	r30, r10
    36e2:	86 89       	ldd	r24, Z+22	; 0x16
    36e4:	81 60       	ori	r24, 0x01	; 1
    36e6:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    36e8:	4a 81       	ldd	r20, Y+2	; 0x02
    36ea:	5b 81       	ldd	r21, Y+3	; 0x03
    36ec:	6c 81       	ldd	r22, Y+4	; 0x04
    36ee:	7d 81       	ldd	r23, Y+5	; 0x05
    36f0:	46 87       	std	Z+14, r20	; 0x0e
    36f2:	57 87       	std	Z+15, r21	; 0x0f
    36f4:	60 8b       	std	Z+16, r22	; 0x10
    36f6:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    36f8:	40 0f       	add	r20, r16
    36fa:	51 1f       	adc	r21, r17
    36fc:	62 1f       	adc	r22, r18
    36fe:	73 1f       	adc	r23, r19
    3700:	68 01       	movw	r12, r16
    3702:	79 01       	movw	r14, r18
    3704:	c5 01       	movw	r24, r10
    3706:	42 dd       	rcall	.-1404   	; 0x318c <prvInsertTimerInActiveList>
                        break;
    3708:	0a c0       	rjmp	.+20     	; 0x371e <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    370a:	f5 01       	movw	r30, r10
    370c:	86 89       	ldd	r24, Z+22	; 0x16
    370e:	81 fd       	sbrc	r24, 1
    3710:	04 c0       	rjmp	.+8      	; 0x371a <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    3712:	c5 01       	movw	r24, r10
    3714:	0e 94 86 03 	call	0x70c	; 0x70c <vPortFree>
    3718:	02 c0       	rjmp	.+4      	; 0x371e <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    371a:	8e 7f       	andi	r24, 0xFE	; 254
    371c:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    371e:	20 e0       	ldi	r18, 0x00	; 0
    3720:	30 e0       	ldi	r19, 0x00	; 0
    3722:	a9 01       	movw	r20, r18
    3724:	be 01       	movw	r22, r28
    3726:	6f 5f       	subi	r22, 0xFF	; 255
    3728:	7f 4f       	sbci	r23, 0xFF	; 255
    372a:	80 91 b7 16 	lds	r24, 0x16B7	; 0x8016b7 <xTimerQueue>
    372e:	90 91 b8 16 	lds	r25, 0x16B8	; 0x8016b8 <xTimerQueue+0x1>
    3732:	0e 94 94 07 	call	0xf28	; 0xf28 <xQueueReceive>
    3736:	81 11       	cpse	r24, r1
    3738:	70 cf       	rjmp	.-288    	; 0x361a <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    373a:	28 96       	adiw	r28, 0x08	; 8
    373c:	0f b6       	in	r0, 0x3f	; 63
    373e:	f8 94       	cli
    3740:	de bf       	out	0x3e, r29	; 62
    3742:	0f be       	out	0x3f, r0	; 63
    3744:	cd bf       	out	0x3d, r28	; 61
    3746:	df 91       	pop	r29
    3748:	cf 91       	pop	r28
    374a:	1f 91       	pop	r17
    374c:	0f 91       	pop	r16
    374e:	ff 90       	pop	r15
    3750:	ef 90       	pop	r14
    3752:	df 90       	pop	r13
    3754:	cf 90       	pop	r12
    3756:	bf 90       	pop	r11
    3758:	af 90       	pop	r10
    375a:	08 95       	ret

0000375c <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    375c:	08 95       	ret

0000375e <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    375e:	84 b1       	in	r24, 0x04	; 4
    3760:	80 68       	ori	r24, 0x80	; 128
    3762:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3764:	85 b1       	in	r24, 0x05	; 5
    3766:	80 68       	ori	r24, 0x80	; 128
    3768:	85 b9       	out	0x05, r24	; 5
    376a:	08 95       	ret

0000376c <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    376c:	83 b1       	in	r24, 0x03	; 3
    376e:	80 68       	ori	r24, 0x80	; 128
    3770:	83 b9       	out	0x03, r24	; 3
    3772:	08 95       	ret

00003774 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    3774:	f4 df       	rcall	.-24     	; 0x375e <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3776:	2f ef       	ldi	r18, 0xFF	; 255
    3778:	80 e7       	ldi	r24, 0x70	; 112
    377a:	92 e0       	ldi	r25, 0x02	; 2
    377c:	21 50       	subi	r18, 0x01	; 1
    377e:	80 40       	sbci	r24, 0x00	; 0
    3780:	90 40       	sbci	r25, 0x00	; 0
    3782:	e1 f7       	brne	.-8      	; 0x377c <vApplicationMallocFailedHook+0x8>
    3784:	00 c0       	rjmp	.+0      	; 0x3786 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    3786:	00 00       	nop
    3788:	f1 df       	rcall	.-30     	; 0x376c <prvBlinkMainLed>
    378a:	f5 cf       	rjmp	.-22     	; 0x3776 <vApplicationMallocFailedHook+0x2>

0000378c <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    378c:	e8 df       	rcall	.-48     	; 0x375e <prvSetMainLedOn>
    378e:	2f ef       	ldi	r18, 0xFF	; 255
    3790:	87 ea       	ldi	r24, 0xA7	; 167
    3792:	91 e6       	ldi	r25, 0x61	; 97
    3794:	21 50       	subi	r18, 0x01	; 1
    3796:	80 40       	sbci	r24, 0x00	; 0
    3798:	90 40       	sbci	r25, 0x00	; 0
    379a:	e1 f7       	brne	.-8      	; 0x3794 <vApplicationStackOverflowHook+0x8>
    379c:	00 c0       	rjmp	.+0      	; 0x379e <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    379e:	00 00       	nop
    37a0:	e5 df       	rcall	.-54     	; 0x376c <prvBlinkMainLed>
    37a2:	f5 cf       	rjmp	.-22     	; 0x378e <vApplicationStackOverflowHook+0x2>

000037a4 <_createQueues>:
static SemaphoreHandle_t _mutex;

static MessageBufferHandle_t _messageBuffer;

static void _createQueues(void) {
	_humidityQueue = xQueueCreate(10, sizeof(uint16_t));
    37a4:	40 e0       	ldi	r20, 0x00	; 0
    37a6:	62 e0       	ldi	r22, 0x02	; 2
    37a8:	8a e0       	ldi	r24, 0x0A	; 10
    37aa:	0e 94 86 06 	call	0xd0c	; 0xd0c <xQueueGenericCreate>
    37ae:	90 93 e6 16 	sts	0x16E6, r25	; 0x8016e6 <_humidityQueue+0x1>
    37b2:	80 93 e5 16 	sts	0x16E5, r24	; 0x8016e5 <_humidityQueue>
	_temperatureQueue = xQueueCreate(10, sizeof(int16_t));
    37b6:	40 e0       	ldi	r20, 0x00	; 0
    37b8:	62 e0       	ldi	r22, 0x02	; 2
    37ba:	8a e0       	ldi	r24, 0x0A	; 10
    37bc:	0e 94 86 06 	call	0xd0c	; 0xd0c <xQueueGenericCreate>
    37c0:	90 93 e4 16 	sts	0x16E4, r25	; 0x8016e4 <_temperatureQueue+0x1>
    37c4:	80 93 e3 16 	sts	0x16E3, r24	; 0x8016e3 <_temperatureQueue>
	_co2Queue = xQueueCreate(10, sizeof(uint16_t));
    37c8:	40 e0       	ldi	r20, 0x00	; 0
    37ca:	62 e0       	ldi	r22, 0x02	; 2
    37cc:	8a e0       	ldi	r24, 0x0A	; 10
    37ce:	0e 94 86 06 	call	0xd0c	; 0xd0c <xQueueGenericCreate>
    37d2:	90 93 e2 16 	sts	0x16E2, r25	; 0x8016e2 <_co2Queue+0x1>
    37d6:	80 93 e1 16 	sts	0x16E1, r24	; 0x8016e1 <_co2Queue>
	_soundQueue = xQueueCreate(10, sizeof(uint16_t));
    37da:	40 e0       	ldi	r20, 0x00	; 0
    37dc:	62 e0       	ldi	r22, 0x02	; 2
    37de:	8a e0       	ldi	r24, 0x0A	; 10
    37e0:	0e 94 86 06 	call	0xd0c	; 0xd0c <xQueueGenericCreate>
    37e4:	90 93 e0 16 	sts	0x16E0, r25	; 0x8016e0 <_soundQueue+0x1>
    37e8:	80 93 df 16 	sts	0x16DF, r24	; 0x8016df <_soundQueue>
	_servoQueue = xQueueCreate(10, sizeof(int16_t));
    37ec:	40 e0       	ldi	r20, 0x00	; 0
    37ee:	62 e0       	ldi	r22, 0x02	; 2
    37f0:	8a e0       	ldi	r24, 0x0A	; 10
    37f2:	0e 94 86 06 	call	0xd0c	; 0xd0c <xQueueGenericCreate>
    37f6:	90 93 de 16 	sts	0x16DE, r25	; 0x8016de <_servoQueue+0x1>
    37fa:	80 93 dd 16 	sts	0x16DD, r24	; 0x8016dd <_servoQueue>
	_messageBuffer = xMessageBufferCreate(sizeof(lora_driver_payload_t)*5);
    37fe:	41 e0       	ldi	r20, 0x01	; 1
    3800:	60 e0       	ldi	r22, 0x00	; 0
    3802:	70 e0       	ldi	r23, 0x00	; 0
    3804:	8e e6       	ldi	r24, 0x6E	; 110
    3806:	90 e0       	ldi	r25, 0x00	; 0
    3808:	0e 94 33 0a 	call	0x1466	; 0x1466 <xStreamBufferGenericCreate>
    380c:	90 93 d4 16 	sts	0x16D4, r25	; 0x8016d4 <_messageBuffer+0x1>
    3810:	80 93 d3 16 	sts	0x16D3, r24	; 0x8016d3 <_messageBuffer>
	_senderQueue = xQueueCreate(10, sizeof(lora_driver_payload_t));
    3814:	40 e0       	ldi	r20, 0x00	; 0
    3816:	66 e1       	ldi	r22, 0x16	; 22
    3818:	8a e0       	ldi	r24, 0x0A	; 10
    381a:	0e 94 86 06 	call	0xd0c	; 0xd0c <xQueueGenericCreate>
    381e:	90 93 dc 16 	sts	0x16DC, r25	; 0x8016dc <_senderQueue+0x1>
    3822:	80 93 db 16 	sts	0x16DB, r24	; 0x8016db <_senderQueue>
    3826:	08 95       	ret

00003828 <_initDrivers>:
static void _createMutexes(void){
	_mutex = xSemaphoreCreateMutex();
}

static void _initDrivers(void) {
	puts("Initializing drivers...");
    3828:	8c e7       	ldi	r24, 0x7C	; 124
    382a:	92 e0       	ldi	r25, 0x02	; 2
    382c:	0e 94 1c 33 	call	0x6638	; 0x6638 <puts>
	hih8120_initialise();
    3830:	f2 d6       	rcall	.+3556   	; 0x4616 <hih8120_initialise>
	mh_z19_initialise(ser_USART3);
    3832:	83 e0       	ldi	r24, 0x03	; 3
    3834:	0e 94 55 28 	call	0x50aa	; 0x50aa <mh_z19_initialise>
	rc_servo_initialise();
    3838:	0e 94 c6 28 	call	0x518c	; 0x518c <rc_servo_initialise>
	sen14262_initialise();
    383c:	0e 94 f5 28 	call	0x51ea	; 0x51ea <sen14262_initialise>
	lora_driver_initialise(ser_USART1, _messageBuffer);
    3840:	60 91 d3 16 	lds	r22, 0x16D3	; 0x8016d3 <_messageBuffer>
    3844:	70 91 d4 16 	lds	r23, 0x16D4	; 0x8016d4 <_messageBuffer+0x1>
    3848:	81 e0       	ldi	r24, 0x01	; 1
    384a:	0c 94 ae 24 	jmp	0x495c	; 0x495c <lora_driver_initialise>
    384e:	08 95       	ret

00003850 <_createEventGroups>:
	_messageBuffer = xMessageBufferCreate(sizeof(lora_driver_payload_t)*5);
	_senderQueue = xQueueCreate(10, sizeof(lora_driver_payload_t));
}

static void _createEventGroups(void) {
	_actEventGroup = xEventGroupCreate();
    3850:	0e 94 29 01 	call	0x252	; 0x252 <xEventGroupCreate>
    3854:	90 93 da 16 	sts	0x16DA, r25	; 0x8016da <_actEventGroup+0x1>
    3858:	80 93 d9 16 	sts	0x16D9, r24	; 0x8016d9 <_actEventGroup>
	_doneEventGroup = xEventGroupCreate();
    385c:	0e 94 29 01 	call	0x252	; 0x252 <xEventGroupCreate>
    3860:	90 93 d8 16 	sts	0x16D8, r25	; 0x8016d8 <_doneEventGroup+0x1>
    3864:	80 93 d7 16 	sts	0x16D7, r24	; 0x8016d7 <_doneEventGroup>
    3868:	08 95       	ret

0000386a <_createTasks>:
	rc_servo_initialise();
	sen14262_initialise();
	lora_driver_initialise(ser_USART1, _messageBuffer);
}

static void _createTasks(void) {
    386a:	af 92       	push	r10
    386c:	bf 92       	push	r11
    386e:	cf 92       	push	r12
    3870:	df 92       	push	r13
    3872:	ef 92       	push	r14
    3874:	ff 92       	push	r15
    3876:	0f 93       	push	r16
    3878:	1f 93       	push	r17
	farmerama_create(_senderQueue, _humidityQueue, _temperatureQueue, _co2Queue, _soundQueue, _servoQueue, _actEventGroup, _doneEventGroup);
    387a:	a0 90 d7 16 	lds	r10, 0x16D7	; 0x8016d7 <_doneEventGroup>
    387e:	b0 90 d8 16 	lds	r11, 0x16D8	; 0x8016d8 <_doneEventGroup+0x1>
    3882:	c0 90 d9 16 	lds	r12, 0x16D9	; 0x8016d9 <_actEventGroup>
    3886:	d0 90 da 16 	lds	r13, 0x16DA	; 0x8016da <_actEventGroup+0x1>
    388a:	e0 90 dd 16 	lds	r14, 0x16DD	; 0x8016dd <_servoQueue>
    388e:	f0 90 de 16 	lds	r15, 0x16DE	; 0x8016de <_servoQueue+0x1>
    3892:	00 91 df 16 	lds	r16, 0x16DF	; 0x8016df <_soundQueue>
    3896:	10 91 e0 16 	lds	r17, 0x16E0	; 0x8016e0 <_soundQueue+0x1>
    389a:	20 91 e1 16 	lds	r18, 0x16E1	; 0x8016e1 <_co2Queue>
    389e:	30 91 e2 16 	lds	r19, 0x16E2	; 0x8016e2 <_co2Queue+0x1>
    38a2:	40 91 e3 16 	lds	r20, 0x16E3	; 0x8016e3 <_temperatureQueue>
    38a6:	50 91 e4 16 	lds	r21, 0x16E4	; 0x8016e4 <_temperatureQueue+0x1>
    38aa:	60 91 e5 16 	lds	r22, 0x16E5	; 0x8016e5 <_humidityQueue>
    38ae:	70 91 e6 16 	lds	r23, 0x16E6	; 0x8016e6 <_humidityQueue+0x1>
    38b2:	80 91 db 16 	lds	r24, 0x16DB	; 0x8016db <_senderQueue>
    38b6:	90 91 dc 16 	lds	r25, 0x16DC	; 0x8016dc <_senderQueue+0x1>
    38ba:	b8 d1       	rcall	.+880    	; 0x3c2c <farmerama_create>
	humidityTemperatureTask_create(_humidityQueue, _temperatureQueue, _actEventGroup, _doneEventGroup);
    38bc:	20 91 d7 16 	lds	r18, 0x16D7	; 0x8016d7 <_doneEventGroup>
    38c0:	30 91 d8 16 	lds	r19, 0x16D8	; 0x8016d8 <_doneEventGroup+0x1>
    38c4:	40 91 d9 16 	lds	r20, 0x16D9	; 0x8016d9 <_actEventGroup>
    38c8:	50 91 da 16 	lds	r21, 0x16DA	; 0x8016da <_actEventGroup+0x1>
    38cc:	60 91 e3 16 	lds	r22, 0x16E3	; 0x8016e3 <_temperatureQueue>
    38d0:	70 91 e4 16 	lds	r23, 0x16E4	; 0x8016e4 <_temperatureQueue+0x1>
    38d4:	80 91 e5 16 	lds	r24, 0x16E5	; 0x8016e5 <_humidityQueue>
    38d8:	90 91 e6 16 	lds	r25, 0x16E6	; 0x8016e6 <_humidityQueue+0x1>
    38dc:	6a d4       	rcall	.+2260   	; 0x41b2 <humidityTemperatureTask_create>
	co2Task_create(_co2Queue, _actEventGroup, _doneEventGroup);
    38de:	40 91 d7 16 	lds	r20, 0x16D7	; 0x8016d7 <_doneEventGroup>
    38e2:	50 91 d8 16 	lds	r21, 0x16D8	; 0x8016d8 <_doneEventGroup+0x1>
    38e6:	60 91 d9 16 	lds	r22, 0x16D9	; 0x8016d9 <_actEventGroup>
    38ea:	70 91 da 16 	lds	r23, 0x16DA	; 0x8016da <_actEventGroup+0x1>
    38ee:	80 91 e1 16 	lds	r24, 0x16E1	; 0x8016e1 <_co2Queue>
    38f2:	90 91 e2 16 	lds	r25, 0x16E2	; 0x8016e2 <_co2Queue+0x1>
    38f6:	5f d0       	rcall	.+190    	; 0x39b6 <co2Task_create>
	soundTask_create(_soundQueue, _actEventGroup, _doneEventGroup);
    38f8:	40 91 d7 16 	lds	r20, 0x16D7	; 0x8016d7 <_doneEventGroup>
    38fc:	50 91 d8 16 	lds	r21, 0x16D8	; 0x8016d8 <_doneEventGroup+0x1>
    3900:	60 91 d9 16 	lds	r22, 0x16D9	; 0x8016d9 <_actEventGroup>
    3904:	70 91 da 16 	lds	r23, 0x16DA	; 0x8016da <_actEventGroup+0x1>
    3908:	80 91 df 16 	lds	r24, 0x16DF	; 0x8016df <_soundQueue>
    390c:	90 91 e0 16 	lds	r25, 0x16E0	; 0x8016e0 <_soundQueue+0x1>
    3910:	a2 d5       	rcall	.+2884   	; 0x4456 <soundTask_create>
	servoTask_create(_servoQueue);
    3912:	80 91 dd 16 	lds	r24, 0x16DD	; 0x8016dd <_servoQueue>
    3916:	90 91 de 16 	lds	r25, 0x16DE	; 0x8016de <_servoQueue+0x1>
    391a:	e3 d4       	rcall	.+2502   	; 0x42e2 <servoTask_create>
	senderTask_create(_senderQueue);
    391c:	80 91 db 16 	lds	r24, 0x16DB	; 0x8016db <_senderQueue>
    3920:	90 91 dc 16 	lds	r25, 0x16DC	; 0x8016dc <_senderQueue+0x1>
    3924:	e2 d3       	rcall	.+1988   	; 0x40ea <senderTask_create>
	receiverTask_create(_messageBuffer);
    3926:	80 91 d3 16 	lds	r24, 0x16D3	; 0x8016d3 <_messageBuffer>
    392a:	90 91 d4 16 	lds	r25, 0x16D4	; 0x8016d4 <_messageBuffer+0x1>
    392e:	c9 d2       	rcall	.+1426   	; 0x3ec2 <receiverTask_create>
    3930:	1f 91       	pop	r17
}
    3932:	0f 91       	pop	r16
    3934:	ff 90       	pop	r15
    3936:	ef 90       	pop	r14
    3938:	df 90       	pop	r13
    393a:	cf 90       	pop	r12
    393c:	bf 90       	pop	r11
    393e:	af 90       	pop	r10
    3940:	08 95       	ret

00003942 <_createMutexes>:
    3942:	81 e0       	ldi	r24, 0x01	; 1
	_actEventGroup = xEventGroupCreate();
	_doneEventGroup = xEventGroupCreate();
}

static void _createMutexes(void){
	_mutex = xSemaphoreCreateMutex();
    3944:	0e 94 4d 07 	call	0xe9a	; 0xe9a <xQueueCreateMutex>
    3948:	90 93 d6 16 	sts	0x16D6, r25	; 0x8016d6 <_mutex+0x1>
    394c:	80 93 d5 16 	sts	0x16D5, r24	; 0x8016d5 <_mutex>
    3950:	08 95       	ret

00003952 <main>:
	senderTask_create(_senderQueue);
	receiverTask_create(_messageBuffer);
}

int main(void) {
	stdio_initialise(ser_USART0);
    3952:	80 e0       	ldi	r24, 0x00	; 0
    3954:	0e 94 f9 2c 	call	0x59f2	; 0x59f2 <stdio_initialise>
	
	_createQueues();
    3958:	25 df       	rcall	.-438    	; 0x37a4 <_createQueues>
	_initDrivers();
    395a:	66 df       	rcall	.-308    	; 0x3828 <_initDrivers>
	_createEventGroups();
    395c:	79 df       	rcall	.-270    	; 0x3850 <_createEventGroups>
	_createTasks();
    395e:	85 df       	rcall	.-246    	; 0x386a <_createTasks>
    3960:	f0 df       	rcall	.-32     	; 0x3942 <_createMutexes>
	_createMutexes();
    3962:	80 91 d5 16 	lds	r24, 0x16D5	; 0x8016d5 <_mutex>
	configuration_create(_mutex);
    3966:	90 91 d6 16 	lds	r25, 0x16D6	; 0x8016d6 <_mutex+0x1>
    396a:	75 d0       	rcall	.+234    	; 0x3a56 <configuration_create>
    396c:	84 e9       	ldi	r24, 0x94	; 148
    396e:	92 e0       	ldi	r25, 0x02	; 2
	
	puts("Starting...");
    3970:	0e 94 1c 33 	call	0x6638	; 0x6638 <puts>
    3974:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <vTaskStartScheduler>
	vTaskStartScheduler();
    3978:	80 e0       	ldi	r24, 0x00	; 0
    397a:	90 e0       	ldi	r25, 0x00	; 0
    397c:	08 95       	ret

0000397e <_co2CallBack>:
    397e:	0f 93       	push	r16
    3980:	cf 93       	push	r28
	}	
		
	xEventGroupSetBits(_doneEventGroup, BIT_CO2_DONE);
}

static void _co2CallBack(uint16_t ppm){
    3982:	df 93       	push	r29
    3984:	1f 92       	push	r1
    3986:	1f 92       	push	r1
    3988:	cd b7       	in	r28, 0x3d	; 61
    398a:	de b7       	in	r29, 0x3e	; 62
    398c:	9a 83       	std	Y+2, r25	; 0x02
    398e:	89 83       	std	Y+1, r24	; 0x01
	xQueueSendToBack(_co2Queue, &ppm, portMAX_DELAY);
    3990:	00 e0       	ldi	r16, 0x00	; 0
    3992:	2f ef       	ldi	r18, 0xFF	; 255
    3994:	3f ef       	ldi	r19, 0xFF	; 255
    3996:	a9 01       	movw	r20, r18
    3998:	be 01       	movw	r22, r28
    399a:	6f 5f       	subi	r22, 0xFF	; 255
    399c:	7f 4f       	sbci	r23, 0xFF	; 255
    399e:	80 91 e9 16 	lds	r24, 0x16E9	; 0x8016e9 <_co2Queue>
    39a2:	90 91 ea 16 	lds	r25, 0x16EA	; 0x8016ea <_co2Queue+0x1>
    39a6:	0e 94 a9 06 	call	0xd52	; 0xd52 <xQueueGenericSend>
}
    39aa:	0f 90       	pop	r0
    39ac:	0f 90       	pop	r0
    39ae:	df 91       	pop	r29
    39b0:	cf 91       	pop	r28
    39b2:	0f 91       	pop	r16
    39b4:	08 95       	ret

000039b6 <co2Task_create>:
static QueueHandle_t _co2Queue;
static EventGroupHandle_t _actEventGroup;
static EventGroupHandle_t _doneEventGroup;
static uint16_t ppm;

void co2Task_create(QueueHandle_t co2Queue, EventGroupHandle_t actEventGroup, EventGroupHandle_t doneEventGroup) {
    39b6:	ef 92       	push	r14
    39b8:	ff 92       	push	r15
    39ba:	0f 93       	push	r16
	_co2Queue = co2Queue;
    39bc:	90 93 ea 16 	sts	0x16EA, r25	; 0x8016ea <_co2Queue+0x1>
    39c0:	80 93 e9 16 	sts	0x16E9, r24	; 0x8016e9 <_co2Queue>
	_actEventGroup = actEventGroup;
	_doneEventGroup = doneEventGroup;
    39c4:	50 93 e8 16 	sts	0x16E8, r21	; 0x8016e8 <_doneEventGroup+0x1>
    39c8:	40 93 e7 16 	sts	0x16E7, r20	; 0x8016e7 <_doneEventGroup>
	
	xTaskCreate(_run, 
    39cc:	e1 2c       	mov	r14, r1
    39ce:	f1 2c       	mov	r15, r1
    39d0:	08 e0       	ldi	r16, 0x08	; 8
    39d2:	20 e0       	ldi	r18, 0x00	; 0
    39d4:	30 e0       	ldi	r19, 0x00	; 0
    39d6:	40 ec       	ldi	r20, 0xC0	; 192
    39d8:	50 e0       	ldi	r21, 0x00	; 0
    39da:	60 ea       	ldi	r22, 0xA0	; 160
    39dc:	72 e0       	ldi	r23, 0x02	; 2
    39de:	88 e2       	ldi	r24, 0x28	; 40
    39e0:	9d e1       	ldi	r25, 0x1D	; 29
    39e2:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <xTaskCreate>
				TASK_NAME, 
				configMINIMAL_STACK_SIZE, 
				NULL, 
				TASK_PRIORITY, 
				NULL);
}
    39e6:	0f 91       	pop	r16
    39e8:	ff 90       	pop	r15
    39ea:	ef 90       	pop	r14
    39ec:	08 95       	ret

000039ee <co2Task_initTask>:

void co2Task_initTask(void* params) {
	mh_z19_injectCallBack(_co2CallBack);
    39ee:	8f eb       	ldi	r24, 0xBF	; 191
    39f0:	9c e1       	ldi	r25, 0x1C	; 28
    39f2:	0c 94 7a 28 	jmp	0x50f4	; 0x50f4 <mh_z19_injectCallBack>
    39f6:	08 95       	ret

000039f8 <co2Task_runTask>:
}

void co2Task_runTask() {
    39f8:	cf 92       	push	r12
    39fa:	df 92       	push	r13
    39fc:	ef 92       	push	r14
    39fe:	ff 92       	push	r15
    3a00:	0f 93       	push	r16
	xEventGroupWaitBits(_doneEventGroup, 
    3a02:	cc 24       	eor	r12, r12
    3a04:	ca 94       	dec	r12
    3a06:	dc 2c       	mov	r13, r12
    3a08:	76 01       	movw	r14, r12
    3a0a:	01 e0       	ldi	r16, 0x01	; 1
    3a0c:	20 e0       	ldi	r18, 0x00	; 0
    3a0e:	43 e0       	ldi	r20, 0x03	; 3
    3a10:	50 e0       	ldi	r21, 0x00	; 0
    3a12:	60 e0       	ldi	r22, 0x00	; 0
    3a14:	70 e0       	ldi	r23, 0x00	; 0
    3a16:	80 91 e7 16 	lds	r24, 0x16E7	; 0x8016e7 <_doneEventGroup>
    3a1a:	90 91 e8 16 	lds	r25, 0x16E8	; 0x8016e8 <_doneEventGroup+0x1>
    3a1e:	0e 94 3c 01 	call	0x278	; 0x278 <xEventGroupWaitBits>
						pdFALSE, 
						pdTRUE, 
						portMAX_DELAY
	);
	
	if ((mh_z19_takeMeassuring()) != MHZ19_OK) {
    3a22:	0e 94 7f 28 	call	0x50fe	; 0x50fe <mh_z19_takeMeassuring>
    3a26:	88 23       	and	r24, r24
    3a28:	19 f0       	breq	.+6      	; 0x3a30 <co2Task_runTask+0x38>
		ppm = CONFIG_INVALID_CO2_VALUE;
		_co2CallBack(ppm);
    3a2a:	80 e0       	ldi	r24, 0x00	; 0
    3a2c:	90 e0       	ldi	r25, 0x00	; 0
    3a2e:	a7 df       	rcall	.-178    	; 0x397e <_co2CallBack>
	}	
		
	xEventGroupSetBits(_doneEventGroup, BIT_CO2_DONE);
    3a30:	44 e0       	ldi	r20, 0x04	; 4
    3a32:	50 e0       	ldi	r21, 0x00	; 0
    3a34:	60 e0       	ldi	r22, 0x00	; 0
    3a36:	70 e0       	ldi	r23, 0x00	; 0
    3a38:	80 91 e7 16 	lds	r24, 0x16E7	; 0x8016e7 <_doneEventGroup>
    3a3c:	90 91 e8 16 	lds	r25, 0x16E8	; 0x8016e8 <_doneEventGroup+0x1>
    3a40:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <xEventGroupSetBits>
}
    3a44:	0f 91       	pop	r16
    3a46:	ff 90       	pop	r15
    3a48:	ef 90       	pop	r14
    3a4a:	df 90       	pop	r13
    3a4c:	cf 90       	pop	r12
    3a4e:	08 95       	ret

00003a50 <_run>:
static void _co2CallBack(uint16_t ppm){
	xQueueSendToBack(_co2Queue, &ppm, portMAX_DELAY);
}

static void _run(void* params) {
	co2Task_initTask(params);
    3a50:	ce df       	rcall	.-100    	; 0x39ee <co2Task_initTask>
	
	while (1) {
		co2Task_runTask();
    3a52:	d2 df       	rcall	.-92     	; 0x39f8 <co2Task_runTask>
    3a54:	fe cf       	rjmp	.-4      	; 0x3a52 <_run+0x2>

00003a56 <configuration_create>:
    3a56:	90 93 fa 16 	sts	0x16FA, r25	; 0x8016fa <_mutex+0x1>
	if (xSemaphoreTake(_mutex, pdMS_TO_TICKS(3000)) == pdTRUE) {
		int16_t temp = _humidityHIGH;
		xSemaphoreGive(_mutex);
		return temp;
	}
}
    3a5a:	80 93 f9 16 	sts	0x16F9, r24	; 0x8016f9 <_mutex>
    3a5e:	80 ed       	ldi	r24, 0xD0	; 208
    3a60:	97 e0       	ldi	r25, 0x07	; 7
    3a62:	90 93 f8 16 	sts	0x16F8, r25	; 0x8016f8 <_humidityLOW+0x1>
    3a66:	80 93 f7 16 	sts	0x16F7, r24	; 0x8016f7 <_humidityLOW>
    3a6a:	90 93 f6 16 	sts	0x16F6, r25	; 0x8016f6 <_humidityHIGH+0x1>
    3a6e:	80 93 f5 16 	sts	0x16F5, r24	; 0x8016f5 <_humidityHIGH>
    3a72:	88 e1       	ldi	r24, 0x18	; 24
    3a74:	9c ef       	ldi	r25, 0xFC	; 252
    3a76:	90 93 f4 16 	sts	0x16F4, r25	; 0x8016f4 <_temperatureLOW+0x1>
    3a7a:	80 93 f3 16 	sts	0x16F3, r24	; 0x8016f3 <_temperatureLOW>
    3a7e:	90 93 f2 16 	sts	0x16F2, r25	; 0x8016f2 <_temperatureHIGH+0x1>
    3a82:	80 93 f1 16 	sts	0x16F1, r24	; 0x8016f1 <_temperatureHIGH>
    3a86:	10 92 f0 16 	sts	0x16F0, r1	; 0x8016f0 <_ppmLOW+0x1>
    3a8a:	10 92 ef 16 	sts	0x16EF, r1	; 0x8016ef <_ppmLOW>
    3a8e:	10 92 ee 16 	sts	0x16EE, r1	; 0x8016ee <_ppmHIGH+0x1>
    3a92:	10 92 ed 16 	sts	0x16ED, r1	; 0x8016ed <_ppmHIGH>
    3a96:	08 95       	ret

00003a98 <configuration_setThresholds>:
    3a98:	0f 93       	push	r16
    3a9a:	cf 93       	push	r28
    3a9c:	df 93       	push	r29
    3a9e:	cd b7       	in	r28, 0x3d	; 61
    3aa0:	de b7       	in	r29, 0x3e	; 62
    3aa2:	4a eb       	ldi	r20, 0xBA	; 186
    3aa4:	50 e0       	ldi	r21, 0x00	; 0
    3aa6:	60 e0       	ldi	r22, 0x00	; 0
    3aa8:	70 e0       	ldi	r23, 0x00	; 0
    3aaa:	80 91 f9 16 	lds	r24, 0x16F9	; 0x8016f9 <_mutex>
    3aae:	90 91 fa 16 	lds	r25, 0x16FA	; 0x8016fa <_mutex+0x1>
    3ab2:	0e 94 23 08 	call	0x1046	; 0x1046 <xQueueSemaphoreTake>
    3ab6:	81 30       	cpi	r24, 0x01	; 1
    3ab8:	09 f0       	breq	.+2      	; 0x3abc <configuration_setThresholds+0x24>
    3aba:	68 c0       	rjmp	.+208    	; 0x3b8c <configuration_setThresholds+0xf4>
    3abc:	8f 89       	ldd	r24, Y+23	; 0x17
    3abe:	80 ff       	sbrs	r24, 0
    3ac0:	0b c0       	rjmp	.+22     	; 0x3ad8 <configuration_setThresholds+0x40>
    3ac2:	2d 89       	ldd	r18, Y+21	; 0x15
    3ac4:	30 e0       	ldi	r19, 0x00	; 0
    3ac6:	32 2f       	mov	r19, r18
    3ac8:	22 27       	eor	r18, r18
    3aca:	9e 89       	ldd	r25, Y+22	; 0x16
    3acc:	29 0f       	add	r18, r25
    3ace:	31 1d       	adc	r19, r1
    3ad0:	30 93 ec 16 	sts	0x16EC, r19	; 0x8016ec <_soundHIGH+0x1>
    3ad4:	20 93 eb 16 	sts	0x16EB, r18	; 0x8016eb <_soundHIGH>
    3ad8:	81 ff       	sbrs	r24, 1
    3ada:	0b c0       	rjmp	.+22     	; 0x3af2 <configuration_setThresholds+0x5a>
    3adc:	2b 89       	ldd	r18, Y+19	; 0x13
    3ade:	30 e0       	ldi	r19, 0x00	; 0
    3ae0:	32 2f       	mov	r19, r18
    3ae2:	22 27       	eor	r18, r18
    3ae4:	9c 89       	ldd	r25, Y+20	; 0x14
    3ae6:	29 0f       	add	r18, r25
    3ae8:	31 1d       	adc	r19, r1
    3aea:	30 93 f0 16 	sts	0x16F0, r19	; 0x8016f0 <_ppmLOW+0x1>
    3aee:	20 93 ef 16 	sts	0x16EF, r18	; 0x8016ef <_ppmLOW>
    3af2:	82 ff       	sbrs	r24, 2
    3af4:	0b c0       	rjmp	.+22     	; 0x3b0c <configuration_setThresholds+0x74>
    3af6:	29 89       	ldd	r18, Y+17	; 0x11
    3af8:	30 e0       	ldi	r19, 0x00	; 0
    3afa:	32 2f       	mov	r19, r18
    3afc:	22 27       	eor	r18, r18
    3afe:	9a 89       	ldd	r25, Y+18	; 0x12
    3b00:	29 0f       	add	r18, r25
    3b02:	31 1d       	adc	r19, r1
    3b04:	30 93 ee 16 	sts	0x16EE, r19	; 0x8016ee <_ppmHIGH+0x1>
    3b08:	20 93 ed 16 	sts	0x16ED, r18	; 0x8016ed <_ppmHIGH>
    3b0c:	83 ff       	sbrs	r24, 3
    3b0e:	0b c0       	rjmp	.+22     	; 0x3b26 <configuration_setThresholds+0x8e>
    3b10:	2f 85       	ldd	r18, Y+15	; 0x0f
    3b12:	30 e0       	ldi	r19, 0x00	; 0
    3b14:	32 2f       	mov	r19, r18
    3b16:	22 27       	eor	r18, r18
    3b18:	98 89       	ldd	r25, Y+16	; 0x10
    3b1a:	29 0f       	add	r18, r25
    3b1c:	31 1d       	adc	r19, r1
    3b1e:	30 93 f4 16 	sts	0x16F4, r19	; 0x8016f4 <_temperatureLOW+0x1>
    3b22:	20 93 f3 16 	sts	0x16F3, r18	; 0x8016f3 <_temperatureLOW>
    3b26:	84 ff       	sbrs	r24, 4
    3b28:	0b c0       	rjmp	.+22     	; 0x3b40 <configuration_setThresholds+0xa8>
    3b2a:	2d 85       	ldd	r18, Y+13	; 0x0d
    3b2c:	30 e0       	ldi	r19, 0x00	; 0
    3b2e:	32 2f       	mov	r19, r18
    3b30:	22 27       	eor	r18, r18
    3b32:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b34:	29 0f       	add	r18, r25
    3b36:	31 1d       	adc	r19, r1
    3b38:	30 93 f2 16 	sts	0x16F2, r19	; 0x8016f2 <_temperatureHIGH+0x1>
    3b3c:	20 93 f1 16 	sts	0x16F1, r18	; 0x8016f1 <_temperatureHIGH>
    3b40:	85 ff       	sbrs	r24, 5
    3b42:	0b c0       	rjmp	.+22     	; 0x3b5a <configuration_setThresholds+0xc2>
    3b44:	2b 85       	ldd	r18, Y+11	; 0x0b
    3b46:	30 e0       	ldi	r19, 0x00	; 0
    3b48:	32 2f       	mov	r19, r18
    3b4a:	22 27       	eor	r18, r18
    3b4c:	9c 85       	ldd	r25, Y+12	; 0x0c
    3b4e:	29 0f       	add	r18, r25
    3b50:	31 1d       	adc	r19, r1
    3b52:	30 93 f8 16 	sts	0x16F8, r19	; 0x8016f8 <_humidityLOW+0x1>
    3b56:	20 93 f7 16 	sts	0x16F7, r18	; 0x8016f7 <_humidityLOW>
    3b5a:	86 ff       	sbrs	r24, 6
    3b5c:	0b c0       	rjmp	.+22     	; 0x3b74 <configuration_setThresholds+0xdc>
    3b5e:	89 85       	ldd	r24, Y+9	; 0x09
    3b60:	90 e0       	ldi	r25, 0x00	; 0
    3b62:	98 2f       	mov	r25, r24
    3b64:	88 27       	eor	r24, r24
    3b66:	2a 85       	ldd	r18, Y+10	; 0x0a
    3b68:	82 0f       	add	r24, r18
    3b6a:	91 1d       	adc	r25, r1
    3b6c:	90 93 f6 16 	sts	0x16F6, r25	; 0x8016f6 <_humidityHIGH+0x1>
    3b70:	80 93 f5 16 	sts	0x16F5, r24	; 0x8016f5 <_humidityHIGH>
    3b74:	00 e0       	ldi	r16, 0x00	; 0
    3b76:	20 e0       	ldi	r18, 0x00	; 0
    3b78:	30 e0       	ldi	r19, 0x00	; 0
    3b7a:	a9 01       	movw	r20, r18
    3b7c:	60 e0       	ldi	r22, 0x00	; 0
    3b7e:	70 e0       	ldi	r23, 0x00	; 0
    3b80:	80 91 f9 16 	lds	r24, 0x16F9	; 0x8016f9 <_mutex>
    3b84:	90 91 fa 16 	lds	r25, 0x16FA	; 0x8016fa <_mutex+0x1>
    3b88:	0e 94 a9 06 	call	0xd52	; 0xd52 <xQueueGenericSend>
    3b8c:	df 91       	pop	r29
    3b8e:	cf 91       	pop	r28
    3b90:	0f 91       	pop	r16
    3b92:	08 95       	ret

00003b94 <configuration_getLowTemperatureThreshold>:
    3b94:	0f 93       	push	r16
    3b96:	cf 93       	push	r28
    3b98:	df 93       	push	r29
    3b9a:	4a eb       	ldi	r20, 0xBA	; 186
    3b9c:	50 e0       	ldi	r21, 0x00	; 0
    3b9e:	60 e0       	ldi	r22, 0x00	; 0
    3ba0:	70 e0       	ldi	r23, 0x00	; 0
    3ba2:	80 91 f9 16 	lds	r24, 0x16F9	; 0x8016f9 <_mutex>
    3ba6:	90 91 fa 16 	lds	r25, 0x16FA	; 0x8016fa <_mutex+0x1>
    3baa:	0e 94 23 08 	call	0x1046	; 0x1046 <xQueueSemaphoreTake>
    3bae:	81 30       	cpi	r24, 0x01	; 1
    3bb0:	99 f4       	brne	.+38     	; 0x3bd8 <configuration_getLowTemperatureThreshold+0x44>
    3bb2:	d0 91 f3 16 	lds	r29, 0x16F3	; 0x8016f3 <_temperatureLOW>
    3bb6:	c0 91 f4 16 	lds	r28, 0x16F4	; 0x8016f4 <_temperatureLOW+0x1>
    3bba:	00 e0       	ldi	r16, 0x00	; 0
    3bbc:	20 e0       	ldi	r18, 0x00	; 0
    3bbe:	30 e0       	ldi	r19, 0x00	; 0
    3bc0:	a9 01       	movw	r20, r18
    3bc2:	60 e0       	ldi	r22, 0x00	; 0
    3bc4:	70 e0       	ldi	r23, 0x00	; 0
    3bc6:	80 91 f9 16 	lds	r24, 0x16F9	; 0x8016f9 <_mutex>
    3bca:	90 91 fa 16 	lds	r25, 0x16FA	; 0x8016fa <_mutex+0x1>
    3bce:	0e 94 a9 06 	call	0xd52	; 0xd52 <xQueueGenericSend>
    3bd2:	8d 2f       	mov	r24, r29
    3bd4:	9c 2f       	mov	r25, r28
    3bd6:	00 c0       	rjmp	.+0      	; 0x3bd8 <configuration_getLowTemperatureThreshold+0x44>
    3bd8:	df 91       	pop	r29
    3bda:	cf 91       	pop	r28
    3bdc:	0f 91       	pop	r16
    3bde:	08 95       	ret

00003be0 <configuration_getHighTemperatureThreshold>:

int16_t configuration_getHighTemperatureThreshold() {
    3be0:	0f 93       	push	r16
    3be2:	cf 93       	push	r28
    3be4:	df 93       	push	r29
	if (xSemaphoreTake(_mutex, pdMS_TO_TICKS(3000)) == pdTRUE) {
    3be6:	4a eb       	ldi	r20, 0xBA	; 186
    3be8:	50 e0       	ldi	r21, 0x00	; 0
    3bea:	60 e0       	ldi	r22, 0x00	; 0
    3bec:	70 e0       	ldi	r23, 0x00	; 0
    3bee:	80 91 f9 16 	lds	r24, 0x16F9	; 0x8016f9 <_mutex>
    3bf2:	90 91 fa 16 	lds	r25, 0x16FA	; 0x8016fa <_mutex+0x1>
    3bf6:	0e 94 23 08 	call	0x1046	; 0x1046 <xQueueSemaphoreTake>
    3bfa:	81 30       	cpi	r24, 0x01	; 1
    3bfc:	99 f4       	brne	.+38     	; 0x3c24 <configuration_getHighTemperatureThreshold+0x44>
		int16_t temp = _temperatureHIGH;
    3bfe:	d0 91 f1 16 	lds	r29, 0x16F1	; 0x8016f1 <_temperatureHIGH>
    3c02:	c0 91 f2 16 	lds	r28, 0x16F2	; 0x8016f2 <_temperatureHIGH+0x1>
		xSemaphoreGive(_mutex);
    3c06:	00 e0       	ldi	r16, 0x00	; 0
    3c08:	20 e0       	ldi	r18, 0x00	; 0
    3c0a:	30 e0       	ldi	r19, 0x00	; 0
    3c0c:	a9 01       	movw	r20, r18
    3c0e:	60 e0       	ldi	r22, 0x00	; 0
    3c10:	70 e0       	ldi	r23, 0x00	; 0
    3c12:	80 91 f9 16 	lds	r24, 0x16F9	; 0x8016f9 <_mutex>
    3c16:	90 91 fa 16 	lds	r25, 0x16FA	; 0x8016fa <_mutex+0x1>
    3c1a:	0e 94 a9 06 	call	0xd52	; 0xd52 <xQueueGenericSend>
		return temp;
    3c1e:	8d 2f       	mov	r24, r29
    3c20:	9c 2f       	mov	r25, r28
    3c22:	00 c0       	rjmp	.+0      	; 0x3c24 <configuration_getHighTemperatureThreshold+0x44>
	}
}
    3c24:	df 91       	pop	r29
    3c26:	cf 91       	pop	r28
    3c28:	0f 91       	pop	r16
    3c2a:	08 95       	ret

00003c2c <farmerama_create>:
				TASK_PRIORITY, 
				NULL
	);
}

void farmerama_initTask(void* params) {
    3c2c:	af 92       	push	r10
    3c2e:	bf 92       	push	r11
    3c30:	cf 92       	push	r12
    3c32:	df 92       	push	r13
    3c34:	ef 92       	push	r14
    3c36:	ff 92       	push	r15
    3c38:	0f 93       	push	r16
    3c3a:	1f 93       	push	r17
    3c3c:	90 93 0b 17 	sts	0x170B, r25	; 0x80170b <_senderQueue+0x1>
    3c40:	80 93 0a 17 	sts	0x170A, r24	; 0x80170a <_senderQueue>
    3c44:	70 93 09 17 	sts	0x1709, r23	; 0x801709 <_humidityQueue+0x1>
    3c48:	60 93 08 17 	sts	0x1708, r22	; 0x801708 <_humidityQueue>
    3c4c:	50 93 07 17 	sts	0x1707, r21	; 0x801707 <_temperatureQueue+0x1>
    3c50:	40 93 06 17 	sts	0x1706, r20	; 0x801706 <_temperatureQueue>
    3c54:	30 93 05 17 	sts	0x1705, r19	; 0x801705 <_co2Queue+0x1>
    3c58:	20 93 04 17 	sts	0x1704, r18	; 0x801704 <_co2Queue>
    3c5c:	10 93 03 17 	sts	0x1703, r17	; 0x801703 <_soundQueue+0x1>
    3c60:	00 93 02 17 	sts	0x1702, r16	; 0x801702 <_soundQueue>
    3c64:	f0 92 01 17 	sts	0x1701, r15	; 0x801701 <_servoQueue+0x1>
    3c68:	e0 92 00 17 	sts	0x1700, r14	; 0x801700 <_servoQueue>
    3c6c:	d0 92 ff 16 	sts	0x16FF, r13	; 0x8016ff <_actEventGroup+0x1>
    3c70:	c0 92 fe 16 	sts	0x16FE, r12	; 0x8016fe <_actEventGroup>
    3c74:	b0 92 fd 16 	sts	0x16FD, r11	; 0x8016fd <_doneEventGroup+0x1>
    3c78:	a0 92 fc 16 	sts	0x16FC, r10	; 0x8016fc <_doneEventGroup>
    3c7c:	e1 2c       	mov	r14, r1
    3c7e:	f1 2c       	mov	r15, r1
    3c80:	09 e0       	ldi	r16, 0x09	; 9
    3c82:	20 e0       	ldi	r18, 0x00	; 0
    3c84:	30 e0       	ldi	r19, 0x00	; 0
    3c86:	40 ec       	ldi	r20, 0xC0	; 192
    3c88:	50 e0       	ldi	r21, 0x00	; 0
    3c8a:	68 ea       	ldi	r22, 0xA8	; 168
    3c8c:	72 e0       	ldi	r23, 0x02	; 2
    3c8e:	8f e5       	ldi	r24, 0x5F	; 95
    3c90:	9f e1       	ldi	r25, 0x1F	; 31
    3c92:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <xTaskCreate>
    3c96:	1f 91       	pop	r17
    3c98:	0f 91       	pop	r16
    3c9a:	ff 90       	pop	r15
    3c9c:	ef 90       	pop	r14
    3c9e:	df 90       	pop	r13
    3ca0:	cf 90       	pop	r12
    3ca2:	bf 90       	pop	r11
    3ca4:	af 90       	pop	r10
    3ca6:	08 95       	ret

00003ca8 <farmerama_runTask>:
	
}

void farmerama_runTask(void) {	
    3ca8:	cf 92       	push	r12
    3caa:	df 92       	push	r13
    3cac:	ef 92       	push	r14
    3cae:	ff 92       	push	r15
    3cb0:	0f 93       	push	r16
    3cb2:	cf 93       	push	r28
    3cb4:	df 93       	push	r29
    3cb6:	cd b7       	in	r28, 0x3d	; 61
    3cb8:	de b7       	in	r29, 0x3e	; 62
    3cba:	a2 97       	sbiw	r28, 0x22	; 34
    3cbc:	0f b6       	in	r0, 0x3f	; 63
    3cbe:	f8 94       	cli
    3cc0:	de bf       	out	0x3e, r29	; 62
    3cc2:	0f be       	out	0x3f, r0	; 63
    3cc4:	cd bf       	out	0x3d, r28	; 61
	EventBits_t uxBits = xEventGroupSetBits(_actEventGroup, BIT_HUMIDITY_ACT | BIT_TEMPERATURE_ACT);
    3cc6:	43 e0       	ldi	r20, 0x03	; 3
    3cc8:	50 e0       	ldi	r21, 0x00	; 0
    3cca:	60 e0       	ldi	r22, 0x00	; 0
    3ccc:	70 e0       	ldi	r23, 0x00	; 0
    3cce:	80 91 fe 16 	lds	r24, 0x16FE	; 0x8016fe <_actEventGroup>
    3cd2:	90 91 ff 16 	lds	r25, 0x16FF	; 0x8016ff <_actEventGroup+0x1>
    3cd6:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <xEventGroupSetBits>
	
	if ((uxBits & (BIT_HUMIDITY_ACT | BIT_TEMPERATURE_ACT)) 
    3cda:	dc 01       	movw	r26, r24
    3cdc:	cb 01       	movw	r24, r22
    3cde:	83 70       	andi	r24, 0x03	; 3
    3ce0:	99 27       	eor	r25, r25
    3ce2:	aa 27       	eor	r26, r26
    3ce4:	bb 27       	eor	r27, r27
    3ce6:	03 97       	sbiw	r24, 0x03	; 3
    3ce8:	a1 05       	cpc	r26, r1
    3cea:	b1 05       	cpc	r27, r1
    3cec:	19 f4       	brne	.+6      	; 0x3cf4 <farmerama_runTask+0x4c>
				== (BIT_HUMIDITY_ACT | BIT_TEMPERATURE_ACT)){
		_errorState = true;
    3cee:	81 e0       	ldi	r24, 0x01	; 1
    3cf0:	80 93 fb 16 	sts	0x16FB, r24	; 0x8016fb <_errorState>
	}

	EventBits_t waitBits = xEventGroupWaitBits(_doneEventGroup,
    3cf4:	0f 2e       	mov	r0, r31
    3cf6:	f8 ea       	ldi	r31, 0xA8	; 168
    3cf8:	cf 2e       	mov	r12, r31
    3cfa:	f8 e4       	ldi	r31, 0x48	; 72
    3cfc:	df 2e       	mov	r13, r31
    3cfe:	e1 2c       	mov	r14, r1
    3d00:	f1 2c       	mov	r15, r1
    3d02:	f0 2d       	mov	r31, r0
    3d04:	01 e0       	ldi	r16, 0x01	; 1
    3d06:	21 e0       	ldi	r18, 0x01	; 1
    3d08:	4f e0       	ldi	r20, 0x0F	; 15
    3d0a:	50 e0       	ldi	r21, 0x00	; 0
    3d0c:	60 e0       	ldi	r22, 0x00	; 0
    3d0e:	70 e0       	ldi	r23, 0x00	; 0
    3d10:	80 91 fc 16 	lds	r24, 0x16FC	; 0x8016fc <_doneEventGroup>
    3d14:	90 91 fd 16 	lds	r25, 0x16FD	; 0x8016fd <_doneEventGroup+0x1>
    3d18:	0e 94 3c 01 	call	0x278	; 0x278 <xEventGroupWaitBits>
						pdTRUE, 
						pdTRUE, 
						pdMS_TO_TICKS(TASK_INTERVAL)
	);
	
	if ((waitBits & (BIT_HUMIDITY_DONE | BIT_TEMPERATURE_DONE | BIT_CO2_DONE | BIT_SOUND_DONE))
    3d1c:	dc 01       	movw	r26, r24
    3d1e:	cb 01       	movw	r24, r22
    3d20:	8f 70       	andi	r24, 0x0F	; 15
    3d22:	99 27       	eor	r25, r25
    3d24:	aa 27       	eor	r26, r26
    3d26:	bb 27       	eor	r27, r27
    3d28:	0f 97       	sbiw	r24, 0x0f	; 15
    3d2a:	a1 05       	cpc	r26, r1
    3d2c:	b1 05       	cpc	r27, r1
    3d2e:	19 f0       	breq	.+6      	; 0x3d36 <farmerama_runTask+0x8e>
				!= (BIT_HUMIDITY_DONE | BIT_TEMPERATURE_DONE | BIT_CO2_DONE | BIT_SOUND_DONE)) {
		_errorState = true;
    3d30:	81 e0       	ldi	r24, 0x01	; 1
    3d32:	80 93 fb 16 	sts	0x16FB, r24	; 0x8016fb <_errorState>
	uint16_t humidity;
	int16_t temperature;
	uint16_t ppm;
	uint16_t sound;

	if (xQueueReceive(_humidityQueue, &humidity, pdMS_TO_TICKS(10000)) != pdTRUE){
    3d36:	2c e6       	ldi	r18, 0x6C	; 108
    3d38:	32 e0       	ldi	r19, 0x02	; 2
    3d3a:	40 e0       	ldi	r20, 0x00	; 0
    3d3c:	50 e0       	ldi	r21, 0x00	; 0
    3d3e:	be 01       	movw	r22, r28
    3d40:	6f 5f       	subi	r22, 0xFF	; 255
    3d42:	7f 4f       	sbci	r23, 0xFF	; 255
    3d44:	80 91 08 17 	lds	r24, 0x1708	; 0x801708 <_humidityQueue>
    3d48:	90 91 09 17 	lds	r25, 0x1709	; 0x801709 <_humidityQueue+0x1>
    3d4c:	0e 94 94 07 	call	0xf28	; 0xf28 <xQueueReceive>
    3d50:	81 30       	cpi	r24, 0x01	; 1
    3d52:	21 f0       	breq	.+8      	; 0x3d5c <farmerama_runTask+0xb4>
		humidity = CONFIG_INVALID_HUMIDITY_VALUE;}
    3d54:	80 ed       	ldi	r24, 0xD0	; 208
    3d56:	97 e0       	ldi	r25, 0x07	; 7
    3d58:	9a 83       	std	Y+2, r25	; 0x02
    3d5a:	89 83       	std	Y+1, r24	; 0x01
	if (xQueueReceive(_temperatureQueue, &temperature, pdMS_TO_TICKS(10000)) != pdTRUE){
    3d5c:	2c e6       	ldi	r18, 0x6C	; 108
    3d5e:	32 e0       	ldi	r19, 0x02	; 2
    3d60:	40 e0       	ldi	r20, 0x00	; 0
    3d62:	50 e0       	ldi	r21, 0x00	; 0
    3d64:	be 01       	movw	r22, r28
    3d66:	6d 5f       	subi	r22, 0xFD	; 253
    3d68:	7f 4f       	sbci	r23, 0xFF	; 255
    3d6a:	80 91 06 17 	lds	r24, 0x1706	; 0x801706 <_temperatureQueue>
    3d6e:	90 91 07 17 	lds	r25, 0x1707	; 0x801707 <_temperatureQueue+0x1>
    3d72:	0e 94 94 07 	call	0xf28	; 0xf28 <xQueueReceive>
    3d76:	81 30       	cpi	r24, 0x01	; 1
    3d78:	21 f0       	breq	.+8      	; 0x3d82 <farmerama_runTask+0xda>
		temperature = CONFIG_INVALID_TEMPERATURE_VALUE;}
    3d7a:	88 e1       	ldi	r24, 0x18	; 24
    3d7c:	9c ef       	ldi	r25, 0xFC	; 252
    3d7e:	9c 83       	std	Y+4, r25	; 0x04
    3d80:	8b 83       	std	Y+3, r24	; 0x03
	if (xQueueReceive(_co2Queue, &ppm, pdMS_TO_TICKS(10000)) != pdTRUE){
    3d82:	2c e6       	ldi	r18, 0x6C	; 108
    3d84:	32 e0       	ldi	r19, 0x02	; 2
    3d86:	40 e0       	ldi	r20, 0x00	; 0
    3d88:	50 e0       	ldi	r21, 0x00	; 0
    3d8a:	be 01       	movw	r22, r28
    3d8c:	6b 5f       	subi	r22, 0xFB	; 251
    3d8e:	7f 4f       	sbci	r23, 0xFF	; 255
    3d90:	80 91 04 17 	lds	r24, 0x1704	; 0x801704 <_co2Queue>
    3d94:	90 91 05 17 	lds	r25, 0x1705	; 0x801705 <_co2Queue+0x1>
    3d98:	0e 94 94 07 	call	0xf28	; 0xf28 <xQueueReceive>
    3d9c:	81 30       	cpi	r24, 0x01	; 1
    3d9e:	11 f0       	breq	.+4      	; 0x3da4 <farmerama_runTask+0xfc>
		ppm = CONFIG_INVALID_CO2_VALUE;}
    3da0:	1e 82       	std	Y+6, r1	; 0x06
    3da2:	1d 82       	std	Y+5, r1	; 0x05
	if (xQueueReceive(_soundQueue, &sound, pdMS_TO_TICKS(10000)) != pdTRUE){
    3da4:	2c e6       	ldi	r18, 0x6C	; 108
    3da6:	32 e0       	ldi	r19, 0x02	; 2
    3da8:	40 e0       	ldi	r20, 0x00	; 0
    3daa:	50 e0       	ldi	r21, 0x00	; 0
    3dac:	be 01       	movw	r22, r28
    3dae:	69 5f       	subi	r22, 0xF9	; 249
    3db0:	7f 4f       	sbci	r23, 0xFF	; 255
    3db2:	80 91 02 17 	lds	r24, 0x1702	; 0x801702 <_soundQueue>
    3db6:	90 91 03 17 	lds	r25, 0x1703	; 0x801703 <_soundQueue+0x1>
    3dba:	0e 94 94 07 	call	0xf28	; 0xf28 <xQueueReceive>
    3dbe:	81 30       	cpi	r24, 0x01	; 1
    3dc0:	11 f0       	breq	.+4      	; 0x3dc6 <farmerama_runTask+0x11e>
		sound = CONFIG_INVALID_SOUND_VALUE;}
    3dc2:	18 86       	std	Y+8, r1	; 0x08
    3dc4:	1f 82       	std	Y+7, r1	; 0x07
		
	uplinkMessageBuilder_setHumidityData(humidity);
    3dc6:	89 81       	ldd	r24, Y+1	; 0x01
    3dc8:	9a 81       	ldd	r25, Y+2	; 0x02
    3dca:	c3 d3       	rcall	.+1926   	; 0x4552 <uplinkMessageBuilder_setHumidityData>
	uplinkMessageBuilder_setTemperatureData(temperature);
    3dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    3dce:	9c 81       	ldd	r25, Y+4	; 0x04
    3dd0:	cd d3       	rcall	.+1946   	; 0x456c <uplinkMessageBuilder_setTemperatureData>
	uplinkMessageBuilder_setCO2Data(ppm);
    3dd2:	8d 81       	ldd	r24, Y+5	; 0x05
    3dd4:	9e 81       	ldd	r25, Y+6	; 0x06
    3dd6:	d7 d3       	rcall	.+1966   	; 0x4586 <uplinkMessageBuilder_setCO2Data>
	uplinkMessageBuilder_setSoundData(sound);
    3dd8:	8f 81       	ldd	r24, Y+7	; 0x07
    3dda:	98 85       	ldd	r25, Y+8	; 0x08
    3ddc:	e0 d3       	rcall	.+1984   	; 0x459e <uplinkMessageBuilder_setSoundData>
	
	if (true == _errorState){ uplinkMessageBuilder_setSystemErrorState(); }
    3dde:	80 91 fb 16 	lds	r24, 0x16FB	; 0x8016fb <_errorState>
    3de2:	81 11       	cpse	r24, r1
    3de4:	e8 d3       	rcall	.+2000   	; 0x45b6 <uplinkMessageBuilder_setSystemErrorState>

	lora_driver_payload_t message = uplinkMessageBuilder_buildUplinkMessage(PORT);
    3de6:	61 e0       	ldi	r22, 0x01	; 1
    3de8:	ce 01       	movw	r24, r28
    3dea:	09 96       	adiw	r24, 0x09	; 9
    3dec:	91 d3       	rcall	.+1826   	; 0x4510 <uplinkMessageBuilder_buildUplinkMessage>
    3dee:	8a 85       	ldd	r24, Y+10	; 0x0a
	if (message.len > 0) { xQueueSendToBack(_senderQueue, &message, pdMS_TO_TICKS(10000));}
    3df0:	88 23       	and	r24, r24
    3df2:	71 f0       	breq	.+28     	; 0x3e10 <farmerama_runTask+0x168>
    3df4:	00 e0       	ldi	r16, 0x00	; 0
    3df6:	2c e6       	ldi	r18, 0x6C	; 108
    3df8:	32 e0       	ldi	r19, 0x02	; 2
    3dfa:	40 e0       	ldi	r20, 0x00	; 0
    3dfc:	50 e0       	ldi	r21, 0x00	; 0
    3dfe:	be 01       	movw	r22, r28
    3e00:	67 5f       	subi	r22, 0xF7	; 247
    3e02:	7f 4f       	sbci	r23, 0xFF	; 255
    3e04:	80 91 0a 17 	lds	r24, 0x170A	; 0x80170a <_senderQueue>
    3e08:	90 91 0b 17 	lds	r25, 0x170B	; 0x80170b <_senderQueue+0x1>
    3e0c:	0e 94 a9 06 	call	0xd52	; 0xd52 <xQueueGenericSend>
    3e10:	80 91 fb 16 	lds	r24, 0x16FB	; 0x8016fb <_errorState>
	
	if (false == _errorState){
    3e14:	81 11       	cpse	r24, r1
    3e16:	35 c0       	rjmp	.+106    	; 0x3e82 <farmerama_runTask+0x1da>
    3e18:	00 e0       	ldi	r16, 0x00	; 0
		xQueueSendToBack(_servoQueue, &humidity, pdMS_TO_TICKS(10000));
    3e1a:	2c e6       	ldi	r18, 0x6C	; 108
    3e1c:	32 e0       	ldi	r19, 0x02	; 2
    3e1e:	40 e0       	ldi	r20, 0x00	; 0
    3e20:	50 e0       	ldi	r21, 0x00	; 0
    3e22:	be 01       	movw	r22, r28
    3e24:	6f 5f       	subi	r22, 0xFF	; 255
    3e26:	7f 4f       	sbci	r23, 0xFF	; 255
    3e28:	80 91 00 17 	lds	r24, 0x1700	; 0x801700 <_servoQueue>
    3e2c:	90 91 01 17 	lds	r25, 0x1701	; 0x801701 <_servoQueue+0x1>
    3e30:	0e 94 a9 06 	call	0xd52	; 0xd52 <xQueueGenericSend>
    3e34:	2c e6       	ldi	r18, 0x6C	; 108
		xQueueSendToBack(_servoQueue, &temperature, pdMS_TO_TICKS(10000));
    3e36:	32 e0       	ldi	r19, 0x02	; 2
    3e38:	40 e0       	ldi	r20, 0x00	; 0
    3e3a:	50 e0       	ldi	r21, 0x00	; 0
    3e3c:	be 01       	movw	r22, r28
    3e3e:	6d 5f       	subi	r22, 0xFD	; 253
    3e40:	7f 4f       	sbci	r23, 0xFF	; 255
    3e42:	80 91 00 17 	lds	r24, 0x1700	; 0x801700 <_servoQueue>
    3e46:	90 91 01 17 	lds	r25, 0x1701	; 0x801701 <_servoQueue+0x1>
    3e4a:	0e 94 a9 06 	call	0xd52	; 0xd52 <xQueueGenericSend>
    3e4e:	2c e6       	ldi	r18, 0x6C	; 108
		xQueueSendToBack(_servoQueue, &ppm, pdMS_TO_TICKS(10000));
    3e50:	32 e0       	ldi	r19, 0x02	; 2
    3e52:	40 e0       	ldi	r20, 0x00	; 0
    3e54:	50 e0       	ldi	r21, 0x00	; 0
    3e56:	be 01       	movw	r22, r28
    3e58:	6b 5f       	subi	r22, 0xFB	; 251
    3e5a:	7f 4f       	sbci	r23, 0xFF	; 255
    3e5c:	80 91 00 17 	lds	r24, 0x1700	; 0x801700 <_servoQueue>
    3e60:	90 91 01 17 	lds	r25, 0x1701	; 0x801701 <_servoQueue+0x1>
    3e64:	0e 94 a9 06 	call	0xd52	; 0xd52 <xQueueGenericSend>
    3e68:	2c e6       	ldi	r18, 0x6C	; 108
		xQueueSendToBack(_servoQueue, &sound, pdMS_TO_TICKS(10000));
    3e6a:	32 e0       	ldi	r19, 0x02	; 2
    3e6c:	40 e0       	ldi	r20, 0x00	; 0
    3e6e:	50 e0       	ldi	r21, 0x00	; 0
    3e70:	be 01       	movw	r22, r28
    3e72:	69 5f       	subi	r22, 0xF9	; 249
    3e74:	7f 4f       	sbci	r23, 0xFF	; 255
    3e76:	80 91 00 17 	lds	r24, 0x1700	; 0x801700 <_servoQueue>
    3e7a:	90 91 01 17 	lds	r25, 0x1701	; 0x801701 <_servoQueue+0x1>
    3e7e:	0e 94 a9 06 	call	0xd52	; 0xd52 <xQueueGenericSend>
    3e82:	10 92 fb 16 	sts	0x16FB, r1	; 0x8016fb <_errorState>
	}

	_errorState = false;
    3e86:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <xTaskGetTickCount>
	TickType_t lastWakeTime = xTaskGetTickCount();
    3e8a:	6f 8f       	std	Y+31, r22	; 0x1f
    3e8c:	78 a3       	std	Y+32, r23	; 0x20
    3e8e:	89 a3       	std	Y+33, r24	; 0x21
    3e90:	9a a3       	std	Y+34, r25	; 0x22
    3e92:	48 ea       	ldi	r20, 0xA8	; 168
	xTaskDelayUntil(&lastWakeTime, pdMS_TO_TICKS(TASK_INTERVAL));
    3e94:	58 e4       	ldi	r21, 0x48	; 72
    3e96:	60 e0       	ldi	r22, 0x00	; 0
    3e98:	70 e0       	ldi	r23, 0x00	; 0
    3e9a:	ce 01       	movw	r24, r28
    3e9c:	4f 96       	adiw	r24, 0x1f	; 31
    3e9e:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <xTaskDelayUntil>
    3ea2:	a2 96       	adiw	r28, 0x22	; 34
}
    3ea4:	0f b6       	in	r0, 0x3f	; 63
    3ea6:	f8 94       	cli
    3ea8:	de bf       	out	0x3e, r29	; 62
    3eaa:	0f be       	out	0x3f, r0	; 63
    3eac:	cd bf       	out	0x3d, r28	; 61
    3eae:	df 91       	pop	r29
    3eb0:	cf 91       	pop	r28
    3eb2:	0f 91       	pop	r16
    3eb4:	ff 90       	pop	r15
    3eb6:	ef 90       	pop	r14
    3eb8:	df 90       	pop	r13
    3eba:	cf 90       	pop	r12
    3ebc:	08 95       	ret

00003ebe <_run>:
    3ebe:	f4 de       	rcall	.-536    	; 0x3ca8 <farmerama_runTask>

static void _run(void* params) {
	farmerama_initTask(params);
	
	while (1) {
		farmerama_runTask();
    3ec0:	fe cf       	rjmp	.-4      	; 0x3ebe <_run>

00003ec2 <receiverTask_create>:
				TASK_PRIORITY, 
				NULL
	);
}

void receiverTask_initTask(void* params) {
    3ec2:	ef 92       	push	r14
    3ec4:	ff 92       	push	r15
    3ec6:	0f 93       	push	r16
    3ec8:	90 93 0d 17 	sts	0x170D, r25	; 0x80170d <_receiverBuffer+0x1>
    3ecc:	80 93 0c 17 	sts	0x170C, r24	; 0x80170c <_receiverBuffer>
    3ed0:	e1 2c       	mov	r14, r1
    3ed2:	f1 2c       	mov	r15, r1
    3ed4:	08 e0       	ldi	r16, 0x08	; 8
    3ed6:	20 e0       	ldi	r18, 0x00	; 0
    3ed8:	30 e0       	ldi	r19, 0x00	; 0
    3eda:	40 ec       	ldi	r20, 0xC0	; 192
    3edc:	50 e0       	ldi	r21, 0x00	; 0
    3ede:	66 eb       	ldi	r22, 0xB6	; 182
    3ee0:	72 e0       	ldi	r23, 0x02	; 2
    3ee2:	89 eb       	ldi	r24, 0xB9	; 185
    3ee4:	9f e1       	ldi	r25, 0x1F	; 31
    3ee6:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <xTaskCreate>
    3eea:	0f 91       	pop	r16
    3eec:	ff 90       	pop	r15
    3eee:	ef 90       	pop	r14
    3ef0:	08 95       	ret

00003ef2 <receiverTask_runTask>:
	
}

void receiverTask_runTask(void) {
    3ef2:	0f 93       	push	r16
    3ef4:	1f 93       	push	r17
    3ef6:	cf 93       	push	r28
    3ef8:	df 93       	push	r29
    3efa:	cd b7       	in	r28, 0x3d	; 61
    3efc:	de b7       	in	r29, 0x3e	; 62
    3efe:	66 97       	sbiw	r28, 0x16	; 22
    3f00:	0f b6       	in	r0, 0x3f	; 63
    3f02:	f8 94       	cli
    3f04:	de bf       	out	0x3e, r29	; 62
    3f06:	0f be       	out	0x3f, r0	; 63
    3f08:	cd bf       	out	0x3d, r28	; 61
	lora_driver_payload_t payload;
	xMessageBufferReceive(_receiverBuffer, 
    3f0a:	0f ef       	ldi	r16, 0xFF	; 255
    3f0c:	1f ef       	ldi	r17, 0xFF	; 255
    3f0e:	98 01       	movw	r18, r16
    3f10:	46 e1       	ldi	r20, 0x16	; 22
    3f12:	50 e0       	ldi	r21, 0x00	; 0
    3f14:	be 01       	movw	r22, r28
    3f16:	6f 5f       	subi	r22, 0xFF	; 255
    3f18:	7f 4f       	sbci	r23, 0xFF	; 255
    3f1a:	80 91 0c 17 	lds	r24, 0x170C	; 0x80170c <_receiverBuffer>
    3f1e:	90 91 0d 17 	lds	r25, 0x170D	; 0x80170d <_receiverBuffer+0x1>
    3f22:	0e 94 9e 0b 	call	0x173c	; 0x173c <xStreamBufferReceive>
						  &payload, 
						  sizeof(lora_driver_payload_t), 
						  portMAX_DELAY
	);

	if (payload.len == EXPECTED_PAYLOAD_LENGTH) {
    3f26:	8a 81       	ldd	r24, Y+2	; 0x02
    3f28:	8f 30       	cpi	r24, 0x0F	; 15
    3f2a:	c1 f4       	brne	.+48     	; 0x3f5c <receiverTask_runTask+0x6a>
		configuration_setThresholds(payload);
    3f2c:	8d b7       	in	r24, 0x3d	; 61
    3f2e:	9e b7       	in	r25, 0x3e	; 62
    3f30:	46 97       	sbiw	r24, 0x16	; 22
    3f32:	0f b6       	in	r0, 0x3f	; 63
    3f34:	f8 94       	cli
    3f36:	9e bf       	out	0x3e, r25	; 62
    3f38:	0f be       	out	0x3f, r0	; 63
    3f3a:	8d bf       	out	0x3d, r24	; 61
    3f3c:	ad b7       	in	r26, 0x3d	; 61
    3f3e:	be b7       	in	r27, 0x3e	; 62
    3f40:	11 96       	adiw	r26, 0x01	; 1
    3f42:	86 e1       	ldi	r24, 0x16	; 22
    3f44:	fe 01       	movw	r30, r28
    3f46:	31 96       	adiw	r30, 0x01	; 1
    3f48:	01 90       	ld	r0, Z+
    3f4a:	0d 92       	st	X+, r0
    3f4c:	8a 95       	dec	r24
    3f4e:	e1 f7       	brne	.-8      	; 0x3f48 <receiverTask_runTask+0x56>
    3f50:	a3 dd       	rcall	.-1210   	; 0x3a98 <configuration_setThresholds>
    3f52:	0f b6       	in	r0, 0x3f	; 63
    3f54:	f8 94       	cli
    3f56:	de bf       	out	0x3e, r29	; 62
    3f58:	0f be       	out	0x3f, r0	; 63
    3f5a:	cd bf       	out	0x3d, r28	; 61
	}
}
    3f5c:	66 96       	adiw	r28, 0x16	; 22
    3f5e:	0f b6       	in	r0, 0x3f	; 63
    3f60:	f8 94       	cli
    3f62:	de bf       	out	0x3e, r29	; 62
    3f64:	0f be       	out	0x3f, r0	; 63
    3f66:	cd bf       	out	0x3d, r28	; 61
    3f68:	df 91       	pop	r29
    3f6a:	cf 91       	pop	r28
    3f6c:	1f 91       	pop	r17
    3f6e:	0f 91       	pop	r16
    3f70:	08 95       	ret

00003f72 <_run>:

static void _run(void* params) {
	receiverTask_initTask(params);
	
	while (1) {
		receiverTask_runTask();
    3f72:	bf df       	rcall	.-130    	; 0x3ef2 <receiverTask_runTask>
    3f74:	fe cf       	rjmp	.-4      	; 0x3f72 <_run>

00003f76 <_connectToLoRaWAN>:
	while (1) {
		senderTask_runTask();
	}
}

static void _connectToLoRaWAN() {
    3f76:	0f 93       	push	r16
    3f78:	1f 93       	push	r17
    3f7a:	cf 93       	push	r28
    3f7c:	df 93       	push	r29
    3f7e:	cd b7       	in	r28, 0x3d	; 61
    3f80:	de b7       	in	r29, 0x3e	; 62
    3f82:	64 97       	sbiw	r28, 0x14	; 20
    3f84:	0f b6       	in	r0, 0x3f	; 63
    3f86:	f8 94       	cli
    3f88:	de bf       	out	0x3e, r29	; 62
    3f8a:	0f be       	out	0x3f, r0	; 63
    3f8c:	cd bf       	out	0x3d, r28	; 61
	char _out_buf[20];
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    3f8e:	81 e0       	ldi	r24, 0x01	; 1
    3f90:	0e 94 6e 2d 	call	0x5adc	; 0x5adc <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    3f94:	31 d5       	rcall	.+2658   	; 0x49f8 <lora_driver_rn2483FactoryReset>
    3f96:	ad d7       	rcall	.+3930   	; 0x4ef2 <lora_driver_mapReturnCodeToText>
    3f98:	9f 93       	push	r25
    3f9a:	8f 93       	push	r24
    3f9c:	83 ec       	ldi	r24, 0xC3	; 195
    3f9e:	92 e0       	ldi	r25, 0x02	; 2
    3fa0:	9f 93       	push	r25
    3fa2:	8f 93       	push	r24
    3fa4:	0e 94 09 33 	call	0x6612	; 0x6612 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    3fa8:	a5 d6       	rcall	.+3402   	; 0x4cf4 <lora_driver_configureToEu868>
    3faa:	a3 d7       	rcall	.+3910   	; 0x4ef2 <lora_driver_mapReturnCodeToText>
    3fac:	9f 93       	push	r25
    3fae:	8f 93       	push	r24
    3fb0:	86 ed       	ldi	r24, 0xD6	; 214
    3fb2:	92 e0       	ldi	r25, 0x02	; 2
    3fb4:	9f 93       	push	r25
    3fb6:	8f 93       	push	r24
    3fb8:	0e 94 09 33 	call	0x6612	; 0x6612 <printf>
    3fbc:	8e 01       	movw	r16, r28
    3fbe:	0f 5f       	subi	r16, 0xFF	; 255

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    3fc0:	1f 4f       	sbci	r17, 0xFF	; 255
    3fc2:	c8 01       	movw	r24, r16
    3fc4:	2b d5       	rcall	.+2646   	; 0x4a1c <lora_driver_getRn2483Hweui>
    3fc6:	95 d7       	rcall	.+3882   	; 0x4ef2 <lora_driver_mapReturnCodeToText>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    3fc8:	1f 93       	push	r17
    3fca:	0f 93       	push	r16
    3fcc:	9f 93       	push	r25
    3fce:	8f 93       	push	r24
    3fd0:	8f ee       	ldi	r24, 0xEF	; 239
    3fd2:	92 e0       	ldi	r25, 0x02	; 2
    3fd4:	9f 93       	push	r25
    3fd6:	8f 93       	push	r24
    3fd8:	0e 94 09 33 	call	0x6612	; 0x6612 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    3fdc:	c8 01       	movw	r24, r16
    3fde:	3a d5       	rcall	.+2676   	; 0x4a54 <lora_driver_setDeviceIdentifier>
    3fe0:	88 d7       	rcall	.+3856   	; 0x4ef2 <lora_driver_mapReturnCodeToText>
    3fe2:	9f 93       	push	r25
    3fe4:	8f 93       	push	r24
    3fe6:	1f 93       	push	r17
    3fe8:	0f 93       	push	r16
    3fea:	83 e0       	ldi	r24, 0x03	; 3
    3fec:	93 e0       	ldi	r25, 0x03	; 3
    3fee:	9f 93       	push	r25
    3ff0:	8f 93       	push	r24
    3ff2:	0e 94 09 33 	call	0x6612	; 0x6612 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    3ff6:	a8 01       	movw	r20, r16
    3ff8:	68 e1       	ldi	r22, 0x18	; 24
    3ffa:	73 e0       	ldi	r23, 0x03	; 3
    3ffc:	89 e3       	ldi	r24, 0x39	; 57
    3ffe:	93 e0       	ldi	r25, 0x03	; 3
    4000:	57 d7       	rcall	.+3758   	; 0x4eb0 <lora_driver_setOtaaIdentity>
    4002:	77 d7       	rcall	.+3822   	; 0x4ef2 <lora_driver_mapReturnCodeToText>
    4004:	9f 93       	push	r25
    4006:	8f 93       	push	r24
    4008:	1f 93       	push	r17
    400a:	0f 93       	push	r16
    400c:	88 e1       	ldi	r24, 0x18	; 24
    400e:	93 e0       	ldi	r25, 0x03	; 3
    4010:	9f 93       	push	r25
    4012:	8f 93       	push	r24
    4014:	89 e3       	ldi	r24, 0x39	; 57
    4016:	93 e0       	ldi	r25, 0x03	; 3
    4018:	9f 93       	push	r25
    401a:	8f 93       	push	r24
    401c:	8a e4       	ldi	r24, 0x4A	; 74
    401e:	93 e0       	ldi	r25, 0x03	; 3
    4020:	9f 93       	push	r25
    4022:	8f 93       	push	r24
    4024:	0e 94 09 33 	call	0x6612	; 0x6612 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    4028:	48 d5       	rcall	.+2704   	; 0x4aba <lora_driver_saveMac>
    402a:	63 d7       	rcall	.+3782   	; 0x4ef2 <lora_driver_mapReturnCodeToText>
    402c:	9f 93       	push	r25
    402e:	8f 93       	push	r24
    4030:	80 e8       	ldi	r24, 0x80	; 128
    4032:	93 e0       	ldi	r25, 0x03	; 3
    4034:	9f 93       	push	r25
    4036:	8f 93       	push	r24
    4038:	0e 94 09 33 	call	0x6612	; 0x6612 <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    403c:	0f b6       	in	r0, 0x3f	; 63
    403e:	f8 94       	cli
    4040:	de bf       	out	0x3e, r29	; 62
    4042:	0f be       	out	0x3f, r0	; 63
    4044:	cd bf       	out	0x3d, r28	; 61
    4046:	81 e0       	ldi	r24, 0x01	; 1
    4048:	32 d6       	rcall	.+3172   	; 0x4cae <lora_driver_setAdaptiveDataRate>
    404a:	53 d7       	rcall	.+3750   	; 0x4ef2 <lora_driver_mapReturnCodeToText>
    404c:	9f 93       	push	r25
    404e:	8f 93       	push	r24
    4050:	8f e8       	ldi	r24, 0x8F	; 143
    4052:	93 e0       	ldi	r25, 0x03	; 3
    4054:	9f 93       	push	r25
    4056:	8f 93       	push	r24
    4058:	0e 94 09 33 	call	0x6612	; 0x6612 <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    405c:	84 ef       	ldi	r24, 0xF4	; 244
    405e:	91 e0       	ldi	r25, 0x01	; 1
    4060:	31 d6       	rcall	.+3170   	; 0x4cc4 <lora_driver_setReceiveDelay>
    4062:	47 d7       	rcall	.+3726   	; 0x4ef2 <lora_driver_mapReturnCodeToText>
    4064:	9f 93       	push	r25
    4066:	8f 93       	push	r24
    4068:	81 e0       	ldi	r24, 0x01	; 1
    406a:	8f 93       	push	r24
    406c:	84 ef       	ldi	r24, 0xF4	; 244
    406e:	8f 93       	push	r24
    4070:	80 eb       	ldi	r24, 0xB0	; 176
    4072:	93 e0       	ldi	r25, 0x03	; 3
    4074:	9f 93       	push	r25
    4076:	8f 93       	push	r24
    4078:	0e 94 09 33 	call	0x6612	; 0x6612 <printf>
    407c:	0f b6       	in	r0, 0x3f	; 63
    407e:	f8 94       	cli
    4080:	de bf       	out	0x3e, r29	; 62
    4082:	0f be       	out	0x3f, r0	; 63
    4084:	cd bf       	out	0x3d, r28	; 61

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    4086:	1a e0       	ldi	r17, 0x0A	; 10
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    4088:	80 e0       	ldi	r24, 0x00	; 0
    408a:	1d d5       	rcall	.+2618   	; 0x4ac6 <lora_driver_join>
    408c:	08 2f       	mov	r16, r24
    408e:	31 d7       	rcall	.+3682   	; 0x4ef2 <lora_driver_mapReturnCodeToText>
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    4090:	9f 93       	push	r25
    4092:	8f 93       	push	r24
    4094:	1f 92       	push	r1
    4096:	1f 93       	push	r17
    4098:	80 ed       	ldi	r24, 0xD0	; 208
    409a:	93 e0       	ldi	r25, 0x03	; 3
    409c:	9f 93       	push	r25
    409e:	8f 93       	push	r24
    40a0:	0e 94 09 33 	call	0x6612	; 0x6612 <printf>
    40a4:	0f 90       	pop	r0
    40a6:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    40a8:	0f 90       	pop	r0
    40aa:	0f 90       	pop	r0
    40ac:	0f 90       	pop	r0
    40ae:	0f 90       	pop	r0
    40b0:	08 30       	cpi	r16, 0x08	; 8
    40b2:	59 f0       	breq	.+22     	; 0x40ca <_connectToLoRaWAN+0x154>
    40b4:	80 e0       	ldi	r24, 0x00	; 0
    40b6:	0e 94 a0 2d 	call	0x5b40	; 0x5b40 <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    40ba:	66 e3       	ldi	r22, 0x36	; 54
    40bc:	71 e0       	ldi	r23, 0x01	; 1
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    40be:	80 e0       	ldi	r24, 0x00	; 0
    40c0:	90 e0       	ldi	r25, 0x00	; 0
    40c2:	0e 94 3e 11 	call	0x227c	; 0x227c <vTaskDelay>
    40c6:	11 50       	subi	r17, 0x01	; 1
    40c8:	f9 f6       	brne	.-66     	; 0x4088 <_connectToLoRaWAN+0x112>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    40ca:	08 30       	cpi	r16, 0x08	; 8
    40cc:	19 f4       	brne	.+6      	; 0x40d4 <_connectToLoRaWAN+0x15e>

	if (rc == LORA_ACCEPTED)
    40ce:	81 e0       	ldi	r24, 0x01	; 1
    40d0:	0e 94 91 2d 	call	0x5b22	; 0x5b22 <status_leds_ledOn>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    40d4:	64 96       	adiw	r28, 0x14	; 20
    40d6:	0f b6       	in	r0, 0x3f	; 63
	}
}
    40d8:	f8 94       	cli
    40da:	de bf       	out	0x3e, r29	; 62
    40dc:	0f be       	out	0x3f, r0	; 63
    40de:	cd bf       	out	0x3d, r28	; 61
    40e0:	df 91       	pop	r29
    40e2:	cf 91       	pop	r28
    40e4:	1f 91       	pop	r17
    40e6:	0f 91       	pop	r16
    40e8:	08 95       	ret

000040ea <senderTask_create>:
    40ea:	ef 92       	push	r14
    40ec:	ff 92       	push	r15
static void _run(void* params);
static void _connectToLoRaWAN();

static QueueHandle_t _senderQueue;

void senderTask_create(QueueHandle_t senderQueue) {
    40ee:	0f 93       	push	r16
	_senderQueue = senderQueue;
    40f0:	90 93 0f 17 	sts	0x170F, r25	; 0x80170f <_senderQueue+0x1>
    40f4:	80 93 0e 17 	sts	0x170E, r24	; 0x80170e <_senderQueue>
	
	xTaskCreate(_run,
    40f8:	e1 2c       	mov	r14, r1
    40fa:	f1 2c       	mov	r15, r1
    40fc:	08 e0       	ldi	r16, 0x08	; 8
    40fe:	20 e0       	ldi	r18, 0x00	; 0
    4100:	30 e0       	ldi	r19, 0x00	; 0
    4102:	40 ec       	ldi	r20, 0xC0	; 192
    4104:	50 e0       	ldi	r21, 0x00	; 0
    4106:	60 ef       	ldi	r22, 0xF0	; 240
    4108:	73 e0       	ldi	r23, 0x03	; 3
    410a:	86 ed       	ldi	r24, 0xD6	; 214
    410c:	90 e2       	ldi	r25, 0x20	; 32
    410e:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <xTaskCreate>
	configMINIMAL_STACK_SIZE,
	NULL,
	TASK_PRIORITY,
	NULL
	);
}
    4112:	0f 91       	pop	r16
    4114:	ff 90       	pop	r15
    4116:	ef 90       	pop	r14
    4118:	08 95       	ret

0000411a <senderTask_initTask>:

void senderTask_initTask(void* params) {
	lora_driver_resetRn2483(1);
    411a:	81 e0       	ldi	r24, 0x01	; 1
    411c:	5f d4       	rcall	.+2238   	; 0x49dc <lora_driver_resetRn2483>
	vTaskDelay(2);
    411e:	62 e0       	ldi	r22, 0x02	; 2
    4120:	70 e0       	ldi	r23, 0x00	; 0
    4122:	80 e0       	ldi	r24, 0x00	; 0
    4124:	90 e0       	ldi	r25, 0x00	; 0
    4126:	0e 94 3e 11 	call	0x227c	; 0x227c <vTaskDelay>
	lora_driver_resetRn2483(0);
    412a:	80 e0       	ldi	r24, 0x00	; 0
    412c:	57 d4       	rcall	.+2222   	; 0x49dc <lora_driver_resetRn2483>
	vTaskDelay(150);
    412e:	66 e9       	ldi	r22, 0x96	; 150
    4130:	70 e0       	ldi	r23, 0x00	; 0
    4132:	80 e0       	ldi	r24, 0x00	; 0
    4134:	90 e0       	ldi	r25, 0x00	; 0
    4136:	0e 94 3e 11 	call	0x227c	; 0x227c <vTaskDelay>
	lora_driver_flushBuffers();
    413a:	09 d4       	rcall	.+2066   	; 0x494e <lora_driver_flushBuffers>
	
	_connectToLoRaWAN();
    413c:	1c cf       	rjmp	.-456    	; 0x3f76 <_connectToLoRaWAN>
    413e:	08 95       	ret

00004140 <senderTask_runTask>:
    4140:	cf 93       	push	r28
}

void senderTask_runTask() {
    4142:	df 93       	push	r29
    4144:	cd b7       	in	r28, 0x3d	; 61
    4146:	de b7       	in	r29, 0x3e	; 62
    4148:	66 97       	sbiw	r28, 0x16	; 22
    414a:	0f b6       	in	r0, 0x3f	; 63
    414c:	f8 94       	cli
    414e:	de bf       	out	0x3e, r29	; 62
    4150:	0f be       	out	0x3f, r0	; 63
    4152:	cd bf       	out	0x3d, r28	; 61
	lora_driver_payload_t uplinkPayload;
	xQueueReceive(_senderQueue, &uplinkPayload, portMAX_DELAY);
    4154:	2f ef       	ldi	r18, 0xFF	; 255
    4156:	3f ef       	ldi	r19, 0xFF	; 255
    4158:	a9 01       	movw	r20, r18
    415a:	be 01       	movw	r22, r28
    415c:	6f 5f       	subi	r22, 0xFF	; 255
    415e:	7f 4f       	sbci	r23, 0xFF	; 255
    4160:	80 91 0e 17 	lds	r24, 0x170E	; 0x80170e <_senderQueue>
    4164:	90 91 0f 17 	lds	r25, 0x170F	; 0x80170f <_senderQueue+0x1>
    4168:	0e 94 94 07 	call	0xf28	; 0xf28 <xQueueReceive>
	lora_driver_returnCode_t status;
	if ((status = lora_driver_sendUploadMessage(false, &uplinkPayload)) == LORA_MAC_TX_OK){
    416c:	be 01       	movw	r22, r28
    416e:	6f 5f       	subi	r22, 0xFF	; 255
    4170:	7f 4f       	sbci	r23, 0xFF	; 255
    4172:	80 e0       	ldi	r24, 0x00	; 0
    4174:	d1 d4       	rcall	.+2466   	; 0x4b18 <lora_driver_sendUploadMessage>
    4176:	8d 30       	cpi	r24, 0x0D	; 13
    4178:	29 f4       	brne	.+10     	; 0x4184 <senderTask_runTask+0x44>
		puts("Message sent - no downlink");
    417a:	8b ef       	ldi	r24, 0xFB	; 251
    417c:	93 e0       	ldi	r25, 0x03	; 3
    417e:	0e 94 1c 33 	call	0x6638	; 0x6638 <puts>
    4182:	0b c0       	rjmp	.+22     	; 0x419a <senderTask_runTask+0x5a>
	} else if (status == LORA_MAC_RX){
    4184:	8e 30       	cpi	r24, 0x0E	; 14
    4186:	29 f4       	brne	.+10     	; 0x4192 <senderTask_runTask+0x52>
		puts("Message sent - with downlink");
    4188:	86 e1       	ldi	r24, 0x16	; 22
    418a:	94 e0       	ldi	r25, 0x04	; 4
    418c:	0e 94 1c 33 	call	0x6638	; 0x6638 <puts>
    4190:	04 c0       	rjmp	.+8      	; 0x419a <senderTask_runTask+0x5a>
	} else {
		puts("Message not sent");
    4192:	83 e3       	ldi	r24, 0x33	; 51
    4194:	94 e0       	ldi	r25, 0x04	; 4
    4196:	0e 94 1c 33 	call	0x6638	; 0x6638 <puts>
	}
}
    419a:	66 96       	adiw	r28, 0x16	; 22
    419c:	0f b6       	in	r0, 0x3f	; 63
    419e:	f8 94       	cli
    41a0:	de bf       	out	0x3e, r29	; 62
    41a2:	0f be       	out	0x3f, r0	; 63
    41a4:	cd bf       	out	0x3d, r28	; 61
    41a6:	df 91       	pop	r29
    41a8:	cf 91       	pop	r28
    41aa:	08 95       	ret

000041ac <_run>:

static void _run(void* params) {
	senderTask_initTask(params);
    41ac:	b6 df       	rcall	.-148    	; 0x411a <senderTask_initTask>
	
	while (1) {
		senderTask_runTask();
    41ae:	c8 df       	rcall	.-112    	; 0x4140 <senderTask_runTask>
    41b0:	fe cf       	rjmp	.-4      	; 0x41ae <_run+0x2>

000041b2 <humidityTemperatureTask_create>:
    41b2:	ef 92       	push	r14
				TASK_PRIORITY, 
				NULL
	);
}

void humidityTemperatureTask_initTask(void* params) {
    41b4:	ff 92       	push	r15
    41b6:	0f 93       	push	r16
    41b8:	90 93 1b 17 	sts	0x171B, r25	; 0x80171b <_humidityQueue+0x1>
    41bc:	80 93 1a 17 	sts	0x171A, r24	; 0x80171a <_humidityQueue>
    41c0:	70 93 19 17 	sts	0x1719, r23	; 0x801719 <_temperatureQueue+0x1>
    41c4:	60 93 18 17 	sts	0x1718, r22	; 0x801718 <_temperatureQueue>
    41c8:	50 93 17 17 	sts	0x1717, r21	; 0x801717 <_actEventGroup+0x1>
    41cc:	40 93 16 17 	sts	0x1716, r20	; 0x801716 <_actEventGroup>
    41d0:	30 93 15 17 	sts	0x1715, r19	; 0x801715 <_doneEventGroup+0x1>
    41d4:	20 93 14 17 	sts	0x1714, r18	; 0x801714 <_doneEventGroup>
    41d8:	e1 2c       	mov	r14, r1
    41da:	f1 2c       	mov	r15, r1
    41dc:	08 e0       	ldi	r16, 0x08	; 8
    41de:	20 e0       	ldi	r18, 0x00	; 0
    41e0:	30 e0       	ldi	r19, 0x00	; 0
    41e2:	40 ec       	ldi	r20, 0xC0	; 192
    41e4:	50 e0       	ldi	r21, 0x00	; 0
    41e6:	64 e4       	ldi	r22, 0x44	; 68
    41e8:	74 e0       	ldi	r23, 0x04	; 4
    41ea:	8f e6       	ldi	r24, 0x6F	; 111
    41ec:	91 e2       	ldi	r25, 0x21	; 33
    41ee:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <xTaskCreate>
    41f2:	0f 91       	pop	r16
    41f4:	ff 90       	pop	r15
    41f6:	ef 90       	pop	r14
    41f8:	08 95       	ret

000041fa <humidityTemperatureTask_runTask>:
	
}

void humidityTemperatureTask_runTask() {
    41fa:	cf 92       	push	r12
    41fc:	df 92       	push	r13
    41fe:	ef 92       	push	r14
    4200:	ff 92       	push	r15
    4202:	0f 93       	push	r16
	xEventGroupWaitBits(_actEventGroup, 
    4204:	cc 24       	eor	r12, r12
    4206:	ca 94       	dec	r12
    4208:	dc 2c       	mov	r13, r12
    420a:	76 01       	movw	r14, r12
    420c:	00 e0       	ldi	r16, 0x00	; 0
    420e:	21 e0       	ldi	r18, 0x01	; 1
    4210:	43 e0       	ldi	r20, 0x03	; 3
    4212:	50 e0       	ldi	r21, 0x00	; 0
    4214:	60 e0       	ldi	r22, 0x00	; 0
    4216:	70 e0       	ldi	r23, 0x00	; 0
    4218:	80 91 16 17 	lds	r24, 0x1716	; 0x801716 <_actEventGroup>
    421c:	90 91 17 17 	lds	r25, 0x1717	; 0x801717 <_actEventGroup+0x1>
    4220:	0e 94 3c 01 	call	0x278	; 0x278 <xEventGroupWaitBits>
						pdTRUE,	
						pdFALSE, 
						portMAX_DELAY
	);
	
	if (hih8120_wakeup() == HIH8120_OK) {
    4224:	10 d2       	rcall	.+1056   	; 0x4646 <hih8120_wakeup>
    4226:	81 11       	cpse	r24, r1
    4228:	27 c0       	rjmp	.+78     	; 0x4278 <humidityTemperatureTask_runTask+0x7e>
		vTaskDelay(pdMS_TO_TICKS(100));
    422a:	66 e0       	ldi	r22, 0x06	; 6
    422c:	70 e0       	ldi	r23, 0x00	; 0
    422e:	80 e0       	ldi	r24, 0x00	; 0
    4230:	90 e0       	ldi	r25, 0x00	; 0
    4232:	0e 94 3e 11 	call	0x227c	; 0x227c <vTaskDelay>
		
		if (hih8120_measure() == HIH8120_OK) {
    4236:	1c d2       	rcall	.+1080   	; 0x4670 <hih8120_measure>
    4238:	81 11       	cpse	r24, r1
    423a:	11 c0       	rjmp	.+34     	; 0x425e <humidityTemperatureTask_runTask+0x64>
			vTaskDelay(pdMS_TO_TICKS(50));
    423c:	63 e0       	ldi	r22, 0x03	; 3
    423e:	70 e0       	ldi	r23, 0x00	; 0
    4240:	80 e0       	ldi	r24, 0x00	; 0
    4242:	90 e0       	ldi	r25, 0x00	; 0
    4244:	0e 94 3e 11 	call	0x227c	; 0x227c <vTaskDelay>
			_latestHumidity = hih8120_getHumidityPercent_x10();
    4248:	39 d2       	rcall	.+1138   	; 0x46bc <hih8120_getHumidityPercent_x10>
    424a:	90 93 13 17 	sts	0x1713, r25	; 0x801713 <_latestHumidity+0x1>
    424e:	80 93 12 17 	sts	0x1712, r24	; 0x801712 <_latestHumidity>
			_latestTemperature = hih8120_getTemperature_x10();
    4252:	5a d2       	rcall	.+1204   	; 0x4708 <hih8120_getTemperature_x10>
    4254:	90 93 11 17 	sts	0x1711, r25	; 0x801711 <_latestTemperature+0x1>
    4258:	80 93 10 17 	sts	0x1710, r24	; 0x801710 <_latestTemperature>
    425c:	19 c0       	rjmp	.+50     	; 0x4290 <humidityTemperatureTask_runTask+0x96>
		} else {
			_latestHumidity = CONFIG_INVALID_HUMIDITY_VALUE;
    425e:	80 ed       	ldi	r24, 0xD0	; 208
    4260:	97 e0       	ldi	r25, 0x07	; 7
    4262:	90 93 13 17 	sts	0x1713, r25	; 0x801713 <_latestHumidity+0x1>
    4266:	80 93 12 17 	sts	0x1712, r24	; 0x801712 <_latestHumidity>
			_latestTemperature = CONFIG_INVALID_TEMPERATURE_VALUE;
    426a:	88 e1       	ldi	r24, 0x18	; 24
    426c:	9c ef       	ldi	r25, 0xFC	; 252
    426e:	90 93 11 17 	sts	0x1711, r25	; 0x801711 <_latestTemperature+0x1>
    4272:	80 93 10 17 	sts	0x1710, r24	; 0x801710 <_latestTemperature>
    4276:	0c c0       	rjmp	.+24     	; 0x4290 <humidityTemperatureTask_runTask+0x96>
		}
	} else {
		_latestHumidity = CONFIG_INVALID_HUMIDITY_VALUE;
    4278:	80 ed       	ldi	r24, 0xD0	; 208
    427a:	97 e0       	ldi	r25, 0x07	; 7
    427c:	90 93 13 17 	sts	0x1713, r25	; 0x801713 <_latestHumidity+0x1>
    4280:	80 93 12 17 	sts	0x1712, r24	; 0x801712 <_latestHumidity>
		_latestTemperature = CONFIG_INVALID_TEMPERATURE_VALUE;
    4284:	88 e1       	ldi	r24, 0x18	; 24
    4286:	9c ef       	ldi	r25, 0xFC	; 252
    4288:	90 93 11 17 	sts	0x1711, r25	; 0x801711 <_latestTemperature+0x1>
    428c:	80 93 10 17 	sts	0x1710, r24	; 0x801710 <_latestTemperature>
	}
	
	xQueueSendToBack(_humidityQueue, &_latestHumidity, portMAX_DELAY);
    4290:	00 e0       	ldi	r16, 0x00	; 0
    4292:	2f ef       	ldi	r18, 0xFF	; 255
    4294:	3f ef       	ldi	r19, 0xFF	; 255
    4296:	a9 01       	movw	r20, r18
    4298:	62 e1       	ldi	r22, 0x12	; 18
    429a:	77 e1       	ldi	r23, 0x17	; 23
    429c:	80 91 1a 17 	lds	r24, 0x171A	; 0x80171a <_humidityQueue>
    42a0:	90 91 1b 17 	lds	r25, 0x171B	; 0x80171b <_humidityQueue+0x1>
    42a4:	0e 94 a9 06 	call	0xd52	; 0xd52 <xQueueGenericSend>
	xQueueSendToBack(_temperatureQueue, &_latestTemperature, portMAX_DELAY);
    42a8:	2f ef       	ldi	r18, 0xFF	; 255
    42aa:	3f ef       	ldi	r19, 0xFF	; 255
    42ac:	a9 01       	movw	r20, r18
    42ae:	60 e1       	ldi	r22, 0x10	; 16
    42b0:	77 e1       	ldi	r23, 0x17	; 23
    42b2:	80 91 18 17 	lds	r24, 0x1718	; 0x801718 <_temperatureQueue>
    42b6:	90 91 19 17 	lds	r25, 0x1719	; 0x801719 <_temperatureQueue+0x1>
    42ba:	0e 94 a9 06 	call	0xd52	; 0xd52 <xQueueGenericSend>
	xEventGroupSetBits(_doneEventGroup, BIT_HUMIDITY_DONE | BIT_TEMPERATURE_DONE);
    42be:	43 e0       	ldi	r20, 0x03	; 3
    42c0:	50 e0       	ldi	r21, 0x00	; 0
    42c2:	60 e0       	ldi	r22, 0x00	; 0
    42c4:	70 e0       	ldi	r23, 0x00	; 0
    42c6:	80 91 14 17 	lds	r24, 0x1714	; 0x801714 <_doneEventGroup>
    42ca:	90 91 15 17 	lds	r25, 0x1715	; 0x801715 <_doneEventGroup+0x1>
    42ce:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <xEventGroupSetBits>
}
    42d2:	0f 91       	pop	r16
    42d4:	ff 90       	pop	r15
    42d6:	ef 90       	pop	r14
    42d8:	df 90       	pop	r13
    42da:	cf 90       	pop	r12
    42dc:	08 95       	ret

000042de <_run>:

static void _run(void* params) {
	humidityTemperatureTask_initTask(params);
	
	while (1) {
		humidityTemperatureTask_runTask();
    42de:	8d df       	rcall	.-230    	; 0x41fa <humidityTemperatureTask_runTask>
    42e0:	fe cf       	rjmp	.-4      	; 0x42de <_run>

000042e2 <servoTask_create>:

static void _run(void* params);

static QueueHandle_t _servoQueue;

void servoTask_create(QueueHandle_t servoQueue) {
    42e2:	ef 92       	push	r14
    42e4:	ff 92       	push	r15
    42e6:	0f 93       	push	r16
	_servoQueue = servoQueue;
    42e8:	90 93 1d 17 	sts	0x171D, r25	; 0x80171d <_servoQueue+0x1>
    42ec:	80 93 1c 17 	sts	0x171C, r24	; 0x80171c <_servoQueue>
	
	xTaskCreate(_run, 
    42f0:	e1 2c       	mov	r14, r1
    42f2:	f1 2c       	mov	r15, r1
    42f4:	08 e0       	ldi	r16, 0x08	; 8
    42f6:	20 e0       	ldi	r18, 0x00	; 0
    42f8:	30 e0       	ldi	r19, 0x00	; 0
    42fa:	40 ec       	ldi	r20, 0xC0	; 192
    42fc:	50 e0       	ldi	r21, 0x00	; 0
    42fe:	6c e5       	ldi	r22, 0x5C	; 92
    4300:	74 e0       	ldi	r23, 0x04	; 4
    4302:	88 e2       	ldi	r24, 0x28	; 40
    4304:	92 e2       	ldi	r25, 0x22	; 34
    4306:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <xTaskCreate>
				configMINIMAL_STACK_SIZE, 
				NULL, 
				TASK_PRIORITY, 
				NULL
	);
}
    430a:	0f 91       	pop	r16
    430c:	ff 90       	pop	r15
    430e:	ef 90       	pop	r14
    4310:	08 95       	ret

00004312 <servoTask_initTask>:

void servoTask_initTask(void* params) {
	// Default the starting window position to be between open and closed.
	rc_servo_setPosition(SERVO_PORT, SERVO_POS_MIDDLE);
    4312:	60 e0       	ldi	r22, 0x00	; 0
    4314:	81 e0       	ldi	r24, 0x01	; 1
    4316:	22 c7       	rjmp	.+3652   	; 0x515c <rc_servo_setPosition>
    4318:	08 95       	ret

0000431a <servoTask_runTask>:
}

void servoTask_runTask() {
    431a:	0f 93       	push	r16
    431c:	1f 93       	push	r17
    431e:	cf 93       	push	r28
    4320:	df 93       	push	r29
    4322:	cd b7       	in	r28, 0x3d	; 61
    4324:	de b7       	in	r29, 0x3e	; 62
    4326:	28 97       	sbiw	r28, 0x08	; 8
    4328:	0f b6       	in	r0, 0x3f	; 63
    432a:	f8 94       	cli
    432c:	de bf       	out	0x3e, r29	; 62
    432e:	0f be       	out	0x3f, r0	; 63
    4330:	cd bf       	out	0x3d, r28	; 61
	uint16_t humidity;
	int16_t temperature;
	uint16_t co2;
	uint16_t sound;
	xQueueReceive(_servoQueue, &humidity, portMAX_DELAY);
    4332:	2f ef       	ldi	r18, 0xFF	; 255
    4334:	3f ef       	ldi	r19, 0xFF	; 255
    4336:	a9 01       	movw	r20, r18
    4338:	be 01       	movw	r22, r28
    433a:	6f 5f       	subi	r22, 0xFF	; 255
    433c:	7f 4f       	sbci	r23, 0xFF	; 255
    433e:	80 91 1c 17 	lds	r24, 0x171C	; 0x80171c <_servoQueue>
    4342:	90 91 1d 17 	lds	r25, 0x171D	; 0x80171d <_servoQueue+0x1>
    4346:	0e 94 94 07 	call	0xf28	; 0xf28 <xQueueReceive>
	xQueueReceive(_servoQueue, &temperature, portMAX_DELAY);
    434a:	2f ef       	ldi	r18, 0xFF	; 255
    434c:	3f ef       	ldi	r19, 0xFF	; 255
    434e:	a9 01       	movw	r20, r18
    4350:	be 01       	movw	r22, r28
    4352:	6d 5f       	subi	r22, 0xFD	; 253
    4354:	7f 4f       	sbci	r23, 0xFF	; 255
    4356:	80 91 1c 17 	lds	r24, 0x171C	; 0x80171c <_servoQueue>
    435a:	90 91 1d 17 	lds	r25, 0x171D	; 0x80171d <_servoQueue+0x1>
    435e:	0e 94 94 07 	call	0xf28	; 0xf28 <xQueueReceive>
	xQueueReceive(_servoQueue, &co2, portMAX_DELAY);
    4362:	2f ef       	ldi	r18, 0xFF	; 255
    4364:	3f ef       	ldi	r19, 0xFF	; 255
    4366:	a9 01       	movw	r20, r18
    4368:	be 01       	movw	r22, r28
    436a:	6b 5f       	subi	r22, 0xFB	; 251
    436c:	7f 4f       	sbci	r23, 0xFF	; 255
    436e:	80 91 1c 17 	lds	r24, 0x171C	; 0x80171c <_servoQueue>
    4372:	90 91 1d 17 	lds	r25, 0x171D	; 0x80171d <_servoQueue+0x1>
    4376:	0e 94 94 07 	call	0xf28	; 0xf28 <xQueueReceive>
	xQueueReceive(_servoQueue, &sound, portMAX_DELAY);
    437a:	2f ef       	ldi	r18, 0xFF	; 255
    437c:	3f ef       	ldi	r19, 0xFF	; 255
    437e:	a9 01       	movw	r20, r18
    4380:	be 01       	movw	r22, r28
    4382:	69 5f       	subi	r22, 0xF9	; 249
    4384:	7f 4f       	sbci	r23, 0xFF	; 255
    4386:	80 91 1c 17 	lds	r24, 0x171C	; 0x80171c <_servoQueue>
    438a:	90 91 1d 17 	lds	r25, 0x171D	; 0x80171d <_servoQueue+0x1>
    438e:	0e 94 94 07 	call	0xf28	; 0xf28 <xQueueReceive>
	
	// Delay introduced such that the thresholds are updated before reading them.
	vTaskDelay(pdMS_TO_TICKS(5000));
    4392:	66 e3       	ldi	r22, 0x36	; 54
    4394:	71 e0       	ldi	r23, 0x01	; 1
    4396:	80 e0       	ldi	r24, 0x00	; 0
    4398:	90 e0       	ldi	r25, 0x00	; 0
    439a:	0e 94 3e 11 	call	0x227c	; 0x227c <vTaskDelay>
	
	int16_t lowThreshold = configuration_getLowTemperatureThreshold();
    439e:	fa db       	rcall	.-2060   	; 0x3b94 <configuration_getLowTemperatureThreshold>
    43a0:	8c 01       	movw	r16, r24
	int16_t highThreshold = configuration_getHighTemperatureThreshold();
    43a2:	1e dc       	rcall	.-1988   	; 0x3be0 <configuration_getHighTemperatureThreshold>
    43a4:	08 31       	cpi	r16, 0x18	; 24
	
	// Only open or close the window if the stored thresholds are not set to
	// the default temperature threshold values - the invalid temperature value.
	if (lowThreshold != CONFIG_INVALID_TEMPERATURE_VALUE && temperature < lowThreshold) {
    43a6:	2c ef       	ldi	r18, 0xFC	; 252
    43a8:	12 07       	cpc	r17, r18
    43aa:	c9 f0       	breq	.+50     	; 0x43de <servoTask_runTask+0xc4>
    43ac:	2b 81       	ldd	r18, Y+3	; 0x03
    43ae:	3c 81       	ldd	r19, Y+4	; 0x04
    43b0:	20 17       	cp	r18, r16
    43b2:	31 07       	cpc	r19, r17
    43b4:	a4 f4       	brge	.+40     	; 0x43de <servoTask_runTask+0xc4>
    43b6:	1f 93       	push	r17
		printf("Measured temperature - %d, low threshold - %d - too cold, the window is closing\n", temperature, lowThreshold);
    43b8:	0f 93       	push	r16
    43ba:	3f 93       	push	r19
    43bc:	2f 93       	push	r18
    43be:	86 e6       	ldi	r24, 0x66	; 102
    43c0:	94 e0       	ldi	r25, 0x04	; 4
    43c2:	9f 93       	push	r25
    43c4:	8f 93       	push	r24
    43c6:	0e 94 09 33 	call	0x6612	; 0x6612 <printf>
    43ca:	6c e9       	ldi	r22, 0x9C	; 156
		rc_servo_setPosition(SERVO_PORT, SERVO_POS_CLOSED);
    43cc:	81 e0       	ldi	r24, 0x01	; 1
    43ce:	c6 d6       	rcall	.+3468   	; 0x515c <rc_servo_setPosition>
    43d0:	0f 90       	pop	r0
    43d2:	0f 90       	pop	r0
    43d4:	0f 90       	pop	r0
    43d6:	0f 90       	pop	r0
    43d8:	0f 90       	pop	r0
    43da:	0f 90       	pop	r0
    43dc:	2e c0       	rjmp	.+92     	; 0x443a <servoTask_runTask+0x120>
    43de:	88 31       	cpi	r24, 0x18	; 24
	} else if (highThreshold != CONFIG_INVALID_TEMPERATURE_VALUE && temperature > highThreshold) {
    43e0:	2c ef       	ldi	r18, 0xFC	; 252
    43e2:	92 07       	cpc	r25, r18
    43e4:	c9 f0       	breq	.+50     	; 0x4418 <servoTask_runTask+0xfe>
    43e6:	2b 81       	ldd	r18, Y+3	; 0x03
    43e8:	3c 81       	ldd	r19, Y+4	; 0x04
    43ea:	82 17       	cp	r24, r18
    43ec:	93 07       	cpc	r25, r19
    43ee:	a4 f4       	brge	.+40     	; 0x4418 <servoTask_runTask+0xfe>
    43f0:	9f 93       	push	r25
		printf("Measured temperature - %d, high threshold - %d - too worm, the window is opening\n", temperature, highThreshold);
    43f2:	8f 93       	push	r24
    43f4:	3f 93       	push	r19
    43f6:	2f 93       	push	r18
    43f8:	87 eb       	ldi	r24, 0xB7	; 183
    43fa:	94 e0       	ldi	r25, 0x04	; 4
    43fc:	9f 93       	push	r25
    43fe:	8f 93       	push	r24
    4400:	0e 94 09 33 	call	0x6612	; 0x6612 <printf>
		rc_servo_setPosition(SERVO_PORT, SERVO_POS_OPEN);
    4404:	64 e6       	ldi	r22, 0x64	; 100
    4406:	81 e0       	ldi	r24, 0x01	; 1
    4408:	a9 d6       	rcall	.+3410   	; 0x515c <rc_servo_setPosition>
    440a:	0f 90       	pop	r0
    440c:	0f 90       	pop	r0
    440e:	0f 90       	pop	r0
    4410:	0f 90       	pop	r0
    4412:	0f 90       	pop	r0
    4414:	0f 90       	pop	r0
    4416:	11 c0       	rjmp	.+34     	; 0x443a <servoTask_runTask+0x120>
    4418:	8c 81       	ldd	r24, Y+4	; 0x04
	} else {
		printf("Measured temperature - %d - is within the thresholds. The window is in mid position\n", temperature);
    441a:	8f 93       	push	r24
    441c:	8b 81       	ldd	r24, Y+3	; 0x03
    441e:	8f 93       	push	r24
    4420:	89 e0       	ldi	r24, 0x09	; 9
    4422:	95 e0       	ldi	r25, 0x05	; 5
    4424:	9f 93       	push	r25
    4426:	8f 93       	push	r24
    4428:	0e 94 09 33 	call	0x6612	; 0x6612 <printf>
		rc_servo_setPosition(SERVO_PORT, SERVO_POS_MIDDLE);
    442c:	60 e0       	ldi	r22, 0x00	; 0
    442e:	81 e0       	ldi	r24, 0x01	; 1
    4430:	95 d6       	rcall	.+3370   	; 0x515c <rc_servo_setPosition>
    4432:	0f 90       	pop	r0
    4434:	0f 90       	pop	r0
    4436:	0f 90       	pop	r0
    4438:	0f 90       	pop	r0
    443a:	28 96       	adiw	r28, 0x08	; 8
	}
}
    443c:	0f b6       	in	r0, 0x3f	; 63
    443e:	f8 94       	cli
    4440:	de bf       	out	0x3e, r29	; 62
    4442:	0f be       	out	0x3f, r0	; 63
    4444:	cd bf       	out	0x3d, r28	; 61
    4446:	df 91       	pop	r29
    4448:	cf 91       	pop	r28
    444a:	1f 91       	pop	r17
    444c:	0f 91       	pop	r16
    444e:	08 95       	ret

00004450 <_run>:
    4450:	60 df       	rcall	.-320    	; 0x4312 <servoTask_initTask>

static void _run(void* params) {
	servoTask_initTask(params);
	
	while (1) {
		servoTask_runTask();
    4452:	63 df       	rcall	.-314    	; 0x431a <servoTask_runTask>
    4454:	fe cf       	rjmp	.-4      	; 0x4452 <_run+0x2>

00004456 <soundTask_create>:
    4456:	ef 92       	push	r14
				TASK_PRIORITY, 
				NULL
	);
}

void soundTask_initTask(void* params) {
    4458:	ff 92       	push	r15
    445a:	0f 93       	push	r16
    445c:	90 93 21 17 	sts	0x1721, r25	; 0x801721 <_soundQueue+0x1>
    4460:	80 93 20 17 	sts	0x1720, r24	; 0x801720 <_soundQueue>
    4464:	50 93 1f 17 	sts	0x171F, r21	; 0x80171f <_doneEventGroup+0x1>
    4468:	40 93 1e 17 	sts	0x171E, r20	; 0x80171e <_doneEventGroup>
    446c:	e1 2c       	mov	r14, r1
    446e:	f1 2c       	mov	r15, r1
    4470:	08 e0       	ldi	r16, 0x08	; 8
    4472:	20 e0       	ldi	r18, 0x00	; 0
    4474:	30 e0       	ldi	r19, 0x00	; 0
    4476:	40 ec       	ldi	r20, 0xC0	; 192
    4478:	50 e0       	ldi	r21, 0x00	; 0
    447a:	6e e5       	ldi	r22, 0x5E	; 94
    447c:	75 e0       	ldi	r23, 0x05	; 5
    447e:	86 e8       	ldi	r24, 0x86	; 134
    4480:	92 e2       	ldi	r25, 0x22	; 34
    4482:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <xTaskCreate>
    4486:	0f 91       	pop	r16
    4488:	ff 90       	pop	r15
    448a:	ef 90       	pop	r14
    448c:	08 95       	ret

0000448e <soundTask_runTask>:
	
}

void soundTask_runTask() {
    448e:	cf 92       	push	r12
    4490:	df 92       	push	r13
    4492:	ef 92       	push	r14
    4494:	ff 92       	push	r15
    4496:	0f 93       	push	r16
    4498:	cf 93       	push	r28
    449a:	df 93       	push	r29
    449c:	1f 92       	push	r1
    449e:	1f 92       	push	r1
    44a0:	cd b7       	in	r28, 0x3d	; 61
    44a2:	de b7       	in	r29, 0x3e	; 62
	xEventGroupWaitBits(_doneEventGroup, 
    44a4:	cc 24       	eor	r12, r12
    44a6:	ca 94       	dec	r12
    44a8:	dc 2c       	mov	r13, r12
    44aa:	76 01       	movw	r14, r12
    44ac:	01 e0       	ldi	r16, 0x01	; 1
    44ae:	20 e0       	ldi	r18, 0x00	; 0
    44b0:	44 e0       	ldi	r20, 0x04	; 4
    44b2:	50 e0       	ldi	r21, 0x00	; 0
    44b4:	60 e0       	ldi	r22, 0x00	; 0
    44b6:	70 e0       	ldi	r23, 0x00	; 0
    44b8:	80 91 1e 17 	lds	r24, 0x171E	; 0x80171e <_doneEventGroup>
    44bc:	90 91 1f 17 	lds	r25, 0x171F	; 0x80171f <_doneEventGroup+0x1>
    44c0:	0e 94 3c 01 	call	0x278	; 0x278 <xEventGroupWaitBits>
						pdFALSE, 
						pdTRUE, 
						portMAX_DELAY
	);
	
	uint16_t sound = sen14262_envelope();
    44c4:	aa d6       	rcall	.+3412   	; 0x521a <sen14262_envelope>
    44c6:	9a 83       	std	Y+2, r25	; 0x02
    44c8:	89 83       	std	Y+1, r24	; 0x01
	xQueueSendToBack(_soundQueue, &sound, portMAX_DELAY);
    44ca:	00 e0       	ldi	r16, 0x00	; 0
    44cc:	2f ef       	ldi	r18, 0xFF	; 255
    44ce:	3f ef       	ldi	r19, 0xFF	; 255
    44d0:	a9 01       	movw	r20, r18
    44d2:	be 01       	movw	r22, r28
    44d4:	6f 5f       	subi	r22, 0xFF	; 255
    44d6:	7f 4f       	sbci	r23, 0xFF	; 255
    44d8:	80 91 20 17 	lds	r24, 0x1720	; 0x801720 <_soundQueue>
    44dc:	90 91 21 17 	lds	r25, 0x1721	; 0x801721 <_soundQueue+0x1>
    44e0:	0e 94 a9 06 	call	0xd52	; 0xd52 <xQueueGenericSend>
	xEventGroupSetBits(_doneEventGroup, BIT_SOUND_DONE);
    44e4:	48 e0       	ldi	r20, 0x08	; 8
    44e6:	50 e0       	ldi	r21, 0x00	; 0
    44e8:	60 e0       	ldi	r22, 0x00	; 0
    44ea:	70 e0       	ldi	r23, 0x00	; 0
    44ec:	80 91 1e 17 	lds	r24, 0x171E	; 0x80171e <_doneEventGroup>
    44f0:	90 91 1f 17 	lds	r25, 0x171F	; 0x80171f <_doneEventGroup+0x1>
    44f4:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <xEventGroupSetBits>
}
    44f8:	0f 90       	pop	r0
    44fa:	0f 90       	pop	r0
    44fc:	df 91       	pop	r29
    44fe:	cf 91       	pop	r28
    4500:	0f 91       	pop	r16
    4502:	ff 90       	pop	r15
    4504:	ef 90       	pop	r14
    4506:	df 90       	pop	r13
    4508:	cf 90       	pop	r12
    450a:	08 95       	ret

0000450c <_run>:

static void _run(void* params) {
	soundTask_initTask(params);
	
	while (1) {
		soundTask_runTask();
    450c:	c0 df       	rcall	.-128    	; 0x448e <soundTask_runTask>
    450e:	fe cf       	rjmp	.-4      	; 0x450c <_run>

00004510 <uplinkMessageBuilder_buildUplinkMessage>:
static int16_t _temperature;
static uint16_t _ppm;
static uint16_t _sound;
static int8_t _validationBits;

lora_driver_payload_t uplinkMessageBuilder_buildUplinkMessage(uint8_t port) {
    4510:	fc 01       	movw	r30, r24
	lora_driver_payload_t payload;
	
	payload.portNo = port;
    4512:	60 83       	st	Z, r22
	payload.len = 9;
    4514:	89 e0       	ldi	r24, 0x09	; 9
    4516:	81 83       	std	Z+1, r24	; 0x01
	
	payload.bytes[0] = _humidity >> 8;
    4518:	80 91 29 17 	lds	r24, 0x1729	; 0x801729 <_humidity>
    451c:	90 91 2a 17 	lds	r25, 0x172A	; 0x80172a <_humidity+0x1>
    4520:	92 83       	std	Z+2, r25	; 0x02
	payload.bytes[1] = _humidity & 0xFF;
    4522:	83 83       	std	Z+3, r24	; 0x03
	payload.bytes[2] = _temperature >> 8;
    4524:	80 91 27 17 	lds	r24, 0x1727	; 0x801727 <_temperature>
    4528:	90 91 28 17 	lds	r25, 0x1728	; 0x801728 <_temperature+0x1>
    452c:	94 83       	std	Z+4, r25	; 0x04
	payload.bytes[3] = _temperature & 0xFF;
    452e:	85 83       	std	Z+5, r24	; 0x05
	payload.bytes[4] = _ppm >> 8;
    4530:	80 91 25 17 	lds	r24, 0x1725	; 0x801725 <_ppm>
    4534:	90 91 26 17 	lds	r25, 0x1726	; 0x801726 <_ppm+0x1>
    4538:	96 83       	std	Z+6, r25	; 0x06
	payload.bytes[5] = _ppm & 0xFF;
    453a:	87 83       	std	Z+7, r24	; 0x07
	payload.bytes[6] = _sound >> 8;
    453c:	80 91 23 17 	lds	r24, 0x1723	; 0x801723 <_sound>
    4540:	90 91 24 17 	lds	r25, 0x1724	; 0x801724 <_sound+0x1>
    4544:	90 87       	std	Z+8, r25	; 0x08
	payload.bytes[7] = _sound & 0xFF;
    4546:	81 87       	std	Z+9, r24	; 0x09
	payload.bytes[8] = _validationBits;
    4548:	80 91 22 17 	lds	r24, 0x1722	; 0x801722 <_validationBits>
    454c:	82 87       	std	Z+10, r24	; 0x0a
	
	return payload;
}
    454e:	cf 01       	movw	r24, r30
    4550:	08 95       	ret

00004552 <uplinkMessageBuilder_setHumidityData>:

void uplinkMessageBuilder_setHumidityData(uint16_t data) {
	_humidity = data;
    4552:	90 93 2a 17 	sts	0x172A, r25	; 0x80172a <_humidity+0x1>
    4556:	80 93 29 17 	sts	0x1729, r24	; 0x801729 <_humidity>
	
	if (data == CONFIG_INVALID_HUMIDITY_VALUE) {
    455a:	80 3d       	cpi	r24, 0xD0	; 208
    455c:	97 40       	sbci	r25, 0x07	; 7
    455e:	29 f0       	breq	.+10     	; 0x456a <uplinkMessageBuilder_setHumidityData+0x18>
		_validationBits |= 0 << 3;
	} else {
		_validationBits |= 1 << 3;
    4560:	80 91 22 17 	lds	r24, 0x1722	; 0x801722 <_validationBits>
    4564:	88 60       	ori	r24, 0x08	; 8
    4566:	80 93 22 17 	sts	0x1722, r24	; 0x801722 <_validationBits>
    456a:	08 95       	ret

0000456c <uplinkMessageBuilder_setTemperatureData>:
	}
}

void uplinkMessageBuilder_setTemperatureData(int16_t data) {
	_temperature = data;
    456c:	90 93 28 17 	sts	0x1728, r25	; 0x801728 <_temperature+0x1>
    4570:	80 93 27 17 	sts	0x1727, r24	; 0x801727 <_temperature>
	
	if (data == CONFIG_INVALID_TEMPERATURE_VALUE) {
    4574:	88 31       	cpi	r24, 0x18	; 24
    4576:	9c 4f       	sbci	r25, 0xFC	; 252
    4578:	29 f0       	breq	.+10     	; 0x4584 <uplinkMessageBuilder_setTemperatureData+0x18>
		_validationBits |= 0 << 2;
	} else {
		_validationBits |= 1 << 2;
    457a:	80 91 22 17 	lds	r24, 0x1722	; 0x801722 <_validationBits>
    457e:	84 60       	ori	r24, 0x04	; 4
    4580:	80 93 22 17 	sts	0x1722, r24	; 0x801722 <_validationBits>
    4584:	08 95       	ret

00004586 <uplinkMessageBuilder_setCO2Data>:
	}
}

void uplinkMessageBuilder_setCO2Data(uint16_t data) {
	_ppm = data;
    4586:	90 93 26 17 	sts	0x1726, r25	; 0x801726 <_ppm+0x1>
    458a:	80 93 25 17 	sts	0x1725, r24	; 0x801725 <_ppm>
	
	if (data == CONFIG_INVALID_CO2_VALUE) {
    458e:	89 2b       	or	r24, r25
    4590:	29 f0       	breq	.+10     	; 0x459c <uplinkMessageBuilder_setCO2Data+0x16>
		_validationBits |= 0 << 1;
	} else {
		_validationBits |= 1 << 1;
    4592:	80 91 22 17 	lds	r24, 0x1722	; 0x801722 <_validationBits>
    4596:	82 60       	ori	r24, 0x02	; 2
    4598:	80 93 22 17 	sts	0x1722, r24	; 0x801722 <_validationBits>
    459c:	08 95       	ret

0000459e <uplinkMessageBuilder_setSoundData>:
	}
}

void uplinkMessageBuilder_setSoundData(uint16_t data) {
	_sound = data;
    459e:	90 93 24 17 	sts	0x1724, r25	; 0x801724 <_sound+0x1>
    45a2:	80 93 23 17 	sts	0x1723, r24	; 0x801723 <_sound>
	
	if (data == CONFIG_INVALID_SOUND_VALUE) {
    45a6:	89 2b       	or	r24, r25
    45a8:	29 f0       	breq	.+10     	; 0x45b4 <uplinkMessageBuilder_setSoundData+0x16>
		_validationBits |= 0 << 0;
	} else {
		_validationBits |= 1 << 0;
    45aa:	80 91 22 17 	lds	r24, 0x1722	; 0x801722 <_validationBits>
    45ae:	81 60       	ori	r24, 0x01	; 1
    45b0:	80 93 22 17 	sts	0x1722, r24	; 0x801722 <_validationBits>
    45b4:	08 95       	ret

000045b6 <uplinkMessageBuilder_setSystemErrorState>:
	}
}

void uplinkMessageBuilder_setSystemErrorState(){
	_validationBits = 0;
    45b6:	10 92 22 17 	sts	0x1722, r1	; 0x801722 <_validationBits>
    45ba:	08 95       	ret

000045bc <_hihTwiCallback>:
    45bc:	65 30       	cpi	r22, 0x05	; 5
    45be:	f1 f4       	brne	.+60     	; 0x45fc <_hihTwiCallback+0x40>
    45c0:	fa 01       	movw	r30, r20
    45c2:	80 81       	ld	r24, Z
    45c4:	8f 73       	andi	r24, 0x3F	; 63
    45c6:	90 e0       	ldi	r25, 0x00	; 0
    45c8:	98 2f       	mov	r25, r24
    45ca:	88 27       	eor	r24, r24
    45cc:	21 81       	ldd	r18, Z+1	; 0x01
    45ce:	82 2b       	or	r24, r18
    45d0:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    45d4:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    45d8:	82 81       	ldd	r24, Z+2	; 0x02
    45da:	f0 e4       	ldi	r31, 0x40	; 64
    45dc:	8f 9f       	mul	r24, r31
    45de:	c0 01       	movw	r24, r0
    45e0:	11 24       	eor	r1, r1
    45e2:	fa 01       	movw	r30, r20
    45e4:	23 81       	ldd	r18, Z+3	; 0x03
    45e6:	26 95       	lsr	r18
    45e8:	26 95       	lsr	r18
    45ea:	82 2b       	or	r24, r18
    45ec:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    45f0:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    45f4:	81 e0       	ldi	r24, 0x01	; 1
    45f6:	80 93 2b 17 	sts	0x172B, r24	; 0x80172b <_measuringIsReady>
    45fa:	08 95       	ret
    45fc:	64 30       	cpi	r22, 0x04	; 4
    45fe:	51 f0       	breq	.+20     	; 0x4614 <_hihTwiCallback+0x58>
    4600:	80 e0       	ldi	r24, 0x00	; 0
    4602:	90 e4       	ldi	r25, 0x40	; 64
    4604:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    4608:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    460c:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    4610:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    4614:	08 95       	ret

00004616 <hih8120_initialise>:
    4616:	0f 93       	push	r16
    4618:	1f 93       	push	r17
    461a:	0e ed       	ldi	r16, 0xDE	; 222
    461c:	12 e2       	ldi	r17, 0x22	; 34
    461e:	20 e0       	ldi	r18, 0x00	; 0
    4620:	34 e2       	ldi	r19, 0x24	; 36
    4622:	44 ef       	ldi	r20, 0xF4	; 244
    4624:	50 e0       	ldi	r21, 0x00	; 0
    4626:	60 e0       	ldi	r22, 0x00	; 0
    4628:	87 e2       	ldi	r24, 0x27	; 39
    462a:	0e 94 c3 2d 	call	0x5b86	; 0x5b86 <twiCreate>
    462e:	90 93 2d 17 	sts	0x172D, r25	; 0x80172d <_hih8120Handler+0x1>
    4632:	80 93 2c 17 	sts	0x172C, r24	; 0x80172c <_hih8120Handler>
    4636:	21 e0       	ldi	r18, 0x01	; 1
    4638:	89 2b       	or	r24, r25
    463a:	09 f0       	breq	.+2      	; 0x463e <hih8120_initialise+0x28>
    463c:	20 e0       	ldi	r18, 0x00	; 0
    463e:	82 2f       	mov	r24, r18
    4640:	1f 91       	pop	r17
    4642:	0f 91       	pop	r16
    4644:	08 95       	ret

00004646 <hih8120_wakeup>:
    4646:	80 91 2c 17 	lds	r24, 0x172C	; 0x80172c <_hih8120Handler>
    464a:	90 91 2d 17 	lds	r25, 0x172D	; 0x80172d <_hih8120Handler+0x1>
    464e:	00 97       	sbiw	r24, 0x00	; 0
    4650:	59 f0       	breq	.+22     	; 0x4668 <hih8120_wakeup+0x22>
    4652:	40 e0       	ldi	r20, 0x00	; 0
    4654:	60 e0       	ldi	r22, 0x00	; 0
    4656:	70 e0       	ldi	r23, 0x00	; 0
    4658:	0e 94 14 2e 	call	0x5c28	; 0x5c28 <twiTransmit>
    465c:	84 30       	cpi	r24, 0x04	; 4
    465e:	31 f4       	brne	.+12     	; 0x466c <hih8120_wakeup+0x26>
    4660:	10 92 2b 17 	sts	0x172B, r1	; 0x80172b <_measuringIsReady>
    4664:	80 e0       	ldi	r24, 0x00	; 0
    4666:	08 95       	ret
    4668:	82 e0       	ldi	r24, 0x02	; 2
    466a:	08 95       	ret
    466c:	83 e0       	ldi	r24, 0x03	; 3
    466e:	08 95       	ret

00004670 <hih8120_measure>:
    4670:	80 91 2c 17 	lds	r24, 0x172C	; 0x80172c <_hih8120Handler>
    4674:	90 91 2d 17 	lds	r25, 0x172D	; 0x80172d <_hih8120Handler+0x1>
    4678:	00 97       	sbiw	r24, 0x00	; 0
    467a:	39 f0       	breq	.+14     	; 0x468a <hih8120_measure+0x1a>
    467c:	64 e0       	ldi	r22, 0x04	; 4
    467e:	0e 94 60 2e 	call	0x5cc0	; 0x5cc0 <twiReceive>
    4682:	85 30       	cpi	r24, 0x05	; 5
    4684:	21 f0       	breq	.+8      	; 0x468e <hih8120_measure+0x1e>
    4686:	83 e0       	ldi	r24, 0x03	; 3
    4688:	08 95       	ret
    468a:	82 e0       	ldi	r24, 0x02	; 2
    468c:	08 95       	ret
    468e:	80 e0       	ldi	r24, 0x00	; 0
    4690:	08 95       	ret

00004692 <hih8120_getHumidity>:
    4692:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    4696:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    469a:	80 e0       	ldi	r24, 0x00	; 0
    469c:	90 e0       	ldi	r25, 0x00	; 0
    469e:	0e 94 6a 30 	call	0x60d4	; 0x60d4 <__floatunsisf>
    46a2:	20 e0       	ldi	r18, 0x00	; 0
    46a4:	30 e0       	ldi	r19, 0x00	; 0
    46a6:	48 ec       	ldi	r20, 0xC8	; 200
    46a8:	52 e4       	ldi	r21, 0x42	; 66
    46aa:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <__mulsf3>
    46ae:	20 e0       	ldi	r18, 0x00	; 0
    46b0:	38 ef       	ldi	r19, 0xF8	; 248
    46b2:	4f e7       	ldi	r20, 0x7F	; 127
    46b4:	56 e4       	ldi	r21, 0x46	; 70
    46b6:	0c 94 d1 2f 	jmp	0x5fa2	; 0x5fa2 <__divsf3>
    46ba:	08 95       	ret

000046bc <hih8120_getHumidityPercent_x10>:
    46bc:	ea df       	rcall	.-44     	; 0x4692 <hih8120_getHumidity>
    46be:	20 e0       	ldi	r18, 0x00	; 0
    46c0:	30 e0       	ldi	r19, 0x00	; 0
    46c2:	40 e2       	ldi	r20, 0x20	; 32
    46c4:	51 e4       	ldi	r21, 0x41	; 65
    46c6:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <__mulsf3>
    46ca:	0e 94 3e 30 	call	0x607c	; 0x607c <__fixunssfsi>
    46ce:	cb 01       	movw	r24, r22
    46d0:	08 95       	ret

000046d2 <hih8120_getTemperature>:
    46d2:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    46d6:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    46da:	80 e0       	ldi	r24, 0x00	; 0
    46dc:	90 e0       	ldi	r25, 0x00	; 0
    46de:	0e 94 6a 30 	call	0x60d4	; 0x60d4 <__floatunsisf>
    46e2:	20 e0       	ldi	r18, 0x00	; 0
    46e4:	30 e0       	ldi	r19, 0x00	; 0
    46e6:	45 e2       	ldi	r20, 0x25	; 37
    46e8:	53 e4       	ldi	r21, 0x43	; 67
    46ea:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <__mulsf3>
    46ee:	20 e0       	ldi	r18, 0x00	; 0
    46f0:	38 ef       	ldi	r19, 0xF8	; 248
    46f2:	4f e7       	ldi	r20, 0x7F	; 127
    46f4:	56 e4       	ldi	r21, 0x46	; 70
    46f6:	0e 94 d1 2f 	call	0x5fa2	; 0x5fa2 <__divsf3>
    46fa:	20 e0       	ldi	r18, 0x00	; 0
    46fc:	30 e0       	ldi	r19, 0x00	; 0
    46fe:	40 e2       	ldi	r20, 0x20	; 32
    4700:	52 e4       	ldi	r21, 0x42	; 66
    4702:	0c 94 6c 2f 	jmp	0x5ed8	; 0x5ed8 <__subsf3>
    4706:	08 95       	ret

00004708 <hih8120_getTemperature_x10>:
    4708:	e4 df       	rcall	.-56     	; 0x46d2 <hih8120_getTemperature>
    470a:	20 e0       	ldi	r18, 0x00	; 0
    470c:	30 e0       	ldi	r19, 0x00	; 0
    470e:	40 e2       	ldi	r20, 0x20	; 32
    4710:	51 e4       	ldi	r21, 0x41	; 65
    4712:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <__mulsf3>
    4716:	0e 94 39 30 	call	0x6072	; 0x6072 <__fixsfsi>
    471a:	cb 01       	movw	r24, r22
    471c:	08 95       	ret

0000471e <_serialCallBack>:
    471e:	0f 93       	push	r16
    4720:	1f 93       	push	r17
    4722:	cf 93       	push	r28
    4724:	df 93       	push	r29
    4726:	1f 92       	push	r1
    4728:	1f 92       	push	r1
    472a:	cd b7       	in	r28, 0x3d	; 61
    472c:	de b7       	in	r29, 0x3e	; 62
    472e:	8c 01       	movw	r16, r24
    4730:	19 82       	std	Y+1, r1	; 0x01
    4732:	2d c0       	rjmp	.+90     	; 0x478e <_serialCallBack+0x70>
    4734:	e0 91 65 17 	lds	r30, 0x1765	; 0x801765 <rec_buf_inp.2878>
    4738:	ec 32       	cpi	r30, 0x2C	; 44
    473a:	50 f4       	brcc	.+20     	; 0x4750 <_serialCallBack+0x32>
    473c:	81 e0       	ldi	r24, 0x01	; 1
    473e:	8e 0f       	add	r24, r30
    4740:	80 93 65 17 	sts	0x1765, r24	; 0x801765 <rec_buf_inp.2878>
    4744:	f0 e0       	ldi	r31, 0x00	; 0
    4746:	e9 56       	subi	r30, 0x69	; 105
    4748:	f8 4e       	sbci	r31, 0xE8	; 232
    474a:	8a 81       	ldd	r24, Y+2	; 0x02
    474c:	80 83       	st	Z, r24
    474e:	02 c0       	rjmp	.+4      	; 0x4754 <_serialCallBack+0x36>
    4750:	10 92 65 17 	sts	0x1765, r1	; 0x801765 <rec_buf_inp.2878>
    4754:	8a 81       	ldd	r24, Y+2	; 0x02
    4756:	8a 30       	cpi	r24, 0x0A	; 10
    4758:	d1 f4       	brne	.+52     	; 0x478e <_serialCallBack+0x70>
    475a:	40 91 65 17 	lds	r20, 0x1765	; 0x801765 <rec_buf_inp.2878>
    475e:	50 e0       	ldi	r21, 0x00	; 0
    4760:	fa 01       	movw	r30, r20
    4762:	eb 56       	subi	r30, 0x6B	; 107
    4764:	f8 4e       	sbci	r31, 0xE8	; 232
    4766:	10 82       	st	Z, r1
    4768:	41 50       	subi	r20, 0x01	; 1
    476a:	51 09       	sbc	r21, r1
    476c:	9e 01       	movw	r18, r28
    476e:	2f 5f       	subi	r18, 0xFF	; 255
    4770:	3f 4f       	sbci	r19, 0xFF	; 255
    4772:	67 e9       	ldi	r22, 0x97	; 151
    4774:	77 e1       	ldi	r23, 0x17	; 23
    4776:	80 91 68 17 	lds	r24, 0x1768	; 0x801768 <_serialReplyBufferHandle>
    477a:	90 91 69 17 	lds	r25, 0x1769	; 0x801769 <_serialReplyBufferHandle+0x1>
    477e:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <xStreamBufferSendFromISR>
    4782:	89 81       	ldd	r24, Y+1	; 0x01
    4784:	81 11       	cpse	r24, r1
    4786:	0e 94 91 04 	call	0x922	; 0x922 <vPortYield>
    478a:	10 92 65 17 	sts	0x1765, r1	; 0x801765 <rec_buf_inp.2878>
    478e:	be 01       	movw	r22, r28
    4790:	6e 5f       	subi	r22, 0xFE	; 254
    4792:	7f 4f       	sbci	r23, 0xFF	; 255
    4794:	c8 01       	movw	r24, r16
    4796:	97 d6       	rcall	.+3374   	; 0x54c6 <serial_getByte>
    4798:	88 23       	and	r24, r24
    479a:	61 f2       	breq	.-104    	; 0x4734 <_serialCallBack+0x16>
    479c:	0f 90       	pop	r0
    479e:	0f 90       	pop	r0
    47a0:	df 91       	pop	r29
    47a2:	cf 91       	pop	r28
    47a4:	1f 91       	pop	r17
    47a6:	0f 91       	pop	r16
    47a8:	08 95       	ret

000047aa <_uploadMessage>:
    47aa:	0f 93       	push	r16
    47ac:	1f 93       	push	r17
    47ae:	cf 93       	push	r28
    47b0:	df 93       	push	r29
    47b2:	8c 01       	movw	r16, r24
    47b4:	eb 01       	movw	r28, r22
    47b6:	80 91 68 17 	lds	r24, 0x1768	; 0x801768 <_serialReplyBufferHandle>
    47ba:	90 91 69 17 	lds	r25, 0x1769	; 0x801769 <_serialReplyBufferHandle+0x1>
    47be:	0e 94 65 0a 	call	0x14ca	; 0x14ca <xStreamBufferReset>
    47c2:	b8 01       	movw	r22, r16
    47c4:	8e e2       	ldi	r24, 0x2E	; 46
    47c6:	97 e1       	ldi	r25, 0x17	; 23
    47c8:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <strcpy>
    47cc:	20 97       	sbiw	r28, 0x00	; 0
    47ce:	79 f0       	breq	.+30     	; 0x47ee <_uploadMessage+0x44>
    47d0:	ee e2       	ldi	r30, 0x2E	; 46
    47d2:	f7 e1       	ldi	r31, 0x17	; 23
    47d4:	01 90       	ld	r0, Z+
    47d6:	00 20       	and	r0, r0
    47d8:	e9 f7       	brne	.-6      	; 0x47d4 <_uploadMessage+0x2a>
    47da:	31 97       	sbiw	r30, 0x01	; 1
    47dc:	80 e2       	ldi	r24, 0x20	; 32
    47de:	90 e0       	ldi	r25, 0x00	; 0
    47e0:	91 83       	std	Z+1, r25	; 0x01
    47e2:	80 83       	st	Z, r24
    47e4:	be 01       	movw	r22, r28
    47e6:	8e e2       	ldi	r24, 0x2E	; 46
    47e8:	97 e1       	ldi	r25, 0x17	; 23
    47ea:	0e 94 df 32 	call	0x65be	; 0x65be <strcat>
    47ee:	ee e2       	ldi	r30, 0x2E	; 46
    47f0:	f7 e1       	ldi	r31, 0x17	; 23
    47f2:	df 01       	movw	r26, r30
    47f4:	0d 90       	ld	r0, X+
    47f6:	00 20       	and	r0, r0
    47f8:	e9 f7       	brne	.-6      	; 0x47f4 <_uploadMessage+0x4a>
    47fa:	11 97       	sbiw	r26, 0x01	; 1
    47fc:	8d e0       	ldi	r24, 0x0D	; 13
    47fe:	9a e0       	ldi	r25, 0x0A	; 10
    4800:	11 96       	adiw	r26, 0x01	; 1
    4802:	9c 93       	st	X, r25
    4804:	8e 93       	st	-X, r24
    4806:	12 96       	adiw	r26, 0x02	; 2
    4808:	1c 92       	st	X, r1
    480a:	01 90       	ld	r0, Z+
    480c:	00 20       	and	r0, r0
    480e:	e9 f7       	brne	.-6      	; 0x480a <_uploadMessage+0x60>
    4810:	31 97       	sbiw	r30, 0x01	; 1
    4812:	ee 52       	subi	r30, 0x2E	; 46
    4814:	f7 41       	sbci	r31, 0x17	; 23
    4816:	ae 2f       	mov	r26, r30
    4818:	8e e2       	ldi	r24, 0x2E	; 46
    481a:	97 e1       	ldi	r25, 0x17	; 23
    481c:	ac 01       	movw	r20, r24
    481e:	6a 2f       	mov	r22, r26
    4820:	80 91 6a 17 	lds	r24, 0x176A	; 0x80176a <_rn2483_serial>
    4824:	90 91 6b 17 	lds	r25, 0x176B	; 0x80176b <_rn2483_serial+0x1>
    4828:	f9 d5       	rcall	.+3058   	; 0x541c <serial_sendBytes>
    482a:	81 11       	cpse	r24, r1
    482c:	11 c0       	rjmp	.+34     	; 0x4850 <_uploadMessage+0xa6>
    482e:	08 e2       	ldi	r16, 0x28	; 40
    4830:	15 e0       	ldi	r17, 0x05	; 5
    4832:	20 e0       	ldi	r18, 0x00	; 0
    4834:	30 e0       	ldi	r19, 0x00	; 0
    4836:	4d e2       	ldi	r20, 0x2D	; 45
    4838:	50 e0       	ldi	r21, 0x00	; 0
    483a:	61 ef       	ldi	r22, 0xF1	; 241
    483c:	77 e1       	ldi	r23, 0x17	; 23
    483e:	80 91 68 17 	lds	r24, 0x1768	; 0x801768 <_serialReplyBufferHandle>
    4842:	90 91 69 17 	lds	r25, 0x1769	; 0x801769 <_serialReplyBufferHandle+0x1>
    4846:	0e 94 9e 0b 	call	0x173c	; 0x173c <xStreamBufferReceive>
    484a:	81 ef       	ldi	r24, 0xF1	; 241
    484c:	97 e1       	ldi	r25, 0x17	; 23
    484e:	02 c0       	rjmp	.+4      	; 0x4854 <_uploadMessage+0xaa>
    4850:	80 e0       	ldi	r24, 0x00	; 0
    4852:	90 e0       	ldi	r25, 0x00	; 0
    4854:	df 91       	pop	r29
    4856:	cf 91       	pop	r28
    4858:	1f 91       	pop	r17
    485a:	0f 91       	pop	r16
    485c:	08 95       	ret

0000485e <_reply2ReturnCode>:
    485e:	2f 92       	push	r2
    4860:	3f 92       	push	r3
    4862:	4f 92       	push	r4
    4864:	5f 92       	push	r5
    4866:	6f 92       	push	r6
    4868:	7f 92       	push	r7
    486a:	8f 92       	push	r8
    486c:	9f 92       	push	r9
    486e:	af 92       	push	r10
    4870:	bf 92       	push	r11
    4872:	cf 92       	push	r12
    4874:	df 92       	push	r13
    4876:	ef 92       	push	r14
    4878:	ff 92       	push	r15
    487a:	0f 93       	push	r16
    487c:	1f 93       	push	r17
    487e:	cf 93       	push	r28
    4880:	df 93       	push	r29
    4882:	5c 01       	movw	r10, r24
    4884:	fc 01       	movw	r30, r24
    4886:	01 90       	ld	r0, Z+
    4888:	00 20       	and	r0, r0
    488a:	e9 f7       	brne	.-6      	; 0x4886 <_reply2ReturnCode+0x28>
    488c:	31 97       	sbiw	r30, 0x01	; 1
    488e:	6f 01       	movw	r12, r30
    4890:	c8 1a       	sub	r12, r24
    4892:	d9 0a       	sbc	r13, r25
    4894:	5c 2c       	mov	r5, r12
    4896:	0f 2e       	mov	r0, r31
    4898:	f1 e0       	ldi	r31, 0x01	; 1
    489a:	8f 2e       	mov	r8, r31
    489c:	f8 e0       	ldi	r31, 0x08	; 8
    489e:	9f 2e       	mov	r9, r31
    48a0:	f0 2d       	mov	r31, r0
    48a2:	e1 2c       	mov	r14, r1
    48a4:	f1 2c       	mov	r15, r1
    48a6:	4c 2c       	mov	r4, r12
    48a8:	37 01       	movw	r6, r14
    48aa:	f4 01       	movw	r30, r8
    48ac:	01 81       	ldd	r16, Z+1	; 0x01
    48ae:	12 81       	ldd	r17, Z+2	; 0x02
    48b0:	e8 01       	movw	r28, r16
    48b2:	09 90       	ld	r0, Y+
    48b4:	00 20       	and	r0, r0
    48b6:	e9 f7       	brne	.-6      	; 0x48b2 <_reply2ReturnCode+0x54>
    48b8:	21 97       	sbiw	r28, 0x01	; 1
    48ba:	c0 1b       	sub	r28, r16
    48bc:	d1 0b       	sbc	r29, r17
    48be:	3c 2e       	mov	r3, r28
    48c0:	f9 e0       	ldi	r31, 0x09	; 9
    48c2:	cf 16       	cp	r12, r31
    48c4:	d1 04       	cpc	r13, r1
    48c6:	58 f0       	brcs	.+22     	; 0x48de <_reply2ReturnCode+0x80>
    48c8:	f4 01       	movw	r30, r8
    48ca:	20 80       	ld	r2, Z
    48cc:	fe e0       	ldi	r31, 0x0E	; 14
    48ce:	2f 12       	cpse	r2, r31
    48d0:	06 c0       	rjmp	.+12     	; 0x48de <_reply2ReturnCode+0x80>
    48d2:	b8 01       	movw	r22, r16
    48d4:	c5 01       	movw	r24, r10
    48d6:	0e 94 ba 32 	call	0x6574	; 0x6574 <strcasestr>
    48da:	89 2b       	or	r24, r25
    48dc:	09 f5       	brne	.+66     	; 0x4920 <_reply2ReturnCode+0xc2>
    48de:	44 2d       	mov	r20, r4
    48e0:	35 14       	cp	r3, r5
    48e2:	08 f4       	brcc	.+2      	; 0x48e6 <_reply2ReturnCode+0x88>
    48e4:	4c 2f       	mov	r20, r28
    48e6:	50 e0       	ldi	r21, 0x00	; 0
    48e8:	b8 01       	movw	r22, r16
    48ea:	c5 01       	movw	r24, r10
    48ec:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <strncasecmp>
    48f0:	89 2b       	or	r24, r25
    48f2:	49 f4       	brne	.+18     	; 0x4906 <_reply2ReturnCode+0xa8>
    48f4:	f3 01       	movw	r30, r6
    48f6:	ee 0f       	add	r30, r30
    48f8:	ff 1f       	adc	r31, r31
    48fa:	e6 0d       	add	r30, r6
    48fc:	f7 1d       	adc	r31, r7
    48fe:	ef 5f       	subi	r30, 0xFF	; 255
    4900:	f7 4f       	sbci	r31, 0xF7	; 247
    4902:	20 80       	ld	r2, Z
    4904:	0d c0       	rjmp	.+26     	; 0x4920 <_reply2ReturnCode+0xc2>
    4906:	8f ef       	ldi	r24, 0xFF	; 255
    4908:	e8 1a       	sub	r14, r24
    490a:	f8 0a       	sbc	r15, r24
    490c:	e3 e0       	ldi	r30, 0x03	; 3
    490e:	8e 0e       	add	r8, r30
    4910:	91 1c       	adc	r9, r1
    4912:	f1 e1       	ldi	r31, 0x11	; 17
    4914:	ef 16       	cp	r14, r31
    4916:	f1 04       	cpc	r15, r1
    4918:	39 f6       	brne	.-114    	; 0x48a8 <_reply2ReturnCode+0x4a>
    491a:	68 94       	set
    491c:	22 24       	eor	r2, r2
    491e:	24 f8       	bld	r2, 4
    4920:	82 2d       	mov	r24, r2
    4922:	df 91       	pop	r29
    4924:	cf 91       	pop	r28
    4926:	1f 91       	pop	r17
    4928:	0f 91       	pop	r16
    492a:	ff 90       	pop	r15
    492c:	ef 90       	pop	r14
    492e:	df 90       	pop	r13
    4930:	cf 90       	pop	r12
    4932:	bf 90       	pop	r11
    4934:	af 90       	pop	r10
    4936:	9f 90       	pop	r9
    4938:	8f 90       	pop	r8
    493a:	7f 90       	pop	r7
    493c:	6f 90       	pop	r6
    493e:	5f 90       	pop	r5
    4940:	4f 90       	pop	r4
    4942:	3f 90       	pop	r3
    4944:	2f 90       	pop	r2
    4946:	08 95       	ret

00004948 <_uploadMessageRc>:
    4948:	30 df       	rcall	.-416    	; 0x47aa <_uploadMessage>
    494a:	89 cf       	rjmp	.-238    	; 0x485e <_reply2ReturnCode>
    494c:	08 95       	ret

0000494e <lora_driver_flushBuffers>:
    494e:	80 91 68 17 	lds	r24, 0x1768	; 0x801768 <_serialReplyBufferHandle>
    4952:	90 91 69 17 	lds	r25, 0x1769	; 0x801769 <_serialReplyBufferHandle+0x1>
    4956:	0c 94 65 0a 	jmp	0x14ca	; 0x14ca <xStreamBufferReset>
    495a:	08 95       	ret

0000495c <lora_driver_initialise>:
    495c:	8f 92       	push	r8
    495e:	9f 92       	push	r9
    4960:	af 92       	push	r10
    4962:	cf 92       	push	r12
    4964:	ef 92       	push	r14
    4966:	0f 93       	push	r16
    4968:	1f 93       	push	r17
    496a:	cf 93       	push	r28
    496c:	c8 2f       	mov	r28, r24
    496e:	8b 01       	movw	r16, r22
    4970:	41 e0       	ldi	r20, 0x01	; 1
    4972:	60 e0       	ldi	r22, 0x00	; 0
    4974:	70 e0       	ldi	r23, 0x00	; 0
    4976:	88 ec       	ldi	r24, 0xC8	; 200
    4978:	90 e0       	ldi	r25, 0x00	; 0
    497a:	0e 94 33 0a 	call	0x1466	; 0x1466 <xStreamBufferGenericCreate>
    497e:	90 93 69 17 	sts	0x1769, r25	; 0x801769 <_serialReplyBufferHandle+0x1>
    4982:	80 93 68 17 	sts	0x1768, r24	; 0x801768 <_serialReplyBufferHandle>
    4986:	10 93 67 17 	sts	0x1767, r17	; 0x801767 <_downlinkMessageBuffer+0x1>
    498a:	00 93 66 17 	sts	0x1766, r16	; 0x801766 <_downlinkMessageBuffer>
    498e:	0f 2e       	mov	r0, r31
    4990:	ff e8       	ldi	r31, 0x8F	; 143
    4992:	8f 2e       	mov	r8, r31
    4994:	f3 e2       	ldi	r31, 0x23	; 35
    4996:	9f 2e       	mov	r9, r31
    4998:	f0 2d       	mov	r31, r0
    499a:	68 94       	set
    499c:	aa 24       	eor	r10, r10
    499e:	a6 f8       	bld	r10, 6
    49a0:	68 94       	set
    49a2:	cc 24       	eor	r12, r12
    49a4:	c6 f8       	bld	r12, 6
    49a6:	e1 2c       	mov	r14, r1
    49a8:	00 e0       	ldi	r16, 0x00	; 0
    49aa:	23 e0       	ldi	r18, 0x03	; 3
    49ac:	40 e0       	ldi	r20, 0x00	; 0
    49ae:	51 ee       	ldi	r21, 0xE1	; 225
    49b0:	60 e0       	ldi	r22, 0x00	; 0
    49b2:	70 e0       	ldi	r23, 0x00	; 0
    49b4:	8c 2f       	mov	r24, r28
    49b6:	68 d4       	rcall	.+2256   	; 0x5288 <serial_create>
    49b8:	90 93 6b 17 	sts	0x176B, r25	; 0x80176b <_rn2483_serial+0x1>
    49bc:	80 93 6a 17 	sts	0x176A, r24	; 0x80176a <_rn2483_serial>
    49c0:	e7 e0       	ldi	r30, 0x07	; 7
    49c2:	f1 e0       	ldi	r31, 0x01	; 1
    49c4:	80 81       	ld	r24, Z
    49c6:	80 61       	ori	r24, 0x10	; 16
    49c8:	80 83       	st	Z, r24
    49ca:	cf 91       	pop	r28
    49cc:	1f 91       	pop	r17
    49ce:	0f 91       	pop	r16
    49d0:	ef 90       	pop	r14
    49d2:	cf 90       	pop	r12
    49d4:	af 90       	pop	r10
    49d6:	9f 90       	pop	r9
    49d8:	8f 90       	pop	r8
    49da:	08 95       	ret

000049dc <lora_driver_resetRn2483>:
    49dc:	88 23       	and	r24, r24
    49de:	31 f0       	breq	.+12     	; 0x49ec <lora_driver_resetRn2483+0x10>
    49e0:	e8 e0       	ldi	r30, 0x08	; 8
    49e2:	f1 e0       	ldi	r31, 0x01	; 1
    49e4:	80 81       	ld	r24, Z
    49e6:	8f 7e       	andi	r24, 0xEF	; 239
    49e8:	80 83       	st	Z, r24
    49ea:	08 95       	ret
    49ec:	e8 e0       	ldi	r30, 0x08	; 8
    49ee:	f1 e0       	ldi	r31, 0x01	; 1
    49f0:	80 81       	ld	r24, Z
    49f2:	80 61       	ori	r24, 0x10	; 16
    49f4:	80 83       	st	Z, r24
    49f6:	08 95       	ret

000049f8 <lora_driver_rn2483FactoryReset>:
    49f8:	60 e0       	ldi	r22, 0x00	; 0
    49fa:	70 e0       	ldi	r23, 0x00	; 0
    49fc:	87 e8       	ldi	r24, 0x87	; 135
    49fe:	95 e0       	ldi	r25, 0x05	; 5
    4a00:	d4 de       	rcall	.-600    	; 0x47aa <_uploadMessage>
    4a02:	e1 ef       	ldi	r30, 0xF1	; 241
    4a04:	f7 e1       	ldi	r31, 0x17	; 23
    4a06:	01 90       	ld	r0, Z+
    4a08:	00 20       	and	r0, r0
    4a0a:	e9 f7       	brne	.-6      	; 0x4a06 <lora_driver_rn2483FactoryReset+0xe>
    4a0c:	31 97       	sbiw	r30, 0x01	; 1
    4a0e:	e1 5f       	subi	r30, 0xF1	; 241
    4a10:	f7 41       	sbci	r31, 0x17	; 23
    4a12:	81 e0       	ldi	r24, 0x01	; 1
    4a14:	75 97       	sbiw	r30, 0x15	; 21
    4a16:	08 f0       	brcs	.+2      	; 0x4a1a <lora_driver_rn2483FactoryReset+0x22>
    4a18:	80 e0       	ldi	r24, 0x00	; 0
    4a1a:	08 95       	ret

00004a1c <lora_driver_getRn2483Hweui>:
    4a1c:	cf 93       	push	r28
    4a1e:	df 93       	push	r29
    4a20:	ec 01       	movw	r28, r24
    4a22:	60 e0       	ldi	r22, 0x00	; 0
    4a24:	70 e0       	ldi	r23, 0x00	; 0
    4a26:	88 e9       	ldi	r24, 0x98	; 152
    4a28:	95 e0       	ldi	r25, 0x05	; 5
    4a2a:	bf de       	rcall	.-642    	; 0x47aa <_uploadMessage>
    4a2c:	e1 ef       	ldi	r30, 0xF1	; 241
    4a2e:	f7 e1       	ldi	r31, 0x17	; 23
    4a30:	01 90       	ld	r0, Z+
    4a32:	00 20       	and	r0, r0
    4a34:	e9 f7       	brne	.-6      	; 0x4a30 <lora_driver_getRn2483Hweui+0x14>
    4a36:	e2 50       	subi	r30, 0x02	; 2
    4a38:	f8 41       	sbci	r31, 0x18	; 24
    4a3a:	39 f4       	brne	.+14     	; 0x4a4a <lora_driver_getRn2483Hweui+0x2e>
    4a3c:	61 ef       	ldi	r22, 0xF1	; 241
    4a3e:	77 e1       	ldi	r23, 0x17	; 23
    4a40:	ce 01       	movw	r24, r28
    4a42:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <strcpy>
    4a46:	80 e0       	ldi	r24, 0x00	; 0
    4a48:	02 c0       	rjmp	.+4      	; 0x4a4e <lora_driver_getRn2483Hweui+0x32>
    4a4a:	18 82       	st	Y, r1
    4a4c:	81 e0       	ldi	r24, 0x01	; 1
    4a4e:	df 91       	pop	r29
    4a50:	cf 91       	pop	r28
    4a52:	08 95       	ret

00004a54 <lora_driver_setDeviceIdentifier>:
    4a54:	fc 01       	movw	r30, r24
    4a56:	01 90       	ld	r0, Z+
    4a58:	00 20       	and	r0, r0
    4a5a:	e9 f7       	brne	.-6      	; 0x4a56 <lora_driver_setDeviceIdentifier+0x2>
    4a5c:	9f 01       	movw	r18, r30
    4a5e:	21 51       	subi	r18, 0x11	; 17
    4a60:	31 09       	sbc	r19, r1
    4a62:	28 17       	cp	r18, r24
    4a64:	39 07       	cpc	r19, r25
    4a66:	29 f4       	brne	.+10     	; 0x4a72 <lora_driver_setDeviceIdentifier+0x1e>
    4a68:	bc 01       	movw	r22, r24
    4a6a:	86 ec       	ldi	r24, 0xC6	; 198
    4a6c:	95 e0       	ldi	r25, 0x05	; 5
    4a6e:	6c cf       	rjmp	.-296    	; 0x4948 <_uploadMessageRc>
    4a70:	08 95       	ret
    4a72:	89 e0       	ldi	r24, 0x09	; 9
    4a74:	08 95       	ret

00004a76 <lora_driver_setApplicationIdentifier>:
    4a76:	fc 01       	movw	r30, r24
    4a78:	01 90       	ld	r0, Z+
    4a7a:	00 20       	and	r0, r0
    4a7c:	e9 f7       	brne	.-6      	; 0x4a78 <lora_driver_setApplicationIdentifier+0x2>
    4a7e:	9f 01       	movw	r18, r30
    4a80:	21 51       	subi	r18, 0x11	; 17
    4a82:	31 09       	sbc	r19, r1
    4a84:	28 17       	cp	r18, r24
    4a86:	39 07       	cpc	r19, r25
    4a88:	29 f4       	brne	.+10     	; 0x4a94 <lora_driver_setApplicationIdentifier+0x1e>
    4a8a:	bc 01       	movw	r22, r24
    4a8c:	85 ed       	ldi	r24, 0xD5	; 213
    4a8e:	95 e0       	ldi	r25, 0x05	; 5
    4a90:	5b cf       	rjmp	.-330    	; 0x4948 <_uploadMessageRc>
    4a92:	08 95       	ret
    4a94:	89 e0       	ldi	r24, 0x09	; 9
    4a96:	08 95       	ret

00004a98 <lora_driver_setApplicationKey>:
    4a98:	fc 01       	movw	r30, r24
    4a9a:	01 90       	ld	r0, Z+
    4a9c:	00 20       	and	r0, r0
    4a9e:	e9 f7       	brne	.-6      	; 0x4a9a <lora_driver_setApplicationKey+0x2>
    4aa0:	9f 01       	movw	r18, r30
    4aa2:	21 52       	subi	r18, 0x21	; 33
    4aa4:	31 09       	sbc	r19, r1
    4aa6:	28 17       	cp	r18, r24
    4aa8:	39 07       	cpc	r19, r25
    4aaa:	29 f4       	brne	.+10     	; 0x4ab6 <lora_driver_setApplicationKey+0x1e>
    4aac:	bc 01       	movw	r22, r24
    4aae:	84 ee       	ldi	r24, 0xE4	; 228
    4ab0:	95 e0       	ldi	r25, 0x05	; 5
    4ab2:	4a cf       	rjmp	.-364    	; 0x4948 <_uploadMessageRc>
    4ab4:	08 95       	ret
    4ab6:	89 e0       	ldi	r24, 0x09	; 9
    4ab8:	08 95       	ret

00004aba <lora_driver_saveMac>:
    4aba:	60 e0       	ldi	r22, 0x00	; 0
    4abc:	70 e0       	ldi	r23, 0x00	; 0
    4abe:	83 e2       	ldi	r24, 0x23	; 35
    4ac0:	96 e0       	ldi	r25, 0x06	; 6
    4ac2:	42 cf       	rjmp	.-380    	; 0x4948 <_uploadMessageRc>
    4ac4:	08 95       	ret

00004ac6 <lora_driver_join>:
    4ac6:	0f 93       	push	r16
    4ac8:	1f 93       	push	r17
    4aca:	e8 2f       	mov	r30, r24
    4acc:	f0 e0       	ldi	r31, 0x00	; 0
    4ace:	ee 0f       	add	r30, r30
    4ad0:	ff 1f       	adc	r31, r31
    4ad2:	e3 50       	subi	r30, 0x03	; 3
    4ad4:	f8 4f       	sbci	r31, 0xF8	; 248
    4ad6:	60 81       	ld	r22, Z
    4ad8:	71 81       	ldd	r23, Z+1	; 0x01
    4ada:	8c e2       	ldi	r24, 0x2C	; 44
    4adc:	96 e0       	ldi	r25, 0x06	; 6
    4ade:	34 df       	rcall	.-408    	; 0x4948 <_uploadMessageRc>
    4ae0:	81 11       	cpse	r24, r1
    4ae2:	14 c0       	rjmp	.+40     	; 0x4b0c <lora_driver_join+0x46>
    4ae4:	08 e2       	ldi	r16, 0x28	; 40
    4ae6:	15 e0       	ldi	r17, 0x05	; 5
    4ae8:	20 e0       	ldi	r18, 0x00	; 0
    4aea:	30 e0       	ldi	r19, 0x00	; 0
    4aec:	4d e2       	ldi	r20, 0x2D	; 45
    4aee:	50 e0       	ldi	r21, 0x00	; 0
    4af0:	61 ef       	ldi	r22, 0xF1	; 241
    4af2:	77 e1       	ldi	r23, 0x17	; 23
    4af4:	80 91 68 17 	lds	r24, 0x1768	; 0x801768 <_serialReplyBufferHandle>
    4af8:	90 91 69 17 	lds	r25, 0x1769	; 0x801769 <_serialReplyBufferHandle+0x1>
    4afc:	0e 94 9e 0b 	call	0x173c	; 0x173c <xStreamBufferReceive>
    4b00:	88 23       	and	r24, r24
    4b02:	21 f0       	breq	.+8      	; 0x4b0c <lora_driver_join+0x46>
    4b04:	81 ef       	ldi	r24, 0xF1	; 241
    4b06:	97 e1       	ldi	r25, 0x17	; 23
    4b08:	aa de       	rcall	.-684    	; 0x485e <_reply2ReturnCode>
    4b0a:	03 c0       	rjmp	.+6      	; 0x4b12 <lora_driver_join+0x4c>
    4b0c:	81 ef       	ldi	r24, 0xF1	; 241
    4b0e:	97 e1       	ldi	r25, 0x17	; 23
    4b10:	a6 de       	rcall	.-692    	; 0x485e <_reply2ReturnCode>
    4b12:	1f 91       	pop	r17
    4b14:	0f 91       	pop	r16
    4b16:	08 95       	ret

00004b18 <lora_driver_sendUploadMessage>:
    4b18:	0f 93       	push	r16
    4b1a:	1f 93       	push	r17
    4b1c:	cf 93       	push	r28
    4b1e:	df 93       	push	r29
    4b20:	1f 92       	push	r1
    4b22:	cd b7       	in	r28, 0x3d	; 61
    4b24:	de b7       	in	r29, 0x3e	; 62
    4b26:	db 01       	movw	r26, r22
    4b28:	11 96       	adiw	r26, 0x01	; 1
    4b2a:	9c 91       	ld	r25, X
    4b2c:	11 97       	sbiw	r26, 0x01	; 1
    4b2e:	95 31       	cpi	r25, 0x15	; 21
    4b30:	08 f0       	brcs	.+2      	; 0x4b34 <lora_driver_sendUploadMessage+0x1c>
    4b32:	b4 c0       	rjmp	.+360    	; 0x4c9c <lora_driver_sendUploadMessage+0x184>
    4b34:	99 23       	and	r25, r25
    4b36:	81 f1       	breq	.+96     	; 0x4b98 <lora_driver_sendUploadMessage+0x80>
    4b38:	60 e0       	ldi	r22, 0x00	; 0
    4b3a:	70 e0       	ldi	r23, 0x00	; 0
    4b3c:	27 2f       	mov	r18, r23
    4b3e:	30 e0       	ldi	r19, 0x00	; 0
    4b40:	46 2f       	mov	r20, r22
    4b42:	50 e0       	ldi	r21, 0x00	; 0
    4b44:	fd 01       	movw	r30, r26
    4b46:	e4 0f       	add	r30, r20
    4b48:	f5 1f       	adc	r31, r21
    4b4a:	92 81       	ldd	r25, Z+2	; 0x02
    4b4c:	92 95       	swap	r25
    4b4e:	9f 70       	andi	r25, 0x0F	; 15
    4b50:	9a 30       	cpi	r25, 0x0A	; 10
    4b52:	10 f0       	brcs	.+4      	; 0x4b58 <lora_driver_sendUploadMessage+0x40>
    4b54:	99 5c       	subi	r25, 0xC9	; 201
    4b56:	01 c0       	rjmp	.+2      	; 0x4b5a <lora_driver_sendUploadMessage+0x42>
    4b58:	90 5d       	subi	r25, 0xD0	; 208
    4b5a:	f9 01       	movw	r30, r18
    4b5c:	ee 57       	subi	r30, 0x7E	; 126
    4b5e:	f8 4e       	sbci	r31, 0xE8	; 232
    4b60:	90 83       	st	Z, r25
    4b62:	2f 5f       	subi	r18, 0xFF	; 255
    4b64:	3f 4f       	sbci	r19, 0xFF	; 255
    4b66:	fd 01       	movw	r30, r26
    4b68:	e4 0f       	add	r30, r20
    4b6a:	f5 1f       	adc	r31, r21
    4b6c:	92 81       	ldd	r25, Z+2	; 0x02
    4b6e:	9f 70       	andi	r25, 0x0F	; 15
    4b70:	49 2f       	mov	r20, r25
    4b72:	50 e0       	ldi	r21, 0x00	; 0
    4b74:	4a 30       	cpi	r20, 0x0A	; 10
    4b76:	51 05       	cpc	r21, r1
    4b78:	14 f0       	brlt	.+4      	; 0x4b7e <lora_driver_sendUploadMessage+0x66>
    4b7a:	99 5c       	subi	r25, 0xC9	; 201
    4b7c:	01 c0       	rjmp	.+2      	; 0x4b80 <lora_driver_sendUploadMessage+0x68>
    4b7e:	90 5d       	subi	r25, 0xD0	; 208
    4b80:	f9 01       	movw	r30, r18
    4b82:	ee 57       	subi	r30, 0x7E	; 126
    4b84:	f8 4e       	sbci	r31, 0xE8	; 232
    4b86:	90 83       	st	Z, r25
    4b88:	7e 5f       	subi	r23, 0xFE	; 254
    4b8a:	6f 5f       	subi	r22, 0xFF	; 255
    4b8c:	11 96       	adiw	r26, 0x01	; 1
    4b8e:	9c 91       	ld	r25, X
    4b90:	11 97       	sbiw	r26, 0x01	; 1
    4b92:	69 17       	cp	r22, r25
    4b94:	98 f2       	brcs	.-90     	; 0x4b3c <lora_driver_sendUploadMessage+0x24>
    4b96:	01 c0       	rjmp	.+2      	; 0x4b9a <lora_driver_sendUploadMessage+0x82>
    4b98:	70 e0       	ldi	r23, 0x00	; 0
    4b9a:	e7 2f       	mov	r30, r23
    4b9c:	f0 e0       	ldi	r31, 0x00	; 0
    4b9e:	ee 57       	subi	r30, 0x7E	; 126
    4ba0:	f8 4e       	sbci	r31, 0xE8	; 232
    4ba2:	10 82       	st	Z, r1
    4ba4:	4c 91       	ld	r20, X
    4ba6:	81 11       	cpse	r24, r1
    4ba8:	03 c0       	rjmp	.+6      	; 0x4bb0 <lora_driver_sendUploadMessage+0x98>
    4baa:	85 e3       	ldi	r24, 0x35	; 53
    4bac:	96 e0       	ldi	r25, 0x06	; 6
    4bae:	02 c0       	rjmp	.+4      	; 0x4bb4 <lora_driver_sendUploadMessage+0x9c>
    4bb0:	87 e3       	ldi	r24, 0x37	; 55
    4bb2:	96 e0       	ldi	r25, 0x06	; 6
    4bb4:	22 e8       	ldi	r18, 0x82	; 130
    4bb6:	37 e1       	ldi	r19, 0x17	; 23
    4bb8:	3f 93       	push	r19
    4bba:	2f 93       	push	r18
    4bbc:	1f 92       	push	r1
    4bbe:	4f 93       	push	r20
    4bc0:	9f 93       	push	r25
    4bc2:	8f 93       	push	r24
    4bc4:	8b e3       	ldi	r24, 0x3B	; 59
    4bc6:	96 e0       	ldi	r25, 0x06	; 6
    4bc8:	9f 93       	push	r25
    4bca:	8f 93       	push	r24
    4bcc:	84 ec       	ldi	r24, 0xC4	; 196
    4bce:	97 e1       	ldi	r25, 0x17	; 23
    4bd0:	9f 93       	push	r25
    4bd2:	8f 93       	push	r24
    4bd4:	0e 94 4c 33 	call	0x6698	; 0x6698 <sprintf>
    4bd8:	60 e0       	ldi	r22, 0x00	; 0
    4bda:	70 e0       	ldi	r23, 0x00	; 0
    4bdc:	84 ec       	ldi	r24, 0xC4	; 196
    4bde:	97 e1       	ldi	r25, 0x17	; 23
    4be0:	b3 de       	rcall	.-666    	; 0x4948 <_uploadMessageRc>
    4be2:	0f b6       	in	r0, 0x3f	; 63
    4be4:	f8 94       	cli
    4be6:	de bf       	out	0x3e, r29	; 62
    4be8:	0f be       	out	0x3f, r0	; 63
    4bea:	cd bf       	out	0x3d, r28	; 61
    4bec:	81 11       	cpse	r24, r1
    4bee:	59 c0       	rjmp	.+178    	; 0x4ca2 <lora_driver_sendUploadMessage+0x18a>
    4bf0:	08 e2       	ldi	r16, 0x28	; 40
    4bf2:	15 e0       	ldi	r17, 0x05	; 5
    4bf4:	20 e0       	ldi	r18, 0x00	; 0
    4bf6:	30 e0       	ldi	r19, 0x00	; 0
    4bf8:	4d e2       	ldi	r20, 0x2D	; 45
    4bfa:	50 e0       	ldi	r21, 0x00	; 0
    4bfc:	61 ef       	ldi	r22, 0xF1	; 241
    4bfe:	77 e1       	ldi	r23, 0x17	; 23
    4c00:	80 91 68 17 	lds	r24, 0x1768	; 0x801768 <_serialReplyBufferHandle>
    4c04:	90 91 69 17 	lds	r25, 0x1769	; 0x801769 <_serialReplyBufferHandle+0x1>
    4c08:	0e 94 9e 0b 	call	0x173c	; 0x173c <xStreamBufferReceive>
    4c0c:	88 23       	and	r24, r24
    4c0e:	09 f4       	brne	.+2      	; 0x4c12 <lora_driver_sendUploadMessage+0xfa>
    4c10:	47 c0       	rjmp	.+142    	; 0x4ca0 <lora_driver_sendUploadMessage+0x188>
    4c12:	81 ef       	ldi	r24, 0xF1	; 241
    4c14:	97 e1       	ldi	r25, 0x17	; 23
    4c16:	23 de       	rcall	.-954    	; 0x485e <_reply2ReturnCode>
    4c18:	8e 30       	cpi	r24, 0x0E	; 14
    4c1a:	09 f0       	breq	.+2      	; 0x4c1e <lora_driver_sendUploadMessage+0x106>
    4c1c:	42 c0       	rjmp	.+132    	; 0x4ca2 <lora_driver_sendUploadMessage+0x18a>
    4c1e:	87 e0       	ldi	r24, 0x07	; 7
    4c20:	89 83       	std	Y+1, r24	; 0x01
    4c22:	80 91 66 17 	lds	r24, 0x1766	; 0x801766 <_downlinkMessageBuffer>
    4c26:	90 91 67 17 	lds	r25, 0x1767	; 0x801767 <_downlinkMessageBuffer+0x1>
    4c2a:	89 2b       	or	r24, r25
    4c2c:	a9 f1       	breq	.+106    	; 0x4c98 <lora_driver_sendUploadMessage+0x180>
    4c2e:	be 01       	movw	r22, r28
    4c30:	6f 5f       	subi	r22, 0xFF	; 255
    4c32:	7f 4f       	sbci	r23, 0xFF	; 255
    4c34:	81 ef       	ldi	r24, 0xF1	; 241
    4c36:	97 e1       	ldi	r25, 0x17	; 23
    4c38:	68 d1       	rcall	.+720    	; 0x4f0a <decode_port_no>
    4c3a:	80 93 6c 17 	sts	0x176C, r24	; 0x80176c <_downlinkPayload>
    4c3e:	e9 81       	ldd	r30, Y+1	; 0x01
    4c40:	f0 e0       	ldi	r31, 0x00	; 0
    4c42:	ef 50       	subi	r30, 0x0F	; 15
    4c44:	f8 4e       	sbci	r31, 0xE8	; 232
    4c46:	df 01       	movw	r26, r30
    4c48:	0d 90       	ld	r0, X+
    4c4a:	00 20       	and	r0, r0
    4c4c:	e9 f7       	brne	.-6      	; 0x4c48 <lora_driver_sendUploadMessage+0x130>
    4c4e:	11 97       	sbiw	r26, 0x01	; 1
    4c50:	ae 1b       	sub	r26, r30
    4c52:	bf 0b       	sbc	r27, r31
    4c54:	aa 23       	and	r26, r26
    4c56:	91 f0       	breq	.+36     	; 0x4c7c <lora_driver_sendUploadMessage+0x164>
    4c58:	bb 27       	eor	r27, r27
    4c5a:	cd 01       	movw	r24, r26
    4c5c:	01 97       	sbiw	r24, 0x01	; 1
    4c5e:	9c 01       	movw	r18, r24
    4c60:	12 f4       	brpl	.+4      	; 0x4c66 <lora_driver_sendUploadMessage+0x14e>
    4c62:	2f 5f       	subi	r18, 0xFF	; 255
    4c64:	3f 4f       	sbci	r19, 0xFF	; 255
    4c66:	35 95       	asr	r19
    4c68:	27 95       	ror	r18
    4c6a:	20 93 6d 17 	sts	0x176D, r18	; 0x80176d <_downlinkPayload+0x1>
    4c6e:	af 01       	movw	r20, r30
    4c70:	4f 5f       	subi	r20, 0xFF	; 255
    4c72:	5f 4f       	sbci	r21, 0xFF	; 255
    4c74:	64 e1       	ldi	r22, 0x14	; 20
    4c76:	8e e6       	ldi	r24, 0x6E	; 110
    4c78:	97 e1       	ldi	r25, 0x17	; 23
    4c7a:	73 d1       	rcall	.+742    	; 0x4f62 <decode_hexadecimal_string_bytes>
    4c7c:	01 e0       	ldi	r16, 0x01	; 1
    4c7e:	10 e0       	ldi	r17, 0x00	; 0
    4c80:	20 e0       	ldi	r18, 0x00	; 0
    4c82:	30 e0       	ldi	r19, 0x00	; 0
    4c84:	46 e1       	ldi	r20, 0x16	; 22
    4c86:	50 e0       	ldi	r21, 0x00	; 0
    4c88:	6c e6       	ldi	r22, 0x6C	; 108
    4c8a:	77 e1       	ldi	r23, 0x17	; 23
    4c8c:	80 91 66 17 	lds	r24, 0x1766	; 0x801766 <_downlinkMessageBuffer>
    4c90:	90 91 67 17 	lds	r25, 0x1767	; 0x801767 <_downlinkMessageBuffer+0x1>
    4c94:	0e 94 95 0a 	call	0x152a	; 0x152a <xStreamBufferSend>
    4c98:	8e e0       	ldi	r24, 0x0E	; 14
    4c9a:	03 c0       	rjmp	.+6      	; 0x4ca2 <lora_driver_sendUploadMessage+0x18a>
    4c9c:	84 e1       	ldi	r24, 0x14	; 20
    4c9e:	01 c0       	rjmp	.+2      	; 0x4ca2 <lora_driver_sendUploadMessage+0x18a>
    4ca0:	80 e0       	ldi	r24, 0x00	; 0
    4ca2:	0f 90       	pop	r0
    4ca4:	df 91       	pop	r29
    4ca6:	cf 91       	pop	r28
    4ca8:	1f 91       	pop	r17
    4caa:	0f 91       	pop	r16
    4cac:	08 95       	ret

00004cae <lora_driver_setAdaptiveDataRate>:
    4cae:	81 30       	cpi	r24, 0x01	; 1
    4cb0:	19 f0       	breq	.+6      	; 0x4cb8 <lora_driver_setAdaptiveDataRate+0xa>
    4cb2:	6b e4       	ldi	r22, 0x4B	; 75
    4cb4:	76 e0       	ldi	r23, 0x06	; 6
    4cb6:	02 c0       	rjmp	.+4      	; 0x4cbc <lora_driver_setAdaptiveDataRate+0xe>
    4cb8:	64 e2       	ldi	r22, 0x24	; 36
    4cba:	77 e0       	ldi	r23, 0x07	; 7
    4cbc:	8f e4       	ldi	r24, 0x4F	; 79
    4cbe:	96 e0       	ldi	r25, 0x06	; 6
    4cc0:	43 ce       	rjmp	.-890    	; 0x4948 <_uploadMessageRc>
    4cc2:	08 95       	ret

00004cc4 <lora_driver_setReceiveDelay>:
    4cc4:	9f 93       	push	r25
    4cc6:	8f 93       	push	r24
    4cc8:	80 e8       	ldi	r24, 0x80	; 128
    4cca:	96 e0       	ldi	r25, 0x06	; 6
    4ccc:	9f 93       	push	r25
    4cce:	8f 93       	push	r24
    4cd0:	84 ec       	ldi	r24, 0xC4	; 196
    4cd2:	97 e1       	ldi	r25, 0x17	; 23
    4cd4:	9f 93       	push	r25
    4cd6:	8f 93       	push	r24
    4cd8:	0e 94 4c 33 	call	0x6698	; 0x6698 <sprintf>
    4cdc:	60 e0       	ldi	r22, 0x00	; 0
    4cde:	70 e0       	ldi	r23, 0x00	; 0
    4ce0:	84 ec       	ldi	r24, 0xC4	; 196
    4ce2:	97 e1       	ldi	r25, 0x17	; 23
    4ce4:	31 de       	rcall	.-926    	; 0x4948 <_uploadMessageRc>
    4ce6:	0f 90       	pop	r0
    4ce8:	0f 90       	pop	r0
    4cea:	0f 90       	pop	r0
    4cec:	0f 90       	pop	r0
    4cee:	0f 90       	pop	r0
    4cf0:	0f 90       	pop	r0
    4cf2:	08 95       	ret

00004cf4 <lora_driver_configureToEu868>:
    4cf4:	2f 92       	push	r2
    4cf6:	3f 92       	push	r3
    4cf8:	4f 92       	push	r4
    4cfa:	5f 92       	push	r5
    4cfc:	6f 92       	push	r6
    4cfe:	7f 92       	push	r7
    4d00:	8f 92       	push	r8
    4d02:	9f 92       	push	r9
    4d04:	af 92       	push	r10
    4d06:	bf 92       	push	r11
    4d08:	cf 92       	push	r12
    4d0a:	df 92       	push	r13
    4d0c:	ef 92       	push	r14
    4d0e:	ff 92       	push	r15
    4d10:	0f 93       	push	r16
    4d12:	1f 93       	push	r17
    4d14:	cf 93       	push	r28
    4d16:	df 93       	push	r29
    4d18:	cd b7       	in	r28, 0x3d	; 61
    4d1a:	de b7       	in	r29, 0x3e	; 62
    4d1c:	a0 97       	sbiw	r28, 0x20	; 32
    4d1e:	0f b6       	in	r0, 0x3f	; 63
    4d20:	f8 94       	cli
    4d22:	de bf       	out	0x3e, r29	; 62
    4d24:	0f be       	out	0x3f, r0	; 63
    4d26:	cd bf       	out	0x3d, r28	; 61
    4d28:	6d ea       	ldi	r22, 0xAD	; 173
    4d2a:	76 e0       	ldi	r23, 0x06	; 6
    4d2c:	89 eb       	ldi	r24, 0xB9	; 185
    4d2e:	96 e0       	ldi	r25, 0x06	; 6
    4d30:	3c dd       	rcall	.-1416   	; 0x47aa <_uploadMessage>
    4d32:	95 dd       	rcall	.-1238   	; 0x485e <_reply2ReturnCode>
    4d34:	81 11       	cpse	r24, r1
    4d36:	a3 c0       	rjmp	.+326    	; 0x4e7e <lora_driver_configureToEu868+0x18a>
    4d38:	80 e2       	ldi	r24, 0x20	; 32
    4d3a:	e2 e2       	ldi	r30, 0x22	; 34
    4d3c:	f2 e0       	ldi	r31, 0x02	; 2
    4d3e:	de 01       	movw	r26, r28
    4d40:	11 96       	adiw	r26, 0x01	; 1
    4d42:	01 90       	ld	r0, Z+
    4d44:	0d 92       	st	X+, r0
    4d46:	8a 95       	dec	r24
    4d48:	e1 f7       	brne	.-8      	; 0x4d42 <lora_driver_configureToEu868+0x4e>
    4d4a:	9e 01       	movw	r18, r28
    4d4c:	2f 5f       	subi	r18, 0xFF	; 255
    4d4e:	3f 4f       	sbci	r19, 0xFF	; 255
    4d50:	69 01       	movw	r12, r18
    4d52:	e1 2c       	mov	r14, r1
    4d54:	f1 2c       	mov	r15, r1
    4d56:	0f 2e       	mov	r0, r31
    4d58:	f5 ec       	ldi	r31, 0xC5	; 197
    4d5a:	af 2e       	mov	r10, r31
    4d5c:	f6 e0       	ldi	r31, 0x06	; 6
    4d5e:	bf 2e       	mov	r11, r31
    4d60:	f0 2d       	mov	r31, r0
    4d62:	04 ec       	ldi	r16, 0xC4	; 196
    4d64:	17 e1       	ldi	r17, 0x17	; 23
    4d66:	0f 2e       	mov	r0, r31
    4d68:	fe ed       	ldi	r31, 0xDE	; 222
    4d6a:	4f 2e       	mov	r4, r31
    4d6c:	f6 e0       	ldi	r31, 0x06	; 6
    4d6e:	5f 2e       	mov	r5, r31
    4d70:	f0 2d       	mov	r31, r0
    4d72:	0f 2e       	mov	r0, r31
    4d74:	f5 ef       	ldi	r31, 0xF5	; 245
    4d76:	8f 2e       	mov	r8, r31
    4d78:	f6 e0       	ldi	r31, 0x06	; 6
    4d7a:	9f 2e       	mov	r9, r31
    4d7c:	f0 2d       	mov	r31, r0
    4d7e:	0f 2e       	mov	r0, r31
    4d80:	ff e0       	ldi	r31, 0x0F	; 15
    4d82:	6f 2e       	mov	r6, r31
    4d84:	f7 e0       	ldi	r31, 0x07	; 7
    4d86:	7f 2e       	mov	r7, r31
    4d88:	f0 2d       	mov	r31, r0
    4d8a:	3e 2c       	mov	r3, r14
    4d8c:	2f 2c       	mov	r2, r15
    4d8e:	ff 92       	push	r15
    4d90:	ef 92       	push	r14
    4d92:	bf 92       	push	r11
    4d94:	af 92       	push	r10
    4d96:	1f 93       	push	r17
    4d98:	0f 93       	push	r16
    4d9a:	0e 94 4c 33 	call	0x6698	; 0x6698 <sprintf>
    4d9e:	60 e0       	ldi	r22, 0x00	; 0
    4da0:	70 e0       	ldi	r23, 0x00	; 0
    4da2:	c8 01       	movw	r24, r16
    4da4:	02 dd       	rcall	.-1532   	; 0x47aa <_uploadMessage>
    4da6:	5b dd       	rcall	.-1354   	; 0x485e <_reply2ReturnCode>
    4da8:	0f 90       	pop	r0
    4daa:	0f 90       	pop	r0
    4dac:	0f 90       	pop	r0
    4dae:	0f 90       	pop	r0
    4db0:	0f 90       	pop	r0
    4db2:	0f 90       	pop	r0
    4db4:	81 11       	cpse	r24, r1
    4db6:	63 c0       	rjmp	.+198    	; 0x4e7e <lora_driver_configureToEu868+0x18a>
    4db8:	32 e0       	ldi	r19, 0x02	; 2
    4dba:	3e 15       	cp	r19, r14
    4dbc:	e8 f4       	brcc	.+58     	; 0x4df8 <lora_driver_configureToEu868+0x104>
    4dbe:	f6 01       	movw	r30, r12
    4dc0:	83 81       	ldd	r24, Z+3	; 0x03
    4dc2:	8f 93       	push	r24
    4dc4:	82 81       	ldd	r24, Z+2	; 0x02
    4dc6:	8f 93       	push	r24
    4dc8:	81 81       	ldd	r24, Z+1	; 0x01
    4dca:	8f 93       	push	r24
    4dcc:	80 81       	ld	r24, Z
    4dce:	8f 93       	push	r24
    4dd0:	ff 92       	push	r15
    4dd2:	ef 92       	push	r14
    4dd4:	5f 92       	push	r5
    4dd6:	4f 92       	push	r4
    4dd8:	1f 93       	push	r17
    4dda:	0f 93       	push	r16
    4ddc:	0e 94 4c 33 	call	0x6698	; 0x6698 <sprintf>
    4de0:	60 e0       	ldi	r22, 0x00	; 0
    4de2:	70 e0       	ldi	r23, 0x00	; 0
    4de4:	c8 01       	movw	r24, r16
    4de6:	e1 dc       	rcall	.-1598   	; 0x47aa <_uploadMessage>
    4de8:	3a dd       	rcall	.-1420   	; 0x485e <_reply2ReturnCode>
    4dea:	0f b6       	in	r0, 0x3f	; 63
    4dec:	f8 94       	cli
    4dee:	de bf       	out	0x3e, r29	; 62
    4df0:	0f be       	out	0x3f, r0	; 63
    4df2:	cd bf       	out	0x3d, r28	; 61
    4df4:	81 11       	cpse	r24, r1
    4df6:	43 c0       	rjmp	.+134    	; 0x4e7e <lora_driver_configureToEu868+0x18a>
    4df8:	2f 92       	push	r2
    4dfa:	3f 92       	push	r3
    4dfc:	9f 92       	push	r9
    4dfe:	8f 92       	push	r8
    4e00:	1f 93       	push	r17
    4e02:	0f 93       	push	r16
    4e04:	0e 94 4c 33 	call	0x6698	; 0x6698 <sprintf>
    4e08:	60 e0       	ldi	r22, 0x00	; 0
    4e0a:	70 e0       	ldi	r23, 0x00	; 0
    4e0c:	c8 01       	movw	r24, r16
    4e0e:	cd dc       	rcall	.-1638   	; 0x47aa <_uploadMessage>
    4e10:	26 dd       	rcall	.-1460   	; 0x485e <_reply2ReturnCode>
    4e12:	0f 90       	pop	r0
    4e14:	0f 90       	pop	r0
    4e16:	0f 90       	pop	r0
    4e18:	0f 90       	pop	r0
    4e1a:	0f 90       	pop	r0
    4e1c:	0f 90       	pop	r0
    4e1e:	81 11       	cpse	r24, r1
    4e20:	2e c0       	rjmp	.+92     	; 0x4e7e <lora_driver_configureToEu868+0x18a>
    4e22:	2f 92       	push	r2
    4e24:	3f 92       	push	r3
    4e26:	7f 92       	push	r7
    4e28:	6f 92       	push	r6
    4e2a:	1f 93       	push	r17
    4e2c:	0f 93       	push	r16
    4e2e:	0e 94 4c 33 	call	0x6698	; 0x6698 <sprintf>
    4e32:	60 e0       	ldi	r22, 0x00	; 0
    4e34:	70 e0       	ldi	r23, 0x00	; 0
    4e36:	c8 01       	movw	r24, r16
    4e38:	b8 dc       	rcall	.-1680   	; 0x47aa <_uploadMessage>
    4e3a:	11 dd       	rcall	.-1502   	; 0x485e <_reply2ReturnCode>
    4e3c:	0f 90       	pop	r0
    4e3e:	0f 90       	pop	r0
    4e40:	0f 90       	pop	r0
    4e42:	0f 90       	pop	r0
    4e44:	0f 90       	pop	r0
    4e46:	0f 90       	pop	r0
    4e48:	81 11       	cpse	r24, r1
    4e4a:	19 c0       	rjmp	.+50     	; 0x4e7e <lora_driver_configureToEu868+0x18a>
    4e4c:	3f ef       	ldi	r19, 0xFF	; 255
    4e4e:	e3 1a       	sub	r14, r19
    4e50:	f3 0a       	sbc	r15, r19
    4e52:	84 e0       	ldi	r24, 0x04	; 4
    4e54:	c8 0e       	add	r12, r24
    4e56:	d1 1c       	adc	r13, r1
    4e58:	98 e0       	ldi	r25, 0x08	; 8
    4e5a:	e9 16       	cp	r14, r25
    4e5c:	f1 04       	cpc	r15, r1
    4e5e:	09 f0       	breq	.+2      	; 0x4e62 <lora_driver_configureToEu868+0x16e>
    4e60:	94 cf       	rjmp	.-216    	; 0x4d8a <lora_driver_configureToEu868+0x96>
    4e62:	60 e0       	ldi	r22, 0x00	; 0
    4e64:	70 e0       	ldi	r23, 0x00	; 0
    4e66:	87 e2       	ldi	r24, 0x27	; 39
    4e68:	97 e0       	ldi	r25, 0x07	; 7
    4e6a:	9f dc       	rcall	.-1730   	; 0x47aa <_uploadMessage>
    4e6c:	f8 dc       	rcall	.-1552   	; 0x485e <_reply2ReturnCode>
    4e6e:	81 11       	cpse	r24, r1
    4e70:	06 c0       	rjmp	.+12     	; 0x4e7e <lora_driver_configureToEu868+0x18a>
    4e72:	60 e0       	ldi	r22, 0x00	; 0
    4e74:	70 e0       	ldi	r23, 0x00	; 0
    4e76:	88 e3       	ldi	r24, 0x38	; 56
    4e78:	97 e0       	ldi	r25, 0x07	; 7
    4e7a:	97 dc       	rcall	.-1746   	; 0x47aa <_uploadMessage>
    4e7c:	f0 dc       	rcall	.-1568   	; 0x485e <_reply2ReturnCode>
    4e7e:	a0 96       	adiw	r28, 0x20	; 32
    4e80:	0f b6       	in	r0, 0x3f	; 63
    4e82:	f8 94       	cli
    4e84:	de bf       	out	0x3e, r29	; 62
    4e86:	0f be       	out	0x3f, r0	; 63
    4e88:	cd bf       	out	0x3d, r28	; 61
    4e8a:	df 91       	pop	r29
    4e8c:	cf 91       	pop	r28
    4e8e:	1f 91       	pop	r17
    4e90:	0f 91       	pop	r16
    4e92:	ff 90       	pop	r15
    4e94:	ef 90       	pop	r14
    4e96:	df 90       	pop	r13
    4e98:	cf 90       	pop	r12
    4e9a:	bf 90       	pop	r11
    4e9c:	af 90       	pop	r10
    4e9e:	9f 90       	pop	r9
    4ea0:	8f 90       	pop	r8
    4ea2:	7f 90       	pop	r7
    4ea4:	6f 90       	pop	r6
    4ea6:	5f 90       	pop	r5
    4ea8:	4f 90       	pop	r4
    4eaa:	3f 90       	pop	r3
    4eac:	2f 90       	pop	r2
    4eae:	08 95       	ret

00004eb0 <lora_driver_setOtaaIdentity>:
    4eb0:	ef 92       	push	r14
    4eb2:	ff 92       	push	r15
    4eb4:	0f 93       	push	r16
    4eb6:	1f 93       	push	r17
    4eb8:	cf 93       	push	r28
    4eba:	df 93       	push	r29
    4ebc:	ec 01       	movw	r28, r24
    4ebe:	8b 01       	movw	r16, r22
    4ec0:	7a 01       	movw	r14, r20
    4ec2:	81 e0       	ldi	r24, 0x01	; 1
    4ec4:	f4 de       	rcall	.-536    	; 0x4cae <lora_driver_setAdaptiveDataRate>
    4ec6:	81 11       	cpse	r24, r1
    4ec8:	0d c0       	rjmp	.+26     	; 0x4ee4 <lora_driver_setOtaaIdentity+0x34>
    4eca:	ce 01       	movw	r24, r28
    4ecc:	d4 dd       	rcall	.-1112   	; 0x4a76 <lora_driver_setApplicationIdentifier>
    4ece:	81 11       	cpse	r24, r1
    4ed0:	09 c0       	rjmp	.+18     	; 0x4ee4 <lora_driver_setOtaaIdentity+0x34>
    4ed2:	c8 01       	movw	r24, r16
    4ed4:	e1 dd       	rcall	.-1086   	; 0x4a98 <lora_driver_setApplicationKey>
    4ed6:	81 11       	cpse	r24, r1
    4ed8:	05 c0       	rjmp	.+10     	; 0x4ee4 <lora_driver_setOtaaIdentity+0x34>
    4eda:	c7 01       	movw	r24, r14
    4edc:	bb dd       	rcall	.-1162   	; 0x4a54 <lora_driver_setDeviceIdentifier>
    4ede:	81 11       	cpse	r24, r1
    4ee0:	01 c0       	rjmp	.+2      	; 0x4ee4 <lora_driver_setOtaaIdentity+0x34>
    4ee2:	eb dd       	rcall	.-1066   	; 0x4aba <lora_driver_saveMac>
    4ee4:	df 91       	pop	r29
    4ee6:	cf 91       	pop	r28
    4ee8:	1f 91       	pop	r17
    4eea:	0f 91       	pop	r16
    4eec:	ff 90       	pop	r15
    4eee:	ef 90       	pop	r14
    4ef0:	08 95       	ret

00004ef2 <lora_driver_mapReturnCodeToText>:
    4ef2:	90 e0       	ldi	r25, 0x00	; 0
    4ef4:	fc 01       	movw	r30, r24
    4ef6:	ee 0f       	add	r30, r30
    4ef8:	ff 1f       	adc	r31, r31
    4efa:	8e 0f       	add	r24, r30
    4efc:	9f 1f       	adc	r25, r31
    4efe:	fc 01       	movw	r30, r24
    4f00:	ef 5f       	subi	r30, 0xFF	; 255
    4f02:	f7 4f       	sbci	r31, 0xF7	; 247
    4f04:	81 81       	ldd	r24, Z+1	; 0x01
    4f06:	92 81       	ldd	r25, Z+2	; 0x02
    4f08:	08 95       	ret

00004f0a <decode_port_no>:
    4f0a:	dc 01       	movw	r26, r24
    4f0c:	00 97       	sbiw	r24, 0x00	; 0
    4f0e:	29 f1       	breq	.+74     	; 0x4f5a <decode_port_no+0x50>
    4f10:	fb 01       	movw	r30, r22
    4f12:	20 81       	ld	r18, Z
    4f14:	fc 01       	movw	r30, r24
    4f16:	01 90       	ld	r0, Z+
    4f18:	00 20       	and	r0, r0
    4f1a:	e9 f7       	brne	.-6      	; 0x4f16 <decode_port_no+0xc>
    4f1c:	31 97       	sbiw	r30, 0x01	; 1
    4f1e:	e8 1b       	sub	r30, r24
    4f20:	f9 0b       	sbc	r31, r25
    4f22:	82 2f       	mov	r24, r18
    4f24:	90 e0       	ldi	r25, 0x00	; 0
    4f26:	e8 17       	cp	r30, r24
    4f28:	f9 07       	cpc	r31, r25
    4f2a:	c8 f0       	brcs	.+50     	; 0x4f5e <decode_port_no+0x54>
    4f2c:	80 e0       	ldi	r24, 0x00	; 0
    4f2e:	08 c0       	rjmp	.+16     	; 0x4f40 <decode_port_no+0x36>
    4f30:	88 0f       	add	r24, r24
    4f32:	38 2f       	mov	r19, r24
    4f34:	33 0f       	add	r19, r19
    4f36:	33 0f       	add	r19, r19
    4f38:	83 0f       	add	r24, r19
    4f3a:	80 53       	subi	r24, 0x30	; 48
    4f3c:	89 0f       	add	r24, r25
    4f3e:	2f 5f       	subi	r18, 0xFF	; 255
    4f40:	fd 01       	movw	r30, r26
    4f42:	e2 0f       	add	r30, r18
    4f44:	f1 1d       	adc	r31, r1
    4f46:	90 81       	ld	r25, Z
    4f48:	30 ed       	ldi	r19, 0xD0	; 208
    4f4a:	39 0f       	add	r19, r25
    4f4c:	3a 30       	cpi	r19, 0x0A	; 10
    4f4e:	10 f4       	brcc	.+4      	; 0x4f54 <decode_port_no+0x4a>
    4f50:	91 11       	cpse	r25, r1
    4f52:	ee cf       	rjmp	.-36     	; 0x4f30 <decode_port_no+0x26>
    4f54:	fb 01       	movw	r30, r22
    4f56:	20 83       	st	Z, r18
    4f58:	08 95       	ret
    4f5a:	80 e0       	ldi	r24, 0x00	; 0
    4f5c:	08 95       	ret
    4f5e:	80 e0       	ldi	r24, 0x00	; 0
    4f60:	08 95       	ret

00004f62 <decode_hexadecimal_string_bytes>:
    4f62:	0f 93       	push	r16
    4f64:	1f 93       	push	r17
    4f66:	cf 93       	push	r28
    4f68:	df 93       	push	r29
    4f6a:	dc 01       	movw	r26, r24
    4f6c:	ea 01       	movw	r28, r20
    4f6e:	20 97       	sbiw	r28, 0x00	; 0
    4f70:	e1 f1       	breq	.+120    	; 0x4fea <decode_hexadecimal_string_bytes+0x88>
    4f72:	fa 01       	movw	r30, r20
    4f74:	01 90       	ld	r0, Z+
    4f76:	00 20       	and	r0, r0
    4f78:	e9 f7       	brne	.-6      	; 0x4f74 <decode_hexadecimal_string_bytes+0x12>
    4f7a:	31 97       	sbiw	r30, 0x01	; 1
    4f7c:	e4 1b       	sub	r30, r20
    4f7e:	f5 0b       	sbc	r31, r21
    4f80:	32 97       	sbiw	r30, 0x02	; 2
    4f82:	10 f5       	brcc	.+68     	; 0x4fc8 <decode_hexadecimal_string_bytes+0x66>
    4f84:	32 c0       	rjmp	.+100    	; 0x4fea <decode_hexadecimal_string_bytes+0x88>
    4f86:	8d 01       	movw	r16, r26
    4f88:	04 0f       	add	r16, r20
    4f8a:	15 1f       	adc	r17, r21
    4f8c:	30 e0       	ldi	r19, 0x00	; 0
    4f8e:	ae 01       	movw	r20, r28
    4f90:	42 0f       	add	r20, r18
    4f92:	53 1f       	adc	r21, r19
    4f94:	fa 01       	movw	r30, r20
    4f96:	90 81       	ld	r25, Z
    4f98:	91 34       	cpi	r25, 0x41	; 65
    4f9a:	28 f0       	brcs	.+10     	; 0x4fa6 <decode_hexadecimal_string_bytes+0x44>
    4f9c:	97 53       	subi	r25, 0x37	; 55
    4f9e:	59 2f       	mov	r21, r25
    4fa0:	52 95       	swap	r21
    4fa2:	50 7f       	andi	r21, 0xF0	; 240
    4fa4:	03 c0       	rjmp	.+6      	; 0x4fac <decode_hexadecimal_string_bytes+0x4a>
    4fa6:	59 2f       	mov	r21, r25
    4fa8:	52 95       	swap	r21
    4faa:	50 7f       	andi	r21, 0xF0	; 240
    4fac:	2c 0f       	add	r18, r28
    4fae:	3d 1f       	adc	r19, r29
    4fb0:	f9 01       	movw	r30, r18
    4fb2:	91 81       	ldd	r25, Z+1	; 0x01
    4fb4:	91 34       	cpi	r25, 0x41	; 65
    4fb6:	10 f0       	brcs	.+4      	; 0x4fbc <decode_hexadecimal_string_bytes+0x5a>
    4fb8:	97 53       	subi	r25, 0x37	; 55
    4fba:	01 c0       	rjmp	.+2      	; 0x4fbe <decode_hexadecimal_string_bytes+0x5c>
    4fbc:	90 53       	subi	r25, 0x30	; 48
    4fbe:	95 0f       	add	r25, r21
    4fc0:	f8 01       	movw	r30, r16
    4fc2:	90 83       	st	Z, r25
    4fc4:	8f 5f       	subi	r24, 0xFF	; 255
    4fc6:	01 c0       	rjmp	.+2      	; 0x4fca <decode_hexadecimal_string_bytes+0x68>
    4fc8:	80 e0       	ldi	r24, 0x00	; 0
    4fca:	28 2f       	mov	r18, r24
    4fcc:	22 0f       	add	r18, r18
    4fce:	48 2f       	mov	r20, r24
    4fd0:	50 e0       	ldi	r21, 0x00	; 0
    4fd2:	fe 01       	movw	r30, r28
    4fd4:	01 90       	ld	r0, Z+
    4fd6:	00 20       	and	r0, r0
    4fd8:	e9 f7       	brne	.-6      	; 0x4fd4 <decode_hexadecimal_string_bytes+0x72>
    4fda:	31 97       	sbiw	r30, 0x01	; 1
    4fdc:	ec 1b       	sub	r30, r28
    4fde:	fd 0b       	sbc	r31, r29
    4fe0:	4e 17       	cp	r20, r30
    4fe2:	5f 07       	cpc	r21, r31
    4fe4:	10 f4       	brcc	.+4      	; 0x4fea <decode_hexadecimal_string_bytes+0x88>
    4fe6:	86 13       	cpse	r24, r22
    4fe8:	ce cf       	rjmp	.-100    	; 0x4f86 <decode_hexadecimal_string_bytes+0x24>
    4fea:	df 91       	pop	r29
    4fec:	cf 91       	pop	r28
    4fee:	1f 91       	pop	r17
    4ff0:	0f 91       	pop	r16
    4ff2:	08 95       	ret

00004ff4 <_serialCallBack>:
    4ff4:	80 91 21 18 	lds	r24, 0x1821	; 0x801821 <crc_sum.1945>
    4ff8:	86 0f       	add	r24, r22
    4ffa:	80 93 21 18 	sts	0x1821, r24	; 0x801821 <crc_sum.1945>
    4ffe:	90 91 24 18 	lds	r25, 0x1824	; 0x801824 <_mh_state>
    5002:	91 30       	cpi	r25, 0x01	; 1
    5004:	79 f0       	breq	.+30     	; 0x5024 <_serialCallBack+0x30>
    5006:	28 f0       	brcs	.+10     	; 0x5012 <_serialCallBack+0x1e>
    5008:	92 30       	cpi	r25, 0x02	; 2
    500a:	a9 f0       	breq	.+42     	; 0x5036 <_serialCallBack+0x42>
    500c:	93 30       	cpi	r25, 0x03	; 3
    500e:	19 f1       	breq	.+70     	; 0x5056 <_serialCallBack+0x62>
    5010:	08 95       	ret
    5012:	6f 3f       	cpi	r22, 0xFF	; 255
    5014:	09 f0       	breq	.+2      	; 0x5018 <_serialCallBack+0x24>
    5016:	48 c0       	rjmp	.+144    	; 0x50a8 <_serialCallBack+0xb4>
    5018:	10 92 21 18 	sts	0x1821, r1	; 0x801821 <crc_sum.1945>
    501c:	81 e0       	ldi	r24, 0x01	; 1
    501e:	80 93 24 18 	sts	0x1824, r24	; 0x801824 <_mh_state>
    5022:	08 95       	ret
    5024:	66 38       	cpi	r22, 0x86	; 134
    5026:	09 f0       	breq	.+2      	; 0x502a <_serialCallBack+0x36>
    5028:	3f c0       	rjmp	.+126    	; 0x50a8 <_serialCallBack+0xb4>
    502a:	10 92 20 18 	sts	0x1820, r1	; 0x801820 <inDex.1943>
    502e:	82 e0       	ldi	r24, 0x02	; 2
    5030:	80 93 24 18 	sts	0x1824, r24	; 0x801824 <_mh_state>
    5034:	08 95       	ret
    5036:	e0 91 20 18 	lds	r30, 0x1820	; 0x801820 <inDex.1943>
    503a:	81 e0       	ldi	r24, 0x01	; 1
    503c:	8e 0f       	add	r24, r30
    503e:	80 93 20 18 	sts	0x1820, r24	; 0x801820 <inDex.1943>
    5042:	f0 e0       	ldi	r31, 0x00	; 0
    5044:	e2 5e       	subi	r30, 0xE2	; 226
    5046:	f7 4e       	sbci	r31, 0xE7	; 231
    5048:	60 83       	st	Z, r22
    504a:	82 30       	cpi	r24, 0x02	; 2
    504c:	69 f5       	brne	.+90     	; 0x50a8 <_serialCallBack+0xb4>
    504e:	83 e0       	ldi	r24, 0x03	; 3
    5050:	80 93 24 18 	sts	0x1824, r24	; 0x801824 <_mh_state>
    5054:	08 95       	ret
    5056:	90 91 20 18 	lds	r25, 0x1820	; 0x801820 <inDex.1943>
    505a:	21 e0       	ldi	r18, 0x01	; 1
    505c:	29 0f       	add	r18, r25
    505e:	20 93 20 18 	sts	0x1820, r18	; 0x801820 <inDex.1943>
    5062:	96 30       	cpi	r25, 0x06	; 6
    5064:	09 f5       	brne	.+66     	; 0x50a8 <_serialCallBack+0xb4>
    5066:	81 11       	cpse	r24, r1
    5068:	0e c0       	rjmp	.+28     	; 0x5086 <_serialCallBack+0x92>
    506a:	ee e1       	ldi	r30, 0x1E	; 30
    506c:	f8 e1       	ldi	r31, 0x18	; 24
    506e:	80 81       	ld	r24, Z
    5070:	90 e0       	ldi	r25, 0x00	; 0
    5072:	98 2f       	mov	r25, r24
    5074:	88 27       	eor	r24, r24
    5076:	21 81       	ldd	r18, Z+1	; 0x01
    5078:	82 0f       	add	r24, r18
    507a:	91 1d       	adc	r25, r1
    507c:	90 93 26 18 	sts	0x1826, r25	; 0x801826 <_ppm+0x1>
    5080:	80 93 25 18 	sts	0x1825, r24	; 0x801825 <_ppm>
    5084:	04 c0       	rjmp	.+8      	; 0x508e <_serialCallBack+0x9a>
    5086:	10 92 26 18 	sts	0x1826, r1	; 0x801826 <_ppm+0x1>
    508a:	10 92 25 18 	sts	0x1825, r1	; 0x801825 <_ppm>
    508e:	10 92 24 18 	sts	0x1824, r1	; 0x801824 <_mh_state>
    5092:	e0 91 22 18 	lds	r30, 0x1822	; 0x801822 <_appCallBack>
    5096:	f0 91 23 18 	lds	r31, 0x1823	; 0x801823 <_appCallBack+0x1>
    509a:	30 97       	sbiw	r30, 0x00	; 0
    509c:	29 f0       	breq	.+10     	; 0x50a8 <_serialCallBack+0xb4>
    509e:	80 91 25 18 	lds	r24, 0x1825	; 0x801825 <_ppm>
    50a2:	90 91 26 18 	lds	r25, 0x1826	; 0x801826 <_ppm+0x1>
    50a6:	19 95       	eicall
    50a8:	08 95       	ret

000050aa <mh_z19_initialise>:
    50aa:	8f 92       	push	r8
    50ac:	9f 92       	push	r9
    50ae:	af 92       	push	r10
    50b0:	cf 92       	push	r12
    50b2:	ef 92       	push	r14
    50b4:	0f 93       	push	r16
    50b6:	0f 2e       	mov	r0, r31
    50b8:	fa ef       	ldi	r31, 0xFA	; 250
    50ba:	8f 2e       	mov	r8, r31
    50bc:	f7 e2       	ldi	r31, 0x27	; 39
    50be:	9f 2e       	mov	r9, r31
    50c0:	f0 2d       	mov	r31, r0
    50c2:	68 94       	set
    50c4:	aa 24       	eor	r10, r10
    50c6:	a4 f8       	bld	r10, 4
    50c8:	68 94       	set
    50ca:	cc 24       	eor	r12, r12
    50cc:	c4 f8       	bld	r12, 4
    50ce:	e1 2c       	mov	r14, r1
    50d0:	00 e0       	ldi	r16, 0x00	; 0
    50d2:	23 e0       	ldi	r18, 0x03	; 3
    50d4:	40 e8       	ldi	r20, 0x80	; 128
    50d6:	55 e2       	ldi	r21, 0x25	; 37
    50d8:	60 e0       	ldi	r22, 0x00	; 0
    50da:	70 e0       	ldi	r23, 0x00	; 0
    50dc:	d5 d0       	rcall	.+426    	; 0x5288 <serial_create>
    50de:	90 93 28 18 	sts	0x1828, r25	; 0x801828 <_serial+0x1>
    50e2:	80 93 27 18 	sts	0x1827, r24	; 0x801827 <_serial>
    50e6:	0f 91       	pop	r16
    50e8:	ef 90       	pop	r14
    50ea:	cf 90       	pop	r12
    50ec:	af 90       	pop	r10
    50ee:	9f 90       	pop	r9
    50f0:	8f 90       	pop	r8
    50f2:	08 95       	ret

000050f4 <mh_z19_injectCallBack>:
    50f4:	90 93 23 18 	sts	0x1823, r25	; 0x801823 <_appCallBack+0x1>
    50f8:	80 93 22 18 	sts	0x1822, r24	; 0x801822 <_appCallBack>
    50fc:	08 95       	ret

000050fe <mh_z19_takeMeassuring>:
    50fe:	cf 93       	push	r28
    5100:	df 93       	push	r29
    5102:	cd b7       	in	r28, 0x3d	; 61
    5104:	de b7       	in	r29, 0x3e	; 62
    5106:	29 97       	sbiw	r28, 0x09	; 9
    5108:	0f b6       	in	r0, 0x3f	; 63
    510a:	f8 94       	cli
    510c:	de bf       	out	0x3e, r29	; 62
    510e:	0f be       	out	0x3f, r0	; 63
    5110:	cd bf       	out	0x3d, r28	; 61
    5112:	89 e0       	ldi	r24, 0x09	; 9
    5114:	e2 e4       	ldi	r30, 0x42	; 66
    5116:	f2 e0       	ldi	r31, 0x02	; 2
    5118:	9e 01       	movw	r18, r28
    511a:	2f 5f       	subi	r18, 0xFF	; 255
    511c:	3f 4f       	sbci	r19, 0xFF	; 255
    511e:	d9 01       	movw	r26, r18
    5120:	01 90       	ld	r0, Z+
    5122:	0d 92       	st	X+, r0
    5124:	8a 95       	dec	r24
    5126:	e1 f7       	brne	.-8      	; 0x5120 <mh_z19_takeMeassuring+0x22>
    5128:	10 92 26 18 	sts	0x1826, r1	; 0x801826 <_ppm+0x1>
    512c:	10 92 25 18 	sts	0x1825, r1	; 0x801825 <_ppm>
    5130:	80 91 27 18 	lds	r24, 0x1827	; 0x801827 <_serial>
    5134:	90 91 28 18 	lds	r25, 0x1828	; 0x801828 <_serial+0x1>
    5138:	00 97       	sbiw	r24, 0x00	; 0
    513a:	31 f0       	breq	.+12     	; 0x5148 <mh_z19_takeMeassuring+0x4a>
    513c:	42 2f       	mov	r20, r18
    513e:	53 2f       	mov	r21, r19
    5140:	69 e0       	ldi	r22, 0x09	; 9
    5142:	6c d1       	rcall	.+728    	; 0x541c <serial_sendBytes>
    5144:	80 e0       	ldi	r24, 0x00	; 0
    5146:	01 c0       	rjmp	.+2      	; 0x514a <mh_z19_takeMeassuring+0x4c>
    5148:	82 e0       	ldi	r24, 0x02	; 2
    514a:	29 96       	adiw	r28, 0x09	; 9
    514c:	0f b6       	in	r0, 0x3f	; 63
    514e:	f8 94       	cli
    5150:	de bf       	out	0x3e, r29	; 62
    5152:	0f be       	out	0x3f, r0	; 63
    5154:	cd bf       	out	0x3d, r28	; 61
    5156:	df 91       	pop	r29
    5158:	cf 91       	pop	r28
    515a:	08 95       	ret

0000515c <rc_servo_setPosition>:
    515c:	65 36       	cpi	r22, 0x65	; 101
    515e:	0c f0       	brlt	.+2      	; 0x5162 <rc_servo_setPosition+0x6>
    5160:	64 e6       	ldi	r22, 0x64	; 100
    5162:	6c 39       	cpi	r22, 0x9C	; 156
    5164:	0c f4       	brge	.+2      	; 0x5168 <rc_servo_setPosition+0xc>
    5166:	6c e9       	ldi	r22, 0x9C	; 156
    5168:	96 ef       	ldi	r25, 0xF6	; 246
    516a:	69 02       	muls	r22, r25
    516c:	b0 01       	movw	r22, r0
    516e:	11 24       	eor	r1, r1
    5170:	68 54       	subi	r22, 0x48	; 72
    5172:	74 4f       	sbci	r23, 0xF4	; 244
    5174:	81 11       	cpse	r24, r1
    5176:	05 c0       	rjmp	.+10     	; 0x5182 <rc_servo_setPosition+0x26>
    5178:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
    517c:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
    5180:	08 95       	ret
    5182:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x7c012b>
    5186:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x7c012a>
    518a:	08 95       	ret

0000518c <rc_servo_initialise>:
    518c:	ea e0       	ldi	r30, 0x0A	; 10
    518e:	f1 e0       	ldi	r31, 0x01	; 1
    5190:	80 81       	ld	r24, Z
    5192:	88 61       	ori	r24, 0x18	; 24
    5194:	80 83       	st	Z, r24
    5196:	8f e3       	ldi	r24, 0x3F	; 63
    5198:	9c e9       	ldi	r25, 0x9C	; 156
    519a:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
    519e:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
    51a2:	60 e0       	ldi	r22, 0x00	; 0
    51a4:	80 e0       	ldi	r24, 0x00	; 0
    51a6:	da df       	rcall	.-76     	; 0x515c <rc_servo_setPosition>
    51a8:	60 e0       	ldi	r22, 0x00	; 0
    51aa:	81 e0       	ldi	r24, 0x01	; 1
    51ac:	d7 df       	rcall	.-82     	; 0x515c <rc_servo_setPosition>
    51ae:	e0 e2       	ldi	r30, 0x20	; 32
    51b0:	f1 e0       	ldi	r31, 0x01	; 1
    51b2:	80 81       	ld	r24, Z
    51b4:	82 6a       	ori	r24, 0xA2	; 162
    51b6:	80 83       	st	Z, r24
    51b8:	e1 e2       	ldi	r30, 0x21	; 33
    51ba:	f1 e0       	ldi	r31, 0x01	; 1
    51bc:	80 81       	ld	r24, Z
    51be:	8a 61       	ori	r24, 0x1A	; 26
    51c0:	80 83       	st	Z, r24
    51c2:	08 95       	ret

000051c4 <_startConversion>:
    51c4:	ec e7       	ldi	r30, 0x7C	; 124
    51c6:	f0 e0       	ldi	r31, 0x00	; 0
    51c8:	80 81       	ld	r24, Z
    51ca:	80 7e       	andi	r24, 0xE0	; 224
    51cc:	80 83       	st	Z, r24
    51ce:	ab e7       	ldi	r26, 0x7B	; 123
    51d0:	b0 e0       	ldi	r27, 0x00	; 0
    51d2:	8c 91       	ld	r24, X
    51d4:	88 60       	ori	r24, 0x08	; 8
    51d6:	8c 93       	st	X, r24
    51d8:	80 81       	ld	r24, Z
    51da:	82 60       	ori	r24, 0x02	; 2
    51dc:	80 83       	st	Z, r24
    51de:	ea e7       	ldi	r30, 0x7A	; 122
    51e0:	f0 e0       	ldi	r31, 0x00	; 0
    51e2:	80 81       	ld	r24, Z
    51e4:	80 64       	ori	r24, 0x40	; 64
    51e6:	80 83       	st	Z, r24
    51e8:	08 95       	ret

000051ea <sen14262_initialise>:
    51ea:	6c 98       	cbi	0x0d, 4	; 13
    51ec:	ec e7       	ldi	r30, 0x7C	; 124
    51ee:	f0 e0       	ldi	r31, 0x00	; 0
    51f0:	80 81       	ld	r24, Z
    51f2:	80 6c       	ori	r24, 0xC0	; 192
    51f4:	80 83       	st	Z, r24
    51f6:	ea e7       	ldi	r30, 0x7A	; 122
    51f8:	f0 e0       	ldi	r31, 0x00	; 0
    51fa:	80 81       	ld	r24, Z
    51fc:	87 60       	ori	r24, 0x07	; 7
    51fe:	80 83       	st	Z, r24
    5200:	80 81       	ld	r24, Z
    5202:	88 60       	ori	r24, 0x08	; 8
    5204:	80 83       	st	Z, r24
    5206:	ad e7       	ldi	r26, 0x7D	; 125
    5208:	b0 e0       	ldi	r27, 0x00	; 0
    520a:	8c 91       	ld	r24, X
    520c:	86 60       	ori	r24, 0x06	; 6
    520e:	8c 93       	st	X, r24
    5210:	80 81       	ld	r24, Z
    5212:	80 68       	ori	r24, 0x80	; 128
    5214:	80 83       	st	Z, r24
    5216:	d6 cf       	rjmp	.-84     	; 0x51c4 <_startConversion>
    5218:	08 95       	ret

0000521a <sen14262_envelope>:
    521a:	2f b7       	in	r18, 0x3f	; 63
    521c:	f8 94       	cli
    521e:	80 91 29 18 	lds	r24, 0x1829	; 0x801829 <_lastAdc>
    5222:	90 91 2a 18 	lds	r25, 0x182A	; 0x80182a <_lastAdc+0x1>
    5226:	2f bf       	out	0x3f, r18	; 63
    5228:	08 95       	ret

0000522a <__vector_29>:
    522a:	1f 92       	push	r1
    522c:	0f 92       	push	r0
    522e:	0f b6       	in	r0, 0x3f	; 63
    5230:	0f 92       	push	r0
    5232:	11 24       	eor	r1, r1
    5234:	0b b6       	in	r0, 0x3b	; 59
    5236:	0f 92       	push	r0
    5238:	2f 93       	push	r18
    523a:	3f 93       	push	r19
    523c:	4f 93       	push	r20
    523e:	5f 93       	push	r21
    5240:	6f 93       	push	r22
    5242:	7f 93       	push	r23
    5244:	8f 93       	push	r24
    5246:	9f 93       	push	r25
    5248:	af 93       	push	r26
    524a:	bf 93       	push	r27
    524c:	ef 93       	push	r30
    524e:	ff 93       	push	r31
    5250:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
    5254:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
    5258:	90 93 2a 18 	sts	0x182A, r25	; 0x80182a <_lastAdc+0x1>
    525c:	80 93 29 18 	sts	0x1829, r24	; 0x801829 <_lastAdc>
    5260:	b1 df       	rcall	.-158    	; 0x51c4 <_startConversion>
    5262:	ff 91       	pop	r31
    5264:	ef 91       	pop	r30
    5266:	bf 91       	pop	r27
    5268:	af 91       	pop	r26
    526a:	9f 91       	pop	r25
    526c:	8f 91       	pop	r24
    526e:	7f 91       	pop	r23
    5270:	6f 91       	pop	r22
    5272:	5f 91       	pop	r21
    5274:	4f 91       	pop	r20
    5276:	3f 91       	pop	r19
    5278:	2f 91       	pop	r18
    527a:	0f 90       	pop	r0
    527c:	0b be       	out	0x3b, r0	; 59
    527e:	0f 90       	pop	r0
    5280:	0f be       	out	0x3f, r0	; 63
    5282:	0f 90       	pop	r0
    5284:	1f 90       	pop	r1
    5286:	18 95       	reti

00005288 <serial_create>:
    5288:	2f 92       	push	r2
    528a:	3f 92       	push	r3
    528c:	4f 92       	push	r4
    528e:	5f 92       	push	r5
    5290:	6f 92       	push	r6
    5292:	7f 92       	push	r7
    5294:	8f 92       	push	r8
    5296:	9f 92       	push	r9
    5298:	af 92       	push	r10
    529a:	cf 92       	push	r12
    529c:	ef 92       	push	r14
    529e:	ff 92       	push	r15
    52a0:	0f 93       	push	r16
    52a2:	1f 93       	push	r17
    52a4:	cf 93       	push	r28
    52a6:	df 93       	push	r29
    52a8:	cd b7       	in	r28, 0x3d	; 61
    52aa:	de b7       	in	r29, 0x3e	; 62
    52ac:	f8 2e       	mov	r15, r24
    52ae:	2a 01       	movw	r4, r20
    52b0:	3b 01       	movw	r6, r22
    52b2:	88 e0       	ldi	r24, 0x08	; 8
    52b4:	90 e0       	ldi	r25, 0x00	; 0
    52b6:	0e 94 85 31 	call	0x630a	; 0x630a <malloc>
    52ba:	8c 01       	movw	r16, r24
    52bc:	8f 2d       	mov	r24, r15
    52be:	90 e0       	ldi	r25, 0x00	; 0
    52c0:	fc 01       	movw	r30, r24
    52c2:	ee 0f       	add	r30, r30
    52c4:	ff 1f       	adc	r31, r31
    52c6:	e5 5d       	subi	r30, 0xD5	; 213
    52c8:	f7 4e       	sbci	r31, 0xE7	; 231
    52ca:	11 83       	std	Z+1, r17	; 0x01
    52cc:	00 83       	st	Z, r16
    52ce:	01 15       	cp	r16, r1
    52d0:	11 05       	cpc	r17, r1
    52d2:	09 f4       	brne	.+2      	; 0x52d6 <serial_create+0x4e>
    52d4:	66 c0       	rjmp	.+204    	; 0x53a2 <serial_create+0x11a>
    52d6:	88 0f       	add	r24, r24
    52d8:	99 1f       	adc	r25, r25
    52da:	fc 01       	movw	r30, r24
    52dc:	e5 5f       	subi	r30, 0xF5	; 245
    52de:	fd 4f       	sbci	r31, 0xFD	; 253
    52e0:	80 81       	ld	r24, Z
    52e2:	91 81       	ldd	r25, Z+1	; 0x01
    52e4:	d8 01       	movw	r26, r16
    52e6:	8d 93       	st	X+, r24
    52e8:	9c 93       	st	X, r25
    52ea:	8c 2d       	mov	r24, r12
    52ec:	90 e0       	ldi	r25, 0x00	; 0
    52ee:	88 0f       	add	r24, r24
    52f0:	99 1f       	adc	r25, r25
    52f2:	88 0f       	add	r24, r24
    52f4:	99 1f       	adc	r25, r25
    52f6:	0e 94 85 31 	call	0x630a	; 0x630a <malloc>
    52fa:	1c 01       	movw	r2, r24
    52fc:	86 e0       	ldi	r24, 0x06	; 6
    52fe:	90 e0       	ldi	r25, 0x00	; 0
    5300:	0e 94 85 31 	call	0x630a	; 0x630a <malloc>
    5304:	7c 01       	movw	r14, r24
    5306:	4c 2d       	mov	r20, r12
    5308:	b1 01       	movw	r22, r2
    530a:	ca d5       	rcall	.+2964   	; 0x5ea0 <fifo_init>
    530c:	f8 01       	movw	r30, r16
    530e:	f5 82       	std	Z+5, r15	; 0x05
    5310:	e4 82       	std	Z+4, r14	; 0x04
    5312:	8a 2d       	mov	r24, r10
    5314:	90 e0       	ldi	r25, 0x00	; 0
    5316:	88 0f       	add	r24, r24
    5318:	99 1f       	adc	r25, r25
    531a:	88 0f       	add	r24, r24
    531c:	99 1f       	adc	r25, r25
    531e:	f5 d7       	rcall	.+4074   	; 0x630a <malloc>
    5320:	1c 01       	movw	r2, r24
    5322:	86 e0       	ldi	r24, 0x06	; 6
    5324:	90 e0       	ldi	r25, 0x00	; 0
    5326:	f1 d7       	rcall	.+4066   	; 0x630a <malloc>
    5328:	7c 01       	movw	r14, r24
    532a:	4a 2d       	mov	r20, r10
    532c:	b1 01       	movw	r22, r2
    532e:	b8 d5       	rcall	.+2928   	; 0x5ea0 <fifo_init>
    5330:	d8 01       	movw	r26, r16
    5332:	13 96       	adiw	r26, 0x03	; 3
    5334:	fc 92       	st	X, r15
    5336:	ee 92       	st	-X, r14
    5338:	12 97       	sbiw	r26, 0x02	; 2
    533a:	17 96       	adiw	r26, 0x07	; 7
    533c:	9c 92       	st	X, r9
    533e:	8e 92       	st	-X, r8
    5340:	16 97       	sbiw	r26, 0x06	; 6
    5342:	ff b6       	in	r15, 0x3f	; 63
    5344:	f8 94       	cli
    5346:	ed 91       	ld	r30, X+
    5348:	fc 91       	ld	r31, X
    534a:	11 97       	sbiw	r26, 0x01	; 1
    534c:	36 97       	sbiw	r30, 0x06	; 6
    534e:	80 81       	ld	r24, Z
    5350:	82 60       	ori	r24, 0x02	; 2
    5352:	80 83       	st	Z, r24
    5354:	8d 90       	ld	r8, X+
    5356:	9c 90       	ld	r9, X
    5358:	c3 01       	movw	r24, r6
    535a:	b2 01       	movw	r22, r4
    535c:	bb d6       	rcall	.+3446   	; 0x60d4 <__floatunsisf>
    535e:	20 e0       	ldi	r18, 0x00	; 0
    5360:	30 e0       	ldi	r19, 0x00	; 0
    5362:	40 e0       	ldi	r20, 0x00	; 0
    5364:	51 e4       	ldi	r21, 0x41	; 65
    5366:	44 d7       	rcall	.+3720   	; 0x61f0 <__mulsf3>
    5368:	9b 01       	movw	r18, r22
    536a:	ac 01       	movw	r20, r24
    536c:	60 e0       	ldi	r22, 0x00	; 0
    536e:	74 e2       	ldi	r23, 0x24	; 36
    5370:	84 e7       	ldi	r24, 0x74	; 116
    5372:	9b e4       	ldi	r25, 0x4B	; 75
    5374:	16 d6       	rcall	.+3116   	; 0x5fa2 <__divsf3>
    5376:	20 e0       	ldi	r18, 0x00	; 0
    5378:	30 e0       	ldi	r19, 0x00	; 0
    537a:	40 e8       	ldi	r20, 0x80	; 128
    537c:	5f e3       	ldi	r21, 0x3F	; 63
    537e:	ac d5       	rcall	.+2904   	; 0x5ed8 <__subsf3>
    5380:	7d d6       	rcall	.+3322   	; 0x607c <__fixunssfsi>
    5382:	f4 01       	movw	r30, r8
    5384:	32 97       	sbiw	r30, 0x02	; 2
    5386:	60 83       	st	Z, r22
    5388:	d8 01       	movw	r26, r16
    538a:	ed 91       	ld	r30, X+
    538c:	fc 91       	ld	r31, X
    538e:	11 97       	sbiw	r26, 0x01	; 1
    5390:	35 97       	sbiw	r30, 0x05	; 5
    5392:	88 e9       	ldi	r24, 0x98	; 152
    5394:	80 83       	st	Z, r24
    5396:	ed 91       	ld	r30, X+
    5398:	fc 91       	ld	r31, X
    539a:	34 97       	sbiw	r30, 0x04	; 4
    539c:	86 e0       	ldi	r24, 0x06	; 6
    539e:	80 83       	st	Z, r24
    53a0:	ff be       	out	0x3f, r15	; 63
    53a2:	c8 01       	movw	r24, r16
    53a4:	df 91       	pop	r29
    53a6:	cf 91       	pop	r28
    53a8:	1f 91       	pop	r17
    53aa:	0f 91       	pop	r16
    53ac:	ff 90       	pop	r15
    53ae:	ef 90       	pop	r14
    53b0:	cf 90       	pop	r12
    53b2:	af 90       	pop	r10
    53b4:	9f 90       	pop	r9
    53b6:	8f 90       	pop	r8
    53b8:	7f 90       	pop	r7
    53ba:	6f 90       	pop	r6
    53bc:	5f 90       	pop	r5
    53be:	4f 90       	pop	r4
    53c0:	3f 90       	pop	r3
    53c2:	2f 90       	pop	r2
    53c4:	08 95       	ret

000053c6 <serial_sendByte>:
    53c6:	cf 93       	push	r28
    53c8:	df 93       	push	r29
    53ca:	dc 01       	movw	r26, r24
    53cc:	89 2b       	or	r24, r25
    53ce:	01 f1       	breq	.+64     	; 0x5410 <serial_sendByte+0x4a>
    53d0:	12 96       	adiw	r26, 0x02	; 2
    53d2:	ed 91       	ld	r30, X+
    53d4:	fc 91       	ld	r31, X
    53d6:	13 97       	sbiw	r26, 0x03	; 3
    53d8:	93 81       	ldd	r25, Z+3	; 0x03
    53da:	82 81       	ldd	r24, Z+2	; 0x02
    53dc:	25 81       	ldd	r18, Z+5	; 0x05
    53de:	98 1b       	sub	r25, r24
    53e0:	92 23       	and	r25, r18
    53e2:	84 81       	ldd	r24, Z+4	; 0x04
    53e4:	98 17       	cp	r25, r24
    53e6:	b1 f0       	breq	.+44     	; 0x5414 <serial_sendByte+0x4e>
    53e8:	83 81       	ldd	r24, Z+3	; 0x03
    53ea:	26 95       	lsr	r18
    53ec:	28 23       	and	r18, r24
    53ee:	c0 81       	ld	r28, Z
    53f0:	d1 81       	ldd	r29, Z+1	; 0x01
    53f2:	c2 0f       	add	r28, r18
    53f4:	d1 1d       	adc	r29, r1
    53f6:	68 83       	st	Y, r22
    53f8:	8f 5f       	subi	r24, 0xFF	; 255
    53fa:	95 81       	ldd	r25, Z+5	; 0x05
    53fc:	89 23       	and	r24, r25
    53fe:	83 83       	std	Z+3, r24	; 0x03
    5400:	ed 91       	ld	r30, X+
    5402:	fc 91       	ld	r31, X
    5404:	35 97       	sbiw	r30, 0x05	; 5
    5406:	80 81       	ld	r24, Z
    5408:	80 62       	ori	r24, 0x20	; 32
    540a:	80 83       	st	Z, r24
    540c:	80 e0       	ldi	r24, 0x00	; 0
    540e:	03 c0       	rjmp	.+6      	; 0x5416 <serial_sendByte+0x50>
    5410:	81 e0       	ldi	r24, 0x01	; 1
    5412:	01 c0       	rjmp	.+2      	; 0x5416 <serial_sendByte+0x50>
    5414:	82 e0       	ldi	r24, 0x02	; 2
    5416:	df 91       	pop	r29
    5418:	cf 91       	pop	r28
    541a:	08 95       	ret

0000541c <serial_sendBytes>:
    541c:	ef 92       	push	r14
    541e:	ff 92       	push	r15
    5420:	0f 93       	push	r16
    5422:	1f 93       	push	r17
    5424:	cf 93       	push	r28
    5426:	df 93       	push	r29
    5428:	7c 01       	movw	r14, r24
    542a:	00 97       	sbiw	r24, 0x00	; 0
    542c:	09 f4       	brne	.+2      	; 0x5430 <serial_sendBytes+0x14>
    542e:	41 c0       	rjmp	.+130    	; 0x54b2 <serial_sendBytes+0x96>
    5430:	dc 01       	movw	r26, r24
    5432:	12 96       	adiw	r26, 0x02	; 2
    5434:	ed 91       	ld	r30, X+
    5436:	fc 91       	ld	r31, X
    5438:	13 97       	sbiw	r26, 0x03	; 3
    543a:	93 81       	ldd	r25, Z+3	; 0x03
    543c:	82 81       	ldd	r24, Z+2	; 0x02
    543e:	98 1b       	sub	r25, r24
    5440:	85 81       	ldd	r24, Z+5	; 0x05
    5442:	98 23       	and	r25, r24
    5444:	84 81       	ldd	r24, Z+4	; 0x04
    5446:	89 1b       	sub	r24, r25
    5448:	86 17       	cp	r24, r22
    544a:	a8 f1       	brcs	.+106    	; 0x54b6 <serial_sendBytes+0x9a>
    544c:	66 23       	and	r22, r22
    544e:	41 f1       	breq	.+80     	; 0x54a0 <serial_sendBytes+0x84>
    5450:	84 2f       	mov	r24, r20
    5452:	95 2f       	mov	r25, r21
    5454:	dc 01       	movw	r26, r24
    5456:	61 50       	subi	r22, 0x01	; 1
    5458:	46 2f       	mov	r20, r22
    545a:	50 e0       	ldi	r21, 0x00	; 0
    545c:	4f 5f       	subi	r20, 0xFF	; 255
    545e:	5f 4f       	sbci	r21, 0xFF	; 255
    5460:	48 0f       	add	r20, r24
    5462:	59 1f       	adc	r21, r25
    5464:	e7 01       	movw	r28, r14
    5466:	ea 81       	ldd	r30, Y+2	; 0x02
    5468:	fb 81       	ldd	r31, Y+3	; 0x03
    546a:	93 81       	ldd	r25, Z+3	; 0x03
    546c:	82 81       	ldd	r24, Z+2	; 0x02
    546e:	25 81       	ldd	r18, Z+5	; 0x05
    5470:	98 1b       	sub	r25, r24
    5472:	92 23       	and	r25, r18
    5474:	84 81       	ldd	r24, Z+4	; 0x04
    5476:	98 17       	cp	r25, r24
    5478:	79 f0       	breq	.+30     	; 0x5498 <serial_sendBytes+0x7c>
    547a:	8c 91       	ld	r24, X
    547c:	93 81       	ldd	r25, Z+3	; 0x03
    547e:	26 95       	lsr	r18
    5480:	29 23       	and	r18, r25
    5482:	60 81       	ld	r22, Z
    5484:	71 81       	ldd	r23, Z+1	; 0x01
    5486:	8b 01       	movw	r16, r22
    5488:	02 0f       	add	r16, r18
    548a:	11 1d       	adc	r17, r1
    548c:	e8 01       	movw	r28, r16
    548e:	88 83       	st	Y, r24
    5490:	9f 5f       	subi	r25, 0xFF	; 255
    5492:	85 81       	ldd	r24, Z+5	; 0x05
    5494:	98 23       	and	r25, r24
    5496:	93 83       	std	Z+3, r25	; 0x03
    5498:	11 96       	adiw	r26, 0x01	; 1
    549a:	a4 17       	cp	r26, r20
    549c:	b5 07       	cpc	r27, r21
    549e:	11 f7       	brne	.-60     	; 0x5464 <serial_sendBytes+0x48>
    54a0:	d7 01       	movw	r26, r14
    54a2:	ed 91       	ld	r30, X+
    54a4:	fc 91       	ld	r31, X
    54a6:	35 97       	sbiw	r30, 0x05	; 5
    54a8:	80 81       	ld	r24, Z
    54aa:	80 62       	ori	r24, 0x20	; 32
    54ac:	80 83       	st	Z, r24
    54ae:	80 e0       	ldi	r24, 0x00	; 0
    54b0:	03 c0       	rjmp	.+6      	; 0x54b8 <serial_sendBytes+0x9c>
    54b2:	81 e0       	ldi	r24, 0x01	; 1
    54b4:	01 c0       	rjmp	.+2      	; 0x54b8 <serial_sendBytes+0x9c>
    54b6:	82 e0       	ldi	r24, 0x02	; 2
    54b8:	df 91       	pop	r29
    54ba:	cf 91       	pop	r28
    54bc:	1f 91       	pop	r17
    54be:	0f 91       	pop	r16
    54c0:	ff 90       	pop	r15
    54c2:	ef 90       	pop	r14
    54c4:	08 95       	ret

000054c6 <serial_getByte>:
    54c6:	00 97       	sbiw	r24, 0x00	; 0
    54c8:	d1 f0       	breq	.+52     	; 0x54fe <serial_getByte+0x38>
    54ca:	dc 01       	movw	r26, r24
    54cc:	14 96       	adiw	r26, 0x04	; 4
    54ce:	ed 91       	ld	r30, X+
    54d0:	fc 91       	ld	r31, X
    54d2:	15 97       	sbiw	r26, 0x05	; 5
    54d4:	93 81       	ldd	r25, Z+3	; 0x03
    54d6:	82 81       	ldd	r24, Z+2	; 0x02
    54d8:	98 17       	cp	r25, r24
    54da:	99 f0       	breq	.+38     	; 0x5502 <serial_getByte+0x3c>
    54dc:	92 81       	ldd	r25, Z+2	; 0x02
    54de:	85 81       	ldd	r24, Z+5	; 0x05
    54e0:	86 95       	lsr	r24
    54e2:	89 23       	and	r24, r25
    54e4:	a0 81       	ld	r26, Z
    54e6:	b1 81       	ldd	r27, Z+1	; 0x01
    54e8:	a8 0f       	add	r26, r24
    54ea:	b1 1d       	adc	r27, r1
    54ec:	8c 91       	ld	r24, X
    54ee:	db 01       	movw	r26, r22
    54f0:	8c 93       	st	X, r24
    54f2:	9f 5f       	subi	r25, 0xFF	; 255
    54f4:	85 81       	ldd	r24, Z+5	; 0x05
    54f6:	98 23       	and	r25, r24
    54f8:	92 83       	std	Z+2, r25	; 0x02
    54fa:	80 e0       	ldi	r24, 0x00	; 0
    54fc:	08 95       	ret
    54fe:	81 e0       	ldi	r24, 0x01	; 1
    5500:	08 95       	ret
    5502:	83 e0       	ldi	r24, 0x03	; 3
    5504:	08 95       	ret

00005506 <__vector_25>:
    5506:	1f 92       	push	r1
    5508:	0f 92       	push	r0
    550a:	0f b6       	in	r0, 0x3f	; 63
    550c:	0f 92       	push	r0
    550e:	11 24       	eor	r1, r1
    5510:	0b b6       	in	r0, 0x3b	; 59
    5512:	0f 92       	push	r0
    5514:	2f 93       	push	r18
    5516:	3f 93       	push	r19
    5518:	4f 93       	push	r20
    551a:	5f 93       	push	r21
    551c:	6f 93       	push	r22
    551e:	7f 93       	push	r23
    5520:	8f 93       	push	r24
    5522:	9f 93       	push	r25
    5524:	af 93       	push	r26
    5526:	bf 93       	push	r27
    5528:	cf 93       	push	r28
    552a:	df 93       	push	r29
    552c:	ef 93       	push	r30
    552e:	ff 93       	push	r31
    5530:	a0 91 2b 18 	lds	r26, 0x182B	; 0x80182b <_ser_handle>
    5534:	b0 91 2c 18 	lds	r27, 0x182C	; 0x80182c <_ser_handle+0x1>
    5538:	10 97       	sbiw	r26, 0x00	; 0
    553a:	11 f1       	breq	.+68     	; 0x5580 <__vector_25+0x7a>
    553c:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    5540:	14 96       	adiw	r26, 0x04	; 4
    5542:	ed 91       	ld	r30, X+
    5544:	fc 91       	ld	r31, X
    5546:	15 97       	sbiw	r26, 0x05	; 5
    5548:	93 81       	ldd	r25, Z+3	; 0x03
    554a:	82 81       	ldd	r24, Z+2	; 0x02
    554c:	25 81       	ldd	r18, Z+5	; 0x05
    554e:	98 1b       	sub	r25, r24
    5550:	92 23       	and	r25, r18
    5552:	84 81       	ldd	r24, Z+4	; 0x04
    5554:	98 17       	cp	r25, r24
    5556:	61 f0       	breq	.+24     	; 0x5570 <__vector_25+0x6a>
    5558:	83 81       	ldd	r24, Z+3	; 0x03
    555a:	26 95       	lsr	r18
    555c:	28 23       	and	r18, r24
    555e:	c0 81       	ld	r28, Z
    5560:	d1 81       	ldd	r29, Z+1	; 0x01
    5562:	c2 0f       	add	r28, r18
    5564:	d1 1d       	adc	r29, r1
    5566:	68 83       	st	Y, r22
    5568:	8f 5f       	subi	r24, 0xFF	; 255
    556a:	95 81       	ldd	r25, Z+5	; 0x05
    556c:	89 23       	and	r24, r25
    556e:	83 83       	std	Z+3, r24	; 0x03
    5570:	16 96       	adiw	r26, 0x06	; 6
    5572:	ed 91       	ld	r30, X+
    5574:	fc 91       	ld	r31, X
    5576:	17 97       	sbiw	r26, 0x07	; 7
    5578:	30 97       	sbiw	r30, 0x00	; 0
    557a:	11 f0       	breq	.+4      	; 0x5580 <__vector_25+0x7a>
    557c:	cd 01       	movw	r24, r26
    557e:	19 95       	eicall
    5580:	ff 91       	pop	r31
    5582:	ef 91       	pop	r30
    5584:	df 91       	pop	r29
    5586:	cf 91       	pop	r28
    5588:	bf 91       	pop	r27
    558a:	af 91       	pop	r26
    558c:	9f 91       	pop	r25
    558e:	8f 91       	pop	r24
    5590:	7f 91       	pop	r23
    5592:	6f 91       	pop	r22
    5594:	5f 91       	pop	r21
    5596:	4f 91       	pop	r20
    5598:	3f 91       	pop	r19
    559a:	2f 91       	pop	r18
    559c:	0f 90       	pop	r0
    559e:	0b be       	out	0x3b, r0	; 59
    55a0:	0f 90       	pop	r0
    55a2:	0f be       	out	0x3f, r0	; 63
    55a4:	0f 90       	pop	r0
    55a6:	1f 90       	pop	r1
    55a8:	18 95       	reti

000055aa <__vector_26>:
    55aa:	1f 92       	push	r1
    55ac:	0f 92       	push	r0
    55ae:	0f b6       	in	r0, 0x3f	; 63
    55b0:	0f 92       	push	r0
    55b2:	11 24       	eor	r1, r1
    55b4:	0b b6       	in	r0, 0x3b	; 59
    55b6:	0f 92       	push	r0
    55b8:	2f 93       	push	r18
    55ba:	8f 93       	push	r24
    55bc:	9f 93       	push	r25
    55be:	af 93       	push	r26
    55c0:	bf 93       	push	r27
    55c2:	ef 93       	push	r30
    55c4:	ff 93       	push	r31
    55c6:	e0 91 2b 18 	lds	r30, 0x182B	; 0x80182b <_ser_handle>
    55ca:	f0 91 2c 18 	lds	r31, 0x182C	; 0x80182c <_ser_handle+0x1>
    55ce:	30 97       	sbiw	r30, 0x00	; 0
    55d0:	b9 f0       	breq	.+46     	; 0x5600 <__vector_26+0x56>
    55d2:	02 80       	ldd	r0, Z+2	; 0x02
    55d4:	f3 81       	ldd	r31, Z+3	; 0x03
    55d6:	e0 2d       	mov	r30, r0
    55d8:	93 81       	ldd	r25, Z+3	; 0x03
    55da:	82 81       	ldd	r24, Z+2	; 0x02
    55dc:	98 17       	cp	r25, r24
    55de:	b1 f0       	breq	.+44     	; 0x560c <__vector_26+0x62>
    55e0:	92 81       	ldd	r25, Z+2	; 0x02
    55e2:	85 81       	ldd	r24, Z+5	; 0x05
    55e4:	28 2f       	mov	r18, r24
    55e6:	26 95       	lsr	r18
    55e8:	29 23       	and	r18, r25
    55ea:	a0 81       	ld	r26, Z
    55ec:	b1 81       	ldd	r27, Z+1	; 0x01
    55ee:	a2 0f       	add	r26, r18
    55f0:	b1 1d       	adc	r27, r1
    55f2:	2c 91       	ld	r18, X
    55f4:	9f 5f       	subi	r25, 0xFF	; 255
    55f6:	89 23       	and	r24, r25
    55f8:	82 83       	std	Z+2, r24	; 0x02
    55fa:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    55fe:	0b c0       	rjmp	.+22     	; 0x5616 <__vector_26+0x6c>
    5600:	e1 ec       	ldi	r30, 0xC1	; 193
    5602:	f0 e0       	ldi	r31, 0x00	; 0
    5604:	80 81       	ld	r24, Z
    5606:	8f 7d       	andi	r24, 0xDF	; 223
    5608:	80 83       	st	Z, r24
    560a:	05 c0       	rjmp	.+10     	; 0x5616 <__vector_26+0x6c>
    560c:	e1 ec       	ldi	r30, 0xC1	; 193
    560e:	f0 e0       	ldi	r31, 0x00	; 0
    5610:	80 81       	ld	r24, Z
    5612:	8f 7d       	andi	r24, 0xDF	; 223
    5614:	80 83       	st	Z, r24
    5616:	ff 91       	pop	r31
    5618:	ef 91       	pop	r30
    561a:	bf 91       	pop	r27
    561c:	af 91       	pop	r26
    561e:	9f 91       	pop	r25
    5620:	8f 91       	pop	r24
    5622:	2f 91       	pop	r18
    5624:	0f 90       	pop	r0
    5626:	0b be       	out	0x3b, r0	; 59
    5628:	0f 90       	pop	r0
    562a:	0f be       	out	0x3f, r0	; 63
    562c:	0f 90       	pop	r0
    562e:	1f 90       	pop	r1
    5630:	18 95       	reti

00005632 <__vector_36>:
    5632:	1f 92       	push	r1
    5634:	0f 92       	push	r0
    5636:	0f b6       	in	r0, 0x3f	; 63
    5638:	0f 92       	push	r0
    563a:	11 24       	eor	r1, r1
    563c:	0b b6       	in	r0, 0x3b	; 59
    563e:	0f 92       	push	r0
    5640:	2f 93       	push	r18
    5642:	3f 93       	push	r19
    5644:	4f 93       	push	r20
    5646:	5f 93       	push	r21
    5648:	6f 93       	push	r22
    564a:	7f 93       	push	r23
    564c:	8f 93       	push	r24
    564e:	9f 93       	push	r25
    5650:	af 93       	push	r26
    5652:	bf 93       	push	r27
    5654:	cf 93       	push	r28
    5656:	df 93       	push	r29
    5658:	ef 93       	push	r30
    565a:	ff 93       	push	r31
    565c:	a0 91 2d 18 	lds	r26, 0x182D	; 0x80182d <_ser_handle+0x2>
    5660:	b0 91 2e 18 	lds	r27, 0x182E	; 0x80182e <_ser_handle+0x3>
    5664:	10 97       	sbiw	r26, 0x00	; 0
    5666:	11 f1       	breq	.+68     	; 0x56ac <__vector_36+0x7a>
    5668:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    566c:	14 96       	adiw	r26, 0x04	; 4
    566e:	ed 91       	ld	r30, X+
    5670:	fc 91       	ld	r31, X
    5672:	15 97       	sbiw	r26, 0x05	; 5
    5674:	93 81       	ldd	r25, Z+3	; 0x03
    5676:	82 81       	ldd	r24, Z+2	; 0x02
    5678:	25 81       	ldd	r18, Z+5	; 0x05
    567a:	98 1b       	sub	r25, r24
    567c:	92 23       	and	r25, r18
    567e:	84 81       	ldd	r24, Z+4	; 0x04
    5680:	98 17       	cp	r25, r24
    5682:	61 f0       	breq	.+24     	; 0x569c <__vector_36+0x6a>
    5684:	83 81       	ldd	r24, Z+3	; 0x03
    5686:	26 95       	lsr	r18
    5688:	28 23       	and	r18, r24
    568a:	c0 81       	ld	r28, Z
    568c:	d1 81       	ldd	r29, Z+1	; 0x01
    568e:	c2 0f       	add	r28, r18
    5690:	d1 1d       	adc	r29, r1
    5692:	68 83       	st	Y, r22
    5694:	8f 5f       	subi	r24, 0xFF	; 255
    5696:	95 81       	ldd	r25, Z+5	; 0x05
    5698:	89 23       	and	r24, r25
    569a:	83 83       	std	Z+3, r24	; 0x03
    569c:	16 96       	adiw	r26, 0x06	; 6
    569e:	ed 91       	ld	r30, X+
    56a0:	fc 91       	ld	r31, X
    56a2:	17 97       	sbiw	r26, 0x07	; 7
    56a4:	30 97       	sbiw	r30, 0x00	; 0
    56a6:	11 f0       	breq	.+4      	; 0x56ac <__vector_36+0x7a>
    56a8:	cd 01       	movw	r24, r26
    56aa:	19 95       	eicall
    56ac:	ff 91       	pop	r31
    56ae:	ef 91       	pop	r30
    56b0:	df 91       	pop	r29
    56b2:	cf 91       	pop	r28
    56b4:	bf 91       	pop	r27
    56b6:	af 91       	pop	r26
    56b8:	9f 91       	pop	r25
    56ba:	8f 91       	pop	r24
    56bc:	7f 91       	pop	r23
    56be:	6f 91       	pop	r22
    56c0:	5f 91       	pop	r21
    56c2:	4f 91       	pop	r20
    56c4:	3f 91       	pop	r19
    56c6:	2f 91       	pop	r18
    56c8:	0f 90       	pop	r0
    56ca:	0b be       	out	0x3b, r0	; 59
    56cc:	0f 90       	pop	r0
    56ce:	0f be       	out	0x3f, r0	; 63
    56d0:	0f 90       	pop	r0
    56d2:	1f 90       	pop	r1
    56d4:	18 95       	reti

000056d6 <__vector_37>:
    56d6:	1f 92       	push	r1
    56d8:	0f 92       	push	r0
    56da:	0f b6       	in	r0, 0x3f	; 63
    56dc:	0f 92       	push	r0
    56de:	11 24       	eor	r1, r1
    56e0:	0b b6       	in	r0, 0x3b	; 59
    56e2:	0f 92       	push	r0
    56e4:	2f 93       	push	r18
    56e6:	8f 93       	push	r24
    56e8:	9f 93       	push	r25
    56ea:	af 93       	push	r26
    56ec:	bf 93       	push	r27
    56ee:	ef 93       	push	r30
    56f0:	ff 93       	push	r31
    56f2:	e0 91 2d 18 	lds	r30, 0x182D	; 0x80182d <_ser_handle+0x2>
    56f6:	f0 91 2e 18 	lds	r31, 0x182E	; 0x80182e <_ser_handle+0x3>
    56fa:	30 97       	sbiw	r30, 0x00	; 0
    56fc:	b9 f0       	breq	.+46     	; 0x572c <__vector_37+0x56>
    56fe:	02 80       	ldd	r0, Z+2	; 0x02
    5700:	f3 81       	ldd	r31, Z+3	; 0x03
    5702:	e0 2d       	mov	r30, r0
    5704:	93 81       	ldd	r25, Z+3	; 0x03
    5706:	82 81       	ldd	r24, Z+2	; 0x02
    5708:	98 17       	cp	r25, r24
    570a:	b1 f0       	breq	.+44     	; 0x5738 <__vector_37+0x62>
    570c:	92 81       	ldd	r25, Z+2	; 0x02
    570e:	85 81       	ldd	r24, Z+5	; 0x05
    5710:	28 2f       	mov	r18, r24
    5712:	26 95       	lsr	r18
    5714:	29 23       	and	r18, r25
    5716:	a0 81       	ld	r26, Z
    5718:	b1 81       	ldd	r27, Z+1	; 0x01
    571a:	a2 0f       	add	r26, r18
    571c:	b1 1d       	adc	r27, r1
    571e:	2c 91       	ld	r18, X
    5720:	9f 5f       	subi	r25, 0xFF	; 255
    5722:	89 23       	and	r24, r25
    5724:	82 83       	std	Z+2, r24	; 0x02
    5726:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    572a:	0b c0       	rjmp	.+22     	; 0x5742 <__vector_37+0x6c>
    572c:	e9 ec       	ldi	r30, 0xC9	; 201
    572e:	f0 e0       	ldi	r31, 0x00	; 0
    5730:	80 81       	ld	r24, Z
    5732:	8f 7d       	andi	r24, 0xDF	; 223
    5734:	80 83       	st	Z, r24
    5736:	05 c0       	rjmp	.+10     	; 0x5742 <__vector_37+0x6c>
    5738:	e9 ec       	ldi	r30, 0xC9	; 201
    573a:	f0 e0       	ldi	r31, 0x00	; 0
    573c:	80 81       	ld	r24, Z
    573e:	8f 7d       	andi	r24, 0xDF	; 223
    5740:	80 83       	st	Z, r24
    5742:	ff 91       	pop	r31
    5744:	ef 91       	pop	r30
    5746:	bf 91       	pop	r27
    5748:	af 91       	pop	r26
    574a:	9f 91       	pop	r25
    574c:	8f 91       	pop	r24
    574e:	2f 91       	pop	r18
    5750:	0f 90       	pop	r0
    5752:	0b be       	out	0x3b, r0	; 59
    5754:	0f 90       	pop	r0
    5756:	0f be       	out	0x3f, r0	; 63
    5758:	0f 90       	pop	r0
    575a:	1f 90       	pop	r1
    575c:	18 95       	reti

0000575e <__vector_51>:
    575e:	1f 92       	push	r1
    5760:	0f 92       	push	r0
    5762:	0f b6       	in	r0, 0x3f	; 63
    5764:	0f 92       	push	r0
    5766:	11 24       	eor	r1, r1
    5768:	0b b6       	in	r0, 0x3b	; 59
    576a:	0f 92       	push	r0
    576c:	2f 93       	push	r18
    576e:	3f 93       	push	r19
    5770:	4f 93       	push	r20
    5772:	5f 93       	push	r21
    5774:	6f 93       	push	r22
    5776:	7f 93       	push	r23
    5778:	8f 93       	push	r24
    577a:	9f 93       	push	r25
    577c:	af 93       	push	r26
    577e:	bf 93       	push	r27
    5780:	cf 93       	push	r28
    5782:	df 93       	push	r29
    5784:	ef 93       	push	r30
    5786:	ff 93       	push	r31
    5788:	a0 91 2f 18 	lds	r26, 0x182F	; 0x80182f <_ser_handle+0x4>
    578c:	b0 91 30 18 	lds	r27, 0x1830	; 0x801830 <_ser_handle+0x5>
    5790:	10 97       	sbiw	r26, 0x00	; 0
    5792:	11 f1       	breq	.+68     	; 0x57d8 <__vector_51+0x7a>
    5794:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    5798:	14 96       	adiw	r26, 0x04	; 4
    579a:	ed 91       	ld	r30, X+
    579c:	fc 91       	ld	r31, X
    579e:	15 97       	sbiw	r26, 0x05	; 5
    57a0:	93 81       	ldd	r25, Z+3	; 0x03
    57a2:	82 81       	ldd	r24, Z+2	; 0x02
    57a4:	25 81       	ldd	r18, Z+5	; 0x05
    57a6:	98 1b       	sub	r25, r24
    57a8:	92 23       	and	r25, r18
    57aa:	84 81       	ldd	r24, Z+4	; 0x04
    57ac:	98 17       	cp	r25, r24
    57ae:	61 f0       	breq	.+24     	; 0x57c8 <__vector_51+0x6a>
    57b0:	83 81       	ldd	r24, Z+3	; 0x03
    57b2:	26 95       	lsr	r18
    57b4:	28 23       	and	r18, r24
    57b6:	c0 81       	ld	r28, Z
    57b8:	d1 81       	ldd	r29, Z+1	; 0x01
    57ba:	c2 0f       	add	r28, r18
    57bc:	d1 1d       	adc	r29, r1
    57be:	68 83       	st	Y, r22
    57c0:	8f 5f       	subi	r24, 0xFF	; 255
    57c2:	95 81       	ldd	r25, Z+5	; 0x05
    57c4:	89 23       	and	r24, r25
    57c6:	83 83       	std	Z+3, r24	; 0x03
    57c8:	16 96       	adiw	r26, 0x06	; 6
    57ca:	ed 91       	ld	r30, X+
    57cc:	fc 91       	ld	r31, X
    57ce:	17 97       	sbiw	r26, 0x07	; 7
    57d0:	30 97       	sbiw	r30, 0x00	; 0
    57d2:	11 f0       	breq	.+4      	; 0x57d8 <__vector_51+0x7a>
    57d4:	cd 01       	movw	r24, r26
    57d6:	19 95       	eicall
    57d8:	ff 91       	pop	r31
    57da:	ef 91       	pop	r30
    57dc:	df 91       	pop	r29
    57de:	cf 91       	pop	r28
    57e0:	bf 91       	pop	r27
    57e2:	af 91       	pop	r26
    57e4:	9f 91       	pop	r25
    57e6:	8f 91       	pop	r24
    57e8:	7f 91       	pop	r23
    57ea:	6f 91       	pop	r22
    57ec:	5f 91       	pop	r21
    57ee:	4f 91       	pop	r20
    57f0:	3f 91       	pop	r19
    57f2:	2f 91       	pop	r18
    57f4:	0f 90       	pop	r0
    57f6:	0b be       	out	0x3b, r0	; 59
    57f8:	0f 90       	pop	r0
    57fa:	0f be       	out	0x3f, r0	; 63
    57fc:	0f 90       	pop	r0
    57fe:	1f 90       	pop	r1
    5800:	18 95       	reti

00005802 <__vector_52>:
    5802:	1f 92       	push	r1
    5804:	0f 92       	push	r0
    5806:	0f b6       	in	r0, 0x3f	; 63
    5808:	0f 92       	push	r0
    580a:	11 24       	eor	r1, r1
    580c:	0b b6       	in	r0, 0x3b	; 59
    580e:	0f 92       	push	r0
    5810:	2f 93       	push	r18
    5812:	8f 93       	push	r24
    5814:	9f 93       	push	r25
    5816:	af 93       	push	r26
    5818:	bf 93       	push	r27
    581a:	ef 93       	push	r30
    581c:	ff 93       	push	r31
    581e:	e0 91 2f 18 	lds	r30, 0x182F	; 0x80182f <_ser_handle+0x4>
    5822:	f0 91 30 18 	lds	r31, 0x1830	; 0x801830 <_ser_handle+0x5>
    5826:	30 97       	sbiw	r30, 0x00	; 0
    5828:	b9 f0       	breq	.+46     	; 0x5858 <__vector_52+0x56>
    582a:	02 80       	ldd	r0, Z+2	; 0x02
    582c:	f3 81       	ldd	r31, Z+3	; 0x03
    582e:	e0 2d       	mov	r30, r0
    5830:	93 81       	ldd	r25, Z+3	; 0x03
    5832:	82 81       	ldd	r24, Z+2	; 0x02
    5834:	98 17       	cp	r25, r24
    5836:	b1 f0       	breq	.+44     	; 0x5864 <__vector_52+0x62>
    5838:	92 81       	ldd	r25, Z+2	; 0x02
    583a:	85 81       	ldd	r24, Z+5	; 0x05
    583c:	28 2f       	mov	r18, r24
    583e:	26 95       	lsr	r18
    5840:	29 23       	and	r18, r25
    5842:	a0 81       	ld	r26, Z
    5844:	b1 81       	ldd	r27, Z+1	; 0x01
    5846:	a2 0f       	add	r26, r18
    5848:	b1 1d       	adc	r27, r1
    584a:	2c 91       	ld	r18, X
    584c:	9f 5f       	subi	r25, 0xFF	; 255
    584e:	89 23       	and	r24, r25
    5850:	82 83       	std	Z+2, r24	; 0x02
    5852:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    5856:	0b c0       	rjmp	.+22     	; 0x586e <__vector_52+0x6c>
    5858:	e1 ed       	ldi	r30, 0xD1	; 209
    585a:	f0 e0       	ldi	r31, 0x00	; 0
    585c:	80 81       	ld	r24, Z
    585e:	8f 7d       	andi	r24, 0xDF	; 223
    5860:	80 83       	st	Z, r24
    5862:	05 c0       	rjmp	.+10     	; 0x586e <__vector_52+0x6c>
    5864:	e1 ed       	ldi	r30, 0xD1	; 209
    5866:	f0 e0       	ldi	r31, 0x00	; 0
    5868:	80 81       	ld	r24, Z
    586a:	8f 7d       	andi	r24, 0xDF	; 223
    586c:	80 83       	st	Z, r24
    586e:	ff 91       	pop	r31
    5870:	ef 91       	pop	r30
    5872:	bf 91       	pop	r27
    5874:	af 91       	pop	r26
    5876:	9f 91       	pop	r25
    5878:	8f 91       	pop	r24
    587a:	2f 91       	pop	r18
    587c:	0f 90       	pop	r0
    587e:	0b be       	out	0x3b, r0	; 59
    5880:	0f 90       	pop	r0
    5882:	0f be       	out	0x3f, r0	; 63
    5884:	0f 90       	pop	r0
    5886:	1f 90       	pop	r1
    5888:	18 95       	reti

0000588a <__vector_54>:
    588a:	1f 92       	push	r1
    588c:	0f 92       	push	r0
    588e:	0f b6       	in	r0, 0x3f	; 63
    5890:	0f 92       	push	r0
    5892:	11 24       	eor	r1, r1
    5894:	0b b6       	in	r0, 0x3b	; 59
    5896:	0f 92       	push	r0
    5898:	2f 93       	push	r18
    589a:	3f 93       	push	r19
    589c:	4f 93       	push	r20
    589e:	5f 93       	push	r21
    58a0:	6f 93       	push	r22
    58a2:	7f 93       	push	r23
    58a4:	8f 93       	push	r24
    58a6:	9f 93       	push	r25
    58a8:	af 93       	push	r26
    58aa:	bf 93       	push	r27
    58ac:	cf 93       	push	r28
    58ae:	df 93       	push	r29
    58b0:	ef 93       	push	r30
    58b2:	ff 93       	push	r31
    58b4:	a0 91 31 18 	lds	r26, 0x1831	; 0x801831 <_ser_handle+0x6>
    58b8:	b0 91 32 18 	lds	r27, 0x1832	; 0x801832 <_ser_handle+0x7>
    58bc:	10 97       	sbiw	r26, 0x00	; 0
    58be:	11 f1       	breq	.+68     	; 0x5904 <__vector_54+0x7a>
    58c0:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    58c4:	14 96       	adiw	r26, 0x04	; 4
    58c6:	ed 91       	ld	r30, X+
    58c8:	fc 91       	ld	r31, X
    58ca:	15 97       	sbiw	r26, 0x05	; 5
    58cc:	93 81       	ldd	r25, Z+3	; 0x03
    58ce:	82 81       	ldd	r24, Z+2	; 0x02
    58d0:	25 81       	ldd	r18, Z+5	; 0x05
    58d2:	98 1b       	sub	r25, r24
    58d4:	92 23       	and	r25, r18
    58d6:	84 81       	ldd	r24, Z+4	; 0x04
    58d8:	98 17       	cp	r25, r24
    58da:	61 f0       	breq	.+24     	; 0x58f4 <__vector_54+0x6a>
    58dc:	83 81       	ldd	r24, Z+3	; 0x03
    58de:	26 95       	lsr	r18
    58e0:	28 23       	and	r18, r24
    58e2:	c0 81       	ld	r28, Z
    58e4:	d1 81       	ldd	r29, Z+1	; 0x01
    58e6:	c2 0f       	add	r28, r18
    58e8:	d1 1d       	adc	r29, r1
    58ea:	68 83       	st	Y, r22
    58ec:	8f 5f       	subi	r24, 0xFF	; 255
    58ee:	95 81       	ldd	r25, Z+5	; 0x05
    58f0:	89 23       	and	r24, r25
    58f2:	83 83       	std	Z+3, r24	; 0x03
    58f4:	16 96       	adiw	r26, 0x06	; 6
    58f6:	ed 91       	ld	r30, X+
    58f8:	fc 91       	ld	r31, X
    58fa:	17 97       	sbiw	r26, 0x07	; 7
    58fc:	30 97       	sbiw	r30, 0x00	; 0
    58fe:	11 f0       	breq	.+4      	; 0x5904 <__vector_54+0x7a>
    5900:	cd 01       	movw	r24, r26
    5902:	19 95       	eicall
    5904:	ff 91       	pop	r31
    5906:	ef 91       	pop	r30
    5908:	df 91       	pop	r29
    590a:	cf 91       	pop	r28
    590c:	bf 91       	pop	r27
    590e:	af 91       	pop	r26
    5910:	9f 91       	pop	r25
    5912:	8f 91       	pop	r24
    5914:	7f 91       	pop	r23
    5916:	6f 91       	pop	r22
    5918:	5f 91       	pop	r21
    591a:	4f 91       	pop	r20
    591c:	3f 91       	pop	r19
    591e:	2f 91       	pop	r18
    5920:	0f 90       	pop	r0
    5922:	0b be       	out	0x3b, r0	; 59
    5924:	0f 90       	pop	r0
    5926:	0f be       	out	0x3f, r0	; 63
    5928:	0f 90       	pop	r0
    592a:	1f 90       	pop	r1
    592c:	18 95       	reti

0000592e <__vector_55>:
    592e:	1f 92       	push	r1
    5930:	0f 92       	push	r0
    5932:	0f b6       	in	r0, 0x3f	; 63
    5934:	0f 92       	push	r0
    5936:	11 24       	eor	r1, r1
    5938:	0b b6       	in	r0, 0x3b	; 59
    593a:	0f 92       	push	r0
    593c:	2f 93       	push	r18
    593e:	8f 93       	push	r24
    5940:	9f 93       	push	r25
    5942:	af 93       	push	r26
    5944:	bf 93       	push	r27
    5946:	ef 93       	push	r30
    5948:	ff 93       	push	r31
    594a:	e0 91 31 18 	lds	r30, 0x1831	; 0x801831 <_ser_handle+0x6>
    594e:	f0 91 32 18 	lds	r31, 0x1832	; 0x801832 <_ser_handle+0x7>
    5952:	30 97       	sbiw	r30, 0x00	; 0
    5954:	b9 f0       	breq	.+46     	; 0x5984 <__vector_55+0x56>
    5956:	02 80       	ldd	r0, Z+2	; 0x02
    5958:	f3 81       	ldd	r31, Z+3	; 0x03
    595a:	e0 2d       	mov	r30, r0
    595c:	93 81       	ldd	r25, Z+3	; 0x03
    595e:	82 81       	ldd	r24, Z+2	; 0x02
    5960:	98 17       	cp	r25, r24
    5962:	b1 f0       	breq	.+44     	; 0x5990 <__vector_55+0x62>
    5964:	92 81       	ldd	r25, Z+2	; 0x02
    5966:	85 81       	ldd	r24, Z+5	; 0x05
    5968:	28 2f       	mov	r18, r24
    596a:	26 95       	lsr	r18
    596c:	29 23       	and	r18, r25
    596e:	a0 81       	ld	r26, Z
    5970:	b1 81       	ldd	r27, Z+1	; 0x01
    5972:	a2 0f       	add	r26, r18
    5974:	b1 1d       	adc	r27, r1
    5976:	2c 91       	ld	r18, X
    5978:	9f 5f       	subi	r25, 0xFF	; 255
    597a:	89 23       	and	r24, r25
    597c:	82 83       	std	Z+2, r24	; 0x02
    597e:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    5982:	0b c0       	rjmp	.+22     	; 0x599a <__vector_55+0x6c>
    5984:	e1 e3       	ldi	r30, 0x31	; 49
    5986:	f1 e0       	ldi	r31, 0x01	; 1
    5988:	80 81       	ld	r24, Z
    598a:	8f 7d       	andi	r24, 0xDF	; 223
    598c:	80 83       	st	Z, r24
    598e:	05 c0       	rjmp	.+10     	; 0x599a <__vector_55+0x6c>
    5990:	e1 e3       	ldi	r30, 0x31	; 49
    5992:	f1 e0       	ldi	r31, 0x01	; 1
    5994:	80 81       	ld	r24, Z
    5996:	8f 7d       	andi	r24, 0xDF	; 223
    5998:	80 83       	st	Z, r24
    599a:	ff 91       	pop	r31
    599c:	ef 91       	pop	r30
    599e:	bf 91       	pop	r27
    59a0:	af 91       	pop	r26
    59a2:	9f 91       	pop	r25
    59a4:	8f 91       	pop	r24
    59a6:	2f 91       	pop	r18
    59a8:	0f 90       	pop	r0
    59aa:	0b be       	out	0x3b, r0	; 59
    59ac:	0f 90       	pop	r0
    59ae:	0f be       	out	0x3f, r0	; 63
    59b0:	0f 90       	pop	r0
    59b2:	1f 90       	pop	r1
    59b4:	18 95       	reti

000059b6 <usart_getchar>:
    59b6:	cf 93       	push	r28
    59b8:	df 93       	push	r29
    59ba:	1f 92       	push	r1
    59bc:	cd b7       	in	r28, 0x3d	; 61
    59be:	de b7       	in	r29, 0x3e	; 62
    59c0:	be 01       	movw	r22, r28
    59c2:	6f 5f       	subi	r22, 0xFF	; 255
    59c4:	7f 4f       	sbci	r23, 0xFF	; 255
    59c6:	80 91 33 18 	lds	r24, 0x1833	; 0x801833 <_com_serial_instance>
    59ca:	90 91 34 18 	lds	r25, 0x1834	; 0x801834 <_com_serial_instance+0x1>
    59ce:	7b dd       	rcall	.-1290   	; 0x54c6 <serial_getByte>
    59d0:	81 11       	cpse	r24, r1
    59d2:	f6 cf       	rjmp	.-20     	; 0x59c0 <usart_getchar+0xa>
    59d4:	89 81       	ldd	r24, Y+1	; 0x01
    59d6:	90 e0       	ldi	r25, 0x00	; 0
    59d8:	0f 90       	pop	r0
    59da:	df 91       	pop	r29
    59dc:	cf 91       	pop	r28
    59de:	08 95       	ret

000059e0 <usart_putchar>:
    59e0:	68 2f       	mov	r22, r24
    59e2:	80 91 33 18 	lds	r24, 0x1833	; 0x801833 <_com_serial_instance>
    59e6:	90 91 34 18 	lds	r25, 0x1834	; 0x801834 <_com_serial_instance+0x1>
    59ea:	ed dc       	rcall	.-1574   	; 0x53c6 <serial_sendByte>
    59ec:	80 e0       	ldi	r24, 0x00	; 0
    59ee:	90 e0       	ldi	r25, 0x00	; 0
    59f0:	08 95       	ret

000059f2 <stdio_initialise>:
    59f2:	8f 92       	push	r8
    59f4:	9f 92       	push	r9
    59f6:	af 92       	push	r10
    59f8:	cf 92       	push	r12
    59fa:	ef 92       	push	r14
    59fc:	0f 93       	push	r16
    59fe:	81 2c       	mov	r8, r1
    5a00:	91 2c       	mov	r9, r1
    5a02:	68 94       	set
    5a04:	aa 24       	eor	r10, r10
    5a06:	a7 f8       	bld	r10, 7
    5a08:	68 94       	set
    5a0a:	cc 24       	eor	r12, r12
    5a0c:	c7 f8       	bld	r12, 7
    5a0e:	e1 2c       	mov	r14, r1
    5a10:	00 e0       	ldi	r16, 0x00	; 0
    5a12:	23 e0       	ldi	r18, 0x03	; 3
    5a14:	40 e0       	ldi	r20, 0x00	; 0
    5a16:	51 ee       	ldi	r21, 0xE1	; 225
    5a18:	60 e0       	ldi	r22, 0x00	; 0
    5a1a:	70 e0       	ldi	r23, 0x00	; 0
    5a1c:	35 dc       	rcall	.-1942   	; 0x5288 <serial_create>
    5a1e:	90 93 34 18 	sts	0x1834, r25	; 0x801834 <_com_serial_instance+0x1>
    5a22:	80 93 33 18 	sts	0x1833, r24	; 0x801833 <_com_serial_instance>
    5a26:	e0 e6       	ldi	r30, 0x60	; 96
    5a28:	f8 e1       	ldi	r31, 0x18	; 24
    5a2a:	83 e1       	ldi	r24, 0x13	; 19
    5a2c:	92 e0       	ldi	r25, 0x02	; 2
    5a2e:	91 83       	std	Z+1, r25	; 0x01
    5a30:	80 83       	st	Z, r24
    5a32:	93 83       	std	Z+3, r25	; 0x03
    5a34:	82 83       	std	Z+2, r24	; 0x02
    5a36:	0f 91       	pop	r16
    5a38:	ef 90       	pop	r14
    5a3a:	cf 90       	pop	r12
    5a3c:	af 90       	pop	r10
    5a3e:	9f 90       	pop	r9
    5a40:	8f 90       	pop	r8
    5a42:	08 95       	ret

00005a44 <_turn_on>:
    5a44:	90 e0       	ldi	r25, 0x00	; 0
    5a46:	fc 01       	movw	r30, r24
    5a48:	ee 0f       	add	r30, r30
    5a4a:	ff 1f       	adc	r31, r31
    5a4c:	e8 0f       	add	r30, r24
    5a4e:	f9 1f       	adc	r31, r25
    5a50:	ee 0f       	add	r30, r30
    5a52:	ff 1f       	adc	r31, r31
    5a54:	eb 5c       	subi	r30, 0xCB	; 203
    5a56:	f7 4e       	sbci	r31, 0xE7	; 231
    5a58:	23 81       	ldd	r18, Z+3	; 0x03
    5a5a:	21 11       	cpse	r18, r1
    5a5c:	20 c0       	rjmp	.+64     	; 0x5a9e <_turn_on+0x5a>
    5a5e:	9c 01       	movw	r18, r24
    5a60:	22 0f       	add	r18, r18
    5a62:	33 1f       	adc	r19, r19
    5a64:	f9 01       	movw	r30, r18
    5a66:	e8 0f       	add	r30, r24
    5a68:	f9 1f       	adc	r31, r25
    5a6a:	ee 0f       	add	r30, r30
    5a6c:	ff 1f       	adc	r31, r31
    5a6e:	eb 5c       	subi	r30, 0xCB	; 203
    5a70:	f7 4e       	sbci	r31, 0xE7	; 231
    5a72:	a0 81       	ld	r26, Z
    5a74:	b1 81       	ldd	r27, Z+1	; 0x01
    5a76:	4c 91       	ld	r20, X
    5a78:	f9 01       	movw	r30, r18
    5a7a:	e8 0f       	add	r30, r24
    5a7c:	f9 1f       	adc	r31, r25
    5a7e:	ee 0f       	add	r30, r30
    5a80:	ff 1f       	adc	r31, r31
    5a82:	eb 5c       	subi	r30, 0xCB	; 203
    5a84:	f7 4e       	sbci	r31, 0xE7	; 231
    5a86:	81 e0       	ldi	r24, 0x01	; 1
    5a88:	90 e0       	ldi	r25, 0x00	; 0
    5a8a:	02 80       	ldd	r0, Z+2	; 0x02
    5a8c:	02 c0       	rjmp	.+4      	; 0x5a92 <_turn_on+0x4e>
    5a8e:	88 0f       	add	r24, r24
    5a90:	99 1f       	adc	r25, r25
    5a92:	0a 94       	dec	r0
    5a94:	e2 f7       	brpl	.-8      	; 0x5a8e <_turn_on+0x4a>
    5a96:	80 95       	com	r24
    5a98:	84 23       	and	r24, r20
    5a9a:	8c 93       	st	X, r24
    5a9c:	08 95       	ret
    5a9e:	fc 01       	movw	r30, r24
    5aa0:	ee 0f       	add	r30, r30
    5aa2:	ff 1f       	adc	r31, r31
    5aa4:	df 01       	movw	r26, r30
    5aa6:	a8 0f       	add	r26, r24
    5aa8:	b9 1f       	adc	r27, r25
    5aaa:	aa 0f       	add	r26, r26
    5aac:	bb 1f       	adc	r27, r27
    5aae:	ab 5c       	subi	r26, 0xCB	; 203
    5ab0:	b7 4e       	sbci	r27, 0xE7	; 231
    5ab2:	0d 90       	ld	r0, X+
    5ab4:	bc 91       	ld	r27, X
    5ab6:	a0 2d       	mov	r26, r0
    5ab8:	2c 91       	ld	r18, X
    5aba:	e8 0f       	add	r30, r24
    5abc:	f9 1f       	adc	r31, r25
    5abe:	ee 0f       	add	r30, r30
    5ac0:	ff 1f       	adc	r31, r31
    5ac2:	eb 5c       	subi	r30, 0xCB	; 203
    5ac4:	f7 4e       	sbci	r31, 0xE7	; 231
    5ac6:	81 e0       	ldi	r24, 0x01	; 1
    5ac8:	90 e0       	ldi	r25, 0x00	; 0
    5aca:	02 80       	ldd	r0, Z+2	; 0x02
    5acc:	02 c0       	rjmp	.+4      	; 0x5ad2 <_turn_on+0x8e>
    5ace:	88 0f       	add	r24, r24
    5ad0:	99 1f       	adc	r25, r25
    5ad2:	0a 94       	dec	r0
    5ad4:	e2 f7       	brpl	.-8      	; 0x5ace <_turn_on+0x8a>
    5ad6:	82 2b       	or	r24, r18
    5ad8:	8c 93       	st	X, r24
    5ada:	08 95       	ret

00005adc <status_leds_slowBlink>:
    5adc:	cf 93       	push	r28
    5ade:	df 93       	push	r29
    5ae0:	90 e0       	ldi	r25, 0x00	; 0
    5ae2:	fc 01       	movw	r30, r24
    5ae4:	ee 0f       	add	r30, r30
    5ae6:	ff 1f       	adc	r31, r31
    5ae8:	df 01       	movw	r26, r30
    5aea:	a8 0f       	add	r26, r24
    5aec:	b9 1f       	adc	r27, r25
    5aee:	aa 0f       	add	r26, r26
    5af0:	bb 1f       	adc	r27, r27
    5af2:	ab 5c       	subi	r26, 0xCB	; 203
    5af4:	b7 4e       	sbci	r27, 0xE7	; 231
    5af6:	cd 91       	ld	r28, X+
    5af8:	dc 91       	ld	r29, X
    5afa:	11 97       	sbiw	r26, 0x01	; 1
    5afc:	48 81       	ld	r20, Y
    5afe:	21 e0       	ldi	r18, 0x01	; 1
    5b00:	30 e0       	ldi	r19, 0x00	; 0
    5b02:	12 96       	adiw	r26, 0x02	; 2
    5b04:	0c 90       	ld	r0, X
    5b06:	12 97       	sbiw	r26, 0x02	; 2
    5b08:	02 c0       	rjmp	.+4      	; 0x5b0e <status_leds_slowBlink+0x32>
    5b0a:	22 0f       	add	r18, r18
    5b0c:	33 1f       	adc	r19, r19
    5b0e:	0a 94       	dec	r0
    5b10:	e2 f7       	brpl	.-8      	; 0x5b0a <status_leds_slowBlink+0x2e>
    5b12:	24 27       	eor	r18, r20
    5b14:	28 83       	st	Y, r18
    5b16:	fd 01       	movw	r30, r26
    5b18:	81 e0       	ldi	r24, 0x01	; 1
    5b1a:	84 83       	std	Z+4, r24	; 0x04
    5b1c:	df 91       	pop	r29
    5b1e:	cf 91       	pop	r28
    5b20:	08 95       	ret

00005b22 <status_leds_ledOn>:
    5b22:	28 2f       	mov	r18, r24
    5b24:	30 e0       	ldi	r19, 0x00	; 0
    5b26:	f9 01       	movw	r30, r18
    5b28:	ee 0f       	add	r30, r30
    5b2a:	ff 1f       	adc	r31, r31
    5b2c:	e2 0f       	add	r30, r18
    5b2e:	f3 1f       	adc	r31, r19
    5b30:	ee 0f       	add	r30, r30
    5b32:	ff 1f       	adc	r31, r31
    5b34:	eb 5c       	subi	r30, 0xCB	; 203
    5b36:	f7 4e       	sbci	r31, 0xE7	; 231
    5b38:	93 e0       	ldi	r25, 0x03	; 3
    5b3a:	94 83       	std	Z+4, r25	; 0x04
    5b3c:	83 cf       	rjmp	.-250    	; 0x5a44 <_turn_on>
    5b3e:	08 95       	ret

00005b40 <status_leds_longPuls>:
    5b40:	90 e0       	ldi	r25, 0x00	; 0
    5b42:	fc 01       	movw	r30, r24
    5b44:	ee 0f       	add	r30, r30
    5b46:	ff 1f       	adc	r31, r31
    5b48:	df 01       	movw	r26, r30
    5b4a:	a8 0f       	add	r26, r24
    5b4c:	b9 1f       	adc	r27, r25
    5b4e:	aa 0f       	add	r26, r26
    5b50:	bb 1f       	adc	r27, r27
    5b52:	ab 5c       	subi	r26, 0xCB	; 203
    5b54:	b7 4e       	sbci	r27, 0xE7	; 231
    5b56:	26 e0       	ldi	r18, 0x06	; 6
    5b58:	15 96       	adiw	r26, 0x05	; 5
    5b5a:	2c 93       	st	X, r18
    5b5c:	15 97       	sbiw	r26, 0x05	; 5
    5b5e:	fd 01       	movw	r30, r26
    5b60:	14 82       	std	Z+4, r1	; 0x04
    5b62:	08 95       	ret

00005b64 <_initTwiInterface>:
    5b64:	80 91 5b 18 	lds	r24, 0x185B	; 0x80185b <_twiIsInitiated>
    5b68:	81 11       	cpse	r24, r1
    5b6a:	0c c0       	rjmp	.+24     	; 0x5b84 <_initTwiInterface+0x20>
    5b6c:	8c e0       	ldi	r24, 0x0C	; 12
    5b6e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5b72:	8f ef       	ldi	r24, 0xFF	; 255
    5b74:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5b78:	84 e0       	ldi	r24, 0x04	; 4
    5b7a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5b7e:	81 e0       	ldi	r24, 0x01	; 1
    5b80:	80 93 5b 18 	sts	0x185B, r24	; 0x80185b <_twiIsInitiated>
    5b84:	08 95       	ret

00005b86 <twiCreate>:
    5b86:	af 92       	push	r10
    5b88:	bf 92       	push	r11
    5b8a:	cf 92       	push	r12
    5b8c:	df 92       	push	r13
    5b8e:	ef 92       	push	r14
    5b90:	ff 92       	push	r15
    5b92:	0f 93       	push	r16
    5b94:	1f 93       	push	r17
    5b96:	cf 93       	push	r28
    5b98:	df 93       	push	r29
    5b9a:	a8 2e       	mov	r10, r24
    5b9c:	b6 2e       	mov	r11, r22
    5b9e:	69 01       	movw	r12, r18
    5ba0:	7a 01       	movw	r14, r20
    5ba2:	84 e0       	ldi	r24, 0x04	; 4
    5ba4:	90 e0       	ldi	r25, 0x00	; 0
    5ba6:	b1 d3       	rcall	.+1890   	; 0x630a <malloc>
    5ba8:	ec 01       	movw	r28, r24
    5baa:	89 2b       	or	r24, r25
    5bac:	61 f1       	breq	.+88     	; 0x5c06 <twiCreate+0x80>
    5bae:	a8 82       	st	Y, r10
    5bb0:	81 e0       	ldi	r24, 0x01	; 1
    5bb2:	b8 12       	cpse	r11, r24
    5bb4:	12 c0       	rjmp	.+36     	; 0x5bda <twiCreate+0x54>
    5bb6:	c7 01       	movw	r24, r14
    5bb8:	b6 01       	movw	r22, r12
    5bba:	20 ea       	ldi	r18, 0xA0	; 160
    5bbc:	36 e8       	ldi	r19, 0x86	; 134
    5bbe:	41 e0       	ldi	r20, 0x01	; 1
    5bc0:	50 e0       	ldi	r21, 0x00	; 0
    5bc2:	79 d3       	rcall	.+1778   	; 0x62b6 <__udivmodsi4>
    5bc4:	da 01       	movw	r26, r20
    5bc6:	c9 01       	movw	r24, r18
    5bc8:	40 97       	sbiw	r24, 0x10	; 16
    5bca:	a1 09       	sbc	r26, r1
    5bcc:	b1 09       	sbc	r27, r1
    5bce:	b6 95       	lsr	r27
    5bd0:	a7 95       	ror	r26
    5bd2:	97 95       	ror	r25
    5bd4:	87 95       	ror	r24
    5bd6:	89 83       	std	Y+1, r24	; 0x01
    5bd8:	11 c0       	rjmp	.+34     	; 0x5bfc <twiCreate+0x76>
    5bda:	c7 01       	movw	r24, r14
    5bdc:	b6 01       	movw	r22, r12
    5bde:	20 e8       	ldi	r18, 0x80	; 128
    5be0:	3a e1       	ldi	r19, 0x1A	; 26
    5be2:	46 e0       	ldi	r20, 0x06	; 6
    5be4:	50 e0       	ldi	r21, 0x00	; 0
    5be6:	67 d3       	rcall	.+1742   	; 0x62b6 <__udivmodsi4>
    5be8:	da 01       	movw	r26, r20
    5bea:	c9 01       	movw	r24, r18
    5bec:	40 97       	sbiw	r24, 0x10	; 16
    5bee:	a1 09       	sbc	r26, r1
    5bf0:	b1 09       	sbc	r27, r1
    5bf2:	b6 95       	lsr	r27
    5bf4:	a7 95       	ror	r26
    5bf6:	97 95       	ror	r25
    5bf8:	87 95       	ror	r24
    5bfa:	89 83       	std	Y+1, r24	; 0x01
    5bfc:	1b 83       	std	Y+3, r17	; 0x03
    5bfe:	0a 83       	std	Y+2, r16	; 0x02
    5c00:	8c 2f       	mov	r24, r28
    5c02:	9d 2f       	mov	r25, r29
    5c04:	02 c0       	rjmp	.+4      	; 0x5c0a <twiCreate+0x84>
    5c06:	80 e0       	ldi	r24, 0x00	; 0
    5c08:	90 e0       	ldi	r25, 0x00	; 0
    5c0a:	df 91       	pop	r29
    5c0c:	cf 91       	pop	r28
    5c0e:	1f 91       	pop	r17
    5c10:	0f 91       	pop	r16
    5c12:	ff 90       	pop	r15
    5c14:	ef 90       	pop	r14
    5c16:	df 90       	pop	r13
    5c18:	cf 90       	pop	r12
    5c1a:	bf 90       	pop	r11
    5c1c:	af 90       	pop	r10
    5c1e:	08 95       	ret

00005c20 <twiIsBusy>:
    5c20:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5c24:	81 70       	andi	r24, 0x01	; 1
    5c26:	08 95       	ret

00005c28 <twiTransmit>:
    5c28:	ff 92       	push	r15
    5c2a:	0f 93       	push	r16
    5c2c:	1f 93       	push	r17
    5c2e:	cf 93       	push	r28
    5c30:	df 93       	push	r29
    5c32:	00 97       	sbiw	r24, 0x00	; 0
    5c34:	d1 f1       	breq	.+116    	; 0x5caa <twiTransmit+0x82>
    5c36:	4a 30       	cpi	r20, 0x0A	; 10
    5c38:	d0 f5       	brcc	.+116    	; 0x5cae <twiTransmit+0x86>
    5c3a:	f4 2e       	mov	r15, r20
    5c3c:	8b 01       	movw	r16, r22
    5c3e:	ec 01       	movw	r28, r24
    5c40:	ef df       	rcall	.-34     	; 0x5c20 <twiIsBusy>
    5c42:	81 11       	cpse	r24, r1
    5c44:	36 c0       	rjmp	.+108    	; 0x5cb2 <twiTransmit+0x8a>
    5c46:	80 91 4e 18 	lds	r24, 0x184E	; 0x80184e <_twiCurrentHandler>
    5c4a:	90 91 4f 18 	lds	r25, 0x184F	; 0x80184f <_twiCurrentHandler+0x1>
    5c4e:	c8 17       	cp	r28, r24
    5c50:	d9 07       	cpc	r29, r25
    5c52:	41 f0       	breq	.+16     	; 0x5c64 <twiTransmit+0x3c>
    5c54:	87 df       	rcall	.-242    	; 0x5b64 <_initTwiInterface>
    5c56:	89 81       	ldd	r24, Y+1	; 0x01
    5c58:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5c5c:	d0 93 4f 18 	sts	0x184F, r29	; 0x80184f <_twiCurrentHandler+0x1>
    5c60:	c0 93 4e 18 	sts	0x184E, r28	; 0x80184e <_twiCurrentHandler>
    5c64:	81 e0       	ldi	r24, 0x01	; 1
    5c66:	8f 0d       	add	r24, r15
    5c68:	80 93 50 18 	sts	0x1850, r24	; 0x801850 <_twiMessageLen>
    5c6c:	88 81       	ld	r24, Y
    5c6e:	88 0f       	add	r24, r24
    5c70:	80 93 51 18 	sts	0x1851, r24	; 0x801851 <_twiMessageBuffer>
    5c74:	ff 20       	and	r15, r15
    5c76:	89 f0       	breq	.+34     	; 0x5c9a <twiTransmit+0x72>
    5c78:	f8 01       	movw	r30, r16
    5c7a:	a2 e5       	ldi	r26, 0x52	; 82
    5c7c:	b8 e1       	ldi	r27, 0x18	; 24
    5c7e:	4f ef       	ldi	r20, 0xFF	; 255
    5c80:	4f 0d       	add	r20, r15
    5c82:	64 2f       	mov	r22, r20
    5c84:	70 e0       	ldi	r23, 0x00	; 0
    5c86:	cb 01       	movw	r24, r22
    5c88:	01 96       	adiw	r24, 0x01	; 1
    5c8a:	b8 01       	movw	r22, r16
    5c8c:	68 0f       	add	r22, r24
    5c8e:	79 1f       	adc	r23, r25
    5c90:	81 91       	ld	r24, Z+
    5c92:	8d 93       	st	X+, r24
    5c94:	e6 17       	cp	r30, r22
    5c96:	f7 07       	cpc	r31, r23
    5c98:	d9 f7       	brne	.-10     	; 0x5c90 <twiTransmit+0x68>
    5c9a:	88 ef       	ldi	r24, 0xF8	; 248
    5c9c:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5ca0:	85 ea       	ldi	r24, 0xA5	; 165
    5ca2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5ca6:	84 e0       	ldi	r24, 0x04	; 4
    5ca8:	05 c0       	rjmp	.+10     	; 0x5cb4 <twiTransmit+0x8c>
    5caa:	86 e0       	ldi	r24, 0x06	; 6
    5cac:	03 c0       	rjmp	.+6      	; 0x5cb4 <twiTransmit+0x8c>
    5cae:	87 e0       	ldi	r24, 0x07	; 7
    5cb0:	01 c0       	rjmp	.+2      	; 0x5cb4 <twiTransmit+0x8c>
    5cb2:	82 e0       	ldi	r24, 0x02	; 2
    5cb4:	df 91       	pop	r29
    5cb6:	cf 91       	pop	r28
    5cb8:	1f 91       	pop	r17
    5cba:	0f 91       	pop	r16
    5cbc:	ff 90       	pop	r15
    5cbe:	08 95       	ret

00005cc0 <twiReceive>:
    5cc0:	1f 93       	push	r17
    5cc2:	cf 93       	push	r28
    5cc4:	df 93       	push	r29
    5cc6:	00 97       	sbiw	r24, 0x00	; 0
    5cc8:	29 f1       	breq	.+74     	; 0x5d14 <twiReceive+0x54>
    5cca:	6b 30       	cpi	r22, 0x0B	; 11
    5ccc:	28 f5       	brcc	.+74     	; 0x5d18 <twiReceive+0x58>
    5cce:	16 2f       	mov	r17, r22
    5cd0:	ec 01       	movw	r28, r24
    5cd2:	a6 df       	rcall	.-180    	; 0x5c20 <twiIsBusy>
    5cd4:	81 11       	cpse	r24, r1
    5cd6:	22 c0       	rjmp	.+68     	; 0x5d1c <twiReceive+0x5c>
    5cd8:	80 91 4e 18 	lds	r24, 0x184E	; 0x80184e <_twiCurrentHandler>
    5cdc:	90 91 4f 18 	lds	r25, 0x184F	; 0x80184f <_twiCurrentHandler+0x1>
    5ce0:	c8 17       	cp	r28, r24
    5ce2:	d9 07       	cpc	r29, r25
    5ce4:	41 f0       	breq	.+16     	; 0x5cf6 <twiReceive+0x36>
    5ce6:	3e df       	rcall	.-388    	; 0x5b64 <_initTwiInterface>
    5ce8:	89 81       	ldd	r24, Y+1	; 0x01
    5cea:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5cee:	d0 93 4f 18 	sts	0x184F, r29	; 0x80184f <_twiCurrentHandler+0x1>
    5cf2:	c0 93 4e 18 	sts	0x184E, r28	; 0x80184e <_twiCurrentHandler>
    5cf6:	10 93 50 18 	sts	0x1850, r17	; 0x801850 <_twiMessageLen>
    5cfa:	88 81       	ld	r24, Y
    5cfc:	88 0f       	add	r24, r24
    5cfe:	81 60       	ori	r24, 0x01	; 1
    5d00:	80 93 51 18 	sts	0x1851, r24	; 0x801851 <_twiMessageBuffer>
    5d04:	88 ef       	ldi	r24, 0xF8	; 248
    5d06:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5d0a:	85 ea       	ldi	r24, 0xA5	; 165
    5d0c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5d10:	85 e0       	ldi	r24, 0x05	; 5
    5d12:	05 c0       	rjmp	.+10     	; 0x5d1e <twiReceive+0x5e>
    5d14:	86 e0       	ldi	r24, 0x06	; 6
    5d16:	03 c0       	rjmp	.+6      	; 0x5d1e <twiReceive+0x5e>
    5d18:	87 e0       	ldi	r24, 0x07	; 7
    5d1a:	01 c0       	rjmp	.+2      	; 0x5d1e <twiReceive+0x5e>
    5d1c:	82 e0       	ldi	r24, 0x02	; 2
    5d1e:	df 91       	pop	r29
    5d20:	cf 91       	pop	r28
    5d22:	1f 91       	pop	r17
    5d24:	08 95       	ret

00005d26 <__vector_39>:
    5d26:	1f 92       	push	r1
    5d28:	0f 92       	push	r0
    5d2a:	0f b6       	in	r0, 0x3f	; 63
    5d2c:	0f 92       	push	r0
    5d2e:	11 24       	eor	r1, r1
    5d30:	0b b6       	in	r0, 0x3b	; 59
    5d32:	0f 92       	push	r0
    5d34:	2f 93       	push	r18
    5d36:	3f 93       	push	r19
    5d38:	4f 93       	push	r20
    5d3a:	5f 93       	push	r21
    5d3c:	6f 93       	push	r22
    5d3e:	7f 93       	push	r23
    5d40:	8f 93       	push	r24
    5d42:	9f 93       	push	r25
    5d44:	af 93       	push	r26
    5d46:	bf 93       	push	r27
    5d48:	ef 93       	push	r30
    5d4a:	ff 93       	push	r31
    5d4c:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5d50:	8e 2f       	mov	r24, r30
    5d52:	90 e0       	ldi	r25, 0x00	; 0
    5d54:	fc 01       	movw	r30, r24
    5d56:	38 97       	sbiw	r30, 0x08	; 8
    5d58:	e1 35       	cpi	r30, 0x51	; 81
    5d5a:	f1 05       	cpc	r31, r1
    5d5c:	08 f0       	brcs	.+2      	; 0x5d60 <__vector_39+0x3a>
    5d5e:	75 c0       	rjmp	.+234    	; 0x5e4a <__vector_39+0x124>
    5d60:	88 27       	eor	r24, r24
    5d62:	e4 58       	subi	r30, 0x84	; 132
    5d64:	ff 4f       	sbci	r31, 0xFF	; 255
    5d66:	8f 4f       	sbci	r24, 0xFF	; 255
    5d68:	c8 c2       	rjmp	.+1424   	; 0x62fa <__tablejump2__>
    5d6a:	10 92 4d 18 	sts	0x184D, r1	; 0x80184d <_index.1885>
    5d6e:	e0 91 4d 18 	lds	r30, 0x184D	; 0x80184d <_index.1885>
    5d72:	80 91 50 18 	lds	r24, 0x1850	; 0x801850 <_twiMessageLen>
    5d76:	e8 17       	cp	r30, r24
    5d78:	70 f4       	brcc	.+28     	; 0x5d96 <__vector_39+0x70>
    5d7a:	81 e0       	ldi	r24, 0x01	; 1
    5d7c:	8e 0f       	add	r24, r30
    5d7e:	80 93 4d 18 	sts	0x184D, r24	; 0x80184d <_index.1885>
    5d82:	f0 e0       	ldi	r31, 0x00	; 0
    5d84:	ef 5a       	subi	r30, 0xAF	; 175
    5d86:	f7 4e       	sbci	r31, 0xE7	; 231
    5d88:	80 81       	ld	r24, Z
    5d8a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5d8e:	85 e8       	ldi	r24, 0x85	; 133
    5d90:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5d94:	72 c0       	rjmp	.+228    	; 0x5e7a <__vector_39+0x154>
    5d96:	84 e9       	ldi	r24, 0x94	; 148
    5d98:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5d9c:	80 91 4e 18 	lds	r24, 0x184E	; 0x80184e <_twiCurrentHandler>
    5da0:	90 91 4f 18 	lds	r25, 0x184F	; 0x80184f <_twiCurrentHandler+0x1>
    5da4:	dc 01       	movw	r26, r24
    5da6:	12 96       	adiw	r26, 0x02	; 2
    5da8:	ed 91       	ld	r30, X+
    5daa:	fc 91       	ld	r31, X
    5dac:	13 97       	sbiw	r26, 0x03	; 3
    5dae:	30 97       	sbiw	r30, 0x00	; 0
    5db0:	09 f4       	brne	.+2      	; 0x5db4 <__vector_39+0x8e>
    5db2:	63 c0       	rjmp	.+198    	; 0x5e7a <__vector_39+0x154>
    5db4:	20 e0       	ldi	r18, 0x00	; 0
    5db6:	40 e0       	ldi	r20, 0x00	; 0
    5db8:	50 e0       	ldi	r21, 0x00	; 0
    5dba:	64 e0       	ldi	r22, 0x04	; 4
    5dbc:	19 95       	eicall
    5dbe:	5d c0       	rjmp	.+186    	; 0x5e7a <__vector_39+0x154>
    5dc0:	e0 91 4d 18 	lds	r30, 0x184D	; 0x80184d <_index.1885>
    5dc4:	81 e0       	ldi	r24, 0x01	; 1
    5dc6:	8e 0f       	add	r24, r30
    5dc8:	80 93 4d 18 	sts	0x184D, r24	; 0x80184d <_index.1885>
    5dcc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5dd0:	f0 e0       	ldi	r31, 0x00	; 0
    5dd2:	ef 5a       	subi	r30, 0xAF	; 175
    5dd4:	f7 4e       	sbci	r31, 0xE7	; 231
    5dd6:	80 83       	st	Z, r24
    5dd8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5ddc:	80 34       	cpi	r24, 0x40	; 64
    5dde:	11 f4       	brne	.+4      	; 0x5de4 <__vector_39+0xbe>
    5de0:	10 92 4d 18 	sts	0x184D, r1	; 0x80184d <_index.1885>
    5de4:	20 91 4d 18 	lds	r18, 0x184D	; 0x80184d <_index.1885>
    5de8:	30 e0       	ldi	r19, 0x00	; 0
    5dea:	80 91 50 18 	lds	r24, 0x1850	; 0x801850 <_twiMessageLen>
    5dee:	90 e0       	ldi	r25, 0x00	; 0
    5df0:	01 97       	sbiw	r24, 0x01	; 1
    5df2:	28 17       	cp	r18, r24
    5df4:	39 07       	cpc	r19, r25
    5df6:	24 f4       	brge	.+8      	; 0x5e00 <__vector_39+0xda>
    5df8:	85 ec       	ldi	r24, 0xC5	; 197
    5dfa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5dfe:	3d c0       	rjmp	.+122    	; 0x5e7a <__vector_39+0x154>
    5e00:	85 e8       	ldi	r24, 0x85	; 133
    5e02:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5e06:	39 c0       	rjmp	.+114    	; 0x5e7a <__vector_39+0x154>
    5e08:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5e0c:	e0 91 4d 18 	lds	r30, 0x184D	; 0x80184d <_index.1885>
    5e10:	f0 e0       	ldi	r31, 0x00	; 0
    5e12:	ef 5a       	subi	r30, 0xAF	; 175
    5e14:	f7 4e       	sbci	r31, 0xE7	; 231
    5e16:	80 83       	st	Z, r24
    5e18:	84 e9       	ldi	r24, 0x94	; 148
    5e1a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5e1e:	80 91 4e 18 	lds	r24, 0x184E	; 0x80184e <_twiCurrentHandler>
    5e22:	90 91 4f 18 	lds	r25, 0x184F	; 0x80184f <_twiCurrentHandler+0x1>
    5e26:	dc 01       	movw	r26, r24
    5e28:	12 96       	adiw	r26, 0x02	; 2
    5e2a:	ed 91       	ld	r30, X+
    5e2c:	fc 91       	ld	r31, X
    5e2e:	13 97       	sbiw	r26, 0x03	; 3
    5e30:	30 97       	sbiw	r30, 0x00	; 0
    5e32:	19 f1       	breq	.+70     	; 0x5e7a <__vector_39+0x154>
    5e34:	20 91 50 18 	lds	r18, 0x1850	; 0x801850 <_twiMessageLen>
    5e38:	41 e5       	ldi	r20, 0x51	; 81
    5e3a:	58 e1       	ldi	r21, 0x18	; 24
    5e3c:	65 e0       	ldi	r22, 0x05	; 5
    5e3e:	19 95       	eicall
    5e40:	1c c0       	rjmp	.+56     	; 0x5e7a <__vector_39+0x154>
    5e42:	85 ea       	ldi	r24, 0xA5	; 165
    5e44:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5e48:	18 c0       	rjmp	.+48     	; 0x5e7a <__vector_39+0x154>
    5e4a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5e4e:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5e52:	84 e0       	ldi	r24, 0x04	; 4
    5e54:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5e58:	80 91 4e 18 	lds	r24, 0x184E	; 0x80184e <_twiCurrentHandler>
    5e5c:	90 91 4f 18 	lds	r25, 0x184F	; 0x80184f <_twiCurrentHandler+0x1>
    5e60:	dc 01       	movw	r26, r24
    5e62:	12 96       	adiw	r26, 0x02	; 2
    5e64:	ed 91       	ld	r30, X+
    5e66:	fc 91       	ld	r31, X
    5e68:	13 97       	sbiw	r26, 0x03	; 3
    5e6a:	30 97       	sbiw	r30, 0x00	; 0
    5e6c:	31 f0       	breq	.+12     	; 0x5e7a <__vector_39+0x154>
    5e6e:	20 e0       	ldi	r18, 0x00	; 0
    5e70:	40 e0       	ldi	r20, 0x00	; 0
    5e72:	50 e0       	ldi	r21, 0x00	; 0
    5e74:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    5e78:	19 95       	eicall
    5e7a:	ff 91       	pop	r31
    5e7c:	ef 91       	pop	r30
    5e7e:	bf 91       	pop	r27
    5e80:	af 91       	pop	r26
    5e82:	9f 91       	pop	r25
    5e84:	8f 91       	pop	r24
    5e86:	7f 91       	pop	r23
    5e88:	6f 91       	pop	r22
    5e8a:	5f 91       	pop	r21
    5e8c:	4f 91       	pop	r20
    5e8e:	3f 91       	pop	r19
    5e90:	2f 91       	pop	r18
    5e92:	0f 90       	pop	r0
    5e94:	0b be       	out	0x3b, r0	; 59
    5e96:	0f 90       	pop	r0
    5e98:	0f be       	out	0x3f, r0	; 63
    5e9a:	0f 90       	pop	r0
    5e9c:	1f 90       	pop	r1
    5e9e:	18 95       	reti

00005ea0 <fifo_init>:
    5ea0:	fc 01       	movw	r30, r24
    5ea2:	41 11       	cpse	r20, r1
    5ea4:	01 c0       	rjmp	.+2      	; 0x5ea8 <fifo_init+0x8>
    5ea6:	52 d3       	rcall	.+1700   	; 0x654c <abort>
    5ea8:	84 2f       	mov	r24, r20
    5eaa:	90 e0       	ldi	r25, 0x00	; 0
    5eac:	9c 01       	movw	r18, r24
    5eae:	21 50       	subi	r18, 0x01	; 1
    5eb0:	31 09       	sbc	r19, r1
    5eb2:	82 23       	and	r24, r18
    5eb4:	93 23       	and	r25, r19
    5eb6:	89 2b       	or	r24, r25
    5eb8:	09 f0       	breq	.+2      	; 0x5ebc <fifo_init+0x1c>
    5eba:	48 d3       	rcall	.+1680   	; 0x654c <abort>
    5ebc:	41 38       	cpi	r20, 0x81	; 129
    5ebe:	08 f0       	brcs	.+2      	; 0x5ec2 <fifo_init+0x22>
    5ec0:	45 d3       	rcall	.+1674   	; 0x654c <abort>
    5ec2:	12 82       	std	Z+2, r1	; 0x02
    5ec4:	13 82       	std	Z+3, r1	; 0x03
    5ec6:	44 83       	std	Z+4, r20	; 0x04
    5ec8:	44 0f       	add	r20, r20
    5eca:	41 50       	subi	r20, 0x01	; 1
    5ecc:	45 83       	std	Z+5, r20	; 0x05
    5ece:	71 83       	std	Z+1, r23	; 0x01
    5ed0:	60 83       	st	Z, r22
    5ed2:	80 e0       	ldi	r24, 0x00	; 0
    5ed4:	90 e0       	ldi	r25, 0x00	; 0
    5ed6:	08 95       	ret

00005ed8 <__subsf3>:
    5ed8:	50 58       	subi	r21, 0x80	; 128

00005eda <__addsf3>:
    5eda:	bb 27       	eor	r27, r27
    5edc:	aa 27       	eor	r26, r26
    5ede:	0e d0       	rcall	.+28     	; 0x5efc <__addsf3x>
    5ee0:	4d c1       	rjmp	.+666    	; 0x617c <__fp_round>
    5ee2:	3e d1       	rcall	.+636    	; 0x6160 <__fp_pscA>
    5ee4:	30 f0       	brcs	.+12     	; 0x5ef2 <__addsf3+0x18>
    5ee6:	43 d1       	rcall	.+646    	; 0x616e <__fp_pscB>
    5ee8:	20 f0       	brcs	.+8      	; 0x5ef2 <__addsf3+0x18>
    5eea:	31 f4       	brne	.+12     	; 0x5ef8 <__addsf3+0x1e>
    5eec:	9f 3f       	cpi	r25, 0xFF	; 255
    5eee:	11 f4       	brne	.+4      	; 0x5ef4 <__addsf3+0x1a>
    5ef0:	1e f4       	brtc	.+6      	; 0x5ef8 <__addsf3+0x1e>
    5ef2:	33 c1       	rjmp	.+614    	; 0x615a <__fp_nan>
    5ef4:	0e f4       	brtc	.+2      	; 0x5ef8 <__addsf3+0x1e>
    5ef6:	e0 95       	com	r30
    5ef8:	e7 fb       	bst	r30, 7
    5efa:	29 c1       	rjmp	.+594    	; 0x614e <__fp_inf>

00005efc <__addsf3x>:
    5efc:	e9 2f       	mov	r30, r25
    5efe:	4f d1       	rcall	.+670    	; 0x619e <__fp_split3>
    5f00:	80 f3       	brcs	.-32     	; 0x5ee2 <__addsf3+0x8>
    5f02:	ba 17       	cp	r27, r26
    5f04:	62 07       	cpc	r22, r18
    5f06:	73 07       	cpc	r23, r19
    5f08:	84 07       	cpc	r24, r20
    5f0a:	95 07       	cpc	r25, r21
    5f0c:	18 f0       	brcs	.+6      	; 0x5f14 <__addsf3x+0x18>
    5f0e:	71 f4       	brne	.+28     	; 0x5f2c <__addsf3x+0x30>
    5f10:	9e f5       	brtc	.+102    	; 0x5f78 <__addsf3x+0x7c>
    5f12:	67 c1       	rjmp	.+718    	; 0x61e2 <__fp_zero>
    5f14:	0e f4       	brtc	.+2      	; 0x5f18 <__addsf3x+0x1c>
    5f16:	e0 95       	com	r30
    5f18:	0b 2e       	mov	r0, r27
    5f1a:	ba 2f       	mov	r27, r26
    5f1c:	a0 2d       	mov	r26, r0
    5f1e:	0b 01       	movw	r0, r22
    5f20:	b9 01       	movw	r22, r18
    5f22:	90 01       	movw	r18, r0
    5f24:	0c 01       	movw	r0, r24
    5f26:	ca 01       	movw	r24, r20
    5f28:	a0 01       	movw	r20, r0
    5f2a:	11 24       	eor	r1, r1
    5f2c:	ff 27       	eor	r31, r31
    5f2e:	59 1b       	sub	r21, r25
    5f30:	99 f0       	breq	.+38     	; 0x5f58 <__addsf3x+0x5c>
    5f32:	59 3f       	cpi	r21, 0xF9	; 249
    5f34:	50 f4       	brcc	.+20     	; 0x5f4a <__addsf3x+0x4e>
    5f36:	50 3e       	cpi	r21, 0xE0	; 224
    5f38:	68 f1       	brcs	.+90     	; 0x5f94 <__addsf3x+0x98>
    5f3a:	1a 16       	cp	r1, r26
    5f3c:	f0 40       	sbci	r31, 0x00	; 0
    5f3e:	a2 2f       	mov	r26, r18
    5f40:	23 2f       	mov	r18, r19
    5f42:	34 2f       	mov	r19, r20
    5f44:	44 27       	eor	r20, r20
    5f46:	58 5f       	subi	r21, 0xF8	; 248
    5f48:	f3 cf       	rjmp	.-26     	; 0x5f30 <__addsf3x+0x34>
    5f4a:	46 95       	lsr	r20
    5f4c:	37 95       	ror	r19
    5f4e:	27 95       	ror	r18
    5f50:	a7 95       	ror	r26
    5f52:	f0 40       	sbci	r31, 0x00	; 0
    5f54:	53 95       	inc	r21
    5f56:	c9 f7       	brne	.-14     	; 0x5f4a <__addsf3x+0x4e>
    5f58:	7e f4       	brtc	.+30     	; 0x5f78 <__addsf3x+0x7c>
    5f5a:	1f 16       	cp	r1, r31
    5f5c:	ba 0b       	sbc	r27, r26
    5f5e:	62 0b       	sbc	r22, r18
    5f60:	73 0b       	sbc	r23, r19
    5f62:	84 0b       	sbc	r24, r20
    5f64:	ba f0       	brmi	.+46     	; 0x5f94 <__addsf3x+0x98>
    5f66:	91 50       	subi	r25, 0x01	; 1
    5f68:	a1 f0       	breq	.+40     	; 0x5f92 <__addsf3x+0x96>
    5f6a:	ff 0f       	add	r31, r31
    5f6c:	bb 1f       	adc	r27, r27
    5f6e:	66 1f       	adc	r22, r22
    5f70:	77 1f       	adc	r23, r23
    5f72:	88 1f       	adc	r24, r24
    5f74:	c2 f7       	brpl	.-16     	; 0x5f66 <__addsf3x+0x6a>
    5f76:	0e c0       	rjmp	.+28     	; 0x5f94 <__addsf3x+0x98>
    5f78:	ba 0f       	add	r27, r26
    5f7a:	62 1f       	adc	r22, r18
    5f7c:	73 1f       	adc	r23, r19
    5f7e:	84 1f       	adc	r24, r20
    5f80:	48 f4       	brcc	.+18     	; 0x5f94 <__addsf3x+0x98>
    5f82:	87 95       	ror	r24
    5f84:	77 95       	ror	r23
    5f86:	67 95       	ror	r22
    5f88:	b7 95       	ror	r27
    5f8a:	f7 95       	ror	r31
    5f8c:	9e 3f       	cpi	r25, 0xFE	; 254
    5f8e:	08 f0       	brcs	.+2      	; 0x5f92 <__addsf3x+0x96>
    5f90:	b3 cf       	rjmp	.-154    	; 0x5ef8 <__addsf3+0x1e>
    5f92:	93 95       	inc	r25
    5f94:	88 0f       	add	r24, r24
    5f96:	08 f0       	brcs	.+2      	; 0x5f9a <__addsf3x+0x9e>
    5f98:	99 27       	eor	r25, r25
    5f9a:	ee 0f       	add	r30, r30
    5f9c:	97 95       	ror	r25
    5f9e:	87 95       	ror	r24
    5fa0:	08 95       	ret

00005fa2 <__divsf3>:
    5fa2:	0c d0       	rcall	.+24     	; 0x5fbc <__divsf3x>
    5fa4:	eb c0       	rjmp	.+470    	; 0x617c <__fp_round>
    5fa6:	e3 d0       	rcall	.+454    	; 0x616e <__fp_pscB>
    5fa8:	40 f0       	brcs	.+16     	; 0x5fba <__divsf3+0x18>
    5faa:	da d0       	rcall	.+436    	; 0x6160 <__fp_pscA>
    5fac:	30 f0       	brcs	.+12     	; 0x5fba <__divsf3+0x18>
    5fae:	21 f4       	brne	.+8      	; 0x5fb8 <__divsf3+0x16>
    5fb0:	5f 3f       	cpi	r21, 0xFF	; 255
    5fb2:	19 f0       	breq	.+6      	; 0x5fba <__divsf3+0x18>
    5fb4:	cc c0       	rjmp	.+408    	; 0x614e <__fp_inf>
    5fb6:	51 11       	cpse	r21, r1
    5fb8:	15 c1       	rjmp	.+554    	; 0x61e4 <__fp_szero>
    5fba:	cf c0       	rjmp	.+414    	; 0x615a <__fp_nan>

00005fbc <__divsf3x>:
    5fbc:	f0 d0       	rcall	.+480    	; 0x619e <__fp_split3>
    5fbe:	98 f3       	brcs	.-26     	; 0x5fa6 <__divsf3+0x4>

00005fc0 <__divsf3_pse>:
    5fc0:	99 23       	and	r25, r25
    5fc2:	c9 f3       	breq	.-14     	; 0x5fb6 <__divsf3+0x14>
    5fc4:	55 23       	and	r21, r21
    5fc6:	b1 f3       	breq	.-20     	; 0x5fb4 <__divsf3+0x12>
    5fc8:	95 1b       	sub	r25, r21
    5fca:	55 0b       	sbc	r21, r21
    5fcc:	bb 27       	eor	r27, r27
    5fce:	aa 27       	eor	r26, r26
    5fd0:	62 17       	cp	r22, r18
    5fd2:	73 07       	cpc	r23, r19
    5fd4:	84 07       	cpc	r24, r20
    5fd6:	38 f0       	brcs	.+14     	; 0x5fe6 <__divsf3_pse+0x26>
    5fd8:	9f 5f       	subi	r25, 0xFF	; 255
    5fda:	5f 4f       	sbci	r21, 0xFF	; 255
    5fdc:	22 0f       	add	r18, r18
    5fde:	33 1f       	adc	r19, r19
    5fe0:	44 1f       	adc	r20, r20
    5fe2:	aa 1f       	adc	r26, r26
    5fe4:	a9 f3       	breq	.-22     	; 0x5fd0 <__divsf3_pse+0x10>
    5fe6:	33 d0       	rcall	.+102    	; 0x604e <__divsf3_pse+0x8e>
    5fe8:	0e 2e       	mov	r0, r30
    5fea:	3a f0       	brmi	.+14     	; 0x5ffa <__divsf3_pse+0x3a>
    5fec:	e0 e8       	ldi	r30, 0x80	; 128
    5fee:	30 d0       	rcall	.+96     	; 0x6050 <__divsf3_pse+0x90>
    5ff0:	91 50       	subi	r25, 0x01	; 1
    5ff2:	50 40       	sbci	r21, 0x00	; 0
    5ff4:	e6 95       	lsr	r30
    5ff6:	00 1c       	adc	r0, r0
    5ff8:	ca f7       	brpl	.-14     	; 0x5fec <__divsf3_pse+0x2c>
    5ffa:	29 d0       	rcall	.+82     	; 0x604e <__divsf3_pse+0x8e>
    5ffc:	fe 2f       	mov	r31, r30
    5ffe:	27 d0       	rcall	.+78     	; 0x604e <__divsf3_pse+0x8e>
    6000:	66 0f       	add	r22, r22
    6002:	77 1f       	adc	r23, r23
    6004:	88 1f       	adc	r24, r24
    6006:	bb 1f       	adc	r27, r27
    6008:	26 17       	cp	r18, r22
    600a:	37 07       	cpc	r19, r23
    600c:	48 07       	cpc	r20, r24
    600e:	ab 07       	cpc	r26, r27
    6010:	b0 e8       	ldi	r27, 0x80	; 128
    6012:	09 f0       	breq	.+2      	; 0x6016 <__divsf3_pse+0x56>
    6014:	bb 0b       	sbc	r27, r27
    6016:	80 2d       	mov	r24, r0
    6018:	bf 01       	movw	r22, r30
    601a:	ff 27       	eor	r31, r31
    601c:	93 58       	subi	r25, 0x83	; 131
    601e:	5f 4f       	sbci	r21, 0xFF	; 255
    6020:	2a f0       	brmi	.+10     	; 0x602c <__divsf3_pse+0x6c>
    6022:	9e 3f       	cpi	r25, 0xFE	; 254
    6024:	51 05       	cpc	r21, r1
    6026:	68 f0       	brcs	.+26     	; 0x6042 <__divsf3_pse+0x82>
    6028:	92 c0       	rjmp	.+292    	; 0x614e <__fp_inf>
    602a:	dc c0       	rjmp	.+440    	; 0x61e4 <__fp_szero>
    602c:	5f 3f       	cpi	r21, 0xFF	; 255
    602e:	ec f3       	brlt	.-6      	; 0x602a <__divsf3_pse+0x6a>
    6030:	98 3e       	cpi	r25, 0xE8	; 232
    6032:	dc f3       	brlt	.-10     	; 0x602a <__divsf3_pse+0x6a>
    6034:	86 95       	lsr	r24
    6036:	77 95       	ror	r23
    6038:	67 95       	ror	r22
    603a:	b7 95       	ror	r27
    603c:	f7 95       	ror	r31
    603e:	9f 5f       	subi	r25, 0xFF	; 255
    6040:	c9 f7       	brne	.-14     	; 0x6034 <__divsf3_pse+0x74>
    6042:	88 0f       	add	r24, r24
    6044:	91 1d       	adc	r25, r1
    6046:	96 95       	lsr	r25
    6048:	87 95       	ror	r24
    604a:	97 f9       	bld	r25, 7
    604c:	08 95       	ret
    604e:	e1 e0       	ldi	r30, 0x01	; 1
    6050:	66 0f       	add	r22, r22
    6052:	77 1f       	adc	r23, r23
    6054:	88 1f       	adc	r24, r24
    6056:	bb 1f       	adc	r27, r27
    6058:	62 17       	cp	r22, r18
    605a:	73 07       	cpc	r23, r19
    605c:	84 07       	cpc	r24, r20
    605e:	ba 07       	cpc	r27, r26
    6060:	20 f0       	brcs	.+8      	; 0x606a <__divsf3_pse+0xaa>
    6062:	62 1b       	sub	r22, r18
    6064:	73 0b       	sbc	r23, r19
    6066:	84 0b       	sbc	r24, r20
    6068:	ba 0b       	sbc	r27, r26
    606a:	ee 1f       	adc	r30, r30
    606c:	88 f7       	brcc	.-30     	; 0x6050 <__divsf3_pse+0x90>
    606e:	e0 95       	com	r30
    6070:	08 95       	ret

00006072 <__fixsfsi>:
    6072:	04 d0       	rcall	.+8      	; 0x607c <__fixunssfsi>
    6074:	68 94       	set
    6076:	b1 11       	cpse	r27, r1
    6078:	b5 c0       	rjmp	.+362    	; 0x61e4 <__fp_szero>
    607a:	08 95       	ret

0000607c <__fixunssfsi>:
    607c:	98 d0       	rcall	.+304    	; 0x61ae <__fp_splitA>
    607e:	88 f0       	brcs	.+34     	; 0x60a2 <__fixunssfsi+0x26>
    6080:	9f 57       	subi	r25, 0x7F	; 127
    6082:	90 f0       	brcs	.+36     	; 0x60a8 <__fixunssfsi+0x2c>
    6084:	b9 2f       	mov	r27, r25
    6086:	99 27       	eor	r25, r25
    6088:	b7 51       	subi	r27, 0x17	; 23
    608a:	a0 f0       	brcs	.+40     	; 0x60b4 <__fixunssfsi+0x38>
    608c:	d1 f0       	breq	.+52     	; 0x60c2 <__fixunssfsi+0x46>
    608e:	66 0f       	add	r22, r22
    6090:	77 1f       	adc	r23, r23
    6092:	88 1f       	adc	r24, r24
    6094:	99 1f       	adc	r25, r25
    6096:	1a f0       	brmi	.+6      	; 0x609e <__fixunssfsi+0x22>
    6098:	ba 95       	dec	r27
    609a:	c9 f7       	brne	.-14     	; 0x608e <__fixunssfsi+0x12>
    609c:	12 c0       	rjmp	.+36     	; 0x60c2 <__fixunssfsi+0x46>
    609e:	b1 30       	cpi	r27, 0x01	; 1
    60a0:	81 f0       	breq	.+32     	; 0x60c2 <__fixunssfsi+0x46>
    60a2:	9f d0       	rcall	.+318    	; 0x61e2 <__fp_zero>
    60a4:	b1 e0       	ldi	r27, 0x01	; 1
    60a6:	08 95       	ret
    60a8:	9c c0       	rjmp	.+312    	; 0x61e2 <__fp_zero>
    60aa:	67 2f       	mov	r22, r23
    60ac:	78 2f       	mov	r23, r24
    60ae:	88 27       	eor	r24, r24
    60b0:	b8 5f       	subi	r27, 0xF8	; 248
    60b2:	39 f0       	breq	.+14     	; 0x60c2 <__fixunssfsi+0x46>
    60b4:	b9 3f       	cpi	r27, 0xF9	; 249
    60b6:	cc f3       	brlt	.-14     	; 0x60aa <__fixunssfsi+0x2e>
    60b8:	86 95       	lsr	r24
    60ba:	77 95       	ror	r23
    60bc:	67 95       	ror	r22
    60be:	b3 95       	inc	r27
    60c0:	d9 f7       	brne	.-10     	; 0x60b8 <__fixunssfsi+0x3c>
    60c2:	3e f4       	brtc	.+14     	; 0x60d2 <__fixunssfsi+0x56>
    60c4:	90 95       	com	r25
    60c6:	80 95       	com	r24
    60c8:	70 95       	com	r23
    60ca:	61 95       	neg	r22
    60cc:	7f 4f       	sbci	r23, 0xFF	; 255
    60ce:	8f 4f       	sbci	r24, 0xFF	; 255
    60d0:	9f 4f       	sbci	r25, 0xFF	; 255
    60d2:	08 95       	ret

000060d4 <__floatunsisf>:
    60d4:	e8 94       	clt
    60d6:	09 c0       	rjmp	.+18     	; 0x60ea <__floatsisf+0x12>

000060d8 <__floatsisf>:
    60d8:	97 fb       	bst	r25, 7
    60da:	3e f4       	brtc	.+14     	; 0x60ea <__floatsisf+0x12>
    60dc:	90 95       	com	r25
    60de:	80 95       	com	r24
    60e0:	70 95       	com	r23
    60e2:	61 95       	neg	r22
    60e4:	7f 4f       	sbci	r23, 0xFF	; 255
    60e6:	8f 4f       	sbci	r24, 0xFF	; 255
    60e8:	9f 4f       	sbci	r25, 0xFF	; 255
    60ea:	99 23       	and	r25, r25
    60ec:	a9 f0       	breq	.+42     	; 0x6118 <__floatsisf+0x40>
    60ee:	f9 2f       	mov	r31, r25
    60f0:	96 e9       	ldi	r25, 0x96	; 150
    60f2:	bb 27       	eor	r27, r27
    60f4:	93 95       	inc	r25
    60f6:	f6 95       	lsr	r31
    60f8:	87 95       	ror	r24
    60fa:	77 95       	ror	r23
    60fc:	67 95       	ror	r22
    60fe:	b7 95       	ror	r27
    6100:	f1 11       	cpse	r31, r1
    6102:	f8 cf       	rjmp	.-16     	; 0x60f4 <__floatsisf+0x1c>
    6104:	fa f4       	brpl	.+62     	; 0x6144 <__floatsisf+0x6c>
    6106:	bb 0f       	add	r27, r27
    6108:	11 f4       	brne	.+4      	; 0x610e <__floatsisf+0x36>
    610a:	60 ff       	sbrs	r22, 0
    610c:	1b c0       	rjmp	.+54     	; 0x6144 <__floatsisf+0x6c>
    610e:	6f 5f       	subi	r22, 0xFF	; 255
    6110:	7f 4f       	sbci	r23, 0xFF	; 255
    6112:	8f 4f       	sbci	r24, 0xFF	; 255
    6114:	9f 4f       	sbci	r25, 0xFF	; 255
    6116:	16 c0       	rjmp	.+44     	; 0x6144 <__floatsisf+0x6c>
    6118:	88 23       	and	r24, r24
    611a:	11 f0       	breq	.+4      	; 0x6120 <__floatsisf+0x48>
    611c:	96 e9       	ldi	r25, 0x96	; 150
    611e:	11 c0       	rjmp	.+34     	; 0x6142 <__floatsisf+0x6a>
    6120:	77 23       	and	r23, r23
    6122:	21 f0       	breq	.+8      	; 0x612c <__floatsisf+0x54>
    6124:	9e e8       	ldi	r25, 0x8E	; 142
    6126:	87 2f       	mov	r24, r23
    6128:	76 2f       	mov	r23, r22
    612a:	05 c0       	rjmp	.+10     	; 0x6136 <__floatsisf+0x5e>
    612c:	66 23       	and	r22, r22
    612e:	71 f0       	breq	.+28     	; 0x614c <__floatsisf+0x74>
    6130:	96 e8       	ldi	r25, 0x86	; 134
    6132:	86 2f       	mov	r24, r22
    6134:	70 e0       	ldi	r23, 0x00	; 0
    6136:	60 e0       	ldi	r22, 0x00	; 0
    6138:	2a f0       	brmi	.+10     	; 0x6144 <__floatsisf+0x6c>
    613a:	9a 95       	dec	r25
    613c:	66 0f       	add	r22, r22
    613e:	77 1f       	adc	r23, r23
    6140:	88 1f       	adc	r24, r24
    6142:	da f7       	brpl	.-10     	; 0x613a <__floatsisf+0x62>
    6144:	88 0f       	add	r24, r24
    6146:	96 95       	lsr	r25
    6148:	87 95       	ror	r24
    614a:	97 f9       	bld	r25, 7
    614c:	08 95       	ret

0000614e <__fp_inf>:
    614e:	97 f9       	bld	r25, 7
    6150:	9f 67       	ori	r25, 0x7F	; 127
    6152:	80 e8       	ldi	r24, 0x80	; 128
    6154:	70 e0       	ldi	r23, 0x00	; 0
    6156:	60 e0       	ldi	r22, 0x00	; 0
    6158:	08 95       	ret

0000615a <__fp_nan>:
    615a:	9f ef       	ldi	r25, 0xFF	; 255
    615c:	80 ec       	ldi	r24, 0xC0	; 192
    615e:	08 95       	ret

00006160 <__fp_pscA>:
    6160:	00 24       	eor	r0, r0
    6162:	0a 94       	dec	r0
    6164:	16 16       	cp	r1, r22
    6166:	17 06       	cpc	r1, r23
    6168:	18 06       	cpc	r1, r24
    616a:	09 06       	cpc	r0, r25
    616c:	08 95       	ret

0000616e <__fp_pscB>:
    616e:	00 24       	eor	r0, r0
    6170:	0a 94       	dec	r0
    6172:	12 16       	cp	r1, r18
    6174:	13 06       	cpc	r1, r19
    6176:	14 06       	cpc	r1, r20
    6178:	05 06       	cpc	r0, r21
    617a:	08 95       	ret

0000617c <__fp_round>:
    617c:	09 2e       	mov	r0, r25
    617e:	03 94       	inc	r0
    6180:	00 0c       	add	r0, r0
    6182:	11 f4       	brne	.+4      	; 0x6188 <__fp_round+0xc>
    6184:	88 23       	and	r24, r24
    6186:	52 f0       	brmi	.+20     	; 0x619c <__fp_round+0x20>
    6188:	bb 0f       	add	r27, r27
    618a:	40 f4       	brcc	.+16     	; 0x619c <__fp_round+0x20>
    618c:	bf 2b       	or	r27, r31
    618e:	11 f4       	brne	.+4      	; 0x6194 <__fp_round+0x18>
    6190:	60 ff       	sbrs	r22, 0
    6192:	04 c0       	rjmp	.+8      	; 0x619c <__fp_round+0x20>
    6194:	6f 5f       	subi	r22, 0xFF	; 255
    6196:	7f 4f       	sbci	r23, 0xFF	; 255
    6198:	8f 4f       	sbci	r24, 0xFF	; 255
    619a:	9f 4f       	sbci	r25, 0xFF	; 255
    619c:	08 95       	ret

0000619e <__fp_split3>:
    619e:	57 fd       	sbrc	r21, 7
    61a0:	90 58       	subi	r25, 0x80	; 128
    61a2:	44 0f       	add	r20, r20
    61a4:	55 1f       	adc	r21, r21
    61a6:	59 f0       	breq	.+22     	; 0x61be <__fp_splitA+0x10>
    61a8:	5f 3f       	cpi	r21, 0xFF	; 255
    61aa:	71 f0       	breq	.+28     	; 0x61c8 <__fp_splitA+0x1a>
    61ac:	47 95       	ror	r20

000061ae <__fp_splitA>:
    61ae:	88 0f       	add	r24, r24
    61b0:	97 fb       	bst	r25, 7
    61b2:	99 1f       	adc	r25, r25
    61b4:	61 f0       	breq	.+24     	; 0x61ce <__fp_splitA+0x20>
    61b6:	9f 3f       	cpi	r25, 0xFF	; 255
    61b8:	79 f0       	breq	.+30     	; 0x61d8 <__fp_splitA+0x2a>
    61ba:	87 95       	ror	r24
    61bc:	08 95       	ret
    61be:	12 16       	cp	r1, r18
    61c0:	13 06       	cpc	r1, r19
    61c2:	14 06       	cpc	r1, r20
    61c4:	55 1f       	adc	r21, r21
    61c6:	f2 cf       	rjmp	.-28     	; 0x61ac <__fp_split3+0xe>
    61c8:	46 95       	lsr	r20
    61ca:	f1 df       	rcall	.-30     	; 0x61ae <__fp_splitA>
    61cc:	08 c0       	rjmp	.+16     	; 0x61de <__fp_splitA+0x30>
    61ce:	16 16       	cp	r1, r22
    61d0:	17 06       	cpc	r1, r23
    61d2:	18 06       	cpc	r1, r24
    61d4:	99 1f       	adc	r25, r25
    61d6:	f1 cf       	rjmp	.-30     	; 0x61ba <__fp_splitA+0xc>
    61d8:	86 95       	lsr	r24
    61da:	71 05       	cpc	r23, r1
    61dc:	61 05       	cpc	r22, r1
    61de:	08 94       	sec
    61e0:	08 95       	ret

000061e2 <__fp_zero>:
    61e2:	e8 94       	clt

000061e4 <__fp_szero>:
    61e4:	bb 27       	eor	r27, r27
    61e6:	66 27       	eor	r22, r22
    61e8:	77 27       	eor	r23, r23
    61ea:	cb 01       	movw	r24, r22
    61ec:	97 f9       	bld	r25, 7
    61ee:	08 95       	ret

000061f0 <__mulsf3>:
    61f0:	0b d0       	rcall	.+22     	; 0x6208 <__mulsf3x>
    61f2:	c4 cf       	rjmp	.-120    	; 0x617c <__fp_round>
    61f4:	b5 df       	rcall	.-150    	; 0x6160 <__fp_pscA>
    61f6:	28 f0       	brcs	.+10     	; 0x6202 <__mulsf3+0x12>
    61f8:	ba df       	rcall	.-140    	; 0x616e <__fp_pscB>
    61fa:	18 f0       	brcs	.+6      	; 0x6202 <__mulsf3+0x12>
    61fc:	95 23       	and	r25, r21
    61fe:	09 f0       	breq	.+2      	; 0x6202 <__mulsf3+0x12>
    6200:	a6 cf       	rjmp	.-180    	; 0x614e <__fp_inf>
    6202:	ab cf       	rjmp	.-170    	; 0x615a <__fp_nan>
    6204:	11 24       	eor	r1, r1
    6206:	ee cf       	rjmp	.-36     	; 0x61e4 <__fp_szero>

00006208 <__mulsf3x>:
    6208:	ca df       	rcall	.-108    	; 0x619e <__fp_split3>
    620a:	a0 f3       	brcs	.-24     	; 0x61f4 <__mulsf3+0x4>

0000620c <__mulsf3_pse>:
    620c:	95 9f       	mul	r25, r21
    620e:	d1 f3       	breq	.-12     	; 0x6204 <__mulsf3+0x14>
    6210:	95 0f       	add	r25, r21
    6212:	50 e0       	ldi	r21, 0x00	; 0
    6214:	55 1f       	adc	r21, r21
    6216:	62 9f       	mul	r22, r18
    6218:	f0 01       	movw	r30, r0
    621a:	72 9f       	mul	r23, r18
    621c:	bb 27       	eor	r27, r27
    621e:	f0 0d       	add	r31, r0
    6220:	b1 1d       	adc	r27, r1
    6222:	63 9f       	mul	r22, r19
    6224:	aa 27       	eor	r26, r26
    6226:	f0 0d       	add	r31, r0
    6228:	b1 1d       	adc	r27, r1
    622a:	aa 1f       	adc	r26, r26
    622c:	64 9f       	mul	r22, r20
    622e:	66 27       	eor	r22, r22
    6230:	b0 0d       	add	r27, r0
    6232:	a1 1d       	adc	r26, r1
    6234:	66 1f       	adc	r22, r22
    6236:	82 9f       	mul	r24, r18
    6238:	22 27       	eor	r18, r18
    623a:	b0 0d       	add	r27, r0
    623c:	a1 1d       	adc	r26, r1
    623e:	62 1f       	adc	r22, r18
    6240:	73 9f       	mul	r23, r19
    6242:	b0 0d       	add	r27, r0
    6244:	a1 1d       	adc	r26, r1
    6246:	62 1f       	adc	r22, r18
    6248:	83 9f       	mul	r24, r19
    624a:	a0 0d       	add	r26, r0
    624c:	61 1d       	adc	r22, r1
    624e:	22 1f       	adc	r18, r18
    6250:	74 9f       	mul	r23, r20
    6252:	33 27       	eor	r19, r19
    6254:	a0 0d       	add	r26, r0
    6256:	61 1d       	adc	r22, r1
    6258:	23 1f       	adc	r18, r19
    625a:	84 9f       	mul	r24, r20
    625c:	60 0d       	add	r22, r0
    625e:	21 1d       	adc	r18, r1
    6260:	82 2f       	mov	r24, r18
    6262:	76 2f       	mov	r23, r22
    6264:	6a 2f       	mov	r22, r26
    6266:	11 24       	eor	r1, r1
    6268:	9f 57       	subi	r25, 0x7F	; 127
    626a:	50 40       	sbci	r21, 0x00	; 0
    626c:	8a f0       	brmi	.+34     	; 0x6290 <__mulsf3_pse+0x84>
    626e:	e1 f0       	breq	.+56     	; 0x62a8 <__mulsf3_pse+0x9c>
    6270:	88 23       	and	r24, r24
    6272:	4a f0       	brmi	.+18     	; 0x6286 <__mulsf3_pse+0x7a>
    6274:	ee 0f       	add	r30, r30
    6276:	ff 1f       	adc	r31, r31
    6278:	bb 1f       	adc	r27, r27
    627a:	66 1f       	adc	r22, r22
    627c:	77 1f       	adc	r23, r23
    627e:	88 1f       	adc	r24, r24
    6280:	91 50       	subi	r25, 0x01	; 1
    6282:	50 40       	sbci	r21, 0x00	; 0
    6284:	a9 f7       	brne	.-22     	; 0x6270 <__mulsf3_pse+0x64>
    6286:	9e 3f       	cpi	r25, 0xFE	; 254
    6288:	51 05       	cpc	r21, r1
    628a:	70 f0       	brcs	.+28     	; 0x62a8 <__mulsf3_pse+0x9c>
    628c:	60 cf       	rjmp	.-320    	; 0x614e <__fp_inf>
    628e:	aa cf       	rjmp	.-172    	; 0x61e4 <__fp_szero>
    6290:	5f 3f       	cpi	r21, 0xFF	; 255
    6292:	ec f3       	brlt	.-6      	; 0x628e <__mulsf3_pse+0x82>
    6294:	98 3e       	cpi	r25, 0xE8	; 232
    6296:	dc f3       	brlt	.-10     	; 0x628e <__mulsf3_pse+0x82>
    6298:	86 95       	lsr	r24
    629a:	77 95       	ror	r23
    629c:	67 95       	ror	r22
    629e:	b7 95       	ror	r27
    62a0:	f7 95       	ror	r31
    62a2:	e7 95       	ror	r30
    62a4:	9f 5f       	subi	r25, 0xFF	; 255
    62a6:	c1 f7       	brne	.-16     	; 0x6298 <__mulsf3_pse+0x8c>
    62a8:	fe 2b       	or	r31, r30
    62aa:	88 0f       	add	r24, r24
    62ac:	91 1d       	adc	r25, r1
    62ae:	96 95       	lsr	r25
    62b0:	87 95       	ror	r24
    62b2:	97 f9       	bld	r25, 7
    62b4:	08 95       	ret

000062b6 <__udivmodsi4>:
    62b6:	a1 e2       	ldi	r26, 0x21	; 33
    62b8:	1a 2e       	mov	r1, r26
    62ba:	aa 1b       	sub	r26, r26
    62bc:	bb 1b       	sub	r27, r27
    62be:	fd 01       	movw	r30, r26
    62c0:	0d c0       	rjmp	.+26     	; 0x62dc <__udivmodsi4_ep>

000062c2 <__udivmodsi4_loop>:
    62c2:	aa 1f       	adc	r26, r26
    62c4:	bb 1f       	adc	r27, r27
    62c6:	ee 1f       	adc	r30, r30
    62c8:	ff 1f       	adc	r31, r31
    62ca:	a2 17       	cp	r26, r18
    62cc:	b3 07       	cpc	r27, r19
    62ce:	e4 07       	cpc	r30, r20
    62d0:	f5 07       	cpc	r31, r21
    62d2:	20 f0       	brcs	.+8      	; 0x62dc <__udivmodsi4_ep>
    62d4:	a2 1b       	sub	r26, r18
    62d6:	b3 0b       	sbc	r27, r19
    62d8:	e4 0b       	sbc	r30, r20
    62da:	f5 0b       	sbc	r31, r21

000062dc <__udivmodsi4_ep>:
    62dc:	66 1f       	adc	r22, r22
    62de:	77 1f       	adc	r23, r23
    62e0:	88 1f       	adc	r24, r24
    62e2:	99 1f       	adc	r25, r25
    62e4:	1a 94       	dec	r1
    62e6:	69 f7       	brne	.-38     	; 0x62c2 <__udivmodsi4_loop>
    62e8:	60 95       	com	r22
    62ea:	70 95       	com	r23
    62ec:	80 95       	com	r24
    62ee:	90 95       	com	r25
    62f0:	9b 01       	movw	r18, r22
    62f2:	ac 01       	movw	r20, r24
    62f4:	bd 01       	movw	r22, r26
    62f6:	cf 01       	movw	r24, r30
    62f8:	08 95       	ret

000062fa <__tablejump2__>:
    62fa:	ee 0f       	add	r30, r30
    62fc:	ff 1f       	adc	r31, r31
    62fe:	88 1f       	adc	r24, r24
    6300:	8b bf       	out	0x3b, r24	; 59
    6302:	07 90       	elpm	r0, Z+
    6304:	f6 91       	elpm	r31, Z
    6306:	e0 2d       	mov	r30, r0
    6308:	19 94       	eijmp

0000630a <malloc>:
    630a:	0f 93       	push	r16
    630c:	1f 93       	push	r17
    630e:	cf 93       	push	r28
    6310:	df 93       	push	r29
    6312:	82 30       	cpi	r24, 0x02	; 2
    6314:	91 05       	cpc	r25, r1
    6316:	10 f4       	brcc	.+4      	; 0x631c <malloc+0x12>
    6318:	82 e0       	ldi	r24, 0x02	; 2
    631a:	90 e0       	ldi	r25, 0x00	; 0
    631c:	e0 91 5e 18 	lds	r30, 0x185E	; 0x80185e <__flp>
    6320:	f0 91 5f 18 	lds	r31, 0x185F	; 0x80185f <__flp+0x1>
    6324:	20 e0       	ldi	r18, 0x00	; 0
    6326:	30 e0       	ldi	r19, 0x00	; 0
    6328:	a0 e0       	ldi	r26, 0x00	; 0
    632a:	b0 e0       	ldi	r27, 0x00	; 0
    632c:	30 97       	sbiw	r30, 0x00	; 0
    632e:	19 f1       	breq	.+70     	; 0x6376 <malloc+0x6c>
    6330:	40 81       	ld	r20, Z
    6332:	51 81       	ldd	r21, Z+1	; 0x01
    6334:	02 81       	ldd	r16, Z+2	; 0x02
    6336:	13 81       	ldd	r17, Z+3	; 0x03
    6338:	48 17       	cp	r20, r24
    633a:	59 07       	cpc	r21, r25
    633c:	c8 f0       	brcs	.+50     	; 0x6370 <malloc+0x66>
    633e:	84 17       	cp	r24, r20
    6340:	95 07       	cpc	r25, r21
    6342:	69 f4       	brne	.+26     	; 0x635e <malloc+0x54>
    6344:	10 97       	sbiw	r26, 0x00	; 0
    6346:	31 f0       	breq	.+12     	; 0x6354 <malloc+0x4a>
    6348:	12 96       	adiw	r26, 0x02	; 2
    634a:	0c 93       	st	X, r16
    634c:	12 97       	sbiw	r26, 0x02	; 2
    634e:	13 96       	adiw	r26, 0x03	; 3
    6350:	1c 93       	st	X, r17
    6352:	27 c0       	rjmp	.+78     	; 0x63a2 <malloc+0x98>
    6354:	00 93 5e 18 	sts	0x185E, r16	; 0x80185e <__flp>
    6358:	10 93 5f 18 	sts	0x185F, r17	; 0x80185f <__flp+0x1>
    635c:	22 c0       	rjmp	.+68     	; 0x63a2 <malloc+0x98>
    635e:	21 15       	cp	r18, r1
    6360:	31 05       	cpc	r19, r1
    6362:	19 f0       	breq	.+6      	; 0x636a <malloc+0x60>
    6364:	42 17       	cp	r20, r18
    6366:	53 07       	cpc	r21, r19
    6368:	18 f4       	brcc	.+6      	; 0x6370 <malloc+0x66>
    636a:	9a 01       	movw	r18, r20
    636c:	bd 01       	movw	r22, r26
    636e:	ef 01       	movw	r28, r30
    6370:	df 01       	movw	r26, r30
    6372:	f8 01       	movw	r30, r16
    6374:	db cf       	rjmp	.-74     	; 0x632c <malloc+0x22>
    6376:	21 15       	cp	r18, r1
    6378:	31 05       	cpc	r19, r1
    637a:	f9 f0       	breq	.+62     	; 0x63ba <malloc+0xb0>
    637c:	28 1b       	sub	r18, r24
    637e:	39 0b       	sbc	r19, r25
    6380:	24 30       	cpi	r18, 0x04	; 4
    6382:	31 05       	cpc	r19, r1
    6384:	80 f4       	brcc	.+32     	; 0x63a6 <malloc+0x9c>
    6386:	8a 81       	ldd	r24, Y+2	; 0x02
    6388:	9b 81       	ldd	r25, Y+3	; 0x03
    638a:	61 15       	cp	r22, r1
    638c:	71 05       	cpc	r23, r1
    638e:	21 f0       	breq	.+8      	; 0x6398 <malloc+0x8e>
    6390:	fb 01       	movw	r30, r22
    6392:	93 83       	std	Z+3, r25	; 0x03
    6394:	82 83       	std	Z+2, r24	; 0x02
    6396:	04 c0       	rjmp	.+8      	; 0x63a0 <malloc+0x96>
    6398:	90 93 5f 18 	sts	0x185F, r25	; 0x80185f <__flp+0x1>
    639c:	80 93 5e 18 	sts	0x185E, r24	; 0x80185e <__flp>
    63a0:	fe 01       	movw	r30, r28
    63a2:	32 96       	adiw	r30, 0x02	; 2
    63a4:	44 c0       	rjmp	.+136    	; 0x642e <malloc+0x124>
    63a6:	fe 01       	movw	r30, r28
    63a8:	e2 0f       	add	r30, r18
    63aa:	f3 1f       	adc	r31, r19
    63ac:	81 93       	st	Z+, r24
    63ae:	91 93       	st	Z+, r25
    63b0:	22 50       	subi	r18, 0x02	; 2
    63b2:	31 09       	sbc	r19, r1
    63b4:	39 83       	std	Y+1, r19	; 0x01
    63b6:	28 83       	st	Y, r18
    63b8:	3a c0       	rjmp	.+116    	; 0x642e <malloc+0x124>
    63ba:	20 91 5c 18 	lds	r18, 0x185C	; 0x80185c <__brkval>
    63be:	30 91 5d 18 	lds	r19, 0x185D	; 0x80185d <__brkval+0x1>
    63c2:	23 2b       	or	r18, r19
    63c4:	41 f4       	brne	.+16     	; 0x63d6 <malloc+0xcc>
    63c6:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    63ca:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    63ce:	30 93 5d 18 	sts	0x185D, r19	; 0x80185d <__brkval+0x1>
    63d2:	20 93 5c 18 	sts	0x185C, r18	; 0x80185c <__brkval>
    63d6:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    63da:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    63de:	21 15       	cp	r18, r1
    63e0:	31 05       	cpc	r19, r1
    63e2:	41 f4       	brne	.+16     	; 0x63f4 <malloc+0xea>
    63e4:	2d b7       	in	r18, 0x3d	; 61
    63e6:	3e b7       	in	r19, 0x3e	; 62
    63e8:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    63ec:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    63f0:	24 1b       	sub	r18, r20
    63f2:	35 0b       	sbc	r19, r21
    63f4:	e0 91 5c 18 	lds	r30, 0x185C	; 0x80185c <__brkval>
    63f8:	f0 91 5d 18 	lds	r31, 0x185D	; 0x80185d <__brkval+0x1>
    63fc:	e2 17       	cp	r30, r18
    63fe:	f3 07       	cpc	r31, r19
    6400:	a0 f4       	brcc	.+40     	; 0x642a <malloc+0x120>
    6402:	2e 1b       	sub	r18, r30
    6404:	3f 0b       	sbc	r19, r31
    6406:	28 17       	cp	r18, r24
    6408:	39 07       	cpc	r19, r25
    640a:	78 f0       	brcs	.+30     	; 0x642a <malloc+0x120>
    640c:	ac 01       	movw	r20, r24
    640e:	4e 5f       	subi	r20, 0xFE	; 254
    6410:	5f 4f       	sbci	r21, 0xFF	; 255
    6412:	24 17       	cp	r18, r20
    6414:	35 07       	cpc	r19, r21
    6416:	48 f0       	brcs	.+18     	; 0x642a <malloc+0x120>
    6418:	4e 0f       	add	r20, r30
    641a:	5f 1f       	adc	r21, r31
    641c:	50 93 5d 18 	sts	0x185D, r21	; 0x80185d <__brkval+0x1>
    6420:	40 93 5c 18 	sts	0x185C, r20	; 0x80185c <__brkval>
    6424:	81 93       	st	Z+, r24
    6426:	91 93       	st	Z+, r25
    6428:	02 c0       	rjmp	.+4      	; 0x642e <malloc+0x124>
    642a:	e0 e0       	ldi	r30, 0x00	; 0
    642c:	f0 e0       	ldi	r31, 0x00	; 0
    642e:	cf 01       	movw	r24, r30
    6430:	df 91       	pop	r29
    6432:	cf 91       	pop	r28
    6434:	1f 91       	pop	r17
    6436:	0f 91       	pop	r16
    6438:	08 95       	ret

0000643a <free>:
    643a:	cf 93       	push	r28
    643c:	df 93       	push	r29
    643e:	00 97       	sbiw	r24, 0x00	; 0
    6440:	09 f4       	brne	.+2      	; 0x6444 <free+0xa>
    6442:	81 c0       	rjmp	.+258    	; 0x6546 <free+0x10c>
    6444:	fc 01       	movw	r30, r24
    6446:	32 97       	sbiw	r30, 0x02	; 2
    6448:	13 82       	std	Z+3, r1	; 0x03
    644a:	12 82       	std	Z+2, r1	; 0x02
    644c:	a0 91 5e 18 	lds	r26, 0x185E	; 0x80185e <__flp>
    6450:	b0 91 5f 18 	lds	r27, 0x185F	; 0x80185f <__flp+0x1>
    6454:	10 97       	sbiw	r26, 0x00	; 0
    6456:	81 f4       	brne	.+32     	; 0x6478 <free+0x3e>
    6458:	20 81       	ld	r18, Z
    645a:	31 81       	ldd	r19, Z+1	; 0x01
    645c:	82 0f       	add	r24, r18
    645e:	93 1f       	adc	r25, r19
    6460:	20 91 5c 18 	lds	r18, 0x185C	; 0x80185c <__brkval>
    6464:	30 91 5d 18 	lds	r19, 0x185D	; 0x80185d <__brkval+0x1>
    6468:	28 17       	cp	r18, r24
    646a:	39 07       	cpc	r19, r25
    646c:	51 f5       	brne	.+84     	; 0x64c2 <free+0x88>
    646e:	f0 93 5d 18 	sts	0x185D, r31	; 0x80185d <__brkval+0x1>
    6472:	e0 93 5c 18 	sts	0x185C, r30	; 0x80185c <__brkval>
    6476:	67 c0       	rjmp	.+206    	; 0x6546 <free+0x10c>
    6478:	ed 01       	movw	r28, r26
    647a:	20 e0       	ldi	r18, 0x00	; 0
    647c:	30 e0       	ldi	r19, 0x00	; 0
    647e:	ce 17       	cp	r28, r30
    6480:	df 07       	cpc	r29, r31
    6482:	40 f4       	brcc	.+16     	; 0x6494 <free+0x5a>
    6484:	4a 81       	ldd	r20, Y+2	; 0x02
    6486:	5b 81       	ldd	r21, Y+3	; 0x03
    6488:	9e 01       	movw	r18, r28
    648a:	41 15       	cp	r20, r1
    648c:	51 05       	cpc	r21, r1
    648e:	f1 f0       	breq	.+60     	; 0x64cc <free+0x92>
    6490:	ea 01       	movw	r28, r20
    6492:	f5 cf       	rjmp	.-22     	; 0x647e <free+0x44>
    6494:	d3 83       	std	Z+3, r29	; 0x03
    6496:	c2 83       	std	Z+2, r28	; 0x02
    6498:	40 81       	ld	r20, Z
    649a:	51 81       	ldd	r21, Z+1	; 0x01
    649c:	84 0f       	add	r24, r20
    649e:	95 1f       	adc	r25, r21
    64a0:	c8 17       	cp	r28, r24
    64a2:	d9 07       	cpc	r29, r25
    64a4:	59 f4       	brne	.+22     	; 0x64bc <free+0x82>
    64a6:	88 81       	ld	r24, Y
    64a8:	99 81       	ldd	r25, Y+1	; 0x01
    64aa:	84 0f       	add	r24, r20
    64ac:	95 1f       	adc	r25, r21
    64ae:	02 96       	adiw	r24, 0x02	; 2
    64b0:	91 83       	std	Z+1, r25	; 0x01
    64b2:	80 83       	st	Z, r24
    64b4:	8a 81       	ldd	r24, Y+2	; 0x02
    64b6:	9b 81       	ldd	r25, Y+3	; 0x03
    64b8:	93 83       	std	Z+3, r25	; 0x03
    64ba:	82 83       	std	Z+2, r24	; 0x02
    64bc:	21 15       	cp	r18, r1
    64be:	31 05       	cpc	r19, r1
    64c0:	29 f4       	brne	.+10     	; 0x64cc <free+0x92>
    64c2:	f0 93 5f 18 	sts	0x185F, r31	; 0x80185f <__flp+0x1>
    64c6:	e0 93 5e 18 	sts	0x185E, r30	; 0x80185e <__flp>
    64ca:	3d c0       	rjmp	.+122    	; 0x6546 <free+0x10c>
    64cc:	e9 01       	movw	r28, r18
    64ce:	fb 83       	std	Y+3, r31	; 0x03
    64d0:	ea 83       	std	Y+2, r30	; 0x02
    64d2:	49 91       	ld	r20, Y+
    64d4:	59 91       	ld	r21, Y+
    64d6:	c4 0f       	add	r28, r20
    64d8:	d5 1f       	adc	r29, r21
    64da:	ec 17       	cp	r30, r28
    64dc:	fd 07       	cpc	r31, r29
    64de:	61 f4       	brne	.+24     	; 0x64f8 <free+0xbe>
    64e0:	80 81       	ld	r24, Z
    64e2:	91 81       	ldd	r25, Z+1	; 0x01
    64e4:	84 0f       	add	r24, r20
    64e6:	95 1f       	adc	r25, r21
    64e8:	02 96       	adiw	r24, 0x02	; 2
    64ea:	e9 01       	movw	r28, r18
    64ec:	99 83       	std	Y+1, r25	; 0x01
    64ee:	88 83       	st	Y, r24
    64f0:	82 81       	ldd	r24, Z+2	; 0x02
    64f2:	93 81       	ldd	r25, Z+3	; 0x03
    64f4:	9b 83       	std	Y+3, r25	; 0x03
    64f6:	8a 83       	std	Y+2, r24	; 0x02
    64f8:	e0 e0       	ldi	r30, 0x00	; 0
    64fa:	f0 e0       	ldi	r31, 0x00	; 0
    64fc:	12 96       	adiw	r26, 0x02	; 2
    64fe:	8d 91       	ld	r24, X+
    6500:	9c 91       	ld	r25, X
    6502:	13 97       	sbiw	r26, 0x03	; 3
    6504:	00 97       	sbiw	r24, 0x00	; 0
    6506:	19 f0       	breq	.+6      	; 0x650e <free+0xd4>
    6508:	fd 01       	movw	r30, r26
    650a:	dc 01       	movw	r26, r24
    650c:	f7 cf       	rjmp	.-18     	; 0x64fc <free+0xc2>
    650e:	8d 91       	ld	r24, X+
    6510:	9c 91       	ld	r25, X
    6512:	11 97       	sbiw	r26, 0x01	; 1
    6514:	9d 01       	movw	r18, r26
    6516:	2e 5f       	subi	r18, 0xFE	; 254
    6518:	3f 4f       	sbci	r19, 0xFF	; 255
    651a:	82 0f       	add	r24, r18
    651c:	93 1f       	adc	r25, r19
    651e:	20 91 5c 18 	lds	r18, 0x185C	; 0x80185c <__brkval>
    6522:	30 91 5d 18 	lds	r19, 0x185D	; 0x80185d <__brkval+0x1>
    6526:	28 17       	cp	r18, r24
    6528:	39 07       	cpc	r19, r25
    652a:	69 f4       	brne	.+26     	; 0x6546 <free+0x10c>
    652c:	30 97       	sbiw	r30, 0x00	; 0
    652e:	29 f4       	brne	.+10     	; 0x653a <free+0x100>
    6530:	10 92 5f 18 	sts	0x185F, r1	; 0x80185f <__flp+0x1>
    6534:	10 92 5e 18 	sts	0x185E, r1	; 0x80185e <__flp>
    6538:	02 c0       	rjmp	.+4      	; 0x653e <free+0x104>
    653a:	13 82       	std	Z+3, r1	; 0x03
    653c:	12 82       	std	Z+2, r1	; 0x02
    653e:	b0 93 5d 18 	sts	0x185D, r27	; 0x80185d <__brkval+0x1>
    6542:	a0 93 5c 18 	sts	0x185C, r26	; 0x80185c <__brkval>
    6546:	df 91       	pop	r29
    6548:	cf 91       	pop	r28
    654a:	08 95       	ret

0000654c <abort>:
    654c:	81 e0       	ldi	r24, 0x01	; 1
    654e:	90 e0       	ldi	r25, 0x00	; 0
    6550:	f8 94       	cli
    6552:	7d c3       	rjmp	.+1786   	; 0x6c4e <_exit>

00006554 <memcpy>:
    6554:	fb 01       	movw	r30, r22
    6556:	dc 01       	movw	r26, r24
    6558:	02 c0       	rjmp	.+4      	; 0x655e <memcpy+0xa>
    655a:	01 90       	ld	r0, Z+
    655c:	0d 92       	st	X+, r0
    655e:	41 50       	subi	r20, 0x01	; 1
    6560:	50 40       	sbci	r21, 0x00	; 0
    6562:	d8 f7       	brcc	.-10     	; 0x655a <memcpy+0x6>
    6564:	08 95       	ret

00006566 <memset>:
    6566:	dc 01       	movw	r26, r24
    6568:	01 c0       	rjmp	.+2      	; 0x656c <memset+0x6>
    656a:	6d 93       	st	X+, r22
    656c:	41 50       	subi	r20, 0x01	; 1
    656e:	50 40       	sbci	r21, 0x00	; 0
    6570:	e0 f7       	brcc	.-8      	; 0x656a <memset+0x4>
    6572:	08 95       	ret

00006574 <strcasestr>:
    6574:	fb 01       	movw	r30, r22
    6576:	51 91       	ld	r21, Z+
    6578:	55 23       	and	r21, r21
    657a:	b1 f0       	breq	.+44     	; 0x65a8 <strcasestr+0x34>
    657c:	bf 01       	movw	r22, r30
    657e:	dc 01       	movw	r26, r24
    6580:	05 2e       	mov	r0, r21
    6582:	4d 91       	ld	r20, X+
    6584:	44 23       	and	r20, r20
    6586:	69 f0       	breq	.+26     	; 0x65a2 <strcasestr+0x2e>
    6588:	10 d0       	rcall	.+32     	; 0x65aa <strcasestr+0x36>
    658a:	d9 f7       	brne	.-10     	; 0x6582 <strcasestr+0xe>
    658c:	cd 01       	movw	r24, r26
    658e:	01 90       	ld	r0, Z+
    6590:	00 20       	and	r0, r0
    6592:	49 f0       	breq	.+18     	; 0x65a6 <strcasestr+0x32>
    6594:	4d 91       	ld	r20, X+
    6596:	41 11       	cpse	r20, r1
    6598:	08 d0       	rcall	.+16     	; 0x65aa <strcasestr+0x36>
    659a:	c9 f3       	breq	.-14     	; 0x658e <strcasestr+0x1a>
    659c:	fb 01       	movw	r30, r22
    659e:	41 11       	cpse	r20, r1
    65a0:	ee cf       	rjmp	.-36     	; 0x657e <strcasestr+0xa>
    65a2:	81 e0       	ldi	r24, 0x01	; 1
    65a4:	90 e0       	ldi	r25, 0x00	; 0
    65a6:	01 97       	sbiw	r24, 0x01	; 1
    65a8:	08 95       	ret
    65aa:	40 25       	eor	r20, r0
    65ac:	39 f0       	breq	.+14     	; 0x65bc <strcasestr+0x48>
    65ae:	40 32       	cpi	r20, 0x20	; 32
    65b0:	29 f4       	brne	.+10     	; 0x65bc <strcasestr+0x48>
    65b2:	40 29       	or	r20, r0
    65b4:	4b 57       	subi	r20, 0x7B	; 123
    65b6:	46 5e       	subi	r20, 0xE6	; 230
    65b8:	08 f0       	brcs	.+2      	; 0x65bc <strcasestr+0x48>
    65ba:	18 94       	sez
    65bc:	08 95       	ret

000065be <strcat>:
    65be:	fb 01       	movw	r30, r22
    65c0:	dc 01       	movw	r26, r24
    65c2:	0d 90       	ld	r0, X+
    65c4:	00 20       	and	r0, r0
    65c6:	e9 f7       	brne	.-6      	; 0x65c2 <strcat+0x4>
    65c8:	11 97       	sbiw	r26, 0x01	; 1
    65ca:	01 90       	ld	r0, Z+
    65cc:	0d 92       	st	X+, r0
    65ce:	00 20       	and	r0, r0
    65d0:	e1 f7       	brne	.-8      	; 0x65ca <strcat+0xc>
    65d2:	08 95       	ret

000065d4 <strcpy>:
    65d4:	fb 01       	movw	r30, r22
    65d6:	dc 01       	movw	r26, r24
    65d8:	01 90       	ld	r0, Z+
    65da:	0d 92       	st	X+, r0
    65dc:	00 20       	and	r0, r0
    65de:	e1 f7       	brne	.-8      	; 0x65d8 <strcpy+0x4>
    65e0:	08 95       	ret

000065e2 <strncasecmp>:
    65e2:	fb 01       	movw	r30, r22
    65e4:	dc 01       	movw	r26, r24
    65e6:	41 50       	subi	r20, 0x01	; 1
    65e8:	50 40       	sbci	r21, 0x00	; 0
    65ea:	88 f0       	brcs	.+34     	; 0x660e <strncasecmp+0x2c>
    65ec:	8d 91       	ld	r24, X+
    65ee:	81 34       	cpi	r24, 0x41	; 65
    65f0:	1c f0       	brlt	.+6      	; 0x65f8 <strncasecmp+0x16>
    65f2:	8b 35       	cpi	r24, 0x5B	; 91
    65f4:	0c f4       	brge	.+2      	; 0x65f8 <strncasecmp+0x16>
    65f6:	80 5e       	subi	r24, 0xE0	; 224
    65f8:	61 91       	ld	r22, Z+
    65fa:	61 34       	cpi	r22, 0x41	; 65
    65fc:	1c f0       	brlt	.+6      	; 0x6604 <strncasecmp+0x22>
    65fe:	6b 35       	cpi	r22, 0x5B	; 91
    6600:	0c f4       	brge	.+2      	; 0x6604 <strncasecmp+0x22>
    6602:	60 5e       	subi	r22, 0xE0	; 224
    6604:	86 1b       	sub	r24, r22
    6606:	61 11       	cpse	r22, r1
    6608:	71 f3       	breq	.-36     	; 0x65e6 <strncasecmp+0x4>
    660a:	99 0b       	sbc	r25, r25
    660c:	08 95       	ret
    660e:	88 1b       	sub	r24, r24
    6610:	fc cf       	rjmp	.-8      	; 0x660a <strncasecmp+0x28>

00006612 <printf>:
    6612:	cf 93       	push	r28
    6614:	df 93       	push	r29
    6616:	cd b7       	in	r28, 0x3d	; 61
    6618:	de b7       	in	r29, 0x3e	; 62
    661a:	ae 01       	movw	r20, r28
    661c:	4a 5f       	subi	r20, 0xFA	; 250
    661e:	5f 4f       	sbci	r21, 0xFF	; 255
    6620:	fa 01       	movw	r30, r20
    6622:	61 91       	ld	r22, Z+
    6624:	71 91       	ld	r23, Z+
    6626:	af 01       	movw	r20, r30
    6628:	80 91 62 18 	lds	r24, 0x1862	; 0x801862 <__iob+0x2>
    662c:	90 91 63 18 	lds	r25, 0x1863	; 0x801863 <__iob+0x3>
    6630:	61 d0       	rcall	.+194    	; 0x66f4 <vfprintf>
    6632:	df 91       	pop	r29
    6634:	cf 91       	pop	r28
    6636:	08 95       	ret

00006638 <puts>:
    6638:	0f 93       	push	r16
    663a:	1f 93       	push	r17
    663c:	cf 93       	push	r28
    663e:	df 93       	push	r29
    6640:	e0 91 62 18 	lds	r30, 0x1862	; 0x801862 <__iob+0x2>
    6644:	f0 91 63 18 	lds	r31, 0x1863	; 0x801863 <__iob+0x3>
    6648:	23 81       	ldd	r18, Z+3	; 0x03
    664a:	21 ff       	sbrs	r18, 1
    664c:	1b c0       	rjmp	.+54     	; 0x6684 <puts+0x4c>
    664e:	8c 01       	movw	r16, r24
    6650:	d0 e0       	ldi	r29, 0x00	; 0
    6652:	c0 e0       	ldi	r28, 0x00	; 0
    6654:	f8 01       	movw	r30, r16
    6656:	81 91       	ld	r24, Z+
    6658:	8f 01       	movw	r16, r30
    665a:	60 91 62 18 	lds	r22, 0x1862	; 0x801862 <__iob+0x2>
    665e:	70 91 63 18 	lds	r23, 0x1863	; 0x801863 <__iob+0x3>
    6662:	db 01       	movw	r26, r22
    6664:	18 96       	adiw	r26, 0x08	; 8
    6666:	ed 91       	ld	r30, X+
    6668:	fc 91       	ld	r31, X
    666a:	19 97       	sbiw	r26, 0x09	; 9
    666c:	88 23       	and	r24, r24
    666e:	31 f0       	breq	.+12     	; 0x667c <puts+0x44>
    6670:	19 95       	eicall
    6672:	89 2b       	or	r24, r25
    6674:	79 f3       	breq	.-34     	; 0x6654 <puts+0x1c>
    6676:	df ef       	ldi	r29, 0xFF	; 255
    6678:	cf ef       	ldi	r28, 0xFF	; 255
    667a:	ec cf       	rjmp	.-40     	; 0x6654 <puts+0x1c>
    667c:	8a e0       	ldi	r24, 0x0A	; 10
    667e:	19 95       	eicall
    6680:	89 2b       	or	r24, r25
    6682:	19 f0       	breq	.+6      	; 0x668a <puts+0x52>
    6684:	8f ef       	ldi	r24, 0xFF	; 255
    6686:	9f ef       	ldi	r25, 0xFF	; 255
    6688:	02 c0       	rjmp	.+4      	; 0x668e <puts+0x56>
    668a:	8d 2f       	mov	r24, r29
    668c:	9c 2f       	mov	r25, r28
    668e:	df 91       	pop	r29
    6690:	cf 91       	pop	r28
    6692:	1f 91       	pop	r17
    6694:	0f 91       	pop	r16
    6696:	08 95       	ret

00006698 <sprintf>:
    6698:	0f 93       	push	r16
    669a:	1f 93       	push	r17
    669c:	cf 93       	push	r28
    669e:	df 93       	push	r29
    66a0:	cd b7       	in	r28, 0x3d	; 61
    66a2:	de b7       	in	r29, 0x3e	; 62
    66a4:	2e 97       	sbiw	r28, 0x0e	; 14
    66a6:	0f b6       	in	r0, 0x3f	; 63
    66a8:	f8 94       	cli
    66aa:	de bf       	out	0x3e, r29	; 62
    66ac:	0f be       	out	0x3f, r0	; 63
    66ae:	cd bf       	out	0x3d, r28	; 61
    66b0:	0e 89       	ldd	r16, Y+22	; 0x16
    66b2:	1f 89       	ldd	r17, Y+23	; 0x17
    66b4:	86 e0       	ldi	r24, 0x06	; 6
    66b6:	8c 83       	std	Y+4, r24	; 0x04
    66b8:	1a 83       	std	Y+2, r17	; 0x02
    66ba:	09 83       	std	Y+1, r16	; 0x01
    66bc:	8f ef       	ldi	r24, 0xFF	; 255
    66be:	9f e7       	ldi	r25, 0x7F	; 127
    66c0:	9e 83       	std	Y+6, r25	; 0x06
    66c2:	8d 83       	std	Y+5, r24	; 0x05
    66c4:	ae 01       	movw	r20, r28
    66c6:	46 5e       	subi	r20, 0xE6	; 230
    66c8:	5f 4f       	sbci	r21, 0xFF	; 255
    66ca:	68 8d       	ldd	r22, Y+24	; 0x18
    66cc:	79 8d       	ldd	r23, Y+25	; 0x19
    66ce:	ce 01       	movw	r24, r28
    66d0:	01 96       	adiw	r24, 0x01	; 1
    66d2:	10 d0       	rcall	.+32     	; 0x66f4 <vfprintf>
    66d4:	ef 81       	ldd	r30, Y+7	; 0x07
    66d6:	f8 85       	ldd	r31, Y+8	; 0x08
    66d8:	e0 0f       	add	r30, r16
    66da:	f1 1f       	adc	r31, r17
    66dc:	10 82       	st	Z, r1
    66de:	2e 96       	adiw	r28, 0x0e	; 14
    66e0:	0f b6       	in	r0, 0x3f	; 63
    66e2:	f8 94       	cli
    66e4:	de bf       	out	0x3e, r29	; 62
    66e6:	0f be       	out	0x3f, r0	; 63
    66e8:	cd bf       	out	0x3d, r28	; 61
    66ea:	df 91       	pop	r29
    66ec:	cf 91       	pop	r28
    66ee:	1f 91       	pop	r17
    66f0:	0f 91       	pop	r16
    66f2:	08 95       	ret

000066f4 <vfprintf>:
    66f4:	2f 92       	push	r2
    66f6:	3f 92       	push	r3
    66f8:	4f 92       	push	r4
    66fa:	5f 92       	push	r5
    66fc:	6f 92       	push	r6
    66fe:	7f 92       	push	r7
    6700:	8f 92       	push	r8
    6702:	9f 92       	push	r9
    6704:	af 92       	push	r10
    6706:	bf 92       	push	r11
    6708:	cf 92       	push	r12
    670a:	df 92       	push	r13
    670c:	ef 92       	push	r14
    670e:	ff 92       	push	r15
    6710:	0f 93       	push	r16
    6712:	1f 93       	push	r17
    6714:	cf 93       	push	r28
    6716:	df 93       	push	r29
    6718:	cd b7       	in	r28, 0x3d	; 61
    671a:	de b7       	in	r29, 0x3e	; 62
    671c:	2b 97       	sbiw	r28, 0x0b	; 11
    671e:	0f b6       	in	r0, 0x3f	; 63
    6720:	f8 94       	cli
    6722:	de bf       	out	0x3e, r29	; 62
    6724:	0f be       	out	0x3f, r0	; 63
    6726:	cd bf       	out	0x3d, r28	; 61
    6728:	6c 01       	movw	r12, r24
    672a:	7b 01       	movw	r14, r22
    672c:	8a 01       	movw	r16, r20
    672e:	fc 01       	movw	r30, r24
    6730:	17 82       	std	Z+7, r1	; 0x07
    6732:	16 82       	std	Z+6, r1	; 0x06
    6734:	83 81       	ldd	r24, Z+3	; 0x03
    6736:	81 ff       	sbrs	r24, 1
    6738:	bf c1       	rjmp	.+894    	; 0x6ab8 <vfprintf+0x3c4>
    673a:	ce 01       	movw	r24, r28
    673c:	01 96       	adiw	r24, 0x01	; 1
    673e:	3c 01       	movw	r6, r24
    6740:	f6 01       	movw	r30, r12
    6742:	93 81       	ldd	r25, Z+3	; 0x03
    6744:	f7 01       	movw	r30, r14
    6746:	93 fd       	sbrc	r25, 3
    6748:	85 91       	lpm	r24, Z+
    674a:	93 ff       	sbrs	r25, 3
    674c:	81 91       	ld	r24, Z+
    674e:	7f 01       	movw	r14, r30
    6750:	88 23       	and	r24, r24
    6752:	09 f4       	brne	.+2      	; 0x6756 <vfprintf+0x62>
    6754:	ad c1       	rjmp	.+858    	; 0x6ab0 <vfprintf+0x3bc>
    6756:	85 32       	cpi	r24, 0x25	; 37
    6758:	39 f4       	brne	.+14     	; 0x6768 <vfprintf+0x74>
    675a:	93 fd       	sbrc	r25, 3
    675c:	85 91       	lpm	r24, Z+
    675e:	93 ff       	sbrs	r25, 3
    6760:	81 91       	ld	r24, Z+
    6762:	7f 01       	movw	r14, r30
    6764:	85 32       	cpi	r24, 0x25	; 37
    6766:	21 f4       	brne	.+8      	; 0x6770 <vfprintf+0x7c>
    6768:	b6 01       	movw	r22, r12
    676a:	90 e0       	ldi	r25, 0x00	; 0
    676c:	d6 d1       	rcall	.+940    	; 0x6b1a <fputc>
    676e:	e8 cf       	rjmp	.-48     	; 0x6740 <vfprintf+0x4c>
    6770:	91 2c       	mov	r9, r1
    6772:	21 2c       	mov	r2, r1
    6774:	31 2c       	mov	r3, r1
    6776:	ff e1       	ldi	r31, 0x1F	; 31
    6778:	f3 15       	cp	r31, r3
    677a:	d8 f0       	brcs	.+54     	; 0x67b2 <vfprintf+0xbe>
    677c:	8b 32       	cpi	r24, 0x2B	; 43
    677e:	79 f0       	breq	.+30     	; 0x679e <vfprintf+0xaa>
    6780:	38 f4       	brcc	.+14     	; 0x6790 <vfprintf+0x9c>
    6782:	80 32       	cpi	r24, 0x20	; 32
    6784:	79 f0       	breq	.+30     	; 0x67a4 <vfprintf+0xb0>
    6786:	83 32       	cpi	r24, 0x23	; 35
    6788:	a1 f4       	brne	.+40     	; 0x67b2 <vfprintf+0xbe>
    678a:	23 2d       	mov	r18, r3
    678c:	20 61       	ori	r18, 0x10	; 16
    678e:	1d c0       	rjmp	.+58     	; 0x67ca <vfprintf+0xd6>
    6790:	8d 32       	cpi	r24, 0x2D	; 45
    6792:	61 f0       	breq	.+24     	; 0x67ac <vfprintf+0xb8>
    6794:	80 33       	cpi	r24, 0x30	; 48
    6796:	69 f4       	brne	.+26     	; 0x67b2 <vfprintf+0xbe>
    6798:	23 2d       	mov	r18, r3
    679a:	21 60       	ori	r18, 0x01	; 1
    679c:	16 c0       	rjmp	.+44     	; 0x67ca <vfprintf+0xd6>
    679e:	83 2d       	mov	r24, r3
    67a0:	82 60       	ori	r24, 0x02	; 2
    67a2:	38 2e       	mov	r3, r24
    67a4:	e3 2d       	mov	r30, r3
    67a6:	e4 60       	ori	r30, 0x04	; 4
    67a8:	3e 2e       	mov	r3, r30
    67aa:	2a c0       	rjmp	.+84     	; 0x6800 <vfprintf+0x10c>
    67ac:	f3 2d       	mov	r31, r3
    67ae:	f8 60       	ori	r31, 0x08	; 8
    67b0:	1d c0       	rjmp	.+58     	; 0x67ec <vfprintf+0xf8>
    67b2:	37 fc       	sbrc	r3, 7
    67b4:	2d c0       	rjmp	.+90     	; 0x6810 <vfprintf+0x11c>
    67b6:	20 ed       	ldi	r18, 0xD0	; 208
    67b8:	28 0f       	add	r18, r24
    67ba:	2a 30       	cpi	r18, 0x0A	; 10
    67bc:	40 f0       	brcs	.+16     	; 0x67ce <vfprintf+0xda>
    67be:	8e 32       	cpi	r24, 0x2E	; 46
    67c0:	b9 f4       	brne	.+46     	; 0x67f0 <vfprintf+0xfc>
    67c2:	36 fc       	sbrc	r3, 6
    67c4:	75 c1       	rjmp	.+746    	; 0x6ab0 <vfprintf+0x3bc>
    67c6:	23 2d       	mov	r18, r3
    67c8:	20 64       	ori	r18, 0x40	; 64
    67ca:	32 2e       	mov	r3, r18
    67cc:	19 c0       	rjmp	.+50     	; 0x6800 <vfprintf+0x10c>
    67ce:	36 fe       	sbrs	r3, 6
    67d0:	06 c0       	rjmp	.+12     	; 0x67de <vfprintf+0xea>
    67d2:	8a e0       	ldi	r24, 0x0A	; 10
    67d4:	98 9e       	mul	r9, r24
    67d6:	20 0d       	add	r18, r0
    67d8:	11 24       	eor	r1, r1
    67da:	92 2e       	mov	r9, r18
    67dc:	11 c0       	rjmp	.+34     	; 0x6800 <vfprintf+0x10c>
    67de:	ea e0       	ldi	r30, 0x0A	; 10
    67e0:	2e 9e       	mul	r2, r30
    67e2:	20 0d       	add	r18, r0
    67e4:	11 24       	eor	r1, r1
    67e6:	22 2e       	mov	r2, r18
    67e8:	f3 2d       	mov	r31, r3
    67ea:	f0 62       	ori	r31, 0x20	; 32
    67ec:	3f 2e       	mov	r3, r31
    67ee:	08 c0       	rjmp	.+16     	; 0x6800 <vfprintf+0x10c>
    67f0:	8c 36       	cpi	r24, 0x6C	; 108
    67f2:	21 f4       	brne	.+8      	; 0x67fc <vfprintf+0x108>
    67f4:	83 2d       	mov	r24, r3
    67f6:	80 68       	ori	r24, 0x80	; 128
    67f8:	38 2e       	mov	r3, r24
    67fa:	02 c0       	rjmp	.+4      	; 0x6800 <vfprintf+0x10c>
    67fc:	88 36       	cpi	r24, 0x68	; 104
    67fe:	41 f4       	brne	.+16     	; 0x6810 <vfprintf+0x11c>
    6800:	f7 01       	movw	r30, r14
    6802:	93 fd       	sbrc	r25, 3
    6804:	85 91       	lpm	r24, Z+
    6806:	93 ff       	sbrs	r25, 3
    6808:	81 91       	ld	r24, Z+
    680a:	7f 01       	movw	r14, r30
    680c:	81 11       	cpse	r24, r1
    680e:	b3 cf       	rjmp	.-154    	; 0x6776 <vfprintf+0x82>
    6810:	98 2f       	mov	r25, r24
    6812:	9f 7d       	andi	r25, 0xDF	; 223
    6814:	95 54       	subi	r25, 0x45	; 69
    6816:	93 30       	cpi	r25, 0x03	; 3
    6818:	28 f4       	brcc	.+10     	; 0x6824 <vfprintf+0x130>
    681a:	0c 5f       	subi	r16, 0xFC	; 252
    681c:	1f 4f       	sbci	r17, 0xFF	; 255
    681e:	9f e3       	ldi	r25, 0x3F	; 63
    6820:	99 83       	std	Y+1, r25	; 0x01
    6822:	0d c0       	rjmp	.+26     	; 0x683e <vfprintf+0x14a>
    6824:	83 36       	cpi	r24, 0x63	; 99
    6826:	31 f0       	breq	.+12     	; 0x6834 <vfprintf+0x140>
    6828:	83 37       	cpi	r24, 0x73	; 115
    682a:	71 f0       	breq	.+28     	; 0x6848 <vfprintf+0x154>
    682c:	83 35       	cpi	r24, 0x53	; 83
    682e:	09 f0       	breq	.+2      	; 0x6832 <vfprintf+0x13e>
    6830:	55 c0       	rjmp	.+170    	; 0x68dc <vfprintf+0x1e8>
    6832:	20 c0       	rjmp	.+64     	; 0x6874 <vfprintf+0x180>
    6834:	f8 01       	movw	r30, r16
    6836:	80 81       	ld	r24, Z
    6838:	89 83       	std	Y+1, r24	; 0x01
    683a:	0e 5f       	subi	r16, 0xFE	; 254
    683c:	1f 4f       	sbci	r17, 0xFF	; 255
    683e:	88 24       	eor	r8, r8
    6840:	83 94       	inc	r8
    6842:	91 2c       	mov	r9, r1
    6844:	53 01       	movw	r10, r6
    6846:	12 c0       	rjmp	.+36     	; 0x686c <vfprintf+0x178>
    6848:	28 01       	movw	r4, r16
    684a:	f2 e0       	ldi	r31, 0x02	; 2
    684c:	4f 0e       	add	r4, r31
    684e:	51 1c       	adc	r5, r1
    6850:	f8 01       	movw	r30, r16
    6852:	a0 80       	ld	r10, Z
    6854:	b1 80       	ldd	r11, Z+1	; 0x01
    6856:	36 fe       	sbrs	r3, 6
    6858:	03 c0       	rjmp	.+6      	; 0x6860 <vfprintf+0x16c>
    685a:	69 2d       	mov	r22, r9
    685c:	70 e0       	ldi	r23, 0x00	; 0
    685e:	02 c0       	rjmp	.+4      	; 0x6864 <vfprintf+0x170>
    6860:	6f ef       	ldi	r22, 0xFF	; 255
    6862:	7f ef       	ldi	r23, 0xFF	; 255
    6864:	c5 01       	movw	r24, r10
    6866:	4e d1       	rcall	.+668    	; 0x6b04 <strnlen>
    6868:	4c 01       	movw	r8, r24
    686a:	82 01       	movw	r16, r4
    686c:	f3 2d       	mov	r31, r3
    686e:	ff 77       	andi	r31, 0x7F	; 127
    6870:	3f 2e       	mov	r3, r31
    6872:	15 c0       	rjmp	.+42     	; 0x689e <vfprintf+0x1aa>
    6874:	28 01       	movw	r4, r16
    6876:	22 e0       	ldi	r18, 0x02	; 2
    6878:	42 0e       	add	r4, r18
    687a:	51 1c       	adc	r5, r1
    687c:	f8 01       	movw	r30, r16
    687e:	a0 80       	ld	r10, Z
    6880:	b1 80       	ldd	r11, Z+1	; 0x01
    6882:	36 fe       	sbrs	r3, 6
    6884:	03 c0       	rjmp	.+6      	; 0x688c <vfprintf+0x198>
    6886:	69 2d       	mov	r22, r9
    6888:	70 e0       	ldi	r23, 0x00	; 0
    688a:	02 c0       	rjmp	.+4      	; 0x6890 <vfprintf+0x19c>
    688c:	6f ef       	ldi	r22, 0xFF	; 255
    688e:	7f ef       	ldi	r23, 0xFF	; 255
    6890:	c5 01       	movw	r24, r10
    6892:	2d d1       	rcall	.+602    	; 0x6aee <strnlen_P>
    6894:	4c 01       	movw	r8, r24
    6896:	f3 2d       	mov	r31, r3
    6898:	f0 68       	ori	r31, 0x80	; 128
    689a:	3f 2e       	mov	r3, r31
    689c:	82 01       	movw	r16, r4
    689e:	33 fc       	sbrc	r3, 3
    68a0:	19 c0       	rjmp	.+50     	; 0x68d4 <vfprintf+0x1e0>
    68a2:	82 2d       	mov	r24, r2
    68a4:	90 e0       	ldi	r25, 0x00	; 0
    68a6:	88 16       	cp	r8, r24
    68a8:	99 06       	cpc	r9, r25
    68aa:	a0 f4       	brcc	.+40     	; 0x68d4 <vfprintf+0x1e0>
    68ac:	b6 01       	movw	r22, r12
    68ae:	80 e2       	ldi	r24, 0x20	; 32
    68b0:	90 e0       	ldi	r25, 0x00	; 0
    68b2:	33 d1       	rcall	.+614    	; 0x6b1a <fputc>
    68b4:	2a 94       	dec	r2
    68b6:	f5 cf       	rjmp	.-22     	; 0x68a2 <vfprintf+0x1ae>
    68b8:	f5 01       	movw	r30, r10
    68ba:	37 fc       	sbrc	r3, 7
    68bc:	85 91       	lpm	r24, Z+
    68be:	37 fe       	sbrs	r3, 7
    68c0:	81 91       	ld	r24, Z+
    68c2:	5f 01       	movw	r10, r30
    68c4:	b6 01       	movw	r22, r12
    68c6:	90 e0       	ldi	r25, 0x00	; 0
    68c8:	28 d1       	rcall	.+592    	; 0x6b1a <fputc>
    68ca:	21 10       	cpse	r2, r1
    68cc:	2a 94       	dec	r2
    68ce:	21 e0       	ldi	r18, 0x01	; 1
    68d0:	82 1a       	sub	r8, r18
    68d2:	91 08       	sbc	r9, r1
    68d4:	81 14       	cp	r8, r1
    68d6:	91 04       	cpc	r9, r1
    68d8:	79 f7       	brne	.-34     	; 0x68b8 <vfprintf+0x1c4>
    68da:	e1 c0       	rjmp	.+450    	; 0x6a9e <vfprintf+0x3aa>
    68dc:	84 36       	cpi	r24, 0x64	; 100
    68de:	11 f0       	breq	.+4      	; 0x68e4 <vfprintf+0x1f0>
    68e0:	89 36       	cpi	r24, 0x69	; 105
    68e2:	39 f5       	brne	.+78     	; 0x6932 <vfprintf+0x23e>
    68e4:	f8 01       	movw	r30, r16
    68e6:	37 fe       	sbrs	r3, 7
    68e8:	07 c0       	rjmp	.+14     	; 0x68f8 <vfprintf+0x204>
    68ea:	60 81       	ld	r22, Z
    68ec:	71 81       	ldd	r23, Z+1	; 0x01
    68ee:	82 81       	ldd	r24, Z+2	; 0x02
    68f0:	93 81       	ldd	r25, Z+3	; 0x03
    68f2:	0c 5f       	subi	r16, 0xFC	; 252
    68f4:	1f 4f       	sbci	r17, 0xFF	; 255
    68f6:	08 c0       	rjmp	.+16     	; 0x6908 <vfprintf+0x214>
    68f8:	60 81       	ld	r22, Z
    68fa:	71 81       	ldd	r23, Z+1	; 0x01
    68fc:	07 2e       	mov	r0, r23
    68fe:	00 0c       	add	r0, r0
    6900:	88 0b       	sbc	r24, r24
    6902:	99 0b       	sbc	r25, r25
    6904:	0e 5f       	subi	r16, 0xFE	; 254
    6906:	1f 4f       	sbci	r17, 0xFF	; 255
    6908:	f3 2d       	mov	r31, r3
    690a:	ff 76       	andi	r31, 0x6F	; 111
    690c:	3f 2e       	mov	r3, r31
    690e:	97 ff       	sbrs	r25, 7
    6910:	09 c0       	rjmp	.+18     	; 0x6924 <vfprintf+0x230>
    6912:	90 95       	com	r25
    6914:	80 95       	com	r24
    6916:	70 95       	com	r23
    6918:	61 95       	neg	r22
    691a:	7f 4f       	sbci	r23, 0xFF	; 255
    691c:	8f 4f       	sbci	r24, 0xFF	; 255
    691e:	9f 4f       	sbci	r25, 0xFF	; 255
    6920:	f0 68       	ori	r31, 0x80	; 128
    6922:	3f 2e       	mov	r3, r31
    6924:	2a e0       	ldi	r18, 0x0A	; 10
    6926:	30 e0       	ldi	r19, 0x00	; 0
    6928:	a3 01       	movw	r20, r6
    692a:	33 d1       	rcall	.+614    	; 0x6b92 <__ultoa_invert>
    692c:	88 2e       	mov	r8, r24
    692e:	86 18       	sub	r8, r6
    6930:	44 c0       	rjmp	.+136    	; 0x69ba <vfprintf+0x2c6>
    6932:	85 37       	cpi	r24, 0x75	; 117
    6934:	31 f4       	brne	.+12     	; 0x6942 <vfprintf+0x24e>
    6936:	23 2d       	mov	r18, r3
    6938:	2f 7e       	andi	r18, 0xEF	; 239
    693a:	b2 2e       	mov	r11, r18
    693c:	2a e0       	ldi	r18, 0x0A	; 10
    693e:	30 e0       	ldi	r19, 0x00	; 0
    6940:	25 c0       	rjmp	.+74     	; 0x698c <vfprintf+0x298>
    6942:	93 2d       	mov	r25, r3
    6944:	99 7f       	andi	r25, 0xF9	; 249
    6946:	b9 2e       	mov	r11, r25
    6948:	8f 36       	cpi	r24, 0x6F	; 111
    694a:	c1 f0       	breq	.+48     	; 0x697c <vfprintf+0x288>
    694c:	18 f4       	brcc	.+6      	; 0x6954 <vfprintf+0x260>
    694e:	88 35       	cpi	r24, 0x58	; 88
    6950:	79 f0       	breq	.+30     	; 0x6970 <vfprintf+0x27c>
    6952:	ae c0       	rjmp	.+348    	; 0x6ab0 <vfprintf+0x3bc>
    6954:	80 37       	cpi	r24, 0x70	; 112
    6956:	19 f0       	breq	.+6      	; 0x695e <vfprintf+0x26a>
    6958:	88 37       	cpi	r24, 0x78	; 120
    695a:	21 f0       	breq	.+8      	; 0x6964 <vfprintf+0x270>
    695c:	a9 c0       	rjmp	.+338    	; 0x6ab0 <vfprintf+0x3bc>
    695e:	e9 2f       	mov	r30, r25
    6960:	e0 61       	ori	r30, 0x10	; 16
    6962:	be 2e       	mov	r11, r30
    6964:	b4 fe       	sbrs	r11, 4
    6966:	0d c0       	rjmp	.+26     	; 0x6982 <vfprintf+0x28e>
    6968:	fb 2d       	mov	r31, r11
    696a:	f4 60       	ori	r31, 0x04	; 4
    696c:	bf 2e       	mov	r11, r31
    696e:	09 c0       	rjmp	.+18     	; 0x6982 <vfprintf+0x28e>
    6970:	34 fe       	sbrs	r3, 4
    6972:	0a c0       	rjmp	.+20     	; 0x6988 <vfprintf+0x294>
    6974:	29 2f       	mov	r18, r25
    6976:	26 60       	ori	r18, 0x06	; 6
    6978:	b2 2e       	mov	r11, r18
    697a:	06 c0       	rjmp	.+12     	; 0x6988 <vfprintf+0x294>
    697c:	28 e0       	ldi	r18, 0x08	; 8
    697e:	30 e0       	ldi	r19, 0x00	; 0
    6980:	05 c0       	rjmp	.+10     	; 0x698c <vfprintf+0x298>
    6982:	20 e1       	ldi	r18, 0x10	; 16
    6984:	30 e0       	ldi	r19, 0x00	; 0
    6986:	02 c0       	rjmp	.+4      	; 0x698c <vfprintf+0x298>
    6988:	20 e1       	ldi	r18, 0x10	; 16
    698a:	32 e0       	ldi	r19, 0x02	; 2
    698c:	f8 01       	movw	r30, r16
    698e:	b7 fe       	sbrs	r11, 7
    6990:	07 c0       	rjmp	.+14     	; 0x69a0 <vfprintf+0x2ac>
    6992:	60 81       	ld	r22, Z
    6994:	71 81       	ldd	r23, Z+1	; 0x01
    6996:	82 81       	ldd	r24, Z+2	; 0x02
    6998:	93 81       	ldd	r25, Z+3	; 0x03
    699a:	0c 5f       	subi	r16, 0xFC	; 252
    699c:	1f 4f       	sbci	r17, 0xFF	; 255
    699e:	06 c0       	rjmp	.+12     	; 0x69ac <vfprintf+0x2b8>
    69a0:	60 81       	ld	r22, Z
    69a2:	71 81       	ldd	r23, Z+1	; 0x01
    69a4:	80 e0       	ldi	r24, 0x00	; 0
    69a6:	90 e0       	ldi	r25, 0x00	; 0
    69a8:	0e 5f       	subi	r16, 0xFE	; 254
    69aa:	1f 4f       	sbci	r17, 0xFF	; 255
    69ac:	a3 01       	movw	r20, r6
    69ae:	f1 d0       	rcall	.+482    	; 0x6b92 <__ultoa_invert>
    69b0:	88 2e       	mov	r8, r24
    69b2:	86 18       	sub	r8, r6
    69b4:	fb 2d       	mov	r31, r11
    69b6:	ff 77       	andi	r31, 0x7F	; 127
    69b8:	3f 2e       	mov	r3, r31
    69ba:	36 fe       	sbrs	r3, 6
    69bc:	0d c0       	rjmp	.+26     	; 0x69d8 <vfprintf+0x2e4>
    69be:	23 2d       	mov	r18, r3
    69c0:	2e 7f       	andi	r18, 0xFE	; 254
    69c2:	a2 2e       	mov	r10, r18
    69c4:	89 14       	cp	r8, r9
    69c6:	58 f4       	brcc	.+22     	; 0x69de <vfprintf+0x2ea>
    69c8:	34 fe       	sbrs	r3, 4
    69ca:	0b c0       	rjmp	.+22     	; 0x69e2 <vfprintf+0x2ee>
    69cc:	32 fc       	sbrc	r3, 2
    69ce:	09 c0       	rjmp	.+18     	; 0x69e2 <vfprintf+0x2ee>
    69d0:	83 2d       	mov	r24, r3
    69d2:	8e 7e       	andi	r24, 0xEE	; 238
    69d4:	a8 2e       	mov	r10, r24
    69d6:	05 c0       	rjmp	.+10     	; 0x69e2 <vfprintf+0x2ee>
    69d8:	b8 2c       	mov	r11, r8
    69da:	a3 2c       	mov	r10, r3
    69dc:	03 c0       	rjmp	.+6      	; 0x69e4 <vfprintf+0x2f0>
    69de:	b8 2c       	mov	r11, r8
    69e0:	01 c0       	rjmp	.+2      	; 0x69e4 <vfprintf+0x2f0>
    69e2:	b9 2c       	mov	r11, r9
    69e4:	a4 fe       	sbrs	r10, 4
    69e6:	0f c0       	rjmp	.+30     	; 0x6a06 <vfprintf+0x312>
    69e8:	fe 01       	movw	r30, r28
    69ea:	e8 0d       	add	r30, r8
    69ec:	f1 1d       	adc	r31, r1
    69ee:	80 81       	ld	r24, Z
    69f0:	80 33       	cpi	r24, 0x30	; 48
    69f2:	21 f4       	brne	.+8      	; 0x69fc <vfprintf+0x308>
    69f4:	9a 2d       	mov	r25, r10
    69f6:	99 7e       	andi	r25, 0xE9	; 233
    69f8:	a9 2e       	mov	r10, r25
    69fa:	09 c0       	rjmp	.+18     	; 0x6a0e <vfprintf+0x31a>
    69fc:	a2 fe       	sbrs	r10, 2
    69fe:	06 c0       	rjmp	.+12     	; 0x6a0c <vfprintf+0x318>
    6a00:	b3 94       	inc	r11
    6a02:	b3 94       	inc	r11
    6a04:	04 c0       	rjmp	.+8      	; 0x6a0e <vfprintf+0x31a>
    6a06:	8a 2d       	mov	r24, r10
    6a08:	86 78       	andi	r24, 0x86	; 134
    6a0a:	09 f0       	breq	.+2      	; 0x6a0e <vfprintf+0x31a>
    6a0c:	b3 94       	inc	r11
    6a0e:	a3 fc       	sbrc	r10, 3
    6a10:	10 c0       	rjmp	.+32     	; 0x6a32 <vfprintf+0x33e>
    6a12:	a0 fe       	sbrs	r10, 0
    6a14:	06 c0       	rjmp	.+12     	; 0x6a22 <vfprintf+0x32e>
    6a16:	b2 14       	cp	r11, r2
    6a18:	80 f4       	brcc	.+32     	; 0x6a3a <vfprintf+0x346>
    6a1a:	28 0c       	add	r2, r8
    6a1c:	92 2c       	mov	r9, r2
    6a1e:	9b 18       	sub	r9, r11
    6a20:	0d c0       	rjmp	.+26     	; 0x6a3c <vfprintf+0x348>
    6a22:	b2 14       	cp	r11, r2
    6a24:	58 f4       	brcc	.+22     	; 0x6a3c <vfprintf+0x348>
    6a26:	b6 01       	movw	r22, r12
    6a28:	80 e2       	ldi	r24, 0x20	; 32
    6a2a:	90 e0       	ldi	r25, 0x00	; 0
    6a2c:	76 d0       	rcall	.+236    	; 0x6b1a <fputc>
    6a2e:	b3 94       	inc	r11
    6a30:	f8 cf       	rjmp	.-16     	; 0x6a22 <vfprintf+0x32e>
    6a32:	b2 14       	cp	r11, r2
    6a34:	18 f4       	brcc	.+6      	; 0x6a3c <vfprintf+0x348>
    6a36:	2b 18       	sub	r2, r11
    6a38:	02 c0       	rjmp	.+4      	; 0x6a3e <vfprintf+0x34a>
    6a3a:	98 2c       	mov	r9, r8
    6a3c:	21 2c       	mov	r2, r1
    6a3e:	a4 fe       	sbrs	r10, 4
    6a40:	0f c0       	rjmp	.+30     	; 0x6a60 <vfprintf+0x36c>
    6a42:	b6 01       	movw	r22, r12
    6a44:	80 e3       	ldi	r24, 0x30	; 48
    6a46:	90 e0       	ldi	r25, 0x00	; 0
    6a48:	68 d0       	rcall	.+208    	; 0x6b1a <fputc>
    6a4a:	a2 fe       	sbrs	r10, 2
    6a4c:	16 c0       	rjmp	.+44     	; 0x6a7a <vfprintf+0x386>
    6a4e:	a1 fc       	sbrc	r10, 1
    6a50:	03 c0       	rjmp	.+6      	; 0x6a58 <vfprintf+0x364>
    6a52:	88 e7       	ldi	r24, 0x78	; 120
    6a54:	90 e0       	ldi	r25, 0x00	; 0
    6a56:	02 c0       	rjmp	.+4      	; 0x6a5c <vfprintf+0x368>
    6a58:	88 e5       	ldi	r24, 0x58	; 88
    6a5a:	90 e0       	ldi	r25, 0x00	; 0
    6a5c:	b6 01       	movw	r22, r12
    6a5e:	0c c0       	rjmp	.+24     	; 0x6a78 <vfprintf+0x384>
    6a60:	8a 2d       	mov	r24, r10
    6a62:	86 78       	andi	r24, 0x86	; 134
    6a64:	51 f0       	breq	.+20     	; 0x6a7a <vfprintf+0x386>
    6a66:	a1 fe       	sbrs	r10, 1
    6a68:	02 c0       	rjmp	.+4      	; 0x6a6e <vfprintf+0x37a>
    6a6a:	8b e2       	ldi	r24, 0x2B	; 43
    6a6c:	01 c0       	rjmp	.+2      	; 0x6a70 <vfprintf+0x37c>
    6a6e:	80 e2       	ldi	r24, 0x20	; 32
    6a70:	a7 fc       	sbrc	r10, 7
    6a72:	8d e2       	ldi	r24, 0x2D	; 45
    6a74:	b6 01       	movw	r22, r12
    6a76:	90 e0       	ldi	r25, 0x00	; 0
    6a78:	50 d0       	rcall	.+160    	; 0x6b1a <fputc>
    6a7a:	89 14       	cp	r8, r9
    6a7c:	30 f4       	brcc	.+12     	; 0x6a8a <vfprintf+0x396>
    6a7e:	b6 01       	movw	r22, r12
    6a80:	80 e3       	ldi	r24, 0x30	; 48
    6a82:	90 e0       	ldi	r25, 0x00	; 0
    6a84:	4a d0       	rcall	.+148    	; 0x6b1a <fputc>
    6a86:	9a 94       	dec	r9
    6a88:	f8 cf       	rjmp	.-16     	; 0x6a7a <vfprintf+0x386>
    6a8a:	8a 94       	dec	r8
    6a8c:	f3 01       	movw	r30, r6
    6a8e:	e8 0d       	add	r30, r8
    6a90:	f1 1d       	adc	r31, r1
    6a92:	80 81       	ld	r24, Z
    6a94:	b6 01       	movw	r22, r12
    6a96:	90 e0       	ldi	r25, 0x00	; 0
    6a98:	40 d0       	rcall	.+128    	; 0x6b1a <fputc>
    6a9a:	81 10       	cpse	r8, r1
    6a9c:	f6 cf       	rjmp	.-20     	; 0x6a8a <vfprintf+0x396>
    6a9e:	22 20       	and	r2, r2
    6aa0:	09 f4       	brne	.+2      	; 0x6aa4 <vfprintf+0x3b0>
    6aa2:	4e ce       	rjmp	.-868    	; 0x6740 <vfprintf+0x4c>
    6aa4:	b6 01       	movw	r22, r12
    6aa6:	80 e2       	ldi	r24, 0x20	; 32
    6aa8:	90 e0       	ldi	r25, 0x00	; 0
    6aaa:	37 d0       	rcall	.+110    	; 0x6b1a <fputc>
    6aac:	2a 94       	dec	r2
    6aae:	f7 cf       	rjmp	.-18     	; 0x6a9e <vfprintf+0x3aa>
    6ab0:	f6 01       	movw	r30, r12
    6ab2:	86 81       	ldd	r24, Z+6	; 0x06
    6ab4:	97 81       	ldd	r25, Z+7	; 0x07
    6ab6:	02 c0       	rjmp	.+4      	; 0x6abc <vfprintf+0x3c8>
    6ab8:	8f ef       	ldi	r24, 0xFF	; 255
    6aba:	9f ef       	ldi	r25, 0xFF	; 255
    6abc:	2b 96       	adiw	r28, 0x0b	; 11
    6abe:	0f b6       	in	r0, 0x3f	; 63
    6ac0:	f8 94       	cli
    6ac2:	de bf       	out	0x3e, r29	; 62
    6ac4:	0f be       	out	0x3f, r0	; 63
    6ac6:	cd bf       	out	0x3d, r28	; 61
    6ac8:	df 91       	pop	r29
    6aca:	cf 91       	pop	r28
    6acc:	1f 91       	pop	r17
    6ace:	0f 91       	pop	r16
    6ad0:	ff 90       	pop	r15
    6ad2:	ef 90       	pop	r14
    6ad4:	df 90       	pop	r13
    6ad6:	cf 90       	pop	r12
    6ad8:	bf 90       	pop	r11
    6ada:	af 90       	pop	r10
    6adc:	9f 90       	pop	r9
    6ade:	8f 90       	pop	r8
    6ae0:	7f 90       	pop	r7
    6ae2:	6f 90       	pop	r6
    6ae4:	5f 90       	pop	r5
    6ae6:	4f 90       	pop	r4
    6ae8:	3f 90       	pop	r3
    6aea:	2f 90       	pop	r2
    6aec:	08 95       	ret

00006aee <strnlen_P>:
    6aee:	fc 01       	movw	r30, r24
    6af0:	05 90       	lpm	r0, Z+
    6af2:	61 50       	subi	r22, 0x01	; 1
    6af4:	70 40       	sbci	r23, 0x00	; 0
    6af6:	01 10       	cpse	r0, r1
    6af8:	d8 f7       	brcc	.-10     	; 0x6af0 <strnlen_P+0x2>
    6afa:	80 95       	com	r24
    6afc:	90 95       	com	r25
    6afe:	8e 0f       	add	r24, r30
    6b00:	9f 1f       	adc	r25, r31
    6b02:	08 95       	ret

00006b04 <strnlen>:
    6b04:	fc 01       	movw	r30, r24
    6b06:	61 50       	subi	r22, 0x01	; 1
    6b08:	70 40       	sbci	r23, 0x00	; 0
    6b0a:	01 90       	ld	r0, Z+
    6b0c:	01 10       	cpse	r0, r1
    6b0e:	d8 f7       	brcc	.-10     	; 0x6b06 <strnlen+0x2>
    6b10:	80 95       	com	r24
    6b12:	90 95       	com	r25
    6b14:	8e 0f       	add	r24, r30
    6b16:	9f 1f       	adc	r25, r31
    6b18:	08 95       	ret

00006b1a <fputc>:
    6b1a:	0f 93       	push	r16
    6b1c:	1f 93       	push	r17
    6b1e:	cf 93       	push	r28
    6b20:	df 93       	push	r29
    6b22:	fb 01       	movw	r30, r22
    6b24:	23 81       	ldd	r18, Z+3	; 0x03
    6b26:	21 fd       	sbrc	r18, 1
    6b28:	03 c0       	rjmp	.+6      	; 0x6b30 <fputc+0x16>
    6b2a:	8f ef       	ldi	r24, 0xFF	; 255
    6b2c:	9f ef       	ldi	r25, 0xFF	; 255
    6b2e:	2c c0       	rjmp	.+88     	; 0x6b88 <fputc+0x6e>
    6b30:	22 ff       	sbrs	r18, 2
    6b32:	16 c0       	rjmp	.+44     	; 0x6b60 <fputc+0x46>
    6b34:	46 81       	ldd	r20, Z+6	; 0x06
    6b36:	57 81       	ldd	r21, Z+7	; 0x07
    6b38:	24 81       	ldd	r18, Z+4	; 0x04
    6b3a:	35 81       	ldd	r19, Z+5	; 0x05
    6b3c:	42 17       	cp	r20, r18
    6b3e:	53 07       	cpc	r21, r19
    6b40:	44 f4       	brge	.+16     	; 0x6b52 <fputc+0x38>
    6b42:	a0 81       	ld	r26, Z
    6b44:	b1 81       	ldd	r27, Z+1	; 0x01
    6b46:	9d 01       	movw	r18, r26
    6b48:	2f 5f       	subi	r18, 0xFF	; 255
    6b4a:	3f 4f       	sbci	r19, 0xFF	; 255
    6b4c:	31 83       	std	Z+1, r19	; 0x01
    6b4e:	20 83       	st	Z, r18
    6b50:	8c 93       	st	X, r24
    6b52:	26 81       	ldd	r18, Z+6	; 0x06
    6b54:	37 81       	ldd	r19, Z+7	; 0x07
    6b56:	2f 5f       	subi	r18, 0xFF	; 255
    6b58:	3f 4f       	sbci	r19, 0xFF	; 255
    6b5a:	37 83       	std	Z+7, r19	; 0x07
    6b5c:	26 83       	std	Z+6, r18	; 0x06
    6b5e:	14 c0       	rjmp	.+40     	; 0x6b88 <fputc+0x6e>
    6b60:	8b 01       	movw	r16, r22
    6b62:	ec 01       	movw	r28, r24
    6b64:	fb 01       	movw	r30, r22
    6b66:	00 84       	ldd	r0, Z+8	; 0x08
    6b68:	f1 85       	ldd	r31, Z+9	; 0x09
    6b6a:	e0 2d       	mov	r30, r0
    6b6c:	19 95       	eicall
    6b6e:	89 2b       	or	r24, r25
    6b70:	e1 f6       	brne	.-72     	; 0x6b2a <fputc+0x10>
    6b72:	d8 01       	movw	r26, r16
    6b74:	16 96       	adiw	r26, 0x06	; 6
    6b76:	8d 91       	ld	r24, X+
    6b78:	9c 91       	ld	r25, X
    6b7a:	17 97       	sbiw	r26, 0x07	; 7
    6b7c:	01 96       	adiw	r24, 0x01	; 1
    6b7e:	17 96       	adiw	r26, 0x07	; 7
    6b80:	9c 93       	st	X, r25
    6b82:	8e 93       	st	-X, r24
    6b84:	16 97       	sbiw	r26, 0x06	; 6
    6b86:	ce 01       	movw	r24, r28
    6b88:	df 91       	pop	r29
    6b8a:	cf 91       	pop	r28
    6b8c:	1f 91       	pop	r17
    6b8e:	0f 91       	pop	r16
    6b90:	08 95       	ret

00006b92 <__ultoa_invert>:
    6b92:	fa 01       	movw	r30, r20
    6b94:	aa 27       	eor	r26, r26
    6b96:	28 30       	cpi	r18, 0x08	; 8
    6b98:	51 f1       	breq	.+84     	; 0x6bee <__ultoa_invert+0x5c>
    6b9a:	20 31       	cpi	r18, 0x10	; 16
    6b9c:	81 f1       	breq	.+96     	; 0x6bfe <__ultoa_invert+0x6c>
    6b9e:	e8 94       	clt
    6ba0:	6f 93       	push	r22
    6ba2:	6e 7f       	andi	r22, 0xFE	; 254
    6ba4:	6e 5f       	subi	r22, 0xFE	; 254
    6ba6:	7f 4f       	sbci	r23, 0xFF	; 255
    6ba8:	8f 4f       	sbci	r24, 0xFF	; 255
    6baa:	9f 4f       	sbci	r25, 0xFF	; 255
    6bac:	af 4f       	sbci	r26, 0xFF	; 255
    6bae:	b1 e0       	ldi	r27, 0x01	; 1
    6bb0:	3e d0       	rcall	.+124    	; 0x6c2e <__ultoa_invert+0x9c>
    6bb2:	b4 e0       	ldi	r27, 0x04	; 4
    6bb4:	3c d0       	rcall	.+120    	; 0x6c2e <__ultoa_invert+0x9c>
    6bb6:	67 0f       	add	r22, r23
    6bb8:	78 1f       	adc	r23, r24
    6bba:	89 1f       	adc	r24, r25
    6bbc:	9a 1f       	adc	r25, r26
    6bbe:	a1 1d       	adc	r26, r1
    6bc0:	68 0f       	add	r22, r24
    6bc2:	79 1f       	adc	r23, r25
    6bc4:	8a 1f       	adc	r24, r26
    6bc6:	91 1d       	adc	r25, r1
    6bc8:	a1 1d       	adc	r26, r1
    6bca:	6a 0f       	add	r22, r26
    6bcc:	71 1d       	adc	r23, r1
    6bce:	81 1d       	adc	r24, r1
    6bd0:	91 1d       	adc	r25, r1
    6bd2:	a1 1d       	adc	r26, r1
    6bd4:	20 d0       	rcall	.+64     	; 0x6c16 <__ultoa_invert+0x84>
    6bd6:	09 f4       	brne	.+2      	; 0x6bda <__ultoa_invert+0x48>
    6bd8:	68 94       	set
    6bda:	3f 91       	pop	r19
    6bdc:	2a e0       	ldi	r18, 0x0A	; 10
    6bde:	26 9f       	mul	r18, r22
    6be0:	11 24       	eor	r1, r1
    6be2:	30 19       	sub	r19, r0
    6be4:	30 5d       	subi	r19, 0xD0	; 208
    6be6:	31 93       	st	Z+, r19
    6be8:	de f6       	brtc	.-74     	; 0x6ba0 <__ultoa_invert+0xe>
    6bea:	cf 01       	movw	r24, r30
    6bec:	08 95       	ret
    6bee:	46 2f       	mov	r20, r22
    6bf0:	47 70       	andi	r20, 0x07	; 7
    6bf2:	40 5d       	subi	r20, 0xD0	; 208
    6bf4:	41 93       	st	Z+, r20
    6bf6:	b3 e0       	ldi	r27, 0x03	; 3
    6bf8:	0f d0       	rcall	.+30     	; 0x6c18 <__ultoa_invert+0x86>
    6bfa:	c9 f7       	brne	.-14     	; 0x6bee <__ultoa_invert+0x5c>
    6bfc:	f6 cf       	rjmp	.-20     	; 0x6bea <__ultoa_invert+0x58>
    6bfe:	46 2f       	mov	r20, r22
    6c00:	4f 70       	andi	r20, 0x0F	; 15
    6c02:	40 5d       	subi	r20, 0xD0	; 208
    6c04:	4a 33       	cpi	r20, 0x3A	; 58
    6c06:	18 f0       	brcs	.+6      	; 0x6c0e <__ultoa_invert+0x7c>
    6c08:	49 5d       	subi	r20, 0xD9	; 217
    6c0a:	31 fd       	sbrc	r19, 1
    6c0c:	40 52       	subi	r20, 0x20	; 32
    6c0e:	41 93       	st	Z+, r20
    6c10:	02 d0       	rcall	.+4      	; 0x6c16 <__ultoa_invert+0x84>
    6c12:	a9 f7       	brne	.-22     	; 0x6bfe <__ultoa_invert+0x6c>
    6c14:	ea cf       	rjmp	.-44     	; 0x6bea <__ultoa_invert+0x58>
    6c16:	b4 e0       	ldi	r27, 0x04	; 4
    6c18:	a6 95       	lsr	r26
    6c1a:	97 95       	ror	r25
    6c1c:	87 95       	ror	r24
    6c1e:	77 95       	ror	r23
    6c20:	67 95       	ror	r22
    6c22:	ba 95       	dec	r27
    6c24:	c9 f7       	brne	.-14     	; 0x6c18 <__ultoa_invert+0x86>
    6c26:	00 97       	sbiw	r24, 0x00	; 0
    6c28:	61 05       	cpc	r22, r1
    6c2a:	71 05       	cpc	r23, r1
    6c2c:	08 95       	ret
    6c2e:	9b 01       	movw	r18, r22
    6c30:	ac 01       	movw	r20, r24
    6c32:	0a 2e       	mov	r0, r26
    6c34:	06 94       	lsr	r0
    6c36:	57 95       	ror	r21
    6c38:	47 95       	ror	r20
    6c3a:	37 95       	ror	r19
    6c3c:	27 95       	ror	r18
    6c3e:	ba 95       	dec	r27
    6c40:	c9 f7       	brne	.-14     	; 0x6c34 <__ultoa_invert+0xa2>
    6c42:	62 0f       	add	r22, r18
    6c44:	73 1f       	adc	r23, r19
    6c46:	84 1f       	adc	r24, r20
    6c48:	95 1f       	adc	r25, r21
    6c4a:	a0 1d       	adc	r26, r0
    6c4c:	08 95       	ret

00006c4e <_exit>:
    6c4e:	f8 94       	cli

00006c50 <__stop_program>:
    6c50:	ff cf       	rjmp	.-2      	; 0x6c50 <__stop_program>
